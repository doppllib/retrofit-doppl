//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ConstructorInvoker.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorConstructorInvoker.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/AccessibleObject.h"
#include "java/lang/reflect/Constructor.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedAction.h"

@interface OrgAssertjCoreErrorConstructorInvoker ()

- (void)setAccessibleWithJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)accessible
                                             withBoolean:(jboolean)value;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorConstructorInvoker_setAccessibleWithJavaLangReflectAccessibleObject_withBoolean_(OrgAssertjCoreErrorConstructorInvoker *self, JavaLangReflectAccessibleObject *accessible, jboolean value);

@interface OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction : NSObject < JavaSecurityPrivilegedAction > {
 @public
  JavaLangReflectAccessibleObject *accessible_;
  jboolean value_;
}

- (instancetype)initWithJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)accessible
                                            withBoolean:(jboolean)value;

- (JavaLangVoid *)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction)

J2OBJC_FIELD_SETTER(OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction, accessible_, JavaLangReflectAccessibleObject *)

__attribute__((unused)) static void OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction_initWithJavaLangReflectAccessibleObject_withBoolean_(OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction *self, JavaLangReflectAccessibleObject *accessible, jboolean value);

__attribute__((unused)) static OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction *new_OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction_initWithJavaLangReflectAccessibleObject_withBoolean_(JavaLangReflectAccessibleObject *accessible, jboolean value) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction *create_OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction_initWithJavaLangReflectAccessibleObject_withBoolean_(JavaLangReflectAccessibleObject *accessible, jboolean value);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction)

@implementation OrgAssertjCoreErrorConstructorInvoker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreErrorConstructorInvoker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)newInstanceWithNSString:(NSString *)className_
            withIOSClassArray:(IOSObjectArray *)parameterTypes
            withNSObjectArray:(IOSObjectArray *)parameterValues {
  IOSClass *targetType = IOSClass_forName_(className_);
  JavaLangReflectConstructor *constructor = [((IOSClass *) nil_chk(targetType)) getConstructor:parameterTypes];
  jboolean accessible = [((JavaLangReflectConstructor *) nil_chk(constructor)) isAccessible];
  @try {
    OrgAssertjCoreErrorConstructorInvoker_setAccessibleWithJavaLangReflectAccessibleObject_withBoolean_(self, constructor, true);
    return [constructor newInstanceWithNSObjectArray:parameterValues];
  }
  @finally {
    @try {
      OrgAssertjCoreErrorConstructorInvoker_setAccessibleWithJavaLangReflectAccessibleObject_withBoolean_(self, constructor, accessible);
    }
    @catch (JavaLangRuntimeException *e) {
    }
  }
}

- (void)setAccessibleWithJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)accessible
                                             withBoolean:(jboolean)value {
  OrgAssertjCoreErrorConstructorInvoker_setAccessibleWithJavaLangReflectAccessibleObject_withBoolean_(self, accessible, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 0, 1, 2, 3, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newInstanceWithNSString:withIOSClassArray:withNSObjectArray:);
  methods[2].selector = @selector(setAccessibleWithJavaLangReflectAccessibleObject:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newInstance", "LNSString;[LIOSClass;[LNSObject;", "LJavaLangException;", "(Ljava/lang/String;[Ljava/lang/Class<*>;[Ljava/lang/Object;)Ljava/lang/Object;", "setAccessible", "LJavaLangReflectAccessibleObject;Z", "LOrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorConstructorInvoker = { "ConstructorInvoker", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, 6, -1, -1, -1 };
  return &_OrgAssertjCoreErrorConstructorInvoker;
}

@end

void OrgAssertjCoreErrorConstructorInvoker_init(OrgAssertjCoreErrorConstructorInvoker *self) {
  NSObject_init(self);
}

OrgAssertjCoreErrorConstructorInvoker *new_OrgAssertjCoreErrorConstructorInvoker_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorConstructorInvoker, init)
}

OrgAssertjCoreErrorConstructorInvoker *create_OrgAssertjCoreErrorConstructorInvoker_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorConstructorInvoker, init)
}

void OrgAssertjCoreErrorConstructorInvoker_setAccessibleWithJavaLangReflectAccessibleObject_withBoolean_(OrgAssertjCoreErrorConstructorInvoker *self, JavaLangReflectAccessibleObject *accessible, jboolean value) {
  JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(create_OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction_initWithJavaLangReflectAccessibleObject_withBoolean_(accessible, value));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorConstructorInvoker)

@implementation OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction

- (instancetype)initWithJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)accessible
                                            withBoolean:(jboolean)value {
  OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction_initWithJavaLangReflectAccessibleObject_withBoolean_(self, accessible, value);
  return self;
}

- (JavaLangVoid *)run {
  [((JavaLangReflectAccessibleObject *) nil_chk(accessible_)) setAccessibleWithBoolean:value_];
  return nil;
}

- (void)dealloc {
  RELEASE_(accessible_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectAccessibleObject:withBoolean:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "accessible_", "LJavaLangReflectAccessibleObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "value_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectAccessibleObject;Z", "LOrgAssertjCoreErrorConstructorInvoker;", "Ljava/lang/Object;Ljava/security/PrivilegedAction<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction = { "SetAccessibleValueAction", "org.assertj.core.error", ptrTable, methods, fields, 7, 0xa, 2, 2, 1, -1, -1, 2, -1 };
  return &_OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction;
}

@end

void OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction_initWithJavaLangReflectAccessibleObject_withBoolean_(OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction *self, JavaLangReflectAccessibleObject *accessible, jboolean value) {
  NSObject_init(self);
  JreStrongAssign(&self->accessible_, accessible);
  self->value_ = value;
}

OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction *new_OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction_initWithJavaLangReflectAccessibleObject_withBoolean_(JavaLangReflectAccessibleObject *accessible, jboolean value) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction, initWithJavaLangReflectAccessibleObject_withBoolean_, accessible, value)
}

OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction *create_OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction_initWithJavaLangReflectAccessibleObject_withBoolean_(JavaLangReflectAccessibleObject *accessible, jboolean value) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction, initWithJavaLangReflectAccessibleObject_withBoolean_, accessible, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorConstructorInvoker_SetAccessibleValueAction)
