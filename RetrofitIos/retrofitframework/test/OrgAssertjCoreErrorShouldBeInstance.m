//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldBeInstance.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeInstance.h"

@interface OrgAssertjCoreErrorShouldBeInstance ()

- (instancetype)initWithId:(id)object
              withIOSClass:(IOSClass *)type;

- (instancetype)initWithNSString:(NSString *)objectDescription
                    withIOSClass:(IOSClass *)type;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeInstance_initWithId_withIOSClass_(OrgAssertjCoreErrorShouldBeInstance *self, id object, IOSClass *type);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeInstance *new_OrgAssertjCoreErrorShouldBeInstance_initWithId_withIOSClass_(id object, IOSClass *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeInstance *create_OrgAssertjCoreErrorShouldBeInstance_initWithId_withIOSClass_(id object, IOSClass *type);

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeInstance_initWithNSString_withIOSClass_(OrgAssertjCoreErrorShouldBeInstance *self, NSString *objectDescription, IOSClass *type);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeInstance *new_OrgAssertjCoreErrorShouldBeInstance_initWithNSString_withIOSClass_(NSString *objectDescription, IOSClass *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeInstance *create_OrgAssertjCoreErrorShouldBeInstance_initWithNSString_withIOSClass_(NSString *objectDescription, IOSClass *type);

@implementation OrgAssertjCoreErrorShouldBeInstance

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeInstanceWithId:(id)object
                                                        withIOSClass:(IOSClass *)type {
  return OrgAssertjCoreErrorShouldBeInstance_shouldBeInstanceWithId_withIOSClass_(object, type);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeInstanceButWasNullWithNSString:(NSString *)objectDescription
                                                                        withIOSClass:(IOSClass *)type {
  return OrgAssertjCoreErrorShouldBeInstance_shouldBeInstanceButWasNullWithNSString_withIOSClass_(objectDescription, type);
}

- (instancetype)initWithId:(id)object
              withIOSClass:(IOSClass *)type {
  OrgAssertjCoreErrorShouldBeInstance_initWithId_withIOSClass_(self, object, type);
  return self;
}

- (instancetype)initWithNSString:(NSString *)objectDescription
                    withIOSClass:(IOSClass *)type {
  OrgAssertjCoreErrorShouldBeInstance_initWithNSString_withIOSClass_(self, objectDescription, type);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 6, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeInstanceWithId:withIOSClass:);
  methods[1].selector = @selector(shouldBeInstanceButWasNullWithNSString:withIOSClass:);
  methods[2].selector = @selector(initWithId:withIOSClass:);
  methods[3].selector = @selector(initWithNSString:withIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeInstance", "LNSObject;LIOSClass;", "(Ljava/lang/Object;Ljava/lang/Class<*>;)Lorg/assertj/core/error/ErrorMessageFactory;", "shouldBeInstanceButWasNull", "LNSString;LIOSClass;", "(Ljava/lang/String;Ljava/lang/Class<*>;)Lorg/assertj/core/error/ErrorMessageFactory;", "(Ljava/lang/Object;Ljava/lang/Class<*>;)V", "(Ljava/lang/String;Ljava/lang/Class<*>;)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeInstance = { "ShouldBeInstance", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeInstance;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeInstance_shouldBeInstanceWithId_withIOSClass_(id object, IOSClass *type) {
  OrgAssertjCoreErrorShouldBeInstance_initialize();
  return create_OrgAssertjCoreErrorShouldBeInstance_initWithId_withIOSClass_(object, type);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeInstance_shouldBeInstanceButWasNullWithNSString_withIOSClass_(NSString *objectDescription, IOSClass *type) {
  OrgAssertjCoreErrorShouldBeInstance_initialize();
  return create_OrgAssertjCoreErrorShouldBeInstance_initWithNSString_withIOSClass_(objectDescription, type);
}

void OrgAssertjCoreErrorShouldBeInstance_initWithId_withIOSClass_(OrgAssertjCoreErrorShouldBeInstance *self, id object, IOSClass *type) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto be an instance of:\n <%s>\nbut was instance of:\n <%s>", [IOSObjectArray arrayWithObjects:(id[]){ object, type, [nil_chk(object) java_getClass] } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeInstance *new_OrgAssertjCoreErrorShouldBeInstance_initWithId_withIOSClass_(id object, IOSClass *type) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeInstance, initWithId_withIOSClass_, object, type)
}

OrgAssertjCoreErrorShouldBeInstance *create_OrgAssertjCoreErrorShouldBeInstance_initWithId_withIOSClass_(id object, IOSClass *type) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeInstance, initWithId_withIOSClass_, object, type)
}

void OrgAssertjCoreErrorShouldBeInstance_initWithNSString_withIOSClass_(OrgAssertjCoreErrorShouldBeInstance *self, NSString *objectDescription, IOSClass *type) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting object:\n %s\nto be an instance of:\n <%s>\nbut was null", [IOSObjectArray arrayWithObjects:(id[]){ objectDescription, type } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeInstance *new_OrgAssertjCoreErrorShouldBeInstance_initWithNSString_withIOSClass_(NSString *objectDescription, IOSClass *type) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeInstance, initWithNSString_withIOSClass_, objectDescription, type)
}

OrgAssertjCoreErrorShouldBeInstance *create_OrgAssertjCoreErrorShouldBeInstance_initWithNSString_withIOSClass_(NSString *objectDescription, IOSClass *type) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeInstance, initWithNSString_withIOSClass_, objectDescription, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeInstance)
