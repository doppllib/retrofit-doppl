//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/AbstractComparableAssert.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractComparableAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalComparables.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "java/lang/Comparable.h"
#include "java/util/Comparator.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractComparableAssert

- (instancetype)initWithJavaLangComparable:(id<JavaLangComparable>)actual
                              withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractComparableAssert_initWithJavaLangComparable_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractComparableAssert *)isLessThanWithJavaLangComparable:(id<JavaLangComparable>)other {
  [((OrgAssertjCoreInternalComparables *) nil_chk(comparables_)) assertLessThanWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:other];
  return ((OrgAssertjCoreApiAbstractComparableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractComparableAssert *)isLessThanOrEqualToWithJavaLangComparable:(id<JavaLangComparable>)other {
  [((OrgAssertjCoreInternalComparables *) nil_chk(comparables_)) assertLessThanOrEqualToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:other];
  return ((OrgAssertjCoreApiAbstractComparableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractComparableAssert *)isGreaterThanWithJavaLangComparable:(id<JavaLangComparable>)other {
  [((OrgAssertjCoreInternalComparables *) nil_chk(comparables_)) assertGreaterThanWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:other];
  return ((OrgAssertjCoreApiAbstractComparableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractComparableAssert *)isGreaterThanOrEqualToWithJavaLangComparable:(id<JavaLangComparable>)other {
  [((OrgAssertjCoreInternalComparables *) nil_chk(comparables_)) assertGreaterThanOrEqualToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:other];
  return ((OrgAssertjCoreApiAbstractComparableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractComparableAssert *)usingComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)customComparator {
  [super usingComparatorWithJavaUtilComparator:customComparator];
  JreStrongAssignAndConsume(&self->comparables_, new_OrgAssertjCoreInternalComparables_initWithOrgAssertjCoreInternalComparisonStrategy_(create_OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(customComparator)));
  return ((OrgAssertjCoreApiAbstractComparableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractComparableAssert *)usingDefaultComparator {
  [super usingDefaultComparator];
  JreStrongAssign(&self->comparables_, OrgAssertjCoreInternalComparables_instance());
  return ((OrgAssertjCoreApiAbstractComparableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractComparableAssert *)inHexadecimal {
  return ((OrgAssertjCoreApiAbstractComparableAssert *) [super inHexadecimal]);
}

- (OrgAssertjCoreApiAbstractComparableAssert *)inBinary {
  return ((OrgAssertjCoreApiAbstractComparableAssert *) [super inBinary]);
}

- (void)dealloc {
  RELEASE_(comparables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractComparableAssert;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractComparableAssert;", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractComparableAssert;", 0x1, 6, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractComparableAssert;", 0x1, 7, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractComparableAssert;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractComparableAssert;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractComparableAssert;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractComparableAssert;", 0x1, -1, -1, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangComparable:withIOSClass:);
  methods[1].selector = @selector(isLessThanWithJavaLangComparable:);
  methods[2].selector = @selector(isLessThanOrEqualToWithJavaLangComparable:);
  methods[3].selector = @selector(isGreaterThanWithJavaLangComparable:);
  methods[4].selector = @selector(isGreaterThanOrEqualToWithJavaLangComparable:);
  methods[5].selector = @selector(usingComparatorWithJavaUtilComparator:);
  methods[6].selector = @selector(usingDefaultComparator);
  methods[7].selector = @selector(inHexadecimal);
  methods[8].selector = @selector(inBinary);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "comparables_", "LOrgAssertjCoreInternalComparables;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangComparable;LIOSClass;", "(TA;Ljava/lang/Class<*>;)V", "isLessThan", "LJavaLangComparable;", "(TA;)TS;", "isLessThanOrEqualTo", "isGreaterThan", "isGreaterThanOrEqualTo", "usingComparator", "LJavaUtilComparator;", "(Ljava/util/Comparator<-TA;>;)TS;", "()TS;", "<S:Lorg/assertj/core/api/AbstractComparableAssert<TS;TA;>;A::Ljava/lang/Comparable<-TA;>;>Lorg/assertj/core/api/AbstractAssert<TS;TA;>;Lorg/assertj/core/api/ComparableAssert<TS;TA;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractComparableAssert = { "AbstractComparableAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 9, 1, -1, -1, -1, 12, -1 };
  return &_OrgAssertjCoreApiAbstractComparableAssert;
}

@end

void OrgAssertjCoreApiAbstractComparableAssert_initWithJavaLangComparable_withIOSClass_(OrgAssertjCoreApiAbstractComparableAssert *self, id<JavaLangComparable> actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->comparables_, OrgAssertjCoreInternalComparables_instance());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractComparableAssert)
