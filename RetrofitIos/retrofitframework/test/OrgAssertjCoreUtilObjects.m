//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/util/Objects.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilArrays.h"
#include "OrgAssertjCoreUtilObjects.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Arrays.h"

@interface OrgAssertjCoreUtilObjects ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgAssertjCoreUtilObjects_init(OrgAssertjCoreUtilObjects *self);

__attribute__((unused)) static OrgAssertjCoreUtilObjects *new_OrgAssertjCoreUtilObjects_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreUtilObjects *create_OrgAssertjCoreUtilObjects_init();

@implementation OrgAssertjCoreUtilObjects

+ (jboolean)areEqualWithId:(id)o1
                    withId:(id)o2 {
  return OrgAssertjCoreUtilObjects_areEqualWithId_withId_(o1, o2);
}

+ (jboolean)areEqualArraysWithId:(id)o1
                          withId:(id)o2 {
  return OrgAssertjCoreUtilObjects_areEqualArraysWithId_withId_(o1, o2);
}

+ (IOSObjectArray *)namesOfWithIOSClassArray:(IOSObjectArray *)types {
  return OrgAssertjCoreUtilObjects_namesOfWithIOSClassArray_(types);
}

+ (jint)hashCodeForWithId:(id)o {
  return OrgAssertjCoreUtilObjects_hashCodeForWithId_(o);
}

+ (id)castIfBelongsToTypeWithId:(id)o
                   withIOSClass:(IOSClass *)type {
  return OrgAssertjCoreUtilObjects_castIfBelongsToTypeWithId_withIOSClass_(o, type);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilObjects_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x89, 3, 4, -1, 5, -1, -1 },
    { NULL, "I", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 8, 9, -1, 10, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(areEqualWithId:withId:);
  methods[1].selector = @selector(areEqualArraysWithId:withId:);
  methods[2].selector = @selector(namesOfWithIOSClassArray:);
  methods[3].selector = @selector(hashCodeForWithId:);
  methods[4].selector = @selector(castIfBelongsToTypeWithId:withIOSClass:);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HASH_CODE_PRIME", "I", .constantValue.asInt = OrgAssertjCoreUtilObjects_HASH_CODE_PRIME, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "areEqual", "LNSObject;LNSObject;", "areEqualArrays", "namesOf", "[LIOSClass;", "([Ljava/lang/Class<*>;)[Ljava/lang/String;", "hashCodeFor", "LNSObject;", "castIfBelongsToType", "LNSObject;LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Object;Ljava/lang/Class<TT;>;)TT;" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilObjects = { "Objects", "org.assertj.core.util", ptrTable, methods, fields, 7, 0x11, 6, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilObjects;
}

@end

jboolean OrgAssertjCoreUtilObjects_areEqualWithId_withId_(id o1, id o2) {
  OrgAssertjCoreUtilObjects_initialize();
  if (o1 == nil) {
    return o2 == nil;
  }
  if ([o1 isEqual:o2]) {
    return true;
  }
  return OrgAssertjCoreUtilObjects_areEqualArraysWithId_withId_(o1, o2);
}

jboolean OrgAssertjCoreUtilObjects_areEqualArraysWithId_withId_(id o1, id o2) {
  OrgAssertjCoreUtilObjects_initialize();
  if (!OrgAssertjCoreUtilArrays_isArrayWithId_(o1) || !OrgAssertjCoreUtilArrays_isArrayWithId_(o2)) {
    return false;
  }
  if (o1 == o2) {
    return true;
  }
  jint size = JavaLangReflectArray_getLengthWithId_(o1);
  if (JavaLangReflectArray_getLengthWithId_(o2) != size) {
    return false;
  }
  for (jint i = 0; i < size; i++) {
    id e1 = JavaLangReflectArray_getWithId_withInt_(o1, i);
    id e2 = JavaLangReflectArray_getWithId_withInt_(o2, i);
    if (!OrgAssertjCoreUtilObjects_areEqualWithId_withId_(e1, e2)) {
      return false;
    }
  }
  return true;
}

IOSObjectArray *OrgAssertjCoreUtilObjects_namesOfWithIOSClassArray_(IOSObjectArray *types) {
  OrgAssertjCoreUtilObjects_initialize();
  if (OrgAssertjCoreUtilArrays_isNullOrEmptyWithNSObjectArray_(types)) {
    return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
  }
  IOSObjectArray *names = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(types))->size_ type:NSString_class_()];
  for (jint i = 0; i < types->size_; i++) {
    IOSObjectArray_Set(names, i, [((IOSClass *) nil_chk(IOSObjectArray_Get(types, i))) getName]);
  }
  return names;
}

jint OrgAssertjCoreUtilObjects_hashCodeForWithId_(id o) {
  OrgAssertjCoreUtilObjects_initialize();
  if (o == nil) return 0;
  return OrgAssertjCoreUtilArrays_isArrayWithId_(o) ? JavaUtilArrays_deepHashCodeWithNSObjectArray_((IOSObjectArray *) cast_check(o, IOSClass_arrayType(NSObject_class_(), 1))) : ((jint) [o hash]);
}

id OrgAssertjCoreUtilObjects_castIfBelongsToTypeWithId_withIOSClass_(id o, IOSClass *type) {
  OrgAssertjCoreUtilObjects_initialize();
  if (o != nil && [((IOSClass *) nil_chk(type)) isAssignableFrom:[o java_getClass]]) {
    return [((IOSClass *) nil_chk(type)) cast:o];
  }
  return nil;
}

void OrgAssertjCoreUtilObjects_init(OrgAssertjCoreUtilObjects *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilObjects *new_OrgAssertjCoreUtilObjects_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilObjects, init)
}

OrgAssertjCoreUtilObjects *create_OrgAssertjCoreUtilObjects_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilObjects, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilObjects)
