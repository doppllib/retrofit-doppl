//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/retrofit/client/UrlConnectionClientTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractCharSequenceAssert.h"
#include "OrgAssertjCoreApiAbstractIntegerAssert.h"
#include "OrgAssertjCoreApiAbstractListAssert.h"
#include "OrgAssertjCoreApiAbstractMapAssert.h"
#include "OrgAssertjCoreApiAssertions.h"
#include "RetrofitClientDummyHttpUrlConnection.h"
#include "RetrofitClientHeader.h"
#include "RetrofitClientRequest.h"
#include "RetrofitClientResponse.h"
#include "RetrofitClientUrlConnectionClient.h"
#include "RetrofitClientUrlConnectionClientTest.h"
#include "RetrofitMimeTypedInput.h"
#include "RetrofitMimeTypedOutput.h"
#include "RetrofitMimeTypedString.h"
#include "RetrofitTestingUtils.h"
#include "com/google/common/io/ByteStreams.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/junit/Test.h"

@interface RetrofitClientUrlConnectionClientTest () {
 @public
  RetrofitClientUrlConnectionClient *client_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitClientUrlConnectionClientTest, client_, RetrofitClientUrlConnectionClient *)

inline NSString *RetrofitClientUrlConnectionClientTest_get_HOST();
static NSString *RetrofitClientUrlConnectionClientTest_HOST = @"http://example.com";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RetrofitClientUrlConnectionClientTest, HOST, NSString *)

__attribute__((unused)) static IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$7();

__attribute__((unused)) static IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$8();

@interface RetrofitClientUrlConnectionClientTest_1 : RetrofitClientUrlConnectionClient

- (instancetype)init;

- (JavaNetHttpURLConnection *)openConnectionWithRetrofitClientRequest:(RetrofitClientRequest *)request;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitClientUrlConnectionClientTest_1)

__attribute__((unused)) static void RetrofitClientUrlConnectionClientTest_1_init(RetrofitClientUrlConnectionClientTest_1 *self);

__attribute__((unused)) static RetrofitClientUrlConnectionClientTest_1 *new_RetrofitClientUrlConnectionClientTest_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitClientUrlConnectionClientTest_1 *create_RetrofitClientUrlConnectionClientTest_1_init();

@implementation RetrofitClientUrlConnectionClientTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitClientUrlConnectionClientTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)get {
  RetrofitClientRequest *request = create_RetrofitClientRequest_initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_(@"GET", JreStrcat("$$", RetrofitClientUrlConnectionClientTest_HOST, @"/foo/bar/?kit=kat"), nil, nil);
  JavaNetHttpURLConnection *connection = [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) openConnectionWithRetrofitClientRequest:request];
  [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) prepareRequestWithJavaNetHttpURLConnection:connection withRetrofitClientRequest:request];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([((JavaNetHttpURLConnection *) nil_chk(connection)) getRequestMethod]))) isEqualToWithId:@"GET"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([((JavaNetURL *) nil_chk([connection getURL])) description]))) isEqualToWithId:JreStrcat("$$", RetrofitClientUrlConnectionClientTest_HOST, @"/foo/bar/?kit=kat")];
  [((OrgAssertjCoreApiAbstractMapAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithJavaUtilMap_([connection getHeaderFields]))) isEmpty];
}

- (void)post {
  RetrofitMimeTypedString *body = create_RetrofitMimeTypedString_initWithNSString_(@"hi");
  RetrofitClientRequest *request = create_RetrofitClientRequest_initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_(@"POST", JreStrcat("$$", RetrofitClientUrlConnectionClientTest_HOST, @"/foo/bar/"), nil, body);
  RetrofitClientDummyHttpUrlConnection *connection = (RetrofitClientDummyHttpUrlConnection *) cast_chk([((RetrofitClientUrlConnectionClient *) nil_chk(client_)) openConnectionWithRetrofitClientRequest:request], [RetrofitClientDummyHttpUrlConnection class]);
  [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) prepareRequestWithJavaNetHttpURLConnection:connection withRetrofitClientRequest:request];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([((RetrofitClientDummyHttpUrlConnection *) nil_chk(connection)) getRequestMethod]))) isEqualToWithId:@"POST"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([((JavaNetURL *) nil_chk([connection getURL])) description]))) isEqualToWithId:JreStrcat("$$", RetrofitClientUrlConnectionClientTest_HOST, @"/foo/bar/")];
  [((OrgAssertjCoreApiAbstractMapAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithJavaUtilMap_([connection getRequestProperties]))) hasSizeWithInt:2];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([connection getRequestPropertyWithNSString:@"Content-Type"]))) isEqualToWithId:@"text/plain; charset=UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([connection getRequestPropertyWithNSString:@"Content-Length"]))) isEqualToWithId:@"2"];
  RetrofitTestingUtils_assertBytesWithByteArray_withNSString_([((JavaIoByteArrayOutputStream *) nil_chk([connection getOutputStream])) toByteArray], @"hi");
}

- (void)multipart {
  id<JavaUtilMap> bodyParams = create_JavaUtilLinkedHashMap_init();
  [bodyParams putWithId:@"foo" withId:create_RetrofitMimeTypedString_initWithNSString_(@"bar")];
  [bodyParams putWithId:@"ping" withId:create_RetrofitMimeTypedString_initWithNSString_(@"pong")];
  id<RetrofitMimeTypedOutput> body = RetrofitTestingUtils_createMultipartWithJavaUtilMap_(bodyParams);
  RetrofitClientRequest *request = create_RetrofitClientRequest_initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_(@"POST", JreStrcat("$$", RetrofitClientUrlConnectionClientTest_HOST, @"/that/"), nil, body);
  RetrofitClientDummyHttpUrlConnection *connection = (RetrofitClientDummyHttpUrlConnection *) cast_chk([((RetrofitClientUrlConnectionClient *) nil_chk(client_)) openConnectionWithRetrofitClientRequest:request], [RetrofitClientDummyHttpUrlConnection class]);
  [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) prepareRequestWithJavaNetHttpURLConnection:connection withRetrofitClientRequest:request];
  IOSByteArray *output = [((JavaIoByteArrayOutputStream *) nil_chk([((RetrofitClientDummyHttpUrlConnection *) nil_chk(connection)) getOutputStream])) toByteArray];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([connection getRequestMethod]))) isEqualToWithId:@"POST"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([((JavaNetURL *) nil_chk([connection getURL])) description]))) isEqualToWithId:JreStrcat("$$", RetrofitClientUrlConnectionClientTest_HOST, @"/that/")];
  [((OrgAssertjCoreApiAbstractMapAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithJavaUtilMap_([connection getRequestProperties]))) hasSizeWithInt:2];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([connection getRequestPropertyWithNSString:@"Content-Type"]))) startsWithWithJavaLangCharSequence:@"multipart/form-data;"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([connection getRequestPropertyWithNSString:@"Content-Length"]))) isEqualToWithId:NSString_java_valueOfInt_(((IOSByteArray *) nil_chk(output))->size_)];
  [((OrgAssertjCoreApiAbstractIntegerAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithInt_(output->size_))) isGreaterThanWithInt:0];
}

- (void)headers {
  id<JavaUtilList> headers = create_JavaUtilArrayList_init();
  [headers addWithId:create_RetrofitClientHeader_initWithNSString_withNSString_(@"kit", @"kat")];
  [headers addWithId:create_RetrofitClientHeader_initWithNSString_withNSString_(@"foo", @"bar")];
  RetrofitClientRequest *request = create_RetrofitClientRequest_initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_(@"GET", JreStrcat("$$", RetrofitClientUrlConnectionClientTest_HOST, @"/this/"), headers, nil);
  JavaNetHttpURLConnection *connection = [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) openConnectionWithRetrofitClientRequest:request];
  [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) prepareRequestWithJavaNetHttpURLConnection:connection withRetrofitClientRequest:request];
  [((OrgAssertjCoreApiAbstractMapAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithJavaUtilMap_([((JavaNetHttpURLConnection *) nil_chk(connection)) getRequestProperties]))) hasSizeWithInt:2];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([connection getRequestPropertyWithNSString:@"kit"]))) isEqualToWithId:@"kat"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([connection getRequestPropertyWithNSString:@"foo"]))) isEqualToWithId:@"bar"];
}

- (void)response {
  RetrofitClientDummyHttpUrlConnection *connection = create_RetrofitClientDummyHttpUrlConnection_initWithNSString_(RetrofitClientUrlConnectionClientTest_HOST);
  [connection setResponseCodeWithInt:200];
  [connection setResponseMessageWithNSString:@"OK"];
  [connection addResponseHeaderWithNSString:@"Content-Type" withNSString:@"text/plain"];
  [connection addResponseHeaderWithNSString:@"foo" withNSString:@"bar"];
  [connection addResponseHeaderWithNSString:@"kit" withNSString:@"kat"];
  [connection setInputStreamWithJavaIoInputStream:create_JavaIoByteArrayInputStream_initWithByteArray_([@"hello" java_getBytesWithCharsetName:@"UTF-8"])];
  RetrofitClientResponse *response = [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) readResponseWithJavaNetHttpURLConnection:connection];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([((RetrofitClientResponse *) nil_chk(response)) getUrl]))) isEqualToWithId:RetrofitClientUrlConnectionClientTest_HOST];
  [((OrgAssertjCoreApiAbstractIntegerAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithInt_([response getStatus]))) isEqualToWithInt:200];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([response getReason]))) isEqualToWithId:@"OK"];
  [((OrgAssertjCoreApiAbstractListAssert *) nil_chk([((OrgAssertjCoreApiAbstractListAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithJavaUtilList_([response getHeaders]))) hasSizeWithInt:3])) containsOnlyWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ create_RetrofitClientHeader_initWithNSString_withNSString_(@"foo", @"bar"), create_RetrofitClientHeader_initWithNSString_withNSString_(@"kit", @"kat"), create_RetrofitClientHeader_initWithNSString_withNSString_(@"Content-Type", @"text/plain") } count:3 type:RetrofitClientHeader_class_()]];
  RetrofitTestingUtils_assertBytesWithByteArray_withNSString_(ComGoogleCommonIoByteStreams_toByteArrayWithJavaIoInputStream_([((id<RetrofitMimeTypedInput>) nil_chk([response getBody])) in]), @"hello");
}

- (void)createdResponse {
  RetrofitClientDummyHttpUrlConnection *connection = create_RetrofitClientDummyHttpUrlConnection_initWithNSString_(RetrofitClientUrlConnectionClientTest_HOST);
  [connection setResponseCodeWithInt:201];
  [connection setResponseMessageWithNSString:@"OK"];
  [connection addResponseHeaderWithNSString:@"Content-Type" withNSString:@"text/plain"];
  [connection addResponseHeaderWithNSString:@"foo" withNSString:@"bar"];
  [connection addResponseHeaderWithNSString:@"kit" withNSString:@"kat"];
  [connection setInputStreamWithJavaIoInputStream:create_JavaIoByteArrayInputStream_initWithByteArray_([@"hello" java_getBytesWithCharsetName:@"UTF-8"])];
  RetrofitClientResponse *response = [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) readResponseWithJavaNetHttpURLConnection:connection];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([((RetrofitClientResponse *) nil_chk(response)) getUrl]))) isEqualToWithId:RetrofitClientUrlConnectionClientTest_HOST];
  [((OrgAssertjCoreApiAbstractIntegerAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithInt_([response getStatus]))) isEqualToWithInt:201];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([response getReason]))) isEqualToWithId:@"OK"];
  [((OrgAssertjCoreApiAbstractListAssert *) nil_chk([((OrgAssertjCoreApiAbstractListAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithJavaUtilList_([response getHeaders]))) hasSizeWithInt:3])) containsOnlyWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ create_RetrofitClientHeader_initWithNSString_withNSString_(@"foo", @"bar"), create_RetrofitClientHeader_initWithNSString_withNSString_(@"kit", @"kat"), create_RetrofitClientHeader_initWithNSString_withNSString_(@"Content-Type", @"text/plain") } count:3 type:RetrofitClientHeader_class_()]];
  RetrofitTestingUtils_assertBytesWithByteArray_withNSString_(ComGoogleCommonIoByteStreams_toByteArrayWithJavaIoInputStream_([((id<RetrofitMimeTypedInput>) nil_chk([response getBody])) in]), @"hello");
}

- (void)errorResponse {
  RetrofitClientDummyHttpUrlConnection *connection = create_RetrofitClientDummyHttpUrlConnection_initWithNSString_(RetrofitClientUrlConnectionClientTest_HOST);
  [connection setResponseCodeWithInt:401];
  [connection setResponseMessageWithNSString:@"Not Authorized"];
  [connection addResponseHeaderWithNSString:@"Content-Type" withNSString:@"text/plain"];
  [connection setInputStreamWithJavaIoInputStream:create_JavaIoByteArrayInputStream_initWithByteArray_([@"input" java_getBytesWithCharsetName:@"UTF-8"])];
  [connection setErrorStreamWithJavaIoInputStream:create_JavaIoByteArrayInputStream_initWithByteArray_([@"error" java_getBytesWithCharsetName:@"UTF-8"])];
  RetrofitClientResponse *response = [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) readResponseWithJavaNetHttpURLConnection:connection];
  RetrofitTestingUtils_assertBytesWithByteArray_withNSString_(ComGoogleCommonIoByteStreams_toByteArrayWithJavaIoInputStream_([((id<RetrofitMimeTypedInput>) nil_chk([((RetrofitClientResponse *) nil_chk(response)) getBody])) in]), @"error");
}

- (void)emptyResponse {
  RetrofitClientDummyHttpUrlConnection *connection = create_RetrofitClientDummyHttpUrlConnection_initWithNSString_(RetrofitClientUrlConnectionClientTest_HOST);
  [connection setResponseCodeWithInt:200];
  [connection setResponseMessageWithNSString:@"OK"];
  [connection addResponseHeaderWithNSString:@"foo" withNSString:@"bar"];
  [connection addResponseHeaderWithNSString:@"kit" withNSString:@"kat"];
  RetrofitClientResponse *response = [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) readResponseWithJavaNetHttpURLConnection:connection];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([((RetrofitClientResponse *) nil_chk(response)) getUrl]))) isEqualToWithId:RetrofitClientUrlConnectionClientTest_HOST];
  [((OrgAssertjCoreApiAbstractIntegerAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithInt_([response getStatus]))) isEqualToWithInt:200];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([response getReason]))) isEqualToWithId:@"OK"];
  [((OrgAssertjCoreApiAbstractListAssert *) nil_chk([((OrgAssertjCoreApiAbstractListAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithJavaUtilList_([response getHeaders]))) hasSizeWithInt:2])) containsExactlyWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ create_RetrofitClientHeader_initWithNSString_withNSString_(@"foo", @"bar"), create_RetrofitClientHeader_initWithNSString_withNSString_(@"kit", @"kat") } count:2 type:RetrofitClientHeader_class_()]];
}

- (void)noReasonMessage {
  RetrofitClientDummyHttpUrlConnection *connection = create_RetrofitClientDummyHttpUrlConnection_initWithNSString_(RetrofitClientUrlConnectionClientTest_HOST);
  [connection setResponseCodeWithInt:504];
  [connection setResponseMessageWithNSString:nil];
  RetrofitClientResponse *response = [((RetrofitClientUrlConnectionClient *) nil_chk(client_)) readResponseWithJavaNetHttpURLConnection:connection];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([((RetrofitClientResponse *) nil_chk(response)) getUrl]))) isEqualToWithId:RetrofitClientUrlConnectionClientTest_HOST];
  [((OrgAssertjCoreApiAbstractIntegerAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithInt_([response getStatus]))) isEqualToWithInt:504];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([response getReason]))) isEmpty];
}

- (void)dealloc {
  RELEASE_(client_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 6, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 7, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 8, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 9, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(post);
  methods[3].selector = @selector(multipart);
  methods[4].selector = @selector(headers);
  methods[5].selector = @selector(response);
  methods[6].selector = @selector(createdResponse);
  methods[7].selector = @selector(errorResponse);
  methods[8].selector = @selector(emptyResponse);
  methods[9].selector = @selector(noReasonMessage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HOST", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "client_", "LRetrofitClientUrlConnectionClient;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RetrofitClientUrlConnectionClientTest__Annotations$0, (void *)&RetrofitClientUrlConnectionClientTest__Annotations$1, (void *)&RetrofitClientUrlConnectionClientTest__Annotations$2, (void *)&RetrofitClientUrlConnectionClientTest__Annotations$3, (void *)&RetrofitClientUrlConnectionClientTest__Annotations$4, (void *)&RetrofitClientUrlConnectionClientTest__Annotations$5, (void *)&RetrofitClientUrlConnectionClientTest__Annotations$6, (void *)&RetrofitClientUrlConnectionClientTest__Annotations$7, (void *)&RetrofitClientUrlConnectionClientTest__Annotations$8, &RetrofitClientUrlConnectionClientTest_HOST };
  static const J2ObjcClassInfo _RetrofitClientUrlConnectionClientTest = { "UrlConnectionClientTest", "retrofit.client", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, -1, -1, -1, -1 };
  return &_RetrofitClientUrlConnectionClientTest;
}

@end

void RetrofitClientUrlConnectionClientTest_init(RetrofitClientUrlConnectionClientTest *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->client_, new_RetrofitClientUrlConnectionClientTest_1_init());
}

RetrofitClientUrlConnectionClientTest *new_RetrofitClientUrlConnectionClientTest_init() {
  J2OBJC_NEW_IMPL(RetrofitClientUrlConnectionClientTest, init)
}

RetrofitClientUrlConnectionClientTest *create_RetrofitClientUrlConnectionClientTest_init() {
  J2OBJC_CREATE_IMPL(RetrofitClientUrlConnectionClientTest, init)
}

IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitClientUrlConnectionClientTest__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitClientUrlConnectionClientTest)

@implementation RetrofitClientUrlConnectionClientTest_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitClientUrlConnectionClientTest_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaNetHttpURLConnection *)openConnectionWithRetrofitClientRequest:(RetrofitClientRequest *)request {
  return create_RetrofitClientDummyHttpUrlConnection_initWithNSString_([((RetrofitClientRequest *) nil_chk(request)) getUrl]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetHttpURLConnection;", 0x4, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(openConnectionWithRetrofitClientRequest:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "openConnection", "LRetrofitClientRequest;", "LJavaIoIOException;", "LRetrofitClientUrlConnectionClientTest;" };
  static const J2ObjcClassInfo _RetrofitClientUrlConnectionClientTest_1 = { "", "retrofit.client", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_RetrofitClientUrlConnectionClientTest_1;
}

@end

void RetrofitClientUrlConnectionClientTest_1_init(RetrofitClientUrlConnectionClientTest_1 *self) {
  RetrofitClientUrlConnectionClient_init(self);
}

RetrofitClientUrlConnectionClientTest_1 *new_RetrofitClientUrlConnectionClientTest_1_init() {
  J2OBJC_NEW_IMPL(RetrofitClientUrlConnectionClientTest_1, init)
}

RetrofitClientUrlConnectionClientTest_1 *create_RetrofitClientUrlConnectionClientTest_1_init() {
  J2OBJC_CREATE_IMPL(RetrofitClientUrlConnectionClientTest_1, init)
}
