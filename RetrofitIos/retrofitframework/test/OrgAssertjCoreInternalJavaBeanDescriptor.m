//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/JavaBeanDescriptor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreInternalJavaBeanDescriptor.h"
#include "java/beans/PropertyDescriptor.h"
#include "java/lang/reflect/Method.h"

@implementation OrgAssertjCoreInternalJavaBeanDescriptor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalJavaBeanDescriptor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)invokeReadMethodWithJavaBeansPropertyDescriptor:(JavaBeansPropertyDescriptor *)d
                                               withId:(id)o {
  JavaLangReflectMethod *readMethod = [((JavaBeansPropertyDescriptor *) nil_chk(d)) getReadMethod];
  [((JavaLangReflectMethod *) nil_chk(readMethod)) setAccessibleWithBoolean:true];
  return [readMethod invokeWithId:o withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(invokeReadMethodWithJavaBeansPropertyDescriptor:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "invokeReadMethod", "LJavaBeansPropertyDescriptor;LNSObject;", "LJavaLangIllegalAccessException;LJavaLangReflectInvocationTargetException;" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalJavaBeanDescriptor = { "JavaBeanDescriptor", "org.assertj.core.internal", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalJavaBeanDescriptor;
}

@end

void OrgAssertjCoreInternalJavaBeanDescriptor_init(OrgAssertjCoreInternalJavaBeanDescriptor *self) {
  NSObject_init(self);
}

OrgAssertjCoreInternalJavaBeanDescriptor *new_OrgAssertjCoreInternalJavaBeanDescriptor_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalJavaBeanDescriptor, init)
}

OrgAssertjCoreInternalJavaBeanDescriptor *create_OrgAssertjCoreInternalJavaBeanDescriptor_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalJavaBeanDescriptor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalJavaBeanDescriptor)
