//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldBeAnnotation.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeAnnotation.h"

@interface OrgAssertjCoreErrorShouldBeAnnotation ()

- (instancetype)initWithIOSClass:(IOSClass *)actual
                     withBoolean:(jboolean)toBeOrNotToBe;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeAnnotation_initWithIOSClass_withBoolean_(OrgAssertjCoreErrorShouldBeAnnotation *self, IOSClass *actual, jboolean toBeOrNotToBe);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeAnnotation *new_OrgAssertjCoreErrorShouldBeAnnotation_initWithIOSClass_withBoolean_(IOSClass *actual, jboolean toBeOrNotToBe) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeAnnotation *create_OrgAssertjCoreErrorShouldBeAnnotation_initWithIOSClass_withBoolean_(IOSClass *actual, jboolean toBeOrNotToBe);

@implementation OrgAssertjCoreErrorShouldBeAnnotation

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeAnnotationWithIOSClass:(IOSClass *)actual {
  return OrgAssertjCoreErrorShouldBeAnnotation_shouldBeAnnotationWithIOSClass_(actual);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotBeAnnotationWithIOSClass:(IOSClass *)actual {
  return OrgAssertjCoreErrorShouldBeAnnotation_shouldNotBeAnnotationWithIOSClass_(actual);
}

- (instancetype)initWithIOSClass:(IOSClass *)actual
                     withBoolean:(jboolean)toBeOrNotToBe {
  OrgAssertjCoreErrorShouldBeAnnotation_initWithIOSClass_withBoolean_(self, actual, toBeOrNotToBe);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 3, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeAnnotationWithIOSClass:);
  methods[1].selector = @selector(shouldNotBeAnnotationWithIOSClass:);
  methods[2].selector = @selector(initWithIOSClass:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeAnnotation", "LIOSClass;", "(Ljava/lang/Class<*>;)Lorg/assertj/core/error/ErrorMessageFactory;", "shouldNotBeAnnotation", "LIOSClass;Z", "(Ljava/lang/Class<*>;Z)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeAnnotation = { "ShouldBeAnnotation", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeAnnotation;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeAnnotation_shouldBeAnnotationWithIOSClass_(IOSClass *actual) {
  OrgAssertjCoreErrorShouldBeAnnotation_initialize();
  return create_OrgAssertjCoreErrorShouldBeAnnotation_initWithIOSClass_withBoolean_(actual, true);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeAnnotation_shouldNotBeAnnotationWithIOSClass_(IOSClass *actual) {
  OrgAssertjCoreErrorShouldBeAnnotation_initialize();
  return create_OrgAssertjCoreErrorShouldBeAnnotation_initWithIOSClass_withBoolean_(actual, false);
}

void OrgAssertjCoreErrorShouldBeAnnotation_initWithIOSClass_withBoolean_(OrgAssertjCoreErrorShouldBeAnnotation *self, IOSClass *actual, jboolean toBeOrNotToBe) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, JreStrcat("$$$", @"\nExpecting\n <%s>\nto ", (toBeOrNotToBe ? @"" : @" not "), @"be an annotation"), [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeAnnotation *new_OrgAssertjCoreErrorShouldBeAnnotation_initWithIOSClass_withBoolean_(IOSClass *actual, jboolean toBeOrNotToBe) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeAnnotation, initWithIOSClass_withBoolean_, actual, toBeOrNotToBe)
}

OrgAssertjCoreErrorShouldBeAnnotation *create_OrgAssertjCoreErrorShouldBeAnnotation_initWithIOSClass_withBoolean_(IOSClass *actual, jboolean toBeOrNotToBe) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeAnnotation, initWithIOSClass_withBoolean_, actual, toBeOrNotToBe)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeAnnotation)
