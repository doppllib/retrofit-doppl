//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/util/TextFileWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilCloseables.h"
#include "OrgAssertjCoreUtilTextFileWriter.h"
#include "java/io/Closeable.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintWriter.h"
#include "java/nio/charset/Charset.h"

@interface OrgAssertjCoreUtilTextFileWriter ()

- (instancetype)init;

@end

inline OrgAssertjCoreUtilTextFileWriter *OrgAssertjCoreUtilTextFileWriter_get_INSTANCE();
static OrgAssertjCoreUtilTextFileWriter *OrgAssertjCoreUtilTextFileWriter_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreUtilTextFileWriter, INSTANCE, OrgAssertjCoreUtilTextFileWriter *)

__attribute__((unused)) static void OrgAssertjCoreUtilTextFileWriter_init(OrgAssertjCoreUtilTextFileWriter *self);

__attribute__((unused)) static OrgAssertjCoreUtilTextFileWriter *new_OrgAssertjCoreUtilTextFileWriter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreUtilTextFileWriter *create_OrgAssertjCoreUtilTextFileWriter_init();

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreUtilTextFileWriter)

@implementation OrgAssertjCoreUtilTextFileWriter

+ (OrgAssertjCoreUtilTextFileWriter *)instance {
  return OrgAssertjCoreUtilTextFileWriter_instance();
}

- (void)writeWithJavaIoFile:(JavaIoFile *)file
          withNSStringArray:(IOSObjectArray *)content {
  [self writeWithJavaIoFile:file withJavaNioCharsetCharset:JavaNioCharsetCharset_defaultCharset() withNSStringArray:content];
}

- (void)writeWithJavaIoFile:(JavaIoFile *)file
  withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
          withNSStringArray:(IOSObjectArray *)content {
  JavaIoPrintWriter *writer = nil;
  @try {
    writer = create_JavaIoPrintWriter_initWithJavaIoWriter_(create_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharset_(create_JavaIoFileOutputStream_initWithJavaIoFile_(file), charset));
    {
      IOSObjectArray *a__ = content;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *line = *b__++;
        [writer printlnWithNSString:line];
      }
    }
  }
  @finally {
    OrgAssertjCoreUtilCloseables_closeQuietlyWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ writer } count:1 type:JavaIoCloseable_class_()]);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilTextFileWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreUtilTextFileWriter;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x81, 0, 3, 2, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(writeWithJavaIoFile:withNSStringArray:);
  methods[2].selector = @selector(writeWithJavaIoFile:withJavaNioCharsetCharset:withNSStringArray:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreUtilTextFileWriter;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "write", "LJavaIoFile;[LNSString;", "LJavaIoIOException;", "LJavaIoFile;LJavaNioCharsetCharset;[LNSString;", &OrgAssertjCoreUtilTextFileWriter_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilTextFileWriter = { "TextFileWriter", "org.assertj.core.util", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilTextFileWriter;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreUtilTextFileWriter class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreUtilTextFileWriter_INSTANCE, new_OrgAssertjCoreUtilTextFileWriter_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreUtilTextFileWriter)
  }
}

@end

OrgAssertjCoreUtilTextFileWriter *OrgAssertjCoreUtilTextFileWriter_instance() {
  OrgAssertjCoreUtilTextFileWriter_initialize();
  return OrgAssertjCoreUtilTextFileWriter_INSTANCE;
}

void OrgAssertjCoreUtilTextFileWriter_init(OrgAssertjCoreUtilTextFileWriter *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilTextFileWriter *new_OrgAssertjCoreUtilTextFileWriter_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilTextFileWriter, init)
}

OrgAssertjCoreUtilTextFileWriter *create_OrgAssertjCoreUtilTextFileWriter_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilTextFileWriter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilTextFileWriter)
