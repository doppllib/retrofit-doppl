//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldBeEqualIgnoringCase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldBeEqualIgnoringCase")
#ifdef RESTRICT_OrgAssertjCoreErrorShouldBeEqualIgnoringCase
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldBeEqualIgnoringCase 0
#else
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldBeEqualIgnoringCase 1
#endif
#undef RESTRICT_OrgAssertjCoreErrorShouldBeEqualIgnoringCase

#if !defined (OrgAssertjCoreErrorShouldBeEqualIgnoringCase_) && (INCLUDE_ALL_OrgAssertjCoreErrorShouldBeEqualIgnoringCase || defined(INCLUDE_OrgAssertjCoreErrorShouldBeEqualIgnoringCase))
#define OrgAssertjCoreErrorShouldBeEqualIgnoringCase_

#define RESTRICT_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#define INCLUDE_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"

@protocol JavaLangCharSequence;
@protocol OrgAssertjCoreErrorErrorMessageFactory;

@interface OrgAssertjCoreErrorShouldBeEqualIgnoringCase : OrgAssertjCoreErrorBasicErrorMessageFactory

#pragma mark Public

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeEqualWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                           withJavaLangCharSequence:(id<JavaLangCharSequence>)expected;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreErrorShouldBeEqualIgnoringCase)

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeEqualIgnoringCase_shouldBeEqualWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreErrorShouldBeEqualIgnoringCase)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldBeEqualIgnoringCase")
