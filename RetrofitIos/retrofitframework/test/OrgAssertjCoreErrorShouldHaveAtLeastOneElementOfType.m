//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldHaveAtLeastOneElementOfType.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType.h"

@interface OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType ()

- (instancetype)initWithId:(id)actual
              withIOSClass:(IOSClass *)expectedType;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_initWithId_withIOSClass_(OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType *self, id actual, IOSClass *expectedType);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType *new_OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_initWithId_withIOSClass_(id actual, IOSClass *expectedType) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType *create_OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_initWithId_withIOSClass_(id actual, IOSClass *expectedType);

@implementation OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType

+ (OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType *)shouldHaveAtLeastOneElementOfTypeWithId:(id)actual
                                                                                     withIOSClass:(IOSClass *)expectedType {
  return OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_shouldHaveAtLeastOneElementOfTypeWithId_withIOSClass_(actual, expectedType);
}

- (instancetype)initWithId:(id)actual
              withIOSClass:(IOSClass *)expectedType {
  OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_initWithId_withIOSClass_(self, actual, expectedType);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveAtLeastOneElementOfTypeWithId:withIOSClass:);
  methods[1].selector = @selector(initWithId:withIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveAtLeastOneElementOfType", "LNSObject;LIOSClass;", "(Ljava/lang/Object;Ljava/lang/Class<*>;)Lorg/assertj/core/error/ShouldHaveAtLeastOneElementOfType;", "(Ljava/lang/Object;Ljava/lang/Class<*>;)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType = { "ShouldHaveAtLeastOneElementOfType", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType;
}

@end

OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType *OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_shouldHaveAtLeastOneElementOfTypeWithId_withIOSClass_(id actual, IOSClass *expectedType) {
  OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_initialize();
  return create_OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_initWithId_withIOSClass_(actual, expectedType);
}

void OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_initWithId_withIOSClass_(OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType *self, id actual, IOSClass *expectedType) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"%nExpecting:%n  <%s>%nto have at least one element of type:%n  <%s>%nbut had none.", [IOSObjectArray arrayWithObjects:(id[]){ actual, expectedType } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType *new_OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_initWithId_withIOSClass_(id actual, IOSClass *expectedType) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType, initWithId_withIOSClass_, actual, expectedType)
}

OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType *create_OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_initWithId_withIOSClass_(id actual, IOSClass *expectedType) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType, initWithId_withIOSClass_, actual, expectedType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType)
