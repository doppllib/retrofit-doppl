//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/util/introspection/MemberUtils.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilIntrospectionMemberUtils.h"
#include "java/lang/SecurityException.h"
#include "java/lang/reflect/AccessibleObject.h"
#include "java/lang/reflect/Member.h"
#include "java/lang/reflect/Modifier.h"

inline jint OrgAssertjCoreUtilIntrospectionMemberUtils_get_ACCESS_TEST();
#define OrgAssertjCoreUtilIntrospectionMemberUtils_ACCESS_TEST 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgAssertjCoreUtilIntrospectionMemberUtils, ACCESS_TEST, jint)

@implementation OrgAssertjCoreUtilIntrospectionMemberUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilIntrospectionMemberUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)setAccessibleWorkaroundWithJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)o {
  OrgAssertjCoreUtilIntrospectionMemberUtils_setAccessibleWorkaroundWithJavaLangReflectAccessibleObject_(o);
}

+ (jboolean)isPackageAccessWithInt:(jint)modifiers {
  return OrgAssertjCoreUtilIntrospectionMemberUtils_isPackageAccessWithInt_(modifiers);
}

+ (jboolean)isAccessibleWithJavaLangReflectMember:(id<JavaLangReflectMember>)m {
  return OrgAssertjCoreUtilIntrospectionMemberUtils_isAccessibleWithJavaLangReflectMember_(m);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setAccessibleWorkaroundWithJavaLangReflectAccessibleObject:);
  methods[2].selector = @selector(isPackageAccessWithInt:);
  methods[3].selector = @selector(isAccessibleWithJavaLangReflectMember:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ACCESS_TEST", "I", .constantValue.asInt = OrgAssertjCoreUtilIntrospectionMemberUtils_ACCESS_TEST, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setAccessibleWorkaround", "LJavaLangReflectAccessibleObject;", "isPackageAccess", "I", "isAccessible", "LJavaLangReflectMember;" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilIntrospectionMemberUtils = { "MemberUtils", "org.assertj.core.util.introspection", ptrTable, methods, fields, 7, 0x400, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilIntrospectionMemberUtils;
}

@end

void OrgAssertjCoreUtilIntrospectionMemberUtils_init(OrgAssertjCoreUtilIntrospectionMemberUtils *self) {
  NSObject_init(self);
}

void OrgAssertjCoreUtilIntrospectionMemberUtils_setAccessibleWorkaroundWithJavaLangReflectAccessibleObject_(JavaLangReflectAccessibleObject *o) {
  OrgAssertjCoreUtilIntrospectionMemberUtils_initialize();
  if (o == nil || [o isAccessible]) {
    return;
  }
  id<JavaLangReflectMember> m = (id<JavaLangReflectMember>) cast_check(o, JavaLangReflectMember_class_());
  if (JavaLangReflectModifier_isPublicWithInt_([m getModifiers]) && OrgAssertjCoreUtilIntrospectionMemberUtils_isPackageAccessWithInt_([((IOSClass *) nil_chk([m getDeclaringClass])) getModifiers])) {
    @try {
      [o setAccessibleWithBoolean:true];
    }
    @catch (JavaLangSecurityException *e) {
    }
  }
}

jboolean OrgAssertjCoreUtilIntrospectionMemberUtils_isPackageAccessWithInt_(jint modifiers) {
  OrgAssertjCoreUtilIntrospectionMemberUtils_initialize();
  return (modifiers & OrgAssertjCoreUtilIntrospectionMemberUtils_ACCESS_TEST) == 0;
}

jboolean OrgAssertjCoreUtilIntrospectionMemberUtils_isAccessibleWithJavaLangReflectMember_(id<JavaLangReflectMember> m) {
  OrgAssertjCoreUtilIntrospectionMemberUtils_initialize();
  return m != nil && JavaLangReflectModifier_isPublicWithInt_([m getModifiers]) && ![m isSynthetic];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilIntrospectionMemberUtils)
