//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/StandardComparisonStrategy.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreInternalAbstractComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "OrgAssertjCoreUtilObjects.h"
#include "java/lang/Comparable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline OrgAssertjCoreInternalStandardComparisonStrategy *OrgAssertjCoreInternalStandardComparisonStrategy_get_INSTANCE();
static OrgAssertjCoreInternalStandardComparisonStrategy *OrgAssertjCoreInternalStandardComparisonStrategy_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalStandardComparisonStrategy, INSTANCE, OrgAssertjCoreInternalStandardComparisonStrategy *)

@interface OrgAssertjCoreInternalStandardComparisonStrategy_1 : NSObject < JavaUtilComparator > {
 @public
  OrgAssertjCoreInternalStandardComparisonStrategy *this$0_;
}

- (instancetype)initWithOrgAssertjCoreInternalStandardComparisonStrategy:(OrgAssertjCoreInternalStandardComparisonStrategy *)outer$;

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreInternalStandardComparisonStrategy_1)

__attribute__((unused)) static void OrgAssertjCoreInternalStandardComparisonStrategy_1_initWithOrgAssertjCoreInternalStandardComparisonStrategy_(OrgAssertjCoreInternalStandardComparisonStrategy_1 *self, OrgAssertjCoreInternalStandardComparisonStrategy *outer$);

__attribute__((unused)) static OrgAssertjCoreInternalStandardComparisonStrategy_1 *new_OrgAssertjCoreInternalStandardComparisonStrategy_1_initWithOrgAssertjCoreInternalStandardComparisonStrategy_(OrgAssertjCoreInternalStandardComparisonStrategy *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreInternalStandardComparisonStrategy_1 *create_OrgAssertjCoreInternalStandardComparisonStrategy_1_initWithOrgAssertjCoreInternalStandardComparisonStrategy_(OrgAssertjCoreInternalStandardComparisonStrategy *outer$);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalStandardComparisonStrategy)

@implementation OrgAssertjCoreInternalStandardComparisonStrategy

+ (OrgAssertjCoreInternalStandardComparisonStrategy *)instance {
  return OrgAssertjCoreInternalStandardComparisonStrategy_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalStandardComparisonStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilSet>)newSetUsingComparisonStrategy {
  return create_JavaUtilTreeSet_initWithJavaUtilComparator_(create_OrgAssertjCoreInternalStandardComparisonStrategy_1_initWithOrgAssertjCoreInternalStandardComparisonStrategy_(self));
}

- (NSString *)asText {
  return @"";
}

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other {
  return OrgAssertjCoreUtilObjects_areEqualWithId_withId_(actual, other);
}

- (jboolean)iterableContainsWithJavaLangIterable:(id<JavaLangIterable>)iterable
                                          withId:(id)value {
  if (iterable == nil) {
    return false;
  }
  for (id __strong next in iterable) {
    if ([self areEqualWithId:next withId:value]) {
      return true;
    }
  }
  return false;
}

- (void)iterableRemovesWithJavaLangIterable:(id<JavaLangIterable>)iterable
                                     withId:(id)value {
  if (iterable == nil) {
    return;
  }
  id<JavaUtilIterator> iterator = [iterable iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    if ([self areEqualWithId:[iterator next] withId:value]) {
      [iterator remove];
    }
  }
}

- (id<JavaLangIterable>)duplicatesFromWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  return [super duplicatesFromWithJavaLangIterable:iterable];
}

- (jboolean)stringStartsWithWithNSString:(NSString *)string
                            withNSString:(NSString *)prefix {
  return [((NSString *) nil_chk(string)) hasPrefix:prefix];
}

- (jboolean)stringEndsWithWithNSString:(NSString *)string
                          withNSString:(NSString *)suffix {
  return [((NSString *) nil_chk(string)) hasSuffix:suffix];
}

- (jboolean)stringContainsWithNSString:(NSString *)string
                          withNSString:(NSString *)sequence {
  return [((NSString *) nil_chk(string)) java_contains:sequence];
}

- (jboolean)isGreaterThanWithId:(id)actual
                         withId:(id)other {
  if (!([JavaLangComparable_class_() isInstance:actual])) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"argument '%s' should be Comparable but is not", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]));
  }
  return [((id<JavaLangComparable>) nil_chk([JavaLangComparable_class_() cast:actual])) compareToWithId:other] > 0;
}

- (jboolean)isLessThanWithId:(id)actual
                      withId:(id)other {
  if (!([JavaLangComparable_class_() isInstance:actual])) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"argument '%s' should be Comparable but is not", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]));
  }
  return [((id<JavaLangComparable>) nil_chk([JavaLangComparable_class_() cast:actual])) compareToWithId:other] < 0;
}

- (jboolean)isStandard {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalStandardComparisonStrategy;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x4, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, 7, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(newSetUsingComparisonStrategy);
  methods[3].selector = @selector(asText);
  methods[4].selector = @selector(areEqualWithId:withId:);
  methods[5].selector = @selector(iterableContainsWithJavaLangIterable:withId:);
  methods[6].selector = @selector(iterableRemovesWithJavaLangIterable:withId:);
  methods[7].selector = @selector(duplicatesFromWithJavaLangIterable:);
  methods[8].selector = @selector(stringStartsWithWithNSString:withNSString:);
  methods[9].selector = @selector(stringEndsWithWithNSString:withNSString:);
  methods[10].selector = @selector(stringContainsWithNSString:withNSString:);
  methods[11].selector = @selector(isGreaterThanWithId:withId:);
  methods[12].selector = @selector(isLessThanWithId:withId:);
  methods[13].selector = @selector(isStandard);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalStandardComparisonStrategy;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Set<Ljava/lang/Object;>;", "areEqual", "LNSObject;LNSObject;", "iterableContains", "LJavaLangIterable;LNSObject;", "(Ljava/lang/Iterable<*>;Ljava/lang/Object;)Z", "iterableRemoves", "(Ljava/lang/Iterable<*>;Ljava/lang/Object;)V", "duplicatesFrom", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)Ljava/lang/Iterable<*>;", "stringStartsWith", "LNSString;LNSString;", "stringEndsWith", "stringContains", "isGreaterThan", "isLessThan", &OrgAssertjCoreInternalStandardComparisonStrategy_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalStandardComparisonStrategy = { "StandardComparisonStrategy", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 14, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalStandardComparisonStrategy;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalStandardComparisonStrategy class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalStandardComparisonStrategy_INSTANCE, new_OrgAssertjCoreInternalStandardComparisonStrategy_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalStandardComparisonStrategy)
  }
}

@end

OrgAssertjCoreInternalStandardComparisonStrategy *OrgAssertjCoreInternalStandardComparisonStrategy_instance() {
  OrgAssertjCoreInternalStandardComparisonStrategy_initialize();
  return OrgAssertjCoreInternalStandardComparisonStrategy_INSTANCE;
}

void OrgAssertjCoreInternalStandardComparisonStrategy_init(OrgAssertjCoreInternalStandardComparisonStrategy *self) {
  OrgAssertjCoreInternalAbstractComparisonStrategy_init(self);
}

OrgAssertjCoreInternalStandardComparisonStrategy *new_OrgAssertjCoreInternalStandardComparisonStrategy_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalStandardComparisonStrategy, init)
}

OrgAssertjCoreInternalStandardComparisonStrategy *create_OrgAssertjCoreInternalStandardComparisonStrategy_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalStandardComparisonStrategy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalStandardComparisonStrategy)

@implementation OrgAssertjCoreInternalStandardComparisonStrategy_1

- (instancetype)initWithOrgAssertjCoreInternalStandardComparisonStrategy:(OrgAssertjCoreInternalStandardComparisonStrategy *)outer$ {
  OrgAssertjCoreInternalStandardComparisonStrategy_1_initWithOrgAssertjCoreInternalStandardComparisonStrategy_(self, outer$);
  return self;
}

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  if ([this$0_ areEqualWithId:o1 withId:o2]) return 0;
  return OrgAssertjCoreUtilObjects_hashCodeForWithId_(o1) < OrgAssertjCoreUtilObjects_hashCodeForWithId_(o2) ? -1 : 1;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgAssertjCoreInternalStandardComparisonStrategy:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgAssertjCoreInternalStandardComparisonStrategy;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "compare", "LNSObject;LNSObject;", "LOrgAssertjCoreInternalStandardComparisonStrategy;", "newSetUsingComparisonStrategy", "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalStandardComparisonStrategy_1 = { "", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, 4, -1 };
  return &_OrgAssertjCoreInternalStandardComparisonStrategy_1;
}

@end

void OrgAssertjCoreInternalStandardComparisonStrategy_1_initWithOrgAssertjCoreInternalStandardComparisonStrategy_(OrgAssertjCoreInternalStandardComparisonStrategy_1 *self, OrgAssertjCoreInternalStandardComparisonStrategy *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

OrgAssertjCoreInternalStandardComparisonStrategy_1 *new_OrgAssertjCoreInternalStandardComparisonStrategy_1_initWithOrgAssertjCoreInternalStandardComparisonStrategy_(OrgAssertjCoreInternalStandardComparisonStrategy *outer$) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalStandardComparisonStrategy_1, initWithOrgAssertjCoreInternalStandardComparisonStrategy_, outer$)
}

OrgAssertjCoreInternalStandardComparisonStrategy_1 *create_OrgAssertjCoreInternalStandardComparisonStrategy_1_initWithOrgAssertjCoreInternalStandardComparisonStrategy_(OrgAssertjCoreInternalStandardComparisonStrategy *outer$) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalStandardComparisonStrategy_1, initWithOrgAssertjCoreInternalStandardComparisonStrategy_, outer$)
}
