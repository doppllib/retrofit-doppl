//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldNotContainCharSequence.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldNotContainCharSequence.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/lang/CharSequence.h"

@interface OrgAssertjCoreErrorShouldNotContainCharSequence ()

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldNotContainCharSequence_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldNotContainCharSequence *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotContainCharSequence *new_OrgAssertjCoreErrorShouldNotContainCharSequence_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotContainCharSequence *create_OrgAssertjCoreErrorShouldNotContainCharSequence_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

@implementation OrgAssertjCoreErrorShouldNotContainCharSequence

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotContainWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return OrgAssertjCoreErrorShouldNotContainCharSequence_shouldNotContainWithJavaLangCharSequence_withJavaLangCharSequence_(actual, sequence);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotContainWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                              withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                          withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldNotContainCharSequence_shouldNotContainWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, comparisonStrategy);
}

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldNotContainCharSequence_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, sequence, comparisonStrategy);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldNotContainWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[1].selector = @selector(shouldNotContainWithJavaLangCharSequence:withJavaLangCharSequence:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[2].selector = @selector(initWithJavaLangCharSequence:withJavaLangCharSequence:withOrgAssertjCoreInternalComparisonStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldNotContain", "LJavaLangCharSequence;LJavaLangCharSequence;", "LJavaLangCharSequence;LJavaLangCharSequence;LOrgAssertjCoreInternalComparisonStrategy;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldNotContainCharSequence = { "ShouldNotContainCharSequence", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldNotContainCharSequence;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotContainCharSequence_shouldNotContainWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence) {
  OrgAssertjCoreErrorShouldNotContainCharSequence_initialize();
  return create_OrgAssertjCoreErrorShouldNotContainCharSequence_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotContainCharSequence_shouldNotContainWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldNotContainCharSequence_initialize();
  return create_OrgAssertjCoreErrorShouldNotContainCharSequence_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, comparisonStrategy);
}

void OrgAssertjCoreErrorShouldNotContainCharSequence_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldNotContainCharSequence *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nnot to contain:\n <%s> %s", [IOSObjectArray arrayWithObjects:(id[]){ actual, sequence, comparisonStrategy } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldNotContainCharSequence *new_OrgAssertjCoreErrorShouldNotContainCharSequence_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldNotContainCharSequence, initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_, actual, sequence, comparisonStrategy)
}

OrgAssertjCoreErrorShouldNotContainCharSequence *create_OrgAssertjCoreErrorShouldNotContainCharSequence_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldNotContainCharSequence, initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_, actual, sequence, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldNotContainCharSequence)
