//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/Characters.java
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeLowerCase.h"
#include "OrgAssertjCoreErrorShouldBeUpperCase.h"
#include "OrgAssertjCoreInternalCharacters.h"
#include "OrgAssertjCoreInternalComparables.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Character.h"

inline OrgAssertjCoreInternalCharacters *OrgAssertjCoreInternalCharacters_get_INSTANCE();
static OrgAssertjCoreInternalCharacters *OrgAssertjCoreInternalCharacters_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalCharacters, INSTANCE, OrgAssertjCoreInternalCharacters *)

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalCharacters)

@implementation OrgAssertjCoreInternalCharacters

+ (OrgAssertjCoreInternalCharacters *)instance {
  return OrgAssertjCoreInternalCharacters_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalCharacters_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreInternalCharacters_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
  return self;
}

- (void)assertLowerCaseWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangCharacter:(JavaLangCharacter *)actual {
  OrgAssertjCoreInternalComparables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, actual);
  if (JavaLangCharacter_isLowerCaseWithChar_([((JavaLangCharacter *) nil_chk(actual)) charValue])) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeLowerCase_shouldBeLowerCaseWithJavaLangCharacter_(actual)];
}

- (void)assertUpperCaseWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangCharacter:(JavaLangCharacter *)actual {
  OrgAssertjCoreInternalComparables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, actual);
  if (JavaLangCharacter_isUpperCaseWithChar_([((JavaLangCharacter *) nil_chk(actual)) charValue])) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeUpperCase_shouldBeUpperCaseWithJavaLangCharacter_(actual)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalCharacters;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(assertLowerCaseWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharacter:);
  methods[4].selector = @selector(assertUpperCaseWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharacter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalCharacters;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgAssertjCoreInternalComparisonStrategy;", "assertLowerCase", "LOrgAssertjCoreApiAssertionInfo;LJavaLangCharacter;", "assertUpperCase", &OrgAssertjCoreInternalCharacters_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalCharacters = { "Characters", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalCharacters;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalCharacters class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalCharacters_INSTANCE, new_OrgAssertjCoreInternalCharacters_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalCharacters)
  }
}

@end

OrgAssertjCoreInternalCharacters *OrgAssertjCoreInternalCharacters_instance() {
  OrgAssertjCoreInternalCharacters_initialize();
  return OrgAssertjCoreInternalCharacters_INSTANCE;
}

void OrgAssertjCoreInternalCharacters_init(OrgAssertjCoreInternalCharacters *self) {
  OrgAssertjCoreInternalComparables_init(self);
}

OrgAssertjCoreInternalCharacters *new_OrgAssertjCoreInternalCharacters_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalCharacters, init)
}

OrgAssertjCoreInternalCharacters *create_OrgAssertjCoreInternalCharacters_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalCharacters, init)
}

void OrgAssertjCoreInternalCharacters_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalCharacters *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreInternalComparables_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
}

OrgAssertjCoreInternalCharacters *new_OrgAssertjCoreInternalCharacters_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalCharacters, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

OrgAssertjCoreInternalCharacters *create_OrgAssertjCoreInternalCharacters_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalCharacters, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalCharacters)
