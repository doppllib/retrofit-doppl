//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/ClassAssert.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractClassAssert.h"
#include "OrgAssertjCoreApiClassAssert.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiClassAssert

- (instancetype)initWithIOSClass:(IOSClass *)actual {
  OrgAssertjCoreApiClassAssert_initWithIOSClass_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIOSClass;", "(Ljava/lang/Class<*>;)V", "Lorg/assertj/core/api/AbstractClassAssert<Lorg/assertj/core/api/ClassAssert;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiClassAssert = { "ClassAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, 2, -1 };
  return &_OrgAssertjCoreApiClassAssert;
}

@end

void OrgAssertjCoreApiClassAssert_initWithIOSClass_(OrgAssertjCoreApiClassAssert *self, IOSClass *actual) {
  OrgAssertjCoreApiAbstractClassAssert_initWithIOSClass_withIOSClass_(self, actual, OrgAssertjCoreApiClassAssert_class_());
}

OrgAssertjCoreApiClassAssert *new_OrgAssertjCoreApiClassAssert_initWithIOSClass_(IOSClass *actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiClassAssert, initWithIOSClass_, actual)
}

OrgAssertjCoreApiClassAssert *create_OrgAssertjCoreApiClassAssert_initWithIOSClass_(IOSClass *actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiClassAssert, initWithIOSClass_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiClassAssert)
