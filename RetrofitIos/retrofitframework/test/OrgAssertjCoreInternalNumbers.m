//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/Numbers.java
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreInternalComparables.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalNumbers.h"
#include "java/lang/Comparable.h"

@implementation OrgAssertjCoreInternalNumbers

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalNumbers_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreInternalNumbers_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
  return self;
}

- (id<JavaLangComparable>)zero {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)assertIsZeroWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                withJavaLangComparable:(id<JavaLangComparable>)actual {
  [self assertEqualByComparisonWithOrgAssertjCoreApiAssertionInfo:info withJavaLangComparable:actual withJavaLangComparable:[self zero]];
}

- (void)assertIsNotZeroWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withJavaLangComparable:(id<JavaLangComparable>)actual {
  [self assertNotEqualByComparisonWithOrgAssertjCoreApiAssertionInfo:info withJavaLangComparable:actual withJavaLangComparable:[self zero]];
}

- (void)assertIsNegativeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangComparable:(id<JavaLangComparable>)actual {
  [self assertLessThanWithOrgAssertjCoreApiAssertionInfo:info withJavaLangComparable:actual withJavaLangComparable:[self zero]];
}

- (void)assertIsPositiveWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangComparable:(id<JavaLangComparable>)actual {
  [self assertGreaterThanWithOrgAssertjCoreApiAssertionInfo:info withJavaLangComparable:actual withJavaLangComparable:[self zero]];
}

- (void)assertIsNotNegativeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaLangComparable:(id<JavaLangComparable>)actual {
  [self assertGreaterThanOrEqualToWithOrgAssertjCoreApiAssertionInfo:info withJavaLangComparable:actual withJavaLangComparable:[self zero]];
}

- (void)assertIsNotPositiveWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaLangComparable:(id<JavaLangComparable>)actual {
  [self assertLessThanOrEqualToWithOrgAssertjCoreApiAssertionInfo:info withJavaLangComparable:actual withJavaLangComparable:[self zero]];
}

- (void)assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withJavaLangComparable:(id<JavaLangComparable>)actual
                                   withJavaLangComparable:(id<JavaLangComparable>)start
                                   withJavaLangComparable:(id<JavaLangComparable>)end {
  [self assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:info withJavaLangComparable:actual withJavaLangComparable:start withJavaLangComparable:end withBoolean:true withBoolean:true];
}

- (void)assertIsStrictlyBetweenWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withJavaLangComparable:(id<JavaLangComparable>)actual
                                           withJavaLangComparable:(id<JavaLangComparable>)start
                                           withJavaLangComparable:(id<JavaLangComparable>)end {
  [self assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:info withJavaLangComparable:actual withJavaLangComparable:start withJavaLangComparable:end withBoolean:false withBoolean:false];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangComparable;", 0x404, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 9, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 13, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[2].selector = @selector(zero);
  methods[3].selector = @selector(assertIsZeroWithOrgAssertjCoreApiAssertionInfo:withJavaLangComparable:);
  methods[4].selector = @selector(assertIsNotZeroWithOrgAssertjCoreApiAssertionInfo:withJavaLangComparable:);
  methods[5].selector = @selector(assertIsNegativeWithOrgAssertjCoreApiAssertionInfo:withJavaLangComparable:);
  methods[6].selector = @selector(assertIsPositiveWithOrgAssertjCoreApiAssertionInfo:withJavaLangComparable:);
  methods[7].selector = @selector(assertIsNotNegativeWithOrgAssertjCoreApiAssertionInfo:withJavaLangComparable:);
  methods[8].selector = @selector(assertIsNotPositiveWithOrgAssertjCoreApiAssertionInfo:withJavaLangComparable:);
  methods[9].selector = @selector(assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:withJavaLangComparable:withJavaLangComparable:withJavaLangComparable:);
  methods[10].selector = @selector(assertIsStrictlyBetweenWithOrgAssertjCoreApiAssertionInfo:withJavaLangComparable:withJavaLangComparable:withJavaLangComparable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgAssertjCoreInternalComparisonStrategy;", "()TNUMBER;", "assertIsZero", "LOrgAssertjCoreApiAssertionInfo;LJavaLangComparable;", "(Lorg/assertj/core/api/AssertionInfo;TNUMBER;)V", "assertIsNotZero", "assertIsNegative", "assertIsPositive", "assertIsNotNegative", "assertIsNotPositive", "assertIsBetween", "LOrgAssertjCoreApiAssertionInfo;LJavaLangComparable;LJavaLangComparable;LJavaLangComparable;", "(Lorg/assertj/core/api/AssertionInfo;TNUMBER;TNUMBER;TNUMBER;)V", "assertIsStrictlyBetween", "<NUMBER::Ljava/lang/Comparable<TNUMBER;>;>Lorg/assertj/core/internal/Comparables;" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalNumbers = { "Numbers", "org.assertj.core.internal", ptrTable, methods, NULL, 7, 0x401, 11, 0, -1, -1, -1, 14, -1 };
  return &_OrgAssertjCoreInternalNumbers;
}

@end

void OrgAssertjCoreInternalNumbers_init(OrgAssertjCoreInternalNumbers *self) {
  OrgAssertjCoreInternalComparables_init(self);
}

void OrgAssertjCoreInternalNumbers_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalNumbers *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreInternalComparables_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalNumbers)
