//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/BasicErrorMessageFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreDescriptionDescription.h"
#include "OrgAssertjCoreDescriptionEmptyTextDescription.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorMessageFormatter.h"
#include "OrgAssertjCorePresentationRepresentation.h"
#include "OrgAssertjCorePresentationStandardRepresentation.h"
#include "OrgAssertjCoreUtilArrays.h"
#include "OrgAssertjCoreUtilObjects.h"
#include "OrgAssertjCoreUtilStrings.h"
#include "java/lang/CharSequence.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Arrays.h"
#include "java/util/stream/IntStream.h"

@interface OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString : NSObject < JavaLangCharSequence > {
 @public
  NSString *string_;
}

- (instancetype)initWithNSString:(NSString *)string;

- (jint)length;

- (jchar)charAtWithInt:(jint)index;

- (id<JavaLangCharSequence>)subSequenceFrom:(jint)start
                                         to:(jint)end;

- (NSString *)description;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString)

J2OBJC_FIELD_SETTER(OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString, string_, NSString *)

__attribute__((unused)) static void OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString_initWithNSString_(OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString *self, NSString *string);

__attribute__((unused)) static OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString *new_OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString *create_OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString_initWithNSString_(NSString *string);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString)

@implementation OrgAssertjCoreErrorBasicErrorMessageFactory

- (instancetype)initWithNSString:(NSString *)format
               withNSObjectArray:(IOSObjectArray *)arguments {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, format, arguments);
  return self;
}

- (NSString *)createWithOrgAssertjCoreDescriptionDescription:(OrgAssertjCoreDescriptionDescription *)d
                withOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)representation {
  return [((OrgAssertjCoreErrorMessageFormatter *) nil_chk(formatter_)) formatWithOrgAssertjCoreDescriptionDescription:d withOrgAssertjCorePresentationRepresentation:representation withNSString:format_ withNSObjectArray:arguments_];
}

- (NSString *)create {
  return [((OrgAssertjCoreErrorMessageFormatter *) nil_chk(formatter_)) formatWithOrgAssertjCoreDescriptionDescription:OrgAssertjCoreDescriptionEmptyTextDescription_emptyText() withOrgAssertjCorePresentationRepresentation:create_OrgAssertjCorePresentationStandardRepresentation_init() withNSString:format_ withNSObjectArray:arguments_];
}

+ (id<JavaLangCharSequence>)unquotedStringWithNSString:(NSString *)string {
  return OrgAssertjCoreErrorBasicErrorMessageFactory_unquotedStringWithNSString_(string);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return true;
  if (obj == nil) return false;
  if ([self java_getClass] != [obj java_getClass]) return false;
  OrgAssertjCoreErrorBasicErrorMessageFactory *other = (OrgAssertjCoreErrorBasicErrorMessageFactory *) cast_chk(obj, [OrgAssertjCoreErrorBasicErrorMessageFactory class]);
  if (!OrgAssertjCoreUtilObjects_areEqualWithId_withId_(format_, other->format_)) return false;
  return OrgAssertjCoreUtilObjects_areEqualWithId_withId_(arguments_, other->arguments_);
}

- (NSUInteger)hash {
  jint result = 1;
  result = OrgAssertjCoreUtilObjects_HASH_CODE_PRIME * result + OrgAssertjCoreUtilObjects_hashCodeForWithId_(format_);
  result = OrgAssertjCoreUtilObjects_HASH_CODE_PRIME * result + JavaUtilArrays_hashCodeWithNSObjectArray_(arguments_);
  return result;
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"%s[format=%s, arguments=%s]", [IOSObjectArray arrayWithObjects:(id[]){ [[self java_getClass] getSimpleName], OrgAssertjCoreUtilStrings_quoteWithNSString_(format_), OrgAssertjCoreUtilArrays_formatWithOrgAssertjCorePresentationRepresentation_withId_(create_OrgAssertjCorePresentationStandardRepresentation_init(), arguments_) } count:3 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(format_);
  RELEASE_(arguments_);
  RELEASE_(formatter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0xc, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSObjectArray:);
  methods[1].selector = @selector(createWithOrgAssertjCoreDescriptionDescription:withOrgAssertjCorePresentationRepresentation:);
  methods[2].selector = @selector(create);
  methods[3].selector = @selector(unquotedStringWithNSString:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "format_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "arguments_", "[LNSObject;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "formatter_", "LOrgAssertjCoreErrorMessageFormatter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "create", "LOrgAssertjCoreDescriptionDescription;LOrgAssertjCorePresentationRepresentation;", "unquotedString", "LNSString;", "equals", "LNSObject;", "hashCode", "toString", "LOrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorBasicErrorMessageFactory = { "BasicErrorMessageFactory", "org.assertj.core.error", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, 9, -1, -1, -1 };
  return &_OrgAssertjCoreErrorBasicErrorMessageFactory;
}

@end

void OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(OrgAssertjCoreErrorBasicErrorMessageFactory *self, NSString *format, IOSObjectArray *arguments) {
  NSObject_init(self);
  JreStrongAssign(&self->formatter_, OrgAssertjCoreErrorMessageFormatter_instance());
  JreStrongAssign(&self->format_, format);
  JreStrongAssign(&self->arguments_, arguments);
}

OrgAssertjCoreErrorBasicErrorMessageFactory *new_OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *arguments) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorBasicErrorMessageFactory, initWithNSString_withNSObjectArray_, format, arguments)
}

OrgAssertjCoreErrorBasicErrorMessageFactory *create_OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *arguments) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorBasicErrorMessageFactory, initWithNSString_withNSObjectArray_, format, arguments)
}

id<JavaLangCharSequence> OrgAssertjCoreErrorBasicErrorMessageFactory_unquotedStringWithNSString_(NSString *string) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initialize();
  return create_OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString_initWithNSString_(string);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorBasicErrorMessageFactory)

@implementation OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString

- (instancetype)initWithNSString:(NSString *)string {
  OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString_initWithNSString_(self, string);
  return self;
}

- (jint)length {
  return ((jint) [((NSString *) nil_chk(string_)) length]);
}

- (jchar)charAtWithInt:(jint)index {
  return [((NSString *) nil_chk(string_)) charAtWithInt:index];
}

- (id<JavaLangCharSequence>)subSequenceFrom:(jint)start
                                         to:(jint)end {
  return [((NSString *) nil_chk(string_)) subSequenceFrom:start to:end];
}

- (NSString *)description {
  return string_;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((string_ == nil) ? 0 : ((jint) [((NSString *) nil_chk(string_)) hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return true;
  if (obj == nil) return false;
  if ([self java_getClass] != [obj java_getClass]) return false;
  OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString *other = (OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString *) cast_chk(obj, [OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString class]);
  if (string_ == nil) {
    if (other->string_ != nil) return false;
  }
  else if (![string_ isEqual:other->string_]) return false;
  return true;
}

- (id<JavaUtilStreamIntStream>)chars {
  return JavaLangCharSequence_chars(self);
}

- (id<JavaUtilStreamIntStream>)codePoints {
  return JavaLangCharSequence_codePoints(self);
}

- (void)dealloc {
  RELEASE_(string_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(length);
  methods[2].selector = @selector(charAtWithInt:);
  methods[3].selector = @selector(subSequenceFrom:to:);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "string_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "charAt", "I", "subSequence", "II", "toString", "hashCode", "equals", "LNSObject;", "LOrgAssertjCoreErrorBasicErrorMessageFactory;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString = { "UnquotedString", "org.assertj.core.error", ptrTable, methods, fields, 7, 0xa, 7, 1, 9, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString;
}

@end

void OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString_initWithNSString_(OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString *self, NSString *string) {
  NSObject_init(self);
  if (string == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"string is mandatory");
  }
  JreStrongAssign(&self->string_, string);
}

OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString *new_OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString_initWithNSString_(NSString *string) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString, initWithNSString_, string)
}

OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString *create_OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString_initWithNSString_(NSString *string) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString, initWithNSString_, string)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorBasicErrorMessageFactory_UnquotedString)
