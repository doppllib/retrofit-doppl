//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/InputStreamsException.java
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreInternalInputStreamsException.h"
#include "java/lang/RuntimeException.h"

inline jlong OrgAssertjCoreInternalInputStreamsException_get_serialVersionUID();
#define OrgAssertjCoreInternalInputStreamsException_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgAssertjCoreInternalInputStreamsException, serialVersionUID, jlong)

@implementation OrgAssertjCoreInternalInputStreamsException

- (instancetype)initWithNSString:(NSString *)message {
  OrgAssertjCoreInternalInputStreamsException_initWithNSString_(self, message);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message
                 withNSException:(NSException *)cause {
  OrgAssertjCoreInternalInputStreamsException_initWithNSString_withNSException_(self, message, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgAssertjCoreInternalInputStreamsException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LNSException;" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInputStreamsException = { "InputStreamsException", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInputStreamsException;
}

@end

void OrgAssertjCoreInternalInputStreamsException_initWithNSString_(OrgAssertjCoreInternalInputStreamsException *self, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
}

OrgAssertjCoreInternalInputStreamsException *new_OrgAssertjCoreInternalInputStreamsException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInputStreamsException, initWithNSString_, message)
}

OrgAssertjCoreInternalInputStreamsException *create_OrgAssertjCoreInternalInputStreamsException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInputStreamsException, initWithNSString_, message)
}

void OrgAssertjCoreInternalInputStreamsException_initWithNSString_withNSException_(OrgAssertjCoreInternalInputStreamsException *self, NSString *message, NSException *cause) {
  JavaLangRuntimeException_initWithNSString_withNSException_(self, message, cause);
}

OrgAssertjCoreInternalInputStreamsException *new_OrgAssertjCoreInternalInputStreamsException_initWithNSString_withNSException_(NSString *message, NSException *cause) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInputStreamsException, initWithNSString_withNSException_, message, cause)
}

OrgAssertjCoreInternalInputStreamsException *create_OrgAssertjCoreInternalInputStreamsException_initWithNSString_withNSException_(NSString *message, NSException *cause) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInputStreamsException, initWithNSString_withNSException_, message, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInputStreamsException)
