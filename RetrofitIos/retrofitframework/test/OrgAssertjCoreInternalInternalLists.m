//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/InternalLists.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeAtIndex.h"
#include "OrgAssertjCoreErrorShouldBeSorted.h"
#include "OrgAssertjCoreErrorShouldContainAtIndex.h"
#include "OrgAssertjCoreErrorShouldHaveAtIndex.h"
#include "OrgAssertjCoreErrorShouldNotContainAtIndex.h"
#include "OrgAssertjCoreInternalCommonValidations.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalConditions.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalIterables.h"
#include "OrgAssertjCoreInternalInternalLists.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/lang/AssertionError.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Comparable.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"

@interface OrgAssertjCoreInternalInternalLists () {
 @public
  id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy_;
}

- (jboolean)conditionIsMetAtIndexWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                   withJavaUtilList:(id<JavaUtilList>)actual
                                     withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition
                                        withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index;

+ (id<JavaUtilList>)listOfComparableElementsWithJavaUtilList:(id<JavaUtilList>)collection;

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaUtilList:(id<JavaUtilList>)actual;

- (void)assertNotNullWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other;

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalLists, comparisonStrategy_, id<OrgAssertjCoreInternalComparisonStrategy>)

inline OrgAssertjCoreInternalInternalLists *OrgAssertjCoreInternalInternalLists_get_INSTANCE();
static OrgAssertjCoreInternalInternalLists *OrgAssertjCoreInternalInternalLists_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalInternalLists, INSTANCE, OrgAssertjCoreInternalInternalLists *)

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalLists_conditionIsMetAtIndexWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_withOrgAssertjCoreApiCondition_withOrgAssertjCoreDataIndex_(OrgAssertjCoreInternalInternalLists *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaUtilList> actual, OrgAssertjCoreApiCondition *condition, OrgAssertjCoreDataIndex *index);

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreInternalInternalLists_listOfComparableElementsWithJavaUtilList_(id<JavaUtilList> collection);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_(OrgAssertjCoreInternalInternalLists *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaUtilList> actual);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalLists *self, OrgAssertjCoreApiCondition *condition);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalLists_areEqualWithId_withId_(OrgAssertjCoreInternalInternalLists *self, id actual, id other);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalInternalLists)

@implementation OrgAssertjCoreInternalInternalLists

+ (OrgAssertjCoreInternalInternalLists *)instance {
  return OrgAssertjCoreInternalInternalLists_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInternalLists_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreInternalInternalLists_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
  return self;
}

- (id<JavaUtilComparator>)getComparator {
  if ([comparisonStrategy_ isKindOfClass:[OrgAssertjCoreInternalComparatorBasedComparisonStrategy class]]) {
    return [((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) nil_chk(((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) cast_chk(comparisonStrategy_, [OrgAssertjCoreInternalComparatorBasedComparisonStrategy class])))) getComparator];
  }
  return nil;
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaUtilList:(id<JavaUtilList>)actual
                                                  withId:(id)value
                             withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_(self, info, actual);
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(OrgAssertjCoreInternalInternalIterables_instance())) assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:info withJavaLangIterable:actual];
  OrgAssertjCoreInternalCommonValidations_checkIndexValueIsValidWithOrgAssertjCoreDataIndex_withInt_(index, [((id<JavaUtilList>) nil_chk(actual)) size] - 1);
  id actualElement = [actual getWithInt:((OrgAssertjCoreDataIndex *) nil_chk(index))->value_];
  if (OrgAssertjCoreInternalInternalLists_areEqualWithId_withId_(self, actualElement, value)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainAtIndex_shouldContainAtIndexWithId_withId_withOrgAssertjCoreDataIndex_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, value, index, [actual getWithInt:index->value_], comparisonStrategy_)];
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilList:(id<JavaUtilList>)actual
                                                        withId:(id)value
                                   withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_(self, info, actual);
  OrgAssertjCoreInternalCommonValidations_checkIndexValueIsValidWithOrgAssertjCoreDataIndex_withInt_(index, JavaLangInteger_MAX_VALUE);
  jint indexValue = ((OrgAssertjCoreDataIndex *) nil_chk(index))->value_;
  if (indexValue >= [((id<JavaUtilList>) nil_chk(actual)) size]) return;
  id actualElement = [actual getWithInt:index->value_];
  if (!OrgAssertjCoreInternalInternalLists_areEqualWithId_withId_(self, actualElement, value)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotContainAtIndex_shouldNotContainAtIndexWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(actual, value, index, comparisonStrategy_)];
}

- (void)assertIsSortedWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaUtilList:(id<JavaUtilList>)actual {
  OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_(self, info, actual);
  if ([comparisonStrategy_ isKindOfClass:[OrgAssertjCoreInternalComparatorBasedComparisonStrategy class]]) {
    id<JavaUtilComparator> comparator = [((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) nil_chk(((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) cast_chk(comparisonStrategy_, [OrgAssertjCoreInternalComparatorBasedComparisonStrategy class])))) getComparator];
    [self assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:info withJavaUtilList:actual withJavaUtilComparator:comparator];
    return;
  }
  @try {
    id<JavaUtilList> comparableList = OrgAssertjCoreInternalInternalLists_listOfComparableElementsWithJavaUtilList_(actual);
    if ([((id<JavaUtilList>) nil_chk(comparableList)) size] <= 1) return;
    for (jint i = 0; i < [comparableList size] - 1; i++) {
      if ([((id<JavaLangComparable>) nil_chk([comparableList getWithInt:i])) compareToWithId:[comparableList getWithInt:i + 1]] > 0) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSorted_shouldBeSortedWithInt_withId_(i, actual)];
    }
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSorted_shouldHaveMutuallyComparableElementsWithId_(actual)];
  }
}

- (void)assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                             withJavaUtilList:(id<JavaUtilList>)actual
                                                       withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_(self, info, actual);
  if (comparator == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The given comparator should not be null");
  @try {
    if ([((id<JavaUtilList>) nil_chk(actual)) size] == 0) return;
    id<JavaUtilComparator> rawComparator = comparator;
    if ([actual size] == 1) {
      [rawComparator compareWithId:[actual getWithInt:0] withId:[actual getWithInt:0]];
      return;
    }
    for (jint i = 0; i < [actual size] - 1; i++) {
      if ([rawComparator compareWithId:[actual getWithInt:i] withId:[actual getWithInt:i + 1]] > 0) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSorted_shouldBeSortedAccordingToGivenComparatorWithInt_withId_withJavaUtilComparator_(i, actual, comparator)];
    }
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSorted_shouldHaveComparableElementsAccordingToGivenComparatorWithId_withJavaUtilComparator_(actual, comparator)];
  }
}

- (void)assertHasWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withJavaUtilList:(id<JavaUtilList>)actual
                     withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition
                        withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  if (OrgAssertjCoreInternalInternalLists_conditionIsMetAtIndexWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_withOrgAssertjCoreApiCondition_withOrgAssertjCoreDataIndex_(self, info, actual, condition, index)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveAtIndex_shouldHaveAtIndexWithJavaUtilList_withOrgAssertjCoreApiCondition_withOrgAssertjCoreDataIndex_withId_(actual, condition, index, [((id<JavaUtilList>) nil_chk(actual)) getWithInt:((OrgAssertjCoreDataIndex *) nil_chk(index))->value_])];
}

- (void)assertIsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                  withJavaUtilList:(id<JavaUtilList>)actual
                    withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition
                       withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  if (OrgAssertjCoreInternalInternalLists_conditionIsMetAtIndexWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_withOrgAssertjCoreApiCondition_withOrgAssertjCoreDataIndex_(self, info, actual, condition, index)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeAtIndex_shouldBeAtIndexWithJavaUtilList_withOrgAssertjCoreApiCondition_withOrgAssertjCoreDataIndex_withId_(actual, condition, index, [((id<JavaUtilList>) nil_chk(actual)) getWithInt:((OrgAssertjCoreDataIndex *) nil_chk(index))->value_])];
}

- (jboolean)conditionIsMetAtIndexWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                   withJavaUtilList:(id<JavaUtilList>)actual
                                     withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition
                                        withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  return OrgAssertjCoreInternalInternalLists_conditionIsMetAtIndexWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_withOrgAssertjCoreApiCondition_withOrgAssertjCoreDataIndex_(self, info, actual, condition, index);
}

+ (id<JavaUtilList>)listOfComparableElementsWithJavaUtilList:(id<JavaUtilList>)collection {
  return OrgAssertjCoreInternalInternalLists_listOfComparableElementsWithJavaUtilList_(collection);
}

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaUtilList:(id<JavaUtilList>)actual {
  OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_(self, info, actual);
}

- (void)assertNotNullWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiCondition_(self, condition);
}

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other {
  return OrgAssertjCoreInternalInternalLists_areEqualWithId_withId_(self, actual, other);
}

- (id<OrgAssertjCoreInternalComparisonStrategy>)getComparisonStrategy {
  return comparisonStrategy_;
}

- (void)dealloc {
  RELEASE_(comparisonStrategy_);
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalInternalLists;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 13, -1, 14, -1, -1 },
    { NULL, "Z", 0x2, 16, 13, -1, 17, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x2, 21, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, 23, -1, -1 },
    { NULL, "Z", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreInternalComparisonStrategy;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(getComparator);
  methods[4].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilList:withId:withOrgAssertjCoreDataIndex:);
  methods[5].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withJavaUtilList:withId:withOrgAssertjCoreDataIndex:);
  methods[6].selector = @selector(assertIsSortedWithOrgAssertjCoreApiAssertionInfo:withJavaUtilList:);
  methods[7].selector = @selector(assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:withJavaUtilList:withJavaUtilComparator:);
  methods[8].selector = @selector(assertHasWithOrgAssertjCoreApiAssertionInfo:withJavaUtilList:withOrgAssertjCoreApiCondition:withOrgAssertjCoreDataIndex:);
  methods[9].selector = @selector(assertIsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilList:withOrgAssertjCoreApiCondition:withOrgAssertjCoreDataIndex:);
  methods[10].selector = @selector(conditionIsMetAtIndexWithOrgAssertjCoreApiAssertionInfo:withJavaUtilList:withOrgAssertjCoreApiCondition:withOrgAssertjCoreDataIndex:);
  methods[11].selector = @selector(listOfComparableElementsWithJavaUtilList:);
  methods[12].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withJavaUtilList:);
  methods[13].selector = @selector(assertNotNullWithOrgAssertjCoreApiCondition:);
  methods[14].selector = @selector(areEqualWithId:withId:);
  methods[15].selector = @selector(getComparisonStrategy);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalInternalLists;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "comparisonStrategy_", "LOrgAssertjCoreInternalComparisonStrategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgAssertjCoreInternalComparisonStrategy;", "()Ljava/util/Comparator<*>;", "assertContains", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilList;LNSObject;LOrgAssertjCoreDataIndex;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/util/List<*>;Ljava/lang/Object;Lorg/assertj/core/data/Index;)V", "assertDoesNotContain", "assertIsSorted", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilList;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/util/List<*>;)V", "assertIsSortedAccordingToComparator", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilList;LJavaUtilComparator;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/util/List<*>;Ljava/util/Comparator<*>;)V", "assertHas", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilList;LOrgAssertjCoreApiCondition;LOrgAssertjCoreDataIndex;", "<T:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Ljava/util/List<TT;>;Lorg/assertj/core/api/Condition<-TT;>;Lorg/assertj/core/data/Index;)V", "assertIs", "conditionIsMetAtIndex", "<T:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Ljava/util/List<TT;>;Lorg/assertj/core/api/Condition<-TT;>;Lorg/assertj/core/data/Index;)Z", "listOfComparableElements", "LJavaUtilList;", "(Ljava/util/List<*>;)Ljava/util/List<Ljava/lang/Comparable<Ljava/lang/Object;>;>;", "assertNotNull", "LOrgAssertjCoreApiCondition;", "(Lorg/assertj/core/api/Condition<*>;)V", "areEqual", "LNSObject;LNSObject;", &OrgAssertjCoreInternalInternalLists_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInternalLists = { "InternalLists", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 16, 3, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInternalLists;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalInternalLists class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalInternalLists_INSTANCE, new_OrgAssertjCoreInternalInternalLists_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalInternalLists)
  }
}

@end

OrgAssertjCoreInternalInternalLists *OrgAssertjCoreInternalInternalLists_instance() {
  OrgAssertjCoreInternalInternalLists_initialize();
  return OrgAssertjCoreInternalInternalLists_INSTANCE;
}

void OrgAssertjCoreInternalInternalLists_init(OrgAssertjCoreInternalInternalLists *self) {
  OrgAssertjCoreInternalInternalLists_initWithOrgAssertjCoreInternalComparisonStrategy_(self, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

OrgAssertjCoreInternalInternalLists *new_OrgAssertjCoreInternalInternalLists_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalLists, init)
}

OrgAssertjCoreInternalInternalLists *create_OrgAssertjCoreInternalInternalLists_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalLists, init)
}

void OrgAssertjCoreInternalInternalLists_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalInternalLists *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  NSObject_init(self);
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
  JreStrongAssign(&self->comparisonStrategy_, comparisonStrategy);
}

OrgAssertjCoreInternalInternalLists *new_OrgAssertjCoreInternalInternalLists_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalLists, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

OrgAssertjCoreInternalInternalLists *create_OrgAssertjCoreInternalInternalLists_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalLists, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

jboolean OrgAssertjCoreInternalInternalLists_conditionIsMetAtIndexWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_withOrgAssertjCoreApiCondition_withOrgAssertjCoreDataIndex_(OrgAssertjCoreInternalInternalLists *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaUtilList> actual, OrgAssertjCoreApiCondition *condition, OrgAssertjCoreDataIndex *index) {
  OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_(self, info, actual);
  OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiCondition_(self, condition);
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(OrgAssertjCoreInternalInternalIterables_instance())) assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:info withJavaLangIterable:actual];
  OrgAssertjCoreInternalCommonValidations_checkIndexValueIsValidWithOrgAssertjCoreDataIndex_withInt_(index, [((id<JavaUtilList>) nil_chk(actual)) size] - 1);
  return [((OrgAssertjCoreApiCondition *) nil_chk(condition)) matchesWithId:[actual getWithInt:((OrgAssertjCoreDataIndex *) nil_chk(index))->value_]];
}

id<JavaUtilList> OrgAssertjCoreInternalInternalLists_listOfComparableElementsWithJavaUtilList_(id<JavaUtilList> collection) {
  OrgAssertjCoreInternalInternalLists_initialize();
  id<JavaUtilList> listOfComparableElements = create_JavaUtilArrayList_init();
  for (id __strong object in nil_chk(collection)) {
    [listOfComparableElements addWithId:(id<JavaLangComparable>) cast_check(object, JavaLangComparable_class_())];
  }
  return listOfComparableElements;
}

void OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilList_(OrgAssertjCoreInternalInternalLists *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaUtilList> actual) {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
}

void OrgAssertjCoreInternalInternalLists_assertNotNullWithOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalLists *self, OrgAssertjCoreApiCondition *condition) {
  [((OrgAssertjCoreInternalConditions *) nil_chk(OrgAssertjCoreInternalConditions_instance())) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
}

jboolean OrgAssertjCoreInternalInternalLists_areEqualWithId_withId_(OrgAssertjCoreInternalInternalLists *self, id actual, id other) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) areEqualWithId:actual withId:other];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInternalLists)
