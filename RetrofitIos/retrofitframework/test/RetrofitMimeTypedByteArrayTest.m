//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/retrofit/mime/TypedByteArrayTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractIntegerAssert.h"
#include "OrgAssertjCoreApiAbstractObjectAssert.h"
#include "OrgAssertjCoreApiAssertions.h"
#include "RetrofitMimeTypedByteArray.h"
#include "RetrofitMimeTypedByteArrayTest.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Test.h"

inline NSString *RetrofitMimeTypedByteArrayTest_get_GIF();
static NSString *RetrofitMimeTypedByteArrayTest_GIF = @"image/gif";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RetrofitMimeTypedByteArrayTest, GIF, NSString *)

__attribute__((unused)) static IOSObjectArray *RetrofitMimeTypedByteArrayTest__Annotations$0();

@implementation RetrofitMimeTypedByteArrayTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitMimeTypedByteArrayTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)objectEquals {
  RetrofitMimeTypedByteArray *a1 = create_RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(RetrofitMimeTypedByteArrayTest_GIF, [IOSByteArray arrayWithBytes:(jbyte[]){ 10, 20 } count:2]);
  RetrofitMimeTypedByteArray *a2 = create_RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(RetrofitMimeTypedByteArrayTest_GIF, [IOSByteArray arrayWithBytes:(jbyte[]){ 10, 20 } count:2]);
  RetrofitMimeTypedByteArray *b = create_RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(RetrofitMimeTypedByteArrayTest_GIF, [IOSByteArray arrayWithBytes:(jbyte[]){ 8, 12 } count:2]);
  [((OrgAssertjCoreApiAbstractObjectAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithId_(a1))) isEqualToWithId:a2];
  [((OrgAssertjCoreApiAbstractIntegerAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithInt_(((jint) [a1 hash])))) isEqualToWithInt:((jint) [a2 hash])];
  [((OrgAssertjCoreApiAbstractObjectAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithId_(a1))) isNotEqualToWithId:b];
  [((OrgAssertjCoreApiAbstractIntegerAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithInt_(((jint) [a1 hash])))) isNotEqualToWithInt:((jint) [b hash])];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(objectEquals);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "GIF", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RetrofitMimeTypedByteArrayTest__Annotations$0, &RetrofitMimeTypedByteArrayTest_GIF };
  static const J2ObjcClassInfo _RetrofitMimeTypedByteArrayTest = { "TypedByteArrayTest", "retrofit.mime", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_RetrofitMimeTypedByteArrayTest;
}

@end

void RetrofitMimeTypedByteArrayTest_init(RetrofitMimeTypedByteArrayTest *self) {
  NSObject_init(self);
}

RetrofitMimeTypedByteArrayTest *new_RetrofitMimeTypedByteArrayTest_init() {
  J2OBJC_NEW_IMPL(RetrofitMimeTypedByteArrayTest, init)
}

RetrofitMimeTypedByteArrayTest *create_RetrofitMimeTypedByteArrayTest_init() {
  J2OBJC_CREATE_IMPL(RetrofitMimeTypedByteArrayTest, init)
}

IOSObjectArray *RetrofitMimeTypedByteArrayTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitMimeTypedByteArrayTest)
