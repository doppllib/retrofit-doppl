//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/AbstractDoubleArrayAssert.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractArrayAssert.h"
#include "OrgAssertjCoreApiAbstractDoubleArrayAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalDoubleArrays.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "java/lang/Iterable.h"
#include "java/util/Comparator.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractDoubleArrayAssert

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)actual
                       withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractDoubleArrayAssert_initWithDoubleArray_withIOSClass_(self, actual, selfType);
  return self;
}

- (void)isNullOrEmpty {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_];
}

- (void)isEmpty {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_];
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)isNotEmpty {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)hasSizeWithInt:(jint)expected {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertHasSizeWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withInt:expected];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)hasSameSizeAsWithJavaLangIterable:(id<JavaLangIterable>)other {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withJavaLangIterable:other];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)containsWithDoubleArray:(IOSDoubleArray *)values {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withDoubleArray:values];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)containsOnlyWithDoubleArray:(IOSDoubleArray *)values {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withDoubleArray:values];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)containsOnlyOnceWithDoubleArray:(IOSDoubleArray *)values {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withDoubleArray:values];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)containsSequenceWithDoubleArray:(IOSDoubleArray *)sequence {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withDoubleArray:sequence];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)containsSubsequenceWithDoubleArray:(IOSDoubleArray *)subsequence {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withDoubleArray:subsequence];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)containsWithDouble:(jdouble)value
                                       withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withDouble:value withOrgAssertjCoreDataIndex:index];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)doesNotContainWithDoubleArray:(IOSDoubleArray *)values {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withDoubleArray:values];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)doesNotContainWithDouble:(jdouble)value
                                             withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withDouble:value withOrgAssertjCoreDataIndex:index];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)doesNotHaveDuplicates {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)startsWithWithDoubleArray:(IOSDoubleArray *)sequence {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertStartsWithWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withDoubleArray:sequence];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)endsWithWithDoubleArray:(IOSDoubleArray *)sequence {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertEndsWithWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withDoubleArray:sequence];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)isSorted {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertIsSortedWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)isSortedAccordingToWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  [((OrgAssertjCoreInternalDoubleArrays *) nil_chk(arrays_)) assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:info_ withDoubleArray:actual_ withJavaUtilComparator:comparator];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)usingElementComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)customComparator {
  JreStrongAssignAndConsume(&self->arrays_, new_OrgAssertjCoreInternalDoubleArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(create_OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(customComparator)));
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)usingDefaultElementComparator {
  JreStrongAssign(&self->arrays_, OrgAssertjCoreInternalDoubleArrays_instance());
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleArrayAssert *)containsExactlyWithDoubleArray:(IOSDoubleArray *)values {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(objects_)) assertEqualWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:values];
  return ((OrgAssertjCoreApiAbstractDoubleArrayAssert *) myself_);
}

- (void)dealloc {
  RELEASE_(arrays_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x81, 9, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x81, 12, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x81, 13, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x81, 14, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x81, 15, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x1, 9, 16, -1, 17, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x81, 18, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x1, 18, 16, -1, 17, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x81, 19, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x81, 20, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x1, 24, 22, -1, 23, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x81, 25, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDoubleArray:withIOSClass:);
  methods[1].selector = @selector(isNullOrEmpty);
  methods[2].selector = @selector(isEmpty);
  methods[3].selector = @selector(isNotEmpty);
  methods[4].selector = @selector(hasSizeWithInt:);
  methods[5].selector = @selector(hasSameSizeAsWithJavaLangIterable:);
  methods[6].selector = @selector(containsWithDoubleArray:);
  methods[7].selector = @selector(containsOnlyWithDoubleArray:);
  methods[8].selector = @selector(containsOnlyOnceWithDoubleArray:);
  methods[9].selector = @selector(containsSequenceWithDoubleArray:);
  methods[10].selector = @selector(containsSubsequenceWithDoubleArray:);
  methods[11].selector = @selector(containsWithDouble:withOrgAssertjCoreDataIndex:);
  methods[12].selector = @selector(doesNotContainWithDoubleArray:);
  methods[13].selector = @selector(doesNotContainWithDouble:withOrgAssertjCoreDataIndex:);
  methods[14].selector = @selector(doesNotHaveDuplicates);
  methods[15].selector = @selector(startsWithWithDoubleArray:);
  methods[16].selector = @selector(endsWithWithDoubleArray:);
  methods[17].selector = @selector(isSorted);
  methods[18].selector = @selector(isSortedAccordingToWithJavaUtilComparator:);
  methods[19].selector = @selector(usingElementComparatorWithJavaUtilComparator:);
  methods[20].selector = @selector(usingDefaultElementComparator);
  methods[21].selector = @selector(containsExactlyWithDoubleArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "arrays_", "LOrgAssertjCoreInternalDoubleArrays;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[DLIOSClass;", "([DLjava/lang/Class<*>;)V", "()TS;", "hasSize", "I", "(I)TS;", "hasSameSizeAs", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)TS;", "contains", "[D", "([D)TS;", "containsOnly", "containsOnlyOnce", "containsSequence", "containsSubsequence", "DLOrgAssertjCoreDataIndex;", "(DLorg/assertj/core/data/Index;)TS;", "doesNotContain", "startsWith", "endsWith", "isSortedAccordingTo", "LJavaUtilComparator;", "(Ljava/util/Comparator<-Ljava/lang/Double;>;)TS;", "usingElementComparator", "containsExactly", "<S:Lorg/assertj/core/api/AbstractDoubleArrayAssert<TS;>;>Lorg/assertj/core/api/AbstractArrayAssert<TS;[DLjava/lang/Double;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractDoubleArrayAssert = { "AbstractDoubleArrayAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 22, 1, -1, -1, -1, 26, -1 };
  return &_OrgAssertjCoreApiAbstractDoubleArrayAssert;
}

@end

void OrgAssertjCoreApiAbstractDoubleArrayAssert_initWithDoubleArray_withIOSClass_(OrgAssertjCoreApiAbstractDoubleArrayAssert *self, IOSDoubleArray *actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractArrayAssert_initWithId_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->arrays_, OrgAssertjCoreInternalDoubleArrays_instance());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractDoubleArrayAssert)
