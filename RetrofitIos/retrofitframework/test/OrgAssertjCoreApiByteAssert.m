//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/ByteAssert.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractByteAssert.h"
#include "OrgAssertjCoreApiByteAssert.h"
#include "java/lang/Byte.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiByteAssert

- (instancetype)initWithJavaLangByte:(JavaLangByte *)actual {
  OrgAssertjCoreApiByteAssert_initWithJavaLangByte_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangByte:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangByte;", "Lorg/assertj/core/api/AbstractByteAssert<Lorg/assertj/core/api/ByteAssert;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiByteAssert = { "ByteAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, 1, -1 };
  return &_OrgAssertjCoreApiByteAssert;
}

@end

void OrgAssertjCoreApiByteAssert_initWithJavaLangByte_(OrgAssertjCoreApiByteAssert *self, JavaLangByte *actual) {
  OrgAssertjCoreApiAbstractByteAssert_initWithJavaLangByte_withIOSClass_(self, actual, OrgAssertjCoreApiByteAssert_class_());
}

OrgAssertjCoreApiByteAssert *new_OrgAssertjCoreApiByteAssert_initWithJavaLangByte_(JavaLangByte *actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiByteAssert, initWithJavaLangByte_, actual)
}

OrgAssertjCoreApiByteAssert *create_OrgAssertjCoreApiByteAssert_initWithJavaLangByte_(JavaLangByte *actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiByteAssert, initWithJavaLangByte_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiByteAssert)
