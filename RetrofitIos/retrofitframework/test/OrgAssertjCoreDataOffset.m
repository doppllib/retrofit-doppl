//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/data/Offset.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreDataOffset.h"
#include "OrgAssertjCoreUtilObjects.h"
#include "OrgAssertjCoreUtilPreconditions.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/math/BigDecimal.h"

@interface OrgAssertjCoreDataOffset ()

+ (JavaLangIllegalArgumentException *)valueNotPositive;

- (instancetype)initWithNSNumber:(NSNumber *)value;

@end

__attribute__((unused)) static JavaLangIllegalArgumentException *OrgAssertjCoreDataOffset_valueNotPositive();

__attribute__((unused)) static void OrgAssertjCoreDataOffset_initWithNSNumber_(OrgAssertjCoreDataOffset *self, NSNumber *value);

__attribute__((unused)) static OrgAssertjCoreDataOffset *new_OrgAssertjCoreDataOffset_initWithNSNumber_(NSNumber *value) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreDataOffset *create_OrgAssertjCoreDataOffset_initWithNSNumber_(NSNumber *value);

@implementation OrgAssertjCoreDataOffset

+ (OrgAssertjCoreDataOffset *)offsetWithJavaLangDouble:(JavaLangDouble *)value {
  return OrgAssertjCoreDataOffset_offsetWithJavaLangDouble_(value);
}

+ (OrgAssertjCoreDataOffset *)offsetWithJavaLangFloat:(JavaLangFloat *)value {
  return OrgAssertjCoreDataOffset_offsetWithJavaLangFloat_(value);
}

+ (OrgAssertjCoreDataOffset *)offsetWithJavaLangInteger:(JavaLangInteger *)value {
  return OrgAssertjCoreDataOffset_offsetWithJavaLangInteger_(value);
}

+ (OrgAssertjCoreDataOffset *)offsetWithJavaMathBigDecimal:(JavaMathBigDecimal *)value {
  return OrgAssertjCoreDataOffset_offsetWithJavaMathBigDecimal_(value);
}

+ (JavaLangIllegalArgumentException *)valueNotPositive {
  return OrgAssertjCoreDataOffset_valueNotPositive();
}

- (instancetype)initWithNSNumber:(NSNumber *)value {
  OrgAssertjCoreDataOffset_initWithNSNumber_(self, value);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self java_getClass] != [obj java_getClass]) {
    return false;
  }
  OrgAssertjCoreDataOffset *other = (OrgAssertjCoreDataOffset *) cast_chk(obj, [OrgAssertjCoreDataOffset class]);
  return OrgAssertjCoreUtilObjects_areEqualWithId_withId_(value_, other->value_);
}

- (NSUInteger)hash {
  jint result = 1;
  result = OrgAssertjCoreUtilObjects_HASH_CODE_PRIME * result + OrgAssertjCoreUtilObjects_hashCodeForWithId_(value_);
  return result;
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"%s[value=%s]", [IOSObjectArray arrayWithObjects:(id[]){ [[self java_getClass] getSimpleName], value_ } count:2 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreDataOffset;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreDataOffset;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreDataOffset;", 0x9, 0, 5, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreDataOffset;", 0x9, 0, 7, -1, 8, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 9, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(offsetWithJavaLangDouble:);
  methods[1].selector = @selector(offsetWithJavaLangFloat:);
  methods[2].selector = @selector(offsetWithJavaLangInteger:);
  methods[3].selector = @selector(offsetWithJavaMathBigDecimal:);
  methods[4].selector = @selector(valueNotPositive);
  methods[5].selector = @selector(initWithNSNumber:);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSNumber;", .constantValue.asLong = 0, 0x11, -1, -1, 15, -1 },
  };
  static const void *ptrTable[] = { "offset", "LJavaLangDouble;", "(Ljava/lang/Double;)Lorg/assertj/core/data/Offset<Ljava/lang/Double;>;", "LJavaLangFloat;", "(Ljava/lang/Float;)Lorg/assertj/core/data/Offset<Ljava/lang/Float;>;", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lorg/assertj/core/data/Offset<Ljava/lang/Integer;>;", "LJavaMathBigDecimal;", "(Ljava/math/BigDecimal;)Lorg/assertj/core/data/Offset<Ljava/math/BigDecimal;>;", "LNSNumber;", "(TT;)V", "equals", "LNSObject;", "hashCode", "toString", "TT;", "<T:Ljava/lang/Number;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgAssertjCoreDataOffset = { "Offset", "org.assertj.core.data", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, 16, -1 };
  return &_OrgAssertjCoreDataOffset;
}

@end

OrgAssertjCoreDataOffset *OrgAssertjCoreDataOffset_offsetWithJavaLangDouble_(JavaLangDouble *value) {
  OrgAssertjCoreDataOffset_initialize();
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_(value);
  if ([((JavaLangDouble *) nil_chk(value)) doubleValue] < 0.0) {
    @throw OrgAssertjCoreDataOffset_valueNotPositive();
  }
  return create_OrgAssertjCoreDataOffset_initWithNSNumber_(value);
}

OrgAssertjCoreDataOffset *OrgAssertjCoreDataOffset_offsetWithJavaLangFloat_(JavaLangFloat *value) {
  OrgAssertjCoreDataOffset_initialize();
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_(value);
  if ([((JavaLangFloat *) nil_chk(value)) floatValue] < 0.0f) {
    @throw OrgAssertjCoreDataOffset_valueNotPositive();
  }
  return create_OrgAssertjCoreDataOffset_initWithNSNumber_(value);
}

OrgAssertjCoreDataOffset *OrgAssertjCoreDataOffset_offsetWithJavaLangInteger_(JavaLangInteger *value) {
  OrgAssertjCoreDataOffset_initialize();
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_(value);
  if ([((JavaLangInteger *) nil_chk(value)) intValue] < 0) {
    @throw OrgAssertjCoreDataOffset_valueNotPositive();
  }
  return create_OrgAssertjCoreDataOffset_initWithNSNumber_(value);
}

OrgAssertjCoreDataOffset *OrgAssertjCoreDataOffset_offsetWithJavaMathBigDecimal_(JavaMathBigDecimal *value) {
  OrgAssertjCoreDataOffset_initialize();
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_(value);
  if ([((JavaMathBigDecimal *) nil_chk(value)) compareToWithId:JreLoadStatic(JavaMathBigDecimal, ZERO)] < 0) @throw OrgAssertjCoreDataOffset_valueNotPositive();
  return create_OrgAssertjCoreDataOffset_initWithNSNumber_(value);
}

JavaLangIllegalArgumentException *OrgAssertjCoreDataOffset_valueNotPositive() {
  OrgAssertjCoreDataOffset_initialize();
  return create_JavaLangIllegalArgumentException_initWithNSString_(@"The value of the offset should be greater than zero");
}

void OrgAssertjCoreDataOffset_initWithNSNumber_(OrgAssertjCoreDataOffset *self, NSNumber *value) {
  NSObject_init(self);
  JreStrongAssign(&self->value_, value);
}

OrgAssertjCoreDataOffset *new_OrgAssertjCoreDataOffset_initWithNSNumber_(NSNumber *value) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreDataOffset, initWithNSNumber_, value)
}

OrgAssertjCoreDataOffset *create_OrgAssertjCoreDataOffset_initWithNSNumber_(NSNumber *value) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreDataOffset, initWithNSNumber_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreDataOffset)
