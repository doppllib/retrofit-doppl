//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldNotBeEqual.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldNotBeEqual.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"

@interface OrgAssertjCoreErrorShouldNotBeEqual ()

- (instancetype)initWithId:(id)actual
                    withId:(id)other
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldNotBeEqual_initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldNotBeEqual *self, id actual, id other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotBeEqual *new_OrgAssertjCoreErrorShouldNotBeEqual_initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotBeEqual *create_OrgAssertjCoreErrorShouldNotBeEqual_initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

@implementation OrgAssertjCoreErrorShouldNotBeEqual

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotBeEqualWithId:(id)actual
                                                              withId:(id)other
                        withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldNotBeEqual_shouldNotBeEqualWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, comparisonStrategy);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotBeEqualWithId:(id)actual
                                                              withId:(id)other {
  return OrgAssertjCoreErrorShouldNotBeEqual_shouldNotBeEqualWithId_withId_(actual, other);
}

- (instancetype)initWithId:(id)actual
                    withId:(id)other
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldNotBeEqual_initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, other, comparisonStrategy);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldNotBeEqualWithId:withId:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[1].selector = @selector(shouldNotBeEqualWithId:withId:);
  methods[2].selector = @selector(initWithId:withId:withOrgAssertjCoreInternalComparisonStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldNotBeEqual", "LNSObject;LNSObject;LOrgAssertjCoreInternalComparisonStrategy;", "LNSObject;LNSObject;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldNotBeEqual = { "ShouldNotBeEqual", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldNotBeEqual;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotBeEqual_shouldNotBeEqualWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldNotBeEqual_initialize();
  return create_OrgAssertjCoreErrorShouldNotBeEqual_initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, comparisonStrategy);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotBeEqual_shouldNotBeEqualWithId_withId_(id actual, id other) {
  OrgAssertjCoreErrorShouldNotBeEqual_initialize();
  return create_OrgAssertjCoreErrorShouldNotBeEqual_initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

void OrgAssertjCoreErrorShouldNotBeEqual_initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldNotBeEqual *self, id actual, id other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nnot to be equal to:\n <%s>\n%s", [IOSObjectArray arrayWithObjects:(id[]){ actual, other, comparisonStrategy } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldNotBeEqual *new_OrgAssertjCoreErrorShouldNotBeEqual_initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldNotBeEqual, initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_, actual, other, comparisonStrategy)
}

OrgAssertjCoreErrorShouldNotBeEqual *create_OrgAssertjCoreErrorShouldNotBeEqual_initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldNotBeEqual, initWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_, actual, other, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldNotBeEqual)
