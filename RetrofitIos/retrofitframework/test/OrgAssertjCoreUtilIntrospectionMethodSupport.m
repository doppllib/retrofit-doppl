//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/util/introspection/MethodSupport.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilIntrospectionMethodSupport.h"
#include "OrgAssertjCoreUtilPreconditions.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Method.h"

@interface OrgAssertjCoreUtilIntrospectionMethodSupport ()

+ (id)invokeMethodWithId:(id)item
withJavaLangReflectMethod:(JavaLangReflectMethod *)method;

+ (JavaLangReflectMethod *)findMethodWithNSString:(NSString *)methodName
                                     withIOSClass:(IOSClass *)itemClass;

+ (JavaLangIllegalArgumentException *)prepareMethodNotFoundExceptionWithNSString:(NSString *)methodName
                                                                    withIOSClass:(IOSClass *)itemClass
                                                           withJavaLangException:(JavaLangException *)cause;

+ (void)assertHasReturnTypeWithIOSClass:(IOSClass *)itemClass
              withJavaLangReflectMethod:(JavaLangReflectMethod *)method;

@end

inline NSString *OrgAssertjCoreUtilIntrospectionMethodSupport_get_METHOD_HAS_NO_RETURN_VALUE();
static NSString *OrgAssertjCoreUtilIntrospectionMethodSupport_METHOD_HAS_NO_RETURN_VALUE = @"Method '%s' in class %s.class has to return a value!";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreUtilIntrospectionMethodSupport, METHOD_HAS_NO_RETURN_VALUE, NSString *)

inline NSString *OrgAssertjCoreUtilIntrospectionMethodSupport_get_METHOD_NOT_FOUND();
static NSString *OrgAssertjCoreUtilIntrospectionMethodSupport_METHOD_NOT_FOUND = @"Can't find method '%s' in class %s.class. Make sure public method exists and accepts no arguments!";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreUtilIntrospectionMethodSupport, METHOD_NOT_FOUND, NSString *)

__attribute__((unused)) static id OrgAssertjCoreUtilIntrospectionMethodSupport_invokeMethodWithId_withJavaLangReflectMethod_(id item, JavaLangReflectMethod *method);

__attribute__((unused)) static JavaLangReflectMethod *OrgAssertjCoreUtilIntrospectionMethodSupport_findMethodWithNSString_withIOSClass_(NSString *methodName, IOSClass *itemClass);

__attribute__((unused)) static JavaLangIllegalArgumentException *OrgAssertjCoreUtilIntrospectionMethodSupport_prepareMethodNotFoundExceptionWithNSString_withIOSClass_withJavaLangException_(NSString *methodName, IOSClass *itemClass, JavaLangException *cause);

__attribute__((unused)) static void OrgAssertjCoreUtilIntrospectionMethodSupport_assertHasReturnTypeWithIOSClass_withJavaLangReflectMethod_(IOSClass *itemClass, JavaLangReflectMethod *method);

@implementation OrgAssertjCoreUtilIntrospectionMethodSupport

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilIntrospectionMethodSupport_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)methodResultForWithId:(id)instance
               withNSString:(NSString *)methodName {
  return OrgAssertjCoreUtilIntrospectionMethodSupport_methodResultForWithId_withNSString_(instance, methodName);
}

+ (id)invokeMethodWithId:(id)item
withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return OrgAssertjCoreUtilIntrospectionMethodSupport_invokeMethodWithId_withJavaLangReflectMethod_(item, method);
}

+ (JavaLangReflectMethod *)findMethodWithNSString:(NSString *)methodName
                                     withIOSClass:(IOSClass *)itemClass {
  return OrgAssertjCoreUtilIntrospectionMethodSupport_findMethodWithNSString_withIOSClass_(methodName, itemClass);
}

+ (JavaLangIllegalArgumentException *)prepareMethodNotFoundExceptionWithNSString:(NSString *)methodName
                                                                    withIOSClass:(IOSClass *)itemClass
                                                           withJavaLangException:(JavaLangException *)cause {
  return OrgAssertjCoreUtilIntrospectionMethodSupport_prepareMethodNotFoundExceptionWithNSString_withIOSClass_withJavaLangException_(methodName, itemClass, cause);
}

+ (void)assertHasReturnTypeWithIOSClass:(IOSClass *)itemClass
              withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  OrgAssertjCoreUtilIntrospectionMethodSupport_assertHasReturnTypeWithIOSClass_withJavaLangReflectMethod_(itemClass, method);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0xa, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0xa, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0xa, 10, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(methodResultForWithId:withNSString:);
  methods[2].selector = @selector(invokeMethodWithId:withJavaLangReflectMethod:);
  methods[3].selector = @selector(findMethodWithNSString:withIOSClass:);
  methods[4].selector = @selector(prepareMethodNotFoundExceptionWithNSString:withIOSClass:withJavaLangException:);
  methods[5].selector = @selector(assertHasReturnTypeWithIOSClass:withJavaLangReflectMethod:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "METHOD_HAS_NO_RETURN_VALUE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "METHOD_NOT_FOUND", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "methodResultFor", "LNSObject;LNSString;", "invokeMethod", "LNSObject;LJavaLangReflectMethod;", "findMethod", "LNSString;LIOSClass;", "(Ljava/lang/String;Ljava/lang/Class<+Ljava/lang/Object;>;)Ljava/lang/reflect/Method;", "prepareMethodNotFoundException", "LNSString;LIOSClass;LJavaLangException;", "(Ljava/lang/String;Ljava/lang/Class<+Ljava/lang/Object;>;Ljava/lang/Exception;)Ljava/lang/IllegalArgumentException;", "assertHasReturnType", "LIOSClass;LJavaLangReflectMethod;", "(Ljava/lang/Class<+Ljava/lang/Object;>;Ljava/lang/reflect/Method;)V", &OrgAssertjCoreUtilIntrospectionMethodSupport_METHOD_HAS_NO_RETURN_VALUE, &OrgAssertjCoreUtilIntrospectionMethodSupport_METHOD_NOT_FOUND };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilIntrospectionMethodSupport = { "MethodSupport", "org.assertj.core.util.introspection", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilIntrospectionMethodSupport;
}

@end

void OrgAssertjCoreUtilIntrospectionMethodSupport_init(OrgAssertjCoreUtilIntrospectionMethodSupport *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilIntrospectionMethodSupport *new_OrgAssertjCoreUtilIntrospectionMethodSupport_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilIntrospectionMethodSupport, init)
}

OrgAssertjCoreUtilIntrospectionMethodSupport *create_OrgAssertjCoreUtilIntrospectionMethodSupport_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilIntrospectionMethodSupport, init)
}

id OrgAssertjCoreUtilIntrospectionMethodSupport_methodResultForWithId_withNSString_(id instance, NSString *methodName) {
  OrgAssertjCoreUtilIntrospectionMethodSupport_initialize();
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_withNSString_(instance, @"Object instance can not be null!");
  OrgAssertjCoreUtilPreconditions_checkNotNullOrEmptyWithNSString_withNSString_(methodName, @"Method name can not be empty!");
  JavaLangReflectMethod *method = OrgAssertjCoreUtilIntrospectionMethodSupport_findMethodWithNSString_withIOSClass_(methodName, [nil_chk(instance) java_getClass]);
  return OrgAssertjCoreUtilIntrospectionMethodSupport_invokeMethodWithId_withJavaLangReflectMethod_(instance, method);
}

id OrgAssertjCoreUtilIntrospectionMethodSupport_invokeMethodWithId_withJavaLangReflectMethod_(id item, JavaLangReflectMethod *method) {
  OrgAssertjCoreUtilIntrospectionMethodSupport_initialize();
  @try {
    return [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:item withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangIllegalStateException_initWithNSException_(e);
  }
}

JavaLangReflectMethod *OrgAssertjCoreUtilIntrospectionMethodSupport_findMethodWithNSString_withIOSClass_(NSString *methodName, IOSClass *itemClass) {
  OrgAssertjCoreUtilIntrospectionMethodSupport_initialize();
  @try {
    JavaLangReflectMethod *method = [((IOSClass *) nil_chk(itemClass)) getMethod:methodName parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
    OrgAssertjCoreUtilIntrospectionMethodSupport_assertHasReturnTypeWithIOSClass_withJavaLangReflectMethod_(itemClass, method);
    return method;
  }
  @catch (JavaLangSecurityException *e) {
    @throw OrgAssertjCoreUtilIntrospectionMethodSupport_prepareMethodNotFoundExceptionWithNSString_withIOSClass_withJavaLangException_(methodName, itemClass, e);
  }
  @catch (JavaLangNoSuchMethodException *e) {
    @throw OrgAssertjCoreUtilIntrospectionMethodSupport_prepareMethodNotFoundExceptionWithNSString_withIOSClass_withJavaLangException_(methodName, itemClass, e);
  }
}

JavaLangIllegalArgumentException *OrgAssertjCoreUtilIntrospectionMethodSupport_prepareMethodNotFoundExceptionWithNSString_withIOSClass_withJavaLangException_(NSString *methodName, IOSClass *itemClass, JavaLangException *cause) {
  OrgAssertjCoreUtilIntrospectionMethodSupport_initialize();
  NSString *message = NSString_java_formatWithNSString_withNSObjectArray_(OrgAssertjCoreUtilIntrospectionMethodSupport_METHOD_NOT_FOUND, [IOSObjectArray arrayWithObjects:(id[]){ methodName, [((IOSClass *) nil_chk(itemClass)) getSimpleName] } count:2 type:NSObject_class_()]);
  return create_JavaLangIllegalArgumentException_initWithNSString_withNSException_(message, cause);
}

void OrgAssertjCoreUtilIntrospectionMethodSupport_assertHasReturnTypeWithIOSClass_withJavaLangReflectMethod_(IOSClass *itemClass, JavaLangReflectMethod *method) {
  OrgAssertjCoreUtilIntrospectionMethodSupport_initialize();
  if ([((IOSClass *) nil_chk(JreLoadStatic(JavaLangVoid, TYPE))) isEqual:[((JavaLangReflectMethod *) nil_chk(method)) getReturnType]]) {
    NSString *message = NSString_java_formatWithNSString_withNSObjectArray_(OrgAssertjCoreUtilIntrospectionMethodSupport_METHOD_HAS_NO_RETURN_VALUE, [IOSObjectArray arrayWithObjects:(id[]){ [method getName], [((IOSClass *) nil_chk(itemClass)) getSimpleName] } count:2 type:NSObject_class_()]);
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilIntrospectionMethodSupport)
