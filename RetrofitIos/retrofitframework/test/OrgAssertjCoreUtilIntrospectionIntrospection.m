//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/util/introspection/Introspection.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilIntrospectionIntrospection.h"
#include "OrgAssertjCoreUtilIntrospectionIntrospectionError.h"
#include "OrgAssertjCoreUtilPreconditions.h"
#include "OrgAssertjCoreUtilStrings.h"
#include "java/beans/BeanInfo.h"
#include "java/beans/Introspector.h"
#include "java/beans/PropertyDescriptor.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Locale.h"

@interface OrgAssertjCoreUtilIntrospectionIntrospection ()

+ (NSString *)propertyNotFoundErrorMessageWithNSString:(NSString *)propertyName
                                                withId:(id)target;

+ (JavaLangReflectMethod *)findGetterWithNSString:(NSString *)propertyName
                                           withId:(id)target;

+ (JavaLangReflectMethod *)findMethodWithNSString:(NSString *)name
                                           withId:(id)target;

- (instancetype)init;

@end

__attribute__((unused)) static NSString *OrgAssertjCoreUtilIntrospectionIntrospection_propertyNotFoundErrorMessageWithNSString_withId_(NSString *propertyName, id target);

__attribute__((unused)) static JavaLangReflectMethod *OrgAssertjCoreUtilIntrospectionIntrospection_findGetterWithNSString_withId_(NSString *propertyName, id target);

__attribute__((unused)) static JavaLangReflectMethod *OrgAssertjCoreUtilIntrospectionIntrospection_findMethodWithNSString_withId_(NSString *name, id target);

__attribute__((unused)) static void OrgAssertjCoreUtilIntrospectionIntrospection_init(OrgAssertjCoreUtilIntrospectionIntrospection *self);

__attribute__((unused)) static OrgAssertjCoreUtilIntrospectionIntrospection *new_OrgAssertjCoreUtilIntrospectionIntrospection_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreUtilIntrospectionIntrospection *create_OrgAssertjCoreUtilIntrospectionIntrospection_init();

@implementation OrgAssertjCoreUtilIntrospectionIntrospection

+ (JavaBeansPropertyDescriptor *)getPropertyWithNSString:(NSString *)propertyName
                                                  withId:(id)target {
  return OrgAssertjCoreUtilIntrospectionIntrospection_getPropertyWithNSString_withId_(propertyName, target);
}

+ (NSString *)propertyNotFoundErrorMessageWithNSString:(NSString *)propertyName
                                                withId:(id)target {
  return OrgAssertjCoreUtilIntrospectionIntrospection_propertyNotFoundErrorMessageWithNSString_withId_(propertyName, target);
}

+ (JavaLangReflectMethod *)findGetterWithNSString:(NSString *)propertyName
                                           withId:(id)target {
  return OrgAssertjCoreUtilIntrospectionIntrospection_findGetterWithNSString_withId_(propertyName, target);
}

+ (JavaLangReflectMethod *)findMethodWithNSString:(NSString *)name
                                           withId:(id)target {
  return OrgAssertjCoreUtilIntrospectionIntrospection_findMethodWithNSString_withId_(name, target);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilIntrospectionIntrospection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaBeansPropertyDescriptor;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0xa, 4, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getPropertyWithNSString:withId:);
  methods[1].selector = @selector(propertyNotFoundErrorMessageWithNSString:withId:);
  methods[2].selector = @selector(findGetterWithNSString:withId:);
  methods[3].selector = @selector(findMethodWithNSString:withId:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getProperty", "LNSString;LNSObject;", "propertyNotFoundErrorMessage", "findGetter", "findMethod" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilIntrospectionIntrospection = { "Introspection", "org.assertj.core.util.introspection", ptrTable, methods, NULL, 7, 0x11, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilIntrospectionIntrospection;
}

@end

JavaBeansPropertyDescriptor *OrgAssertjCoreUtilIntrospectionIntrospection_getPropertyWithNSString_withId_(NSString *propertyName, id target) {
  OrgAssertjCoreUtilIntrospectionIntrospection_initialize();
  OrgAssertjCoreUtilPreconditions_checkNotNullOrEmptyWithNSString_(propertyName);
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_(target);
  id<JavaBeansBeanInfo> beanInfo = nil;
  IOSClass *type = [nil_chk(target) java_getClass];
  @try {
    beanInfo = JavaBeansIntrospector_getBeanInfoWithIOSClass_(type);
  }
  @catch (NSException *t) {
    @throw create_OrgAssertjCoreUtilIntrospectionIntrospectionError_initWithNSString_withNSException_(NSString_java_formatWithNSString_withNSObjectArray_(@"Unable to get BeanInfo for type %s", [IOSObjectArray arrayWithObjects:(id[]){ [type getName] } count:1 type:NSObject_class_()]), t);
  }
  {
    IOSObjectArray *a__ = [((id<JavaBeansBeanInfo>) nil_chk(beanInfo)) getPropertyDescriptors];
    JavaBeansPropertyDescriptor * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaBeansPropertyDescriptor * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaBeansPropertyDescriptor *descriptor = *b__++;
      if ([((NSString *) nil_chk(propertyName)) isEqual:[((JavaBeansPropertyDescriptor *) nil_chk(descriptor)) getName]]) {
        return descriptor;
      }
    }
  }
  @throw create_OrgAssertjCoreUtilIntrospectionIntrospectionError_initWithNSString_(OrgAssertjCoreUtilIntrospectionIntrospection_propertyNotFoundErrorMessageWithNSString_withId_(propertyName, target));
}

NSString *OrgAssertjCoreUtilIntrospectionIntrospection_propertyNotFoundErrorMessageWithNSString_withId_(NSString *propertyName, id target) {
  OrgAssertjCoreUtilIntrospectionIntrospection_initialize();
  NSString *targetTypeName = [[nil_chk(target) java_getClass] getName];
  NSString *property = OrgAssertjCoreUtilStrings_quoteWithNSString_(propertyName);
  JavaLangReflectMethod *getter = OrgAssertjCoreUtilIntrospectionIntrospection_findGetterWithNSString_withId_(propertyName, target);
  if (getter == nil) {
    return NSString_java_formatWithNSString_withNSObjectArray_(@"No getter for property %s in %s", [IOSObjectArray arrayWithObjects:(id[]){ property, targetTypeName } count:2 type:NSObject_class_()]);
  }
  if (!JavaLangReflectModifier_isPublicWithInt_([getter getModifiers])) {
    return NSString_java_formatWithNSString_withNSObjectArray_(@"No public getter for property %s in %s", [IOSObjectArray arrayWithObjects:(id[]){ property, targetTypeName } count:2 type:NSObject_class_()]);
  }
  return NSString_java_formatWithNSString_withNSObjectArray_(@"Unable to find property %s in %s", [IOSObjectArray arrayWithObjects:(id[]){ property, targetTypeName } count:2 type:NSObject_class_()]);
}

JavaLangReflectMethod *OrgAssertjCoreUtilIntrospectionIntrospection_findGetterWithNSString_withId_(NSString *propertyName, id target) {
  OrgAssertjCoreUtilIntrospectionIntrospection_initialize();
  NSString *capitalized = JreStrcat("$$", [((NSString *) nil_chk([((NSString *) nil_chk(propertyName)) java_substring:0 endIndex:1])) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)], [propertyName java_substring:1]);
  JavaLangReflectMethod *getter = OrgAssertjCoreUtilIntrospectionIntrospection_findMethodWithNSString_withId_(JreStrcat("$$", @"get", capitalized), target);
  if (getter != nil) {
    return getter;
  }
  return OrgAssertjCoreUtilIntrospectionIntrospection_findMethodWithNSString_withId_(JreStrcat("$$", @"is", capitalized), target);
}

JavaLangReflectMethod *OrgAssertjCoreUtilIntrospectionIntrospection_findMethodWithNSString_withId_(NSString *name, id target) {
  OrgAssertjCoreUtilIntrospectionIntrospection_initialize();
  @try {
    return [[nil_chk(target) java_getClass] getDeclaredMethod:name parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
  }
  @catch (NSException *t) {
    return nil;
  }
}

void OrgAssertjCoreUtilIntrospectionIntrospection_init(OrgAssertjCoreUtilIntrospectionIntrospection *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilIntrospectionIntrospection *new_OrgAssertjCoreUtilIntrospectionIntrospection_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilIntrospectionIntrospection, init)
}

OrgAssertjCoreUtilIntrospectionIntrospection *create_OrgAssertjCoreUtilIntrospectionIntrospection_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilIntrospectionIntrospection, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilIntrospectionIntrospection)
