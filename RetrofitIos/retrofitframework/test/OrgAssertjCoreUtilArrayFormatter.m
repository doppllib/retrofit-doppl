//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/util/ArrayFormatter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCorePresentationRepresentation.h"
#include "OrgAssertjCoreUtilArrayFormatter.h"
#include "OrgAssertjCoreUtilArrays.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Array.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"

@interface OrgAssertjCoreUtilArrayFormatter ()

- (NSString *)formatObjectArrayWithOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)p
                                                                     withId:(id)o;

- (void)deepToStringWithOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)p
                                               withNSObjectArray:(IOSObjectArray *)array
                                       withJavaLangStringBuilder:(JavaLangStringBuilder *)buffer
                                                 withJavaUtilSet:(id<JavaUtilSet>)alreadyFormatted;

- (jboolean)isObjectArrayWithId:(id)o;

- (NSString *)formatPrimitiveArrayWithOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)p
                                                                        withId:(id)o;

- (jboolean)isArrayTypePrimitiveWithId:(id)o;

- (JavaLangIllegalArgumentException *)notAnArrayOfPrimitivesWithId:(id)o;

@end

inline NSString *OrgAssertjCoreUtilArrayFormatter_get_NULL();
static NSString *OrgAssertjCoreUtilArrayFormatter_NULL = @"null";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreUtilArrayFormatter, NULL, NSString *)

__attribute__((unused)) static NSString *OrgAssertjCoreUtilArrayFormatter_formatObjectArrayWithOrgAssertjCorePresentationRepresentation_withId_(OrgAssertjCoreUtilArrayFormatter *self, id<OrgAssertjCorePresentationRepresentation> p, id o);

__attribute__((unused)) static void OrgAssertjCoreUtilArrayFormatter_deepToStringWithOrgAssertjCorePresentationRepresentation_withNSObjectArray_withJavaLangStringBuilder_withJavaUtilSet_(OrgAssertjCoreUtilArrayFormatter *self, id<OrgAssertjCorePresentationRepresentation> p, IOSObjectArray *array, JavaLangStringBuilder *buffer, id<JavaUtilSet> alreadyFormatted);

__attribute__((unused)) static jboolean OrgAssertjCoreUtilArrayFormatter_isObjectArrayWithId_(OrgAssertjCoreUtilArrayFormatter *self, id o);

__attribute__((unused)) static NSString *OrgAssertjCoreUtilArrayFormatter_formatPrimitiveArrayWithOrgAssertjCorePresentationRepresentation_withId_(OrgAssertjCoreUtilArrayFormatter *self, id<OrgAssertjCorePresentationRepresentation> p, id o);

__attribute__((unused)) static jboolean OrgAssertjCoreUtilArrayFormatter_isArrayTypePrimitiveWithId_(OrgAssertjCoreUtilArrayFormatter *self, id o);

__attribute__((unused)) static JavaLangIllegalArgumentException *OrgAssertjCoreUtilArrayFormatter_notAnArrayOfPrimitivesWithId_(OrgAssertjCoreUtilArrayFormatter *self, id o);

@implementation OrgAssertjCoreUtilArrayFormatter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilArrayFormatter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)formatWithOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)p
                                                          withId:(id)o {
  if (!OrgAssertjCoreUtilArrays_isArrayWithId_(o)) {
    return nil;
  }
  return OrgAssertjCoreUtilArrayFormatter_isObjectArrayWithId_(self, o) ? OrgAssertjCoreUtilArrayFormatter_formatObjectArrayWithOrgAssertjCorePresentationRepresentation_withId_(self, p, o) : OrgAssertjCoreUtilArrayFormatter_formatPrimitiveArrayWithOrgAssertjCorePresentationRepresentation_withId_(self, p, o);
}

- (NSString *)formatObjectArrayWithOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)p
                                                                     withId:(id)o {
  return OrgAssertjCoreUtilArrayFormatter_formatObjectArrayWithOrgAssertjCorePresentationRepresentation_withId_(self, p, o);
}

- (void)deepToStringWithOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)p
                                               withNSObjectArray:(IOSObjectArray *)array
                                       withJavaLangStringBuilder:(JavaLangStringBuilder *)buffer
                                                 withJavaUtilSet:(id<JavaUtilSet>)alreadyFormatted {
  OrgAssertjCoreUtilArrayFormatter_deepToStringWithOrgAssertjCorePresentationRepresentation_withNSObjectArray_withJavaLangStringBuilder_withJavaUtilSet_(self, p, array, buffer, alreadyFormatted);
}

- (jboolean)isObjectArrayWithId:(id)o {
  return OrgAssertjCoreUtilArrayFormatter_isObjectArrayWithId_(self, o);
}

- (NSString *)formatPrimitiveArrayWithOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)p
                                                                        withId:(id)o {
  return OrgAssertjCoreUtilArrayFormatter_formatPrimitiveArrayWithOrgAssertjCorePresentationRepresentation_withId_(self, p, o);
}

- (jboolean)isArrayTypePrimitiveWithId:(id)o {
  return OrgAssertjCoreUtilArrayFormatter_isArrayTypePrimitiveWithId_(self, o);
}

- (JavaLangIllegalArgumentException *)notAnArrayOfPrimitivesWithId:(id)o {
  return OrgAssertjCoreUtilArrayFormatter_notAnArrayOfPrimitivesWithId_(self, o);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 8, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0x2, 10, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(formatWithOrgAssertjCorePresentationRepresentation:withId:);
  methods[2].selector = @selector(formatObjectArrayWithOrgAssertjCorePresentationRepresentation:withId:);
  methods[3].selector = @selector(deepToStringWithOrgAssertjCorePresentationRepresentation:withNSObjectArray:withJavaLangStringBuilder:withJavaUtilSet:);
  methods[4].selector = @selector(isObjectArrayWithId:);
  methods[5].selector = @selector(formatPrimitiveArrayWithOrgAssertjCorePresentationRepresentation:withId:);
  methods[6].selector = @selector(isArrayTypePrimitiveWithId:);
  methods[7].selector = @selector(notAnArrayOfPrimitivesWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "format", "LOrgAssertjCorePresentationRepresentation;LNSObject;", "formatObjectArray", "deepToString", "LOrgAssertjCorePresentationRepresentation;[LNSObject;LJavaLangStringBuilder;LJavaUtilSet;", "(Lorg/assertj/core/presentation/Representation;[Ljava/lang/Object;Ljava/lang/StringBuilder;Ljava/util/Set<[Ljava/lang/Object;>;)V", "isObjectArray", "LNSObject;", "formatPrimitiveArray", "isArrayTypePrimitive", "notAnArrayOfPrimitives", &OrgAssertjCoreUtilArrayFormatter_NULL };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilArrayFormatter = { "ArrayFormatter", "org.assertj.core.util", ptrTable, methods, fields, 7, 0x10, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilArrayFormatter;
}

@end

void OrgAssertjCoreUtilArrayFormatter_init(OrgAssertjCoreUtilArrayFormatter *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilArrayFormatter *new_OrgAssertjCoreUtilArrayFormatter_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilArrayFormatter, init)
}

OrgAssertjCoreUtilArrayFormatter *create_OrgAssertjCoreUtilArrayFormatter_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilArrayFormatter, init)
}

NSString *OrgAssertjCoreUtilArrayFormatter_formatObjectArrayWithOrgAssertjCorePresentationRepresentation_withId_(OrgAssertjCoreUtilArrayFormatter *self, id<OrgAssertjCorePresentationRepresentation> p, id o) {
  IOSObjectArray *array = (IOSObjectArray *) cast_check(o, IOSClass_arrayType(NSObject_class_(), 1));
  jint size = ((IOSObjectArray *) nil_chk(array))->size_;
  if (size == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_initWithInt_((20 * (size - 1)));
  OrgAssertjCoreUtilArrayFormatter_deepToStringWithOrgAssertjCorePresentationRepresentation_withNSObjectArray_withJavaLangStringBuilder_withJavaUtilSet_(self, p, array, buffer, create_JavaUtilHashSet_init());
  return [buffer description];
}

void OrgAssertjCoreUtilArrayFormatter_deepToStringWithOrgAssertjCorePresentationRepresentation_withNSObjectArray_withJavaLangStringBuilder_withJavaUtilSet_(OrgAssertjCoreUtilArrayFormatter *self, id<OrgAssertjCorePresentationRepresentation> p, IOSObjectArray *array, JavaLangStringBuilder *buffer, id<JavaUtilSet> alreadyFormatted) {
  if (array == nil) {
    [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithNSString:OrgAssertjCoreUtilArrayFormatter_NULL];
    return;
  }
  [((id<JavaUtilSet>) nil_chk(alreadyFormatted)) addWithId:array];
  [((JavaLangStringBuilder *) nil_chk(buffer)) appendWithChar:'['];
  jint size = array->size_;
  for (jint i = 0; i < size; i++) {
    if (i != 0) {
      [buffer appendWithNSString:@", "];
    }
    id element = IOSObjectArray_Get(array, i);
    if (!OrgAssertjCoreUtilArrays_isArrayWithId_(element)) {
      [buffer appendWithNSString:element == nil ? OrgAssertjCoreUtilArrayFormatter_NULL : [((id<OrgAssertjCorePresentationRepresentation>) nil_chk(p)) toStringOfWithId:element]];
      continue;
    }
    if (!OrgAssertjCoreUtilArrayFormatter_isObjectArrayWithId_(self, element)) {
      [buffer appendWithNSString:OrgAssertjCoreUtilArrayFormatter_formatPrimitiveArrayWithOrgAssertjCorePresentationRepresentation_withId_(self, p, element)];
      continue;
    }
    if ([alreadyFormatted containsWithId:element]) {
      [buffer appendWithNSString:@"[...]"];
      continue;
    }
    OrgAssertjCoreUtilArrayFormatter_deepToStringWithOrgAssertjCorePresentationRepresentation_withNSObjectArray_withJavaLangStringBuilder_withJavaUtilSet_(self, p, (IOSObjectArray *) cast_check(element, IOSClass_arrayType(NSObject_class_(), 1)), buffer, alreadyFormatted);
  }
  [buffer appendWithChar:']'];
  [alreadyFormatted removeWithId:array];
}

jboolean OrgAssertjCoreUtilArrayFormatter_isObjectArrayWithId_(OrgAssertjCoreUtilArrayFormatter *self, id o) {
  return OrgAssertjCoreUtilArrays_isArrayWithId_(o) && !OrgAssertjCoreUtilArrayFormatter_isArrayTypePrimitiveWithId_(self, o);
}

NSString *OrgAssertjCoreUtilArrayFormatter_formatPrimitiveArrayWithOrgAssertjCorePresentationRepresentation_withId_(OrgAssertjCoreUtilArrayFormatter *self, id<OrgAssertjCorePresentationRepresentation> p, id o) {
  if (!OrgAssertjCoreUtilArrays_isArrayWithId_(o)) {
    return nil;
  }
  if (!OrgAssertjCoreUtilArrayFormatter_isArrayTypePrimitiveWithId_(self, o)) {
    @throw OrgAssertjCoreUtilArrayFormatter_notAnArrayOfPrimitivesWithId_(self, o);
  }
  jint size = JavaLangReflectArray_getLengthWithId_(o);
  if (size == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithChar:'['];
  [buffer appendWithNSString:[((id<OrgAssertjCorePresentationRepresentation>) nil_chk(p)) toStringOfWithId:JavaLangReflectArray_getWithId_withInt_(o, 0)]];
  for (jint i = 1; i < size; i++) {
    id element = JavaLangReflectArray_getWithId_withInt_(o, i);
    [buffer appendWithNSString:@", "];
    [buffer appendWithNSString:[p toStringOfWithId:element]];
  }
  [buffer appendWithNSString:@"]"];
  return [buffer description];
}

jboolean OrgAssertjCoreUtilArrayFormatter_isArrayTypePrimitiveWithId_(OrgAssertjCoreUtilArrayFormatter *self, id o) {
  return [((IOSClass *) nil_chk([[nil_chk(o) java_getClass] getComponentType])) isPrimitive];
}

JavaLangIllegalArgumentException *OrgAssertjCoreUtilArrayFormatter_notAnArrayOfPrimitivesWithId_(OrgAssertjCoreUtilArrayFormatter *self, id o) {
  return create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"<%s> is not an array of primitives", [IOSObjectArray arrayWithObjects:(id[]){ o } count:1 type:NSObject_class_()]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilArrayFormatter)
