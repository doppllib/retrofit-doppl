//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/InternalMaps.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreDataMapEntry.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeEmpty.h"
#include "OrgAssertjCoreErrorShouldBeNullOrEmpty.h"
#include "OrgAssertjCoreErrorShouldContain.h"
#include "OrgAssertjCoreErrorShouldContainExactly.h"
#include "OrgAssertjCoreErrorShouldContainKeys.h"
#include "OrgAssertjCoreErrorShouldContainOnly.h"
#include "OrgAssertjCoreErrorShouldContainOnlyKeys.h"
#include "OrgAssertjCoreErrorShouldContainValue.h"
#include "OrgAssertjCoreErrorShouldNotBeEmpty.h"
#include "OrgAssertjCoreErrorShouldNotContain.h"
#include "OrgAssertjCoreErrorShouldNotContainKey.h"
#include "OrgAssertjCoreErrorShouldNotContainValue.h"
#include "OrgAssertjCoreInternalCommonValidations.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalArrays.h"
#include "OrgAssertjCoreInternalInternalMaps.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreUtilObjects.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface OrgAssertjCoreInternalInternalMaps ()

- (void)compareActualMapAndExpectedKeysWithJavaUtilMap:(id<JavaUtilMap>)actual
                                     withNSObjectArray:(IOSObjectArray *)keys
                                       withJavaUtilSet:(id<JavaUtilSet>)notExpected
                                       withJavaUtilSet:(id<JavaUtilSet>)notFound;

- (void)compareActualMapAndExpectedEntriesWithJavaUtilMap:(id<JavaUtilMap>)actual
                      withOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries
                                          withJavaUtilSet:(id<JavaUtilSet>)notExpected
                                          withJavaUtilSet:(id<JavaUtilSet>)notFound;

- (void)doCommonContainsCheckWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withJavaUtilMap:(id<JavaUtilMap>)actual
                            withOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries;

+ (id<JavaUtilMap>)entriesToMapWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries;

+ (void)failIfEmptyWithNSObjectArray:(IOSObjectArray *)keys;

+ (void)failIfEmptyWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries;

+ (void)failIfNullOrEmptyWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries;

+ (void)failIfNullWithNSObjectArray:(IOSObjectArray *)keys;

+ (void)failIfNullWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries;

- (jboolean)containsEntryWithJavaUtilMap:(id<JavaUtilMap>)actual
          withOrgAssertjCoreDataMapEntry:(OrgAssertjCoreDataMapEntry *)entry_;

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaUtilMap:(id<JavaUtilMap>)actual;

+ (void)failIfEmptySinceActualIsNotEmptyWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)values;

@end

inline OrgAssertjCoreInternalInternalMaps *OrgAssertjCoreInternalInternalMaps_get_INSTANCE();
static OrgAssertjCoreInternalInternalMaps *OrgAssertjCoreInternalInternalMaps_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalInternalMaps, INSTANCE, OrgAssertjCoreInternalInternalMaps *)

__attribute__((unused)) static void OrgAssertjCoreInternalInternalMaps_compareActualMapAndExpectedKeysWithJavaUtilMap_withNSObjectArray_withJavaUtilSet_withJavaUtilSet_(OrgAssertjCoreInternalInternalMaps *self, id<JavaUtilMap> actual, IOSObjectArray *keys, id<JavaUtilSet> notExpected, id<JavaUtilSet> notFound);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalMaps_compareActualMapAndExpectedEntriesWithJavaUtilMap_withOrgAssertjCoreDataMapEntryArray_withJavaUtilSet_withJavaUtilSet_(OrgAssertjCoreInternalInternalMaps *self, id<JavaUtilMap> actual, IOSObjectArray *entries, id<JavaUtilSet> notExpected, id<JavaUtilSet> notFound);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalMaps_doCommonContainsCheckWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_withOrgAssertjCoreDataMapEntryArray_(OrgAssertjCoreInternalInternalMaps *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaUtilMap> actual, IOSObjectArray *entries);

__attribute__((unused)) static id<JavaUtilMap> OrgAssertjCoreInternalInternalMaps_entriesToMapWithOrgAssertjCoreDataMapEntryArray_(IOSObjectArray *entries);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalMaps_failIfEmptyWithNSObjectArray_(IOSObjectArray *keys);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalMaps_failIfEmptyWithOrgAssertjCoreDataMapEntryArray_(IOSObjectArray *entries);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalMaps_failIfNullOrEmptyWithOrgAssertjCoreDataMapEntryArray_(IOSObjectArray *entries);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalMaps_failIfNullWithNSObjectArray_(IOSObjectArray *keys);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalMaps_failIfNullWithOrgAssertjCoreDataMapEntryArray_(IOSObjectArray *entries);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalMaps_containsEntryWithJavaUtilMap_withOrgAssertjCoreDataMapEntry_(OrgAssertjCoreInternalInternalMaps *self, id<JavaUtilMap> actual, OrgAssertjCoreDataMapEntry *entry_);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(OrgAssertjCoreInternalInternalMaps *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaUtilMap> actual);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalMaps_failIfEmptySinceActualIsNotEmptyWithOrgAssertjCoreDataMapEntryArray_(IOSObjectArray *values);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalInternalMaps)

@implementation OrgAssertjCoreInternalInternalMaps

+ (OrgAssertjCoreInternalInternalMaps *)instance {
  return OrgAssertjCoreInternalInternalMaps_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInternalMaps_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaUtilMap:(id<JavaUtilMap>)actual {
  if (actual == nil || [actual isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeNullOrEmpty_shouldBeNullOrEmptyWithId_(actual)];
}

- (void)assertEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                      withJavaUtilMap:(id<JavaUtilMap>)actual {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  if ([((id<JavaUtilMap>) nil_chk(actual)) isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeEmpty_shouldBeEmptyWithId_(actual)];
}

- (void)assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaUtilMap:(id<JavaUtilMap>)actual {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  if (![((id<JavaUtilMap>) nil_chk(actual)) isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeEmpty_shouldNotBeEmpty()];
}

- (void)assertHasSizeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaUtilMap:(id<JavaUtilMap>)actual
                                                withInt:(jint)expectedSize {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  OrgAssertjCoreInternalCommonValidations_checkSizesWithId_withInt_withInt_withOrgAssertjCoreApiAssertionInfo_(actual, [((id<JavaUtilMap>) nil_chk(actual)) size], expectedSize, info);
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilMap:(id<JavaUtilMap>)map
                                         withJavaLangIterable:(id<JavaLangIterable>)other {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, map);
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withJavaLangIterable_withInt_(info, map, other, [((id<JavaUtilMap>) nil_chk(map)) size]);
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilMap:(id<JavaUtilMap>)map
                                                       withId:(id)other {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, map);
  OrgAssertjCoreInternalInternalArrays_assertIsArrayWithOrgAssertjCoreApiAssertionInfo_withId_(info, other);
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withId_withInt_(info, map, other, [((id<JavaUtilMap>) nil_chk(map)) size]);
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilMap:(id<JavaUtilMap>)map
                                              withJavaUtilMap:(id<JavaUtilMap>)other {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, map);
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withJavaUtilMap_withInt_(info, map, other, [((id<JavaUtilMap>) nil_chk(map)) size]);
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaUtilMap:(id<JavaUtilMap>)actual
                     withOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  OrgAssertjCoreInternalInternalMaps_failIfNullWithOrgAssertjCoreDataMapEntryArray_(entries);
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  if ([((id<JavaUtilMap>) nil_chk(actual)) isEmpty] && ((IOSObjectArray *) nil_chk(entries))->size_ == 0) return;
  OrgAssertjCoreInternalInternalMaps_failIfEmptySinceActualIsNotEmptyWithOrgAssertjCoreDataMapEntryArray_(entries);
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  {
    IOSObjectArray *a__ = entries;
    OrgAssertjCoreDataMapEntry * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgAssertjCoreDataMapEntry * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgAssertjCoreDataMapEntry *entry_ = *b__++;
      if (!OrgAssertjCoreInternalInternalMaps_containsEntryWithJavaUtilMap_withOrgAssertjCoreDataMapEntry_(self, actual, entry_)) {
        [notFound addWithId:entry_];
      }
    }
  }
  if ([notFound isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContain_shouldContainWithId_withId_withId_(actual, entries, notFound)];
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                               withJavaUtilMap:(id<JavaUtilMap>)actual
                           withOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  OrgAssertjCoreInternalInternalMaps_failIfNullOrEmptyWithOrgAssertjCoreDataMapEntryArray_(entries);
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  id<JavaUtilSet> found = create_JavaUtilLinkedHashSet_init();
  {
    IOSObjectArray *a__ = entries;
    OrgAssertjCoreDataMapEntry * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgAssertjCoreDataMapEntry * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgAssertjCoreDataMapEntry *entry_ = *b__++;
      if (OrgAssertjCoreInternalInternalMaps_containsEntryWithJavaUtilMap_withOrgAssertjCoreDataMapEntry_(self, actual, entry_)) {
        [found addWithId:entry_];
      }
    }
  }
  if ([found isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotContain_shouldNotContainWithId_withId_withId_(actual, entries, found)];
}

- (void)assertContainsKeysWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withJavaUtilMap:(id<JavaUtilMap>)actual
                                           withNSObjectArray:(IOSObjectArray *)keys {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  {
    IOSObjectArray *a__ = keys;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id key = *b__++;
      if (![((id<JavaUtilMap>) nil_chk(actual)) containsKeyWithId:key]) {
        [notFound addWithId:key];
      }
    }
  }
  if ([notFound isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainKeys_shouldContainKeysWithId_withJavaUtilSet_(actual, notFound)];
}

- (void)assertDoesNotContainKeyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withJavaUtilMap:(id<JavaUtilMap>)actual
                                                           withId:(id)key {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  if (![((id<JavaUtilMap>) nil_chk(actual)) containsKeyWithId:key]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotContainKey_shouldNotContainKeyWithId_withId_(actual, key)];
}

- (void)assertContainsOnlyKeysWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withJavaUtilMap:(id<JavaUtilMap>)actual
                                               withNSObjectArray:(IOSObjectArray *)keys {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  OrgAssertjCoreInternalInternalMaps_failIfNullWithNSObjectArray_(keys);
  if ([((id<JavaUtilMap>) nil_chk(actual)) isEmpty] && ((IOSObjectArray *) nil_chk(keys))->size_ == 0) {
    return;
  }
  OrgAssertjCoreInternalInternalMaps_failIfEmptyWithNSObjectArray_(keys);
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  id<JavaUtilSet> notExpected = create_JavaUtilLinkedHashSet_init();
  OrgAssertjCoreInternalInternalMaps_compareActualMapAndExpectedKeysWithJavaUtilMap_withNSObjectArray_withJavaUtilSet_withJavaUtilSet_(self, actual, keys, notExpected, notFound);
  if ([notFound isEmpty] && [notExpected isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainOnlyKeys_shouldContainOnlyKeysWithId_withId_withId_withId_(actual, keys, notFound, notExpected)];
}

- (void)assertContainsValueWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilMap:(id<JavaUtilMap>)actual
                                                       withId:(id)value {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  if ([((id<JavaUtilMap>) nil_chk(actual)) containsValueWithId:value]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainValue_shouldContainValueWithId_withId_(actual, value)];
}

- (void)assertDoesNotContainValueWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withJavaUtilMap:(id<JavaUtilMap>)actual
                                                             withId:(id)value {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  if (![((id<JavaUtilMap>) nil_chk(actual)) containsValueWithId:value]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotContainValue_shouldNotContainValueWithId_withId_(actual, value)];
}

- (void)assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withJavaUtilMap:(id<JavaUtilMap>)actual
                         withOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  OrgAssertjCoreInternalInternalMaps_doCommonContainsCheckWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_withOrgAssertjCoreDataMapEntryArray_(self, info, actual, entries);
  if ([((id<JavaUtilMap>) nil_chk(actual)) isEmpty] && ((IOSObjectArray *) nil_chk(entries))->size_ == 0) {
    return;
  }
  OrgAssertjCoreInternalInternalMaps_failIfEmptyWithOrgAssertjCoreDataMapEntryArray_(entries);
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  id<JavaUtilSet> notExpected = create_JavaUtilLinkedHashSet_init();
  OrgAssertjCoreInternalInternalMaps_compareActualMapAndExpectedEntriesWithJavaUtilMap_withOrgAssertjCoreDataMapEntryArray_withJavaUtilSet_withJavaUtilSet_(self, actual, entries, notExpected, notFound);
  if ([notFound isEmpty] && [notExpected isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainOnly_shouldContainOnlyWithId_withId_withId_withId_(actual, entries, notFound, notExpected)];
}

- (void)assertContainsExactlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withJavaUtilMap:(id<JavaUtilMap>)actual
                            withOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  OrgAssertjCoreInternalInternalMaps_doCommonContainsCheckWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_withOrgAssertjCoreDataMapEntryArray_(self, info, actual, entries);
  if ([((id<JavaUtilMap>) nil_chk(actual)) isEmpty] && ((IOSObjectArray *) nil_chk(entries))->size_ == 0) {
    return;
  }
  OrgAssertjCoreInternalInternalMaps_failIfEmptyWithOrgAssertjCoreDataMapEntryArray_(entries);
  [self assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info withJavaUtilMap:actual withId:entries];
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  id<JavaUtilSet> notExpected = create_JavaUtilLinkedHashSet_init();
  OrgAssertjCoreInternalInternalMaps_compareActualMapAndExpectedEntriesWithJavaUtilMap_withOrgAssertjCoreDataMapEntryArray_withJavaUtilSet_withJavaUtilSet_(self, actual, entries, notExpected, notFound);
  if ([notExpected isEmpty] && [notFound isEmpty]) {
    jint index = 0;
    for (id __strong keyFromActual in nil_chk([actual keySet])) {
      if (!OrgAssertjCoreUtilObjects_areEqualWithId_withId_(keyFromActual, ((OrgAssertjCoreDataMapEntry *) nil_chk(IOSObjectArray_Get(nil_chk(entries), index)))->key_)) {
        OrgAssertjCoreDataMapEntry *actualEntry = OrgAssertjCoreDataMapEntry_entry__WithId_withId_(keyFromActual, [actual getWithId:keyFromActual]);
        @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withInt_(actualEntry, IOSObjectArray_Get(entries, index), index)];
      }
      index++;
    }
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withId_withId_(actual, entries, notFound, notExpected)];
}

- (void)compareActualMapAndExpectedKeysWithJavaUtilMap:(id<JavaUtilMap>)actual
                                     withNSObjectArray:(IOSObjectArray *)keys
                                       withJavaUtilSet:(id<JavaUtilSet>)notExpected
                                       withJavaUtilSet:(id<JavaUtilSet>)notFound {
  OrgAssertjCoreInternalInternalMaps_compareActualMapAndExpectedKeysWithJavaUtilMap_withNSObjectArray_withJavaUtilSet_withJavaUtilSet_(self, actual, keys, notExpected, notFound);
}

- (void)compareActualMapAndExpectedEntriesWithJavaUtilMap:(id<JavaUtilMap>)actual
                      withOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries
                                          withJavaUtilSet:(id<JavaUtilSet>)notExpected
                                          withJavaUtilSet:(id<JavaUtilSet>)notFound {
  OrgAssertjCoreInternalInternalMaps_compareActualMapAndExpectedEntriesWithJavaUtilMap_withOrgAssertjCoreDataMapEntryArray_withJavaUtilSet_withJavaUtilSet_(self, actual, entries, notExpected, notFound);
}

- (void)doCommonContainsCheckWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withJavaUtilMap:(id<JavaUtilMap>)actual
                            withOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  OrgAssertjCoreInternalInternalMaps_doCommonContainsCheckWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_withOrgAssertjCoreDataMapEntryArray_(self, info, actual, entries);
}

+ (id<JavaUtilMap>)entriesToMapWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  return OrgAssertjCoreInternalInternalMaps_entriesToMapWithOrgAssertjCoreDataMapEntryArray_(entries);
}

+ (void)failIfEmptyWithNSObjectArray:(IOSObjectArray *)keys {
  OrgAssertjCoreInternalInternalMaps_failIfEmptyWithNSObjectArray_(keys);
}

+ (void)failIfEmptyWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  OrgAssertjCoreInternalInternalMaps_failIfEmptyWithOrgAssertjCoreDataMapEntryArray_(entries);
}

+ (void)failIfNullOrEmptyWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  OrgAssertjCoreInternalInternalMaps_failIfNullOrEmptyWithOrgAssertjCoreDataMapEntryArray_(entries);
}

+ (void)failIfNullWithNSObjectArray:(IOSObjectArray *)keys {
  OrgAssertjCoreInternalInternalMaps_failIfNullWithNSObjectArray_(keys);
}

+ (void)failIfNullWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  OrgAssertjCoreInternalInternalMaps_failIfNullWithOrgAssertjCoreDataMapEntryArray_(entries);
}

- (jboolean)containsEntryWithJavaUtilMap:(id<JavaUtilMap>)actual
          withOrgAssertjCoreDataMapEntry:(OrgAssertjCoreDataMapEntry *)entry_ {
  return OrgAssertjCoreInternalInternalMaps_containsEntryWithJavaUtilMap_withOrgAssertjCoreDataMapEntry_(self, actual, entry_);
}

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaUtilMap:(id<JavaUtilMap>)actual {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
}

+ (void)failIfEmptySinceActualIsNotEmptyWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalInternalMaps_failIfEmptySinceActualIsNotEmptyWithOrgAssertjCoreDataMapEntryArray_(values);
}

- (void)dealloc {
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalInternalMaps;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 8, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 8, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x81, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, 22, 11, -1, 23, -1, -1 },
    { NULL, "V", 0x81, 24, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, 25, 11, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 27, 11, -1, 26, -1, -1 },
    { NULL, "V", 0x81, 28, 16, -1, 29, -1, -1 },
    { NULL, "V", 0x81, 30, 16, -1, 29, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x2, 37, 16, -1, 29, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 38, 39, -1, 40, -1, -1 },
    { NULL, "V", 0xa, 41, 42, -1, 43, -1, -1 },
    { NULL, "V", 0xa, 41, 39, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 44, 39, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 45, 42, -1, 43, -1, -1 },
    { NULL, "V", 0xa, 45, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 46, 47, -1, 48, -1, -1 },
    { NULL, "V", 0x2, 49, 1, -1, 2, -1, -1 },
    { NULL, "V", 0xa, 50, 39, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:);
  methods[3].selector = @selector(assertEmptyWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:);
  methods[4].selector = @selector(assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:);
  methods[5].selector = @selector(assertHasSizeWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withInt:);
  methods[6].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withJavaLangIterable:);
  methods[7].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withId:);
  methods[8].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withJavaUtilMap:);
  methods[9].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withOrgAssertjCoreDataMapEntryArray:);
  methods[10].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withOrgAssertjCoreDataMapEntryArray:);
  methods[11].selector = @selector(assertContainsKeysWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withNSObjectArray:);
  methods[12].selector = @selector(assertDoesNotContainKeyWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withId:);
  methods[13].selector = @selector(assertContainsOnlyKeysWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withNSObjectArray:);
  methods[14].selector = @selector(assertContainsValueWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withId:);
  methods[15].selector = @selector(assertDoesNotContainValueWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withId:);
  methods[16].selector = @selector(assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withOrgAssertjCoreDataMapEntryArray:);
  methods[17].selector = @selector(assertContainsExactlyWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withOrgAssertjCoreDataMapEntryArray:);
  methods[18].selector = @selector(compareActualMapAndExpectedKeysWithJavaUtilMap:withNSObjectArray:withJavaUtilSet:withJavaUtilSet:);
  methods[19].selector = @selector(compareActualMapAndExpectedEntriesWithJavaUtilMap:withOrgAssertjCoreDataMapEntryArray:withJavaUtilSet:withJavaUtilSet:);
  methods[20].selector = @selector(doCommonContainsCheckWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:withOrgAssertjCoreDataMapEntryArray:);
  methods[21].selector = @selector(entriesToMapWithOrgAssertjCoreDataMapEntryArray:);
  methods[22].selector = @selector(failIfEmptyWithNSObjectArray:);
  methods[23].selector = @selector(failIfEmptyWithOrgAssertjCoreDataMapEntryArray:);
  methods[24].selector = @selector(failIfNullOrEmptyWithOrgAssertjCoreDataMapEntryArray:);
  methods[25].selector = @selector(failIfNullWithNSObjectArray:);
  methods[26].selector = @selector(failIfNullWithOrgAssertjCoreDataMapEntryArray:);
  methods[27].selector = @selector(containsEntryWithJavaUtilMap:withOrgAssertjCoreDataMapEntry:);
  methods[28].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withJavaUtilMap:);
  methods[29].selector = @selector(failIfEmptySinceActualIsNotEmptyWithOrgAssertjCoreDataMapEntryArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalInternalMaps;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "assertNullOrEmpty", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilMap;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/util/Map<**>;)V", "assertEmpty", "assertNotEmpty", "assertHasSize", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilMap;I", "(Lorg/assertj/core/api/AssertionInfo;Ljava/util/Map<**>;I)V", "assertHasSameSizeAs", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilMap;LJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/util/Map<**>;Ljava/lang/Iterable<*>;)V", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilMap;LNSObject;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/util/Map<**>;Ljava/lang/Object;)V", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilMap;LJavaUtilMap;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/util/Map<**>;Ljava/util/Map<**>;)V", "assertContains", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilMap;[LOrgAssertjCoreDataMapEntry;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/util/Map<**>;[Lorg/assertj/core/data/MapEntry;)V", "assertDoesNotContain", "assertContainsKeys", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilMap;[LNSObject;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Ljava/util/Map<TK;TV;>;[TK;)V", "assertDoesNotContainKey", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Ljava/util/Map<TK;TV;>;TK;)V", "assertContainsOnlyKeys", "assertContainsValue", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Ljava/util/Map<TK;TV;>;TV;)V", "assertDoesNotContainValue", "assertContainsOnly", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Ljava/util/Map<TK;TV;>;[Lorg/assertj/core/data/MapEntry;)V", "assertContainsExactly", "compareActualMapAndExpectedKeys", "LJavaUtilMap;[LNSObject;LJavaUtilSet;LJavaUtilSet;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;[TK;Ljava/util/Set<TK;>;Ljava/util/Set<TK;>;)V", "compareActualMapAndExpectedEntries", "LJavaUtilMap;[LOrgAssertjCoreDataMapEntry;LJavaUtilSet;LJavaUtilSet;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;[Lorg/assertj/core/data/MapEntry;Ljava/util/Set<Lorg/assertj/core/data/MapEntry;>;Ljava/util/Set<Lorg/assertj/core/data/MapEntry;>;)V", "doCommonContainsCheck", "entriesToMap", "[LOrgAssertjCoreDataMapEntry;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>([Lorg/assertj/core/data/MapEntry;)Ljava/util/Map<TK;TV;>;", "failIfEmpty", "[LNSObject;", "<K:Ljava/lang/Object;>([TK;)V", "failIfNullOrEmpty", "failIfNull", "containsEntry", "LJavaUtilMap;LOrgAssertjCoreDataMapEntry;", "(Ljava/util/Map<**>;Lorg/assertj/core/data/MapEntry;)Z", "assertNotNull", "failIfEmptySinceActualIsNotEmpty", &OrgAssertjCoreInternalInternalMaps_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInternalMaps = { "InternalMaps", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 30, 2, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInternalMaps;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalInternalMaps class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalInternalMaps_INSTANCE, new_OrgAssertjCoreInternalInternalMaps_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalInternalMaps)
  }
}

@end

OrgAssertjCoreInternalInternalMaps *OrgAssertjCoreInternalInternalMaps_instance() {
  OrgAssertjCoreInternalInternalMaps_initialize();
  return OrgAssertjCoreInternalInternalMaps_INSTANCE;
}

void OrgAssertjCoreInternalInternalMaps_init(OrgAssertjCoreInternalInternalMaps *self) {
  NSObject_init(self);
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
}

OrgAssertjCoreInternalInternalMaps *new_OrgAssertjCoreInternalInternalMaps_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalMaps, init)
}

OrgAssertjCoreInternalInternalMaps *create_OrgAssertjCoreInternalInternalMaps_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalMaps, init)
}

void OrgAssertjCoreInternalInternalMaps_compareActualMapAndExpectedKeysWithJavaUtilMap_withNSObjectArray_withJavaUtilSet_withJavaUtilSet_(OrgAssertjCoreInternalInternalMaps *self, id<JavaUtilMap> actual, IOSObjectArray *keys, id<JavaUtilSet> notExpected, id<JavaUtilSet> notFound) {
  id<JavaUtilMap> actualEntries = create_JavaUtilLinkedHashMap_initWithJavaUtilMap_(actual);
  {
    IOSObjectArray *a__ = keys;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id key = *b__++;
      if ([actualEntries containsKeyWithId:key]) {
        [actualEntries removeWithId:key];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(notFound)) addWithId:key];
      }
    }
  }
  for (id __strong key in nil_chk([actualEntries keySet])) {
    [((id<JavaUtilSet>) nil_chk(notExpected)) addWithId:key];
  }
}

void OrgAssertjCoreInternalInternalMaps_compareActualMapAndExpectedEntriesWithJavaUtilMap_withOrgAssertjCoreDataMapEntryArray_withJavaUtilSet_withJavaUtilSet_(OrgAssertjCoreInternalInternalMaps *self, id<JavaUtilMap> actual, IOSObjectArray *entries, id<JavaUtilSet> notExpected, id<JavaUtilSet> notFound) {
  id<JavaUtilMap> expectedEntries = OrgAssertjCoreInternalInternalMaps_entriesToMapWithOrgAssertjCoreDataMapEntryArray_(entries);
  id<JavaUtilMap> actualEntries = create_JavaUtilLinkedHashMap_initWithJavaUtilMap_(actual);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(expectedEntries)) entrySet])) {
    if (OrgAssertjCoreInternalInternalMaps_containsEntryWithJavaUtilMap_withOrgAssertjCoreDataMapEntry_(self, actualEntries, OrgAssertjCoreDataMapEntry_entry__WithId_withId_([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [entry_ getValue]))) {
      [actualEntries removeWithId:[entry_ getKey]];
    }
    else {
      [((id<JavaUtilSet>) nil_chk(notFound)) addWithId:OrgAssertjCoreDataMapEntry_entry__WithId_withId_([entry_ getKey], [entry_ getValue])];
    }
  }
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([actualEntries entrySet])) {
    [((id<JavaUtilSet>) nil_chk(notExpected)) addWithId:OrgAssertjCoreDataMapEntry_entry__WithId_withId_([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [entry_ getValue])];
  }
}

void OrgAssertjCoreInternalInternalMaps_doCommonContainsCheckWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_withOrgAssertjCoreDataMapEntryArray_(OrgAssertjCoreInternalInternalMaps *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaUtilMap> actual, IOSObjectArray *entries) {
  OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(self, info, actual);
  OrgAssertjCoreInternalInternalMaps_failIfNullWithOrgAssertjCoreDataMapEntryArray_(entries);
}

id<JavaUtilMap> OrgAssertjCoreInternalInternalMaps_entriesToMapWithOrgAssertjCoreDataMapEntryArray_(IOSObjectArray *entries) {
  OrgAssertjCoreInternalInternalMaps_initialize();
  id<JavaUtilMap> expectedEntries = create_JavaUtilLinkedHashMap_init();
  {
    IOSObjectArray *a__ = entries;
    OrgAssertjCoreDataMapEntry * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgAssertjCoreDataMapEntry * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgAssertjCoreDataMapEntry *entry_ = *b__++;
      [expectedEntries putWithId:((OrgAssertjCoreDataMapEntry *) nil_chk(entry_))->key_ withId:entry_->value_];
    }
  }
  return expectedEntries;
}

void OrgAssertjCoreInternalInternalMaps_failIfEmptyWithNSObjectArray_(IOSObjectArray *keys) {
  OrgAssertjCoreInternalInternalMaps_initialize();
  if (((IOSObjectArray *) nil_chk(keys))->size_ == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The array of keys to look for should not be empty");
  }
}

void OrgAssertjCoreInternalInternalMaps_failIfEmptyWithOrgAssertjCoreDataMapEntryArray_(IOSObjectArray *entries) {
  OrgAssertjCoreInternalInternalMaps_initialize();
  if (((IOSObjectArray *) nil_chk(entries))->size_ == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The array of entries to look for should not be empty");
  }
}

void OrgAssertjCoreInternalInternalMaps_failIfNullOrEmptyWithOrgAssertjCoreDataMapEntryArray_(IOSObjectArray *entries) {
  OrgAssertjCoreInternalInternalMaps_initialize();
  OrgAssertjCoreInternalInternalMaps_failIfNullWithOrgAssertjCoreDataMapEntryArray_(entries);
  OrgAssertjCoreInternalInternalMaps_failIfEmptyWithOrgAssertjCoreDataMapEntryArray_(entries);
}

void OrgAssertjCoreInternalInternalMaps_failIfNullWithNSObjectArray_(IOSObjectArray *keys) {
  OrgAssertjCoreInternalInternalMaps_initialize();
  if (keys == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The array of keys to look for should not be null");
  }
}

void OrgAssertjCoreInternalInternalMaps_failIfNullWithOrgAssertjCoreDataMapEntryArray_(IOSObjectArray *entries) {
  OrgAssertjCoreInternalInternalMaps_initialize();
  if (entries == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The array of entries to look for should not be null");
  }
}

jboolean OrgAssertjCoreInternalInternalMaps_containsEntryWithJavaUtilMap_withOrgAssertjCoreDataMapEntry_(OrgAssertjCoreInternalInternalMaps *self, id<JavaUtilMap> actual, OrgAssertjCoreDataMapEntry *entry_) {
  if (entry_ == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Entries to look for should not be null");
  }
  if (![((id<JavaUtilMap>) nil_chk(actual)) containsKeyWithId:entry_->key_]) {
    return false;
  }
  return OrgAssertjCoreUtilObjects_areEqualWithId_withId_([actual getWithId:entry_->key_], entry_->value_);
}

void OrgAssertjCoreInternalInternalMaps_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilMap_(OrgAssertjCoreInternalInternalMaps *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaUtilMap> actual) {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
}

void OrgAssertjCoreInternalInternalMaps_failIfEmptySinceActualIsNotEmptyWithOrgAssertjCoreDataMapEntryArray_(IOSObjectArray *values) {
  OrgAssertjCoreInternalInternalMaps_initialize();
  if (((IOSObjectArray *) nil_chk(values))->size_ == 0) @throw create_JavaLangAssertionError_initWithId_(@"actual is not empty");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInternalMaps)
