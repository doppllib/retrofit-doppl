//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldBeEqualWithTimePrecision.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeEqualWithTimePrecision.h"
#include "java/util/Date.h"
#include "java/util/concurrent/TimeUnit.h"

@interface OrgAssertjCoreErrorShouldBeEqualWithTimePrecision ()

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)expected
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)precision;

+ (NSString *)buildErrorMessageTemplateWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)precision;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(OrgAssertjCoreErrorShouldBeEqualWithTimePrecision *self, JavaUtilDate *actual, JavaUtilDate *expected, JavaUtilConcurrentTimeUnit *precision);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeEqualWithTimePrecision *new_OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(JavaUtilDate *actual, JavaUtilDate *expected, JavaUtilConcurrentTimeUnit *precision) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeEqualWithTimePrecision *create_OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(JavaUtilDate *actual, JavaUtilDate *expected, JavaUtilConcurrentTimeUnit *precision);

__attribute__((unused)) static NSString *OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_buildErrorMessageTemplateWithJavaUtilConcurrentTimeUnit_(JavaUtilConcurrentTimeUnit *precision);

@implementation OrgAssertjCoreErrorShouldBeEqualWithTimePrecision

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeEqualWithJavaUtilDate:(JavaUtilDate *)actual
                                                           withJavaUtilDate:(JavaUtilDate *)expected
                                             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)precision {
  return OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_shouldBeEqualWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(actual, expected, precision);
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)expected
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)precision {
  OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(self, actual, expected, precision);
  return self;
}

+ (NSString *)buildErrorMessageTemplateWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)precision {
  return OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_buildErrorMessageTemplateWithJavaUtilConcurrentTimeUnit_(precision);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeEqualWithJavaUtilDate:withJavaUtilDate:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(initWithJavaUtilDate:withJavaUtilDate:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(buildErrorMessageTemplateWithJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeEqual", "LJavaUtilDate;LJavaUtilDate;LJavaUtilConcurrentTimeUnit;", "buildErrorMessageTemplate", "LJavaUtilConcurrentTimeUnit;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeEqualWithTimePrecision = { "ShouldBeEqualWithTimePrecision", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeEqualWithTimePrecision;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_shouldBeEqualWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(JavaUtilDate *actual, JavaUtilDate *expected, JavaUtilConcurrentTimeUnit *precision) {
  OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_initialize();
  return create_OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(actual, expected, precision);
}

void OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(OrgAssertjCoreErrorShouldBeEqualWithTimePrecision *self, JavaUtilDate *actual, JavaUtilDate *expected, JavaUtilConcurrentTimeUnit *precision) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_buildErrorMessageTemplateWithJavaUtilConcurrentTimeUnit_(precision), [IOSObjectArray arrayWithObjects:(id[]){ actual, expected } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeEqualWithTimePrecision *new_OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(JavaUtilDate *actual, JavaUtilDate *expected, JavaUtilConcurrentTimeUnit *precision) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeEqualWithTimePrecision, initWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_, actual, expected, precision)
}

OrgAssertjCoreErrorShouldBeEqualWithTimePrecision *create_OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(JavaUtilDate *actual, JavaUtilDate *expected, JavaUtilConcurrentTimeUnit *precision) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeEqualWithTimePrecision, initWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_, actual, expected, precision)
}

NSString *OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_buildErrorMessageTemplateWithJavaUtilConcurrentTimeUnit_(JavaUtilConcurrentTimeUnit *precision) {
  OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_initialize();
  NSString *fields = @"";
  NSString *lastField = @"";
  if ([((JavaUtilConcurrentTimeUnit *) nil_chk(precision)) isEqual:JreLoadEnum(JavaUtilConcurrentTimeUnit, HOURS)]) {
    lastField = @"day";
  }
  else if ([precision isEqual:JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES)]) {
    fields = @", day";
    lastField = @"hour";
  }
  else if ([precision isEqual:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)]) {
    fields = @", day, hour";
    lastField = @"minute";
  }
  else if ([precision isEqual:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]) {
    fields = @", day, hour, minute";
    lastField = @"second";
  }
  return JreStrcat("$$$$$", @"\nExpecting:\n  <%s>\nto have same year, month", fields, @" and ", lastField, @" as:\n  <%s>\nbut had not.");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeEqualWithTimePrecision)
