//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/InputStreams.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveEqualContent.h"
#include "OrgAssertjCoreInternalDiff.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInputStreams.h"
#include "OrgAssertjCoreInternalInputStreamsException.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/AssertionError.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"

@interface OrgAssertjCoreInternalInputStreams ()

+ (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                  withJavaIoInputStream:(JavaIoInputStream *)stream;

@end

inline OrgAssertjCoreInternalInputStreams *OrgAssertjCoreInternalInputStreams_get_INSTANCE();
static OrgAssertjCoreInternalInputStreams *OrgAssertjCoreInternalInputStreams_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalInputStreams, INSTANCE, OrgAssertjCoreInternalInputStreams *)

__attribute__((unused)) static void OrgAssertjCoreInternalInputStreams_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoInputStream_(id<OrgAssertjCoreApiAssertionInfo> info, JavaIoInputStream *stream);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalInputStreams)

@implementation OrgAssertjCoreInternalInputStreams

+ (OrgAssertjCoreInternalInputStreams *)instance {
  return OrgAssertjCoreInternalInputStreams_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInputStreams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)assertEqualContentWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaIoInputStream:(JavaIoInputStream *)actual
                                       withJavaIoInputStream:(JavaIoInputStream *)expected {
  if (expected == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The InputStream to compare to should not be null");
  OrgAssertjCoreInternalInputStreams_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoInputStream_(info, actual);
  @try {
    id<JavaUtilList> diffs = [((OrgAssertjCoreInternalDiff *) nil_chk(diff_)) diffWithJavaIoInputStream:actual withJavaIoInputStream:expected];
    if ([((id<JavaUtilList>) nil_chk(diffs)) isEmpty]) return;
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveEqualContent_shouldHaveEqualContentWithJavaIoInputStream_withJavaIoInputStream_withJavaUtilList_(actual, expected, diffs)];
  }
  @catch (JavaIoIOException *e) {
    NSString *msg = NSString_java_formatWithNSString_withNSObjectArray_(@"Unable to compare contents of InputStreams:\n  <%s>\nand:\n  <%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected } count:2 type:NSObject_class_()]);
    @throw create_OrgAssertjCoreInternalInputStreamsException_initWithNSString_withNSException_(msg, e);
  }
}

+ (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                  withJavaIoInputStream:(JavaIoInputStream *)stream {
  OrgAssertjCoreInternalInputStreams_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoInputStream_(info, stream);
}

- (void)dealloc {
  RELEASE_(diff_);
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalInputStreams;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(assertEqualContentWithOrgAssertjCoreApiAssertionInfo:withJavaIoInputStream:withJavaIoInputStream:);
  methods[3].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalInputStreams;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "diff_", "LOrgAssertjCoreInternalDiff;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "assertEqualContent", "LOrgAssertjCoreApiAssertionInfo;LJavaIoInputStream;LJavaIoInputStream;", "assertNotNull", "LOrgAssertjCoreApiAssertionInfo;LJavaIoInputStream;", &OrgAssertjCoreInternalInputStreams_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInputStreams = { "InputStreams", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInputStreams;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalInputStreams class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalInputStreams_INSTANCE, new_OrgAssertjCoreInternalInputStreams_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalInputStreams)
  }
}

@end

OrgAssertjCoreInternalInputStreams *OrgAssertjCoreInternalInputStreams_instance() {
  OrgAssertjCoreInternalInputStreams_initialize();
  return OrgAssertjCoreInternalInputStreams_INSTANCE;
}

void OrgAssertjCoreInternalInputStreams_init(OrgAssertjCoreInternalInputStreams *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->diff_, new_OrgAssertjCoreInternalDiff_init());
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
}

OrgAssertjCoreInternalInputStreams *new_OrgAssertjCoreInternalInputStreams_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInputStreams, init)
}

OrgAssertjCoreInternalInputStreams *create_OrgAssertjCoreInternalInputStreams_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInputStreams, init)
}

void OrgAssertjCoreInternalInputStreams_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoInputStream_(id<OrgAssertjCoreApiAssertionInfo> info, JavaIoInputStream *stream) {
  OrgAssertjCoreInternalInputStreams_initialize();
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:stream];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInputStreams)
