//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/ComparatorBasedComparisonStrategy.java
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreInternalAbstractComparisonStrategy.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCorePresentationStandardRepresentation.h"
#include "OrgAssertjCoreUtilIterables.h"
#include "java/lang/Iterable.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface OrgAssertjCoreInternalComparatorBasedComparisonStrategy () {
 @public
  id<JavaUtilComparator> comparator_;
}

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalComparatorBasedComparisonStrategy, comparator_, id<JavaUtilComparator>)

inline OrgAssertjCorePresentationStandardRepresentation *OrgAssertjCoreInternalComparatorBasedComparisonStrategy_get_STANDARD_REPRESENTATION();
static OrgAssertjCorePresentationStandardRepresentation *OrgAssertjCoreInternalComparatorBasedComparisonStrategy_STANDARD_REPRESENTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalComparatorBasedComparisonStrategy, STANDARD_REPRESENTATION, OrgAssertjCorePresentationStandardRepresentation *)

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalComparatorBasedComparisonStrategy)

@implementation OrgAssertjCoreInternalComparatorBasedComparisonStrategy

- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(self, comparator);
  return self;
}

- (jboolean)iterableContainsWithJavaLangIterable:(id<JavaLangIterable>)iterable
                                          withId:(id)value {
  if (OrgAssertjCoreUtilIterables_isNullOrEmptyWithJavaLangIterable_(iterable)) return false;
  for (id __strong element in nil_chk(iterable)) {
    if (element == value) return true;
    if (value == nil || element == nil) continue;
    if ([((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:element withId:value] == 0) return true;
  }
  return false;
}

- (void)iterableRemovesWithJavaLangIterable:(id<JavaLangIterable>)iterable
                                     withId:(id)value {
  if (iterable == nil) return;
  id<JavaUtilIterator> iterator = [iterable iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    if ([((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:[iterator next] withId:value] == 0) {
      [iterator remove];
    }
  }
}

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other {
  if (actual == nil) return other == nil;
  if (other == nil) return false;
  return [((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:actual withId:other] == 0;
}

- (id<JavaLangIterable>)duplicatesFromWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  return [super duplicatesFromWithJavaLangIterable:iterable];
}

- (id<JavaUtilSet>)newSetUsingComparisonStrategy {
  return create_JavaUtilTreeSet_initWithJavaUtilComparator_(comparator_);
}

- (NSString *)asText {
  return JreStrcat("$$", @"when comparing values using ", [((OrgAssertjCorePresentationStandardRepresentation *) nil_chk(OrgAssertjCoreInternalComparatorBasedComparisonStrategy_STANDARD_REPRESENTATION)) toStringOfWithId:comparator_]);
}

- (NSString *)description {
  return [((OrgAssertjCorePresentationStandardRepresentation *) nil_chk(OrgAssertjCoreInternalComparatorBasedComparisonStrategy_STANDARD_REPRESENTATION)) toStringOfWithId:comparator_];
}

- (id<JavaUtilComparator>)getComparator {
  return comparator_;
}

- (jboolean)stringStartsWithWithNSString:(NSString *)string
                            withNSString:(NSString *)prefix {
  if (((jint) [((NSString *) nil_chk(string)) length]) < ((jint) [((NSString *) nil_chk(prefix)) length])) return false;
  NSString *stringPrefix = [string java_substring:0 endIndex:((jint) [prefix length])];
  return [((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:stringPrefix withId:prefix] == 0;
}

- (jboolean)stringEndsWithWithNSString:(NSString *)string
                          withNSString:(NSString *)suffix {
  if (((jint) [((NSString *) nil_chk(string)) length]) < ((jint) [((NSString *) nil_chk(suffix)) length])) return false;
  NSString *stringSuffix = [string java_substring:((jint) [string length]) - ((jint) [suffix length])];
  return [((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:stringSuffix withId:suffix] == 0;
}

- (jboolean)stringContainsWithNSString:(NSString *)string
                          withNSString:(NSString *)sequence {
  jint sequenceLength = ((jint) [((NSString *) nil_chk(sequence)) length]);
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(string)) length]); i++) {
    NSString *subString = [string java_substring:i];
    if (((jint) [((NSString *) nil_chk(subString)) length]) < sequenceLength) return false;
    if ([self stringStartsWithWithNSString:subString withNSString:sequence]) return true;
  }
  return false;
}

- (jboolean)isGreaterThanWithId:(id)actual
                         withId:(id)other {
  return [((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:actual withId:other] > 0;
}

- (jboolean)isStandard {
  return false;
}

- (void)dealloc {
  RELEASE_(comparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x4, -1, -1, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilComparator:);
  methods[1].selector = @selector(iterableContainsWithJavaLangIterable:withId:);
  methods[2].selector = @selector(iterableRemovesWithJavaLangIterable:withId:);
  methods[3].selector = @selector(areEqualWithId:withId:);
  methods[4].selector = @selector(duplicatesFromWithJavaLangIterable:);
  methods[5].selector = @selector(newSetUsingComparisonStrategy);
  methods[6].selector = @selector(asText);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(getComparator);
  methods[9].selector = @selector(stringStartsWithWithNSString:withNSString:);
  methods[10].selector = @selector(stringEndsWithWithNSString:withNSString:);
  methods[11].selector = @selector(stringContainsWithNSString:withNSString:);
  methods[12].selector = @selector(isGreaterThanWithId:withId:);
  methods[13].selector = @selector(isStandard);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STANDARD_REPRESENTATION", "LOrgAssertjCorePresentationStandardRepresentation;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilComparator;", "iterableContains", "LJavaLangIterable;LNSObject;", "(Ljava/lang/Iterable<*>;Ljava/lang/Object;)Z", "iterableRemoves", "(Ljava/lang/Iterable<*>;Ljava/lang/Object;)V", "areEqual", "LNSObject;LNSObject;", "duplicatesFrom", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)Ljava/lang/Iterable<*>;", "()Ljava/util/Set<Ljava/lang/Object;>;", "toString", "()Ljava/util/Comparator<*>;", "stringStartsWith", "LNSString;LNSString;", "stringEndsWith", "stringContains", "isGreaterThan", &OrgAssertjCoreInternalComparatorBasedComparisonStrategy_STANDARD_REPRESENTATION };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalComparatorBasedComparisonStrategy = { "ComparatorBasedComparisonStrategy", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 14, 2, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalComparatorBasedComparisonStrategy;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalComparatorBasedComparisonStrategy class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalComparatorBasedComparisonStrategy_STANDARD_REPRESENTATION, new_OrgAssertjCorePresentationStandardRepresentation_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalComparatorBasedComparisonStrategy)
  }
}

@end

void OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(OrgAssertjCoreInternalComparatorBasedComparisonStrategy *self, id<JavaUtilComparator> comparator) {
  OrgAssertjCoreInternalAbstractComparisonStrategy_init(self);
  JreStrongAssign(&self->comparator_, comparator);
}

OrgAssertjCoreInternalComparatorBasedComparisonStrategy *new_OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalComparatorBasedComparisonStrategy, initWithJavaUtilComparator_, comparator)
}

OrgAssertjCoreInternalComparatorBasedComparisonStrategy *create_OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalComparatorBasedComparisonStrategy, initWithJavaUtilComparator_, comparator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalComparatorBasedComparisonStrategy)
