//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldNotContainKey.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldNotContainKey.h"

@interface OrgAssertjCoreErrorShouldNotContainKey ()

- (instancetype)initWithId:(id)actual
                    withId:(id)key;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldNotContainKey_initWithId_withId_(OrgAssertjCoreErrorShouldNotContainKey *self, id actual, id key);

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotContainKey *new_OrgAssertjCoreErrorShouldNotContainKey_initWithId_withId_(id actual, id key) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotContainKey *create_OrgAssertjCoreErrorShouldNotContainKey_initWithId_withId_(id actual, id key);

@implementation OrgAssertjCoreErrorShouldNotContainKey

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotContainKeyWithId:(id)actual
                                                                 withId:(id)key {
  return OrgAssertjCoreErrorShouldNotContainKey_shouldNotContainKeyWithId_withId_(actual, key);
}

- (instancetype)initWithId:(id)actual
                    withId:(id)key {
  OrgAssertjCoreErrorShouldNotContainKey_initWithId_withId_(self, actual, key);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldNotContainKeyWithId:withId:);
  methods[1].selector = @selector(initWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldNotContainKey", "LNSObject;LNSObject;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldNotContainKey = { "ShouldNotContainKey", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldNotContainKey;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotContainKey_shouldNotContainKeyWithId_withId_(id actual, id key) {
  OrgAssertjCoreErrorShouldNotContainKey_initialize();
  return create_OrgAssertjCoreErrorShouldNotContainKey_initWithId_withId_(actual, key);
}

void OrgAssertjCoreErrorShouldNotContainKey_initWithId_withId_(OrgAssertjCoreErrorShouldNotContainKey *self, id actual, id key) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nnot to contain key:\n <%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual, key } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldNotContainKey *new_OrgAssertjCoreErrorShouldNotContainKey_initWithId_withId_(id actual, id key) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldNotContainKey, initWithId_withId_, actual, key)
}

OrgAssertjCoreErrorShouldNotContainKey *create_OrgAssertjCoreErrorShouldNotContainKey_initWithId_withId_(id actual, id key) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldNotContainKey, initWithId_withId_, actual, key)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldNotContainKey)
