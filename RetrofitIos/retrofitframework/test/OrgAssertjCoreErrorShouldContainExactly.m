//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldContainExactly.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldContainExactly.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/lang/Integer.h"

@interface OrgAssertjCoreErrorShouldContainExactly ()

- (instancetype)initWithId:(id)actual
                    withId:(id)expected
                    withId:(id)notFound
                    withId:(id)notExpected
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

- (instancetype)initWithId:(id)actualElement
                    withId:(id)expectedElement
                   withInt:(jint)indexOfDifferentElements
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainExactly *self, id actual, id expected, id notFound, id notExpected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainExactly *new_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id notFound, id notExpected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainExactly *create_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id notFound, id notExpected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static void OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainExactly *self, id actualElement, id expectedElement, jint indexOfDifferentElements, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainExactly *new_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id actualElement, id expectedElement, jint indexOfDifferentElements, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainExactly *create_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id actualElement, id expectedElement, jint indexOfDifferentElements, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

@implementation OrgAssertjCoreErrorShouldContainExactly

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainExactlyWithId:(id)actual
                                                                  withId:(id)expected
                                                                  withId:(id)notFound
                                                                  withId:(id)notExpected
                            withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, expected, notFound, notExpected, comparisonStrategy);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainExactlyWithId:(id)actual
                                                                  withId:(id)expected
                                                                  withId:(id)notFound
                                                                  withId:(id)notExpected {
  return OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withId_withId_(actual, expected, notFound, notExpected);
}

- (instancetype)initWithId:(id)actual
                    withId:(id)expected
                    withId:(id)notFound
                    withId:(id)notExpected
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, expected, notFound, notExpected, comparisonStrategy);
  return self;
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainExactlyWithId:(id)actualElement
                                                                  withId:(id)expectedElement
                                                                 withInt:(jint)indexOfDifferentElements
                            withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(actualElement, expectedElement, indexOfDifferentElements, comparisonStrategy);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainExactlyWithId:(id)actualElement
                                                                  withId:(id)expectedElement
                                                                 withInt:(jint)indexOfDifferentElements {
  return OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withInt_(actualElement, expectedElement, indexOfDifferentElements);
}

- (instancetype)initWithId:(id)actualElement
                    withId:(id)expectedElement
                   withInt:(jint)indexOfDifferentElements
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(self, actualElement, expectedElement, indexOfDifferentElements, comparisonStrategy);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldContainExactlyWithId:withId:withId:withId:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[1].selector = @selector(shouldContainExactlyWithId:withId:withId:withId:);
  methods[2].selector = @selector(initWithId:withId:withId:withId:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(shouldContainExactlyWithId:withId:withInt:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[4].selector = @selector(shouldContainExactlyWithId:withId:withInt:);
  methods[5].selector = @selector(initWithId:withId:withInt:withOrgAssertjCoreInternalComparisonStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldContainExactly", "LNSObject;LNSObject;LNSObject;LNSObject;LOrgAssertjCoreInternalComparisonStrategy;", "LNSObject;LNSObject;LNSObject;LNSObject;", "LNSObject;LNSObject;ILOrgAssertjCoreInternalComparisonStrategy;", "LNSObject;LNSObject;I" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldContainExactly = { "ShouldContainExactly", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldContainExactly;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id notFound, id notExpected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldContainExactly_initialize();
  return create_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, expected, notFound, notExpected, comparisonStrategy);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withId_withId_(id actual, id expected, id notFound, id notExpected) {
  OrgAssertjCoreErrorShouldContainExactly_initialize();
  return create_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, expected, notFound, notExpected, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

void OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainExactly *self, id actual, id expected, id notFound, id notExpected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto contain exactly (and in same order):\n <%s>\nbut some elements were not found:\n <%s>\nand others were not expected:\n <%s>\n%s", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected, notFound, notExpected, comparisonStrategy } count:5 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldContainExactly *new_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id notFound, id notExpected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldContainExactly, initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, notFound, notExpected, comparisonStrategy)
}

OrgAssertjCoreErrorShouldContainExactly *create_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id notFound, id notExpected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldContainExactly, initWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, notFound, notExpected, comparisonStrategy)
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id actualElement, id expectedElement, jint indexOfDifferentElements, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldContainExactly_initialize();
  return create_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(actualElement, expectedElement, indexOfDifferentElements, comparisonStrategy);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withInt_(id actualElement, id expectedElement, jint indexOfDifferentElements) {
  OrgAssertjCoreErrorShouldContainExactly_initialize();
  return create_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(actualElement, expectedElement, indexOfDifferentElements, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

void OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainExactly *self, id actualElement, id expectedElement, jint indexOfDifferentElements, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nActual and expected have the same elements but not in the same order, at index %s actual element was:\n <%s>\nwhereas expected element was:\n <%s>\n%s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(indexOfDifferentElements), actualElement, expectedElement, comparisonStrategy } count:4 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldContainExactly *new_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id actualElement, id expectedElement, jint indexOfDifferentElements, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldContainExactly, initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_, actualElement, expectedElement, indexOfDifferentElements, comparisonStrategy)
}

OrgAssertjCoreErrorShouldContainExactly *create_OrgAssertjCoreErrorShouldContainExactly_initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id actualElement, id expectedElement, jint indexOfDifferentElements, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldContainExactly, initWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_, actualElement, expectedElement, indexOfDifferentElements, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldContainExactly)
