//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/util/Strings.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilArrays.h"
#include "OrgAssertjCoreUtilLists.h"
#include "OrgAssertjCoreUtilStrings.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface OrgAssertjCoreUtilStrings ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgAssertjCoreUtilStrings_init(OrgAssertjCoreUtilStrings *self);

__attribute__((unused)) static OrgAssertjCoreUtilStrings *new_OrgAssertjCoreUtilStrings_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreUtilStrings *create_OrgAssertjCoreUtilStrings_init();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreUtilStrings__Annotations$0();

@interface OrgAssertjCoreUtilStrings_StringsToJoin () {
 @public
  IOSObjectArray *strings_;
}

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreUtilStrings_StringsToJoin, strings_, IOSObjectArray *)

@interface OrgAssertjCoreUtilStrings_StringToAppend () {
 @public
  NSString *toAppend_;
}

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreUtilStrings_StringToAppend, toAppend_, NSString *)

@implementation OrgAssertjCoreUtilStrings

+ (jboolean)isNullOrEmptyWithNSString:(NSString *)s {
  return OrgAssertjCoreUtilStrings_isNullOrEmptyWithNSString_(s);
}

+ (jboolean)isEmptyWithNSString:(NSString *)s {
  return OrgAssertjCoreUtilStrings_isEmptyWithNSString_(s);
}

+ (NSString *)quoteWithNSString:(NSString *)s {
  return OrgAssertjCoreUtilStrings_quoteWithNSString_(s);
}

+ (id)quoteWithId:(id)o {
  return OrgAssertjCoreUtilStrings_quoteWithId_(o);
}

+ (NSString *)concatWithNSObjectArray:(IOSObjectArray *)objects {
  return OrgAssertjCoreUtilStrings_concatWithNSObjectArray_(objects);
}

+ (NSString *)formatIfArgsWithNSString:(NSString *)message
                     withNSObjectArray:(IOSObjectArray *)args {
  return OrgAssertjCoreUtilStrings_formatIfArgsWithNSString_withNSObjectArray_(message, args);
}

+ (OrgAssertjCoreUtilStrings_StringsToJoin *)joinWithNSStringArray:(IOSObjectArray *)strings {
  return OrgAssertjCoreUtilStrings_joinWithNSStringArray_(strings);
}

+ (OrgAssertjCoreUtilStrings_StringsToJoin *)joinWithJavaLangIterable:(id<JavaLangIterable>)toStringable {
  return OrgAssertjCoreUtilStrings_joinWithJavaLangIterable_(toStringable);
}

+ (OrgAssertjCoreUtilStrings_StringToAppend *)appendWithNSString:(NSString *)toAppend {
  return OrgAssertjCoreUtilStrings_appendWithNSString_(toAppend);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilStrings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, 3, -1 },
    { NULL, "LNSString;", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreUtilStrings_StringsToJoin;", 0x89, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreUtilStrings_StringsToJoin;", 0x9, 10, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreUtilStrings_StringToAppend;", 0x9, 14, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isNullOrEmptyWithNSString:);
  methods[1].selector = @selector(isEmptyWithNSString:);
  methods[2].selector = @selector(quoteWithNSString:);
  methods[3].selector = @selector(quoteWithId:);
  methods[4].selector = @selector(concatWithNSObjectArray:);
  methods[5].selector = @selector(formatIfArgsWithNSString:withNSObjectArray:);
  methods[6].selector = @selector(joinWithNSStringArray:);
  methods[7].selector = @selector(joinWithJavaLangIterable:);
  methods[8].selector = @selector(appendWithNSString:);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isNullOrEmpty", "LNSString;", "isEmpty", (void *)&OrgAssertjCoreUtilStrings__Annotations$0, "quote", "LNSObject;", "concat", "[LNSObject;", "formatIfArgs", "LNSString;[LNSObject;", "join", "[LNSString;", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)Lorg/assertj/core/util/Strings$StringsToJoin;", "append", "LOrgAssertjCoreUtilStrings_StringsToJoin;LOrgAssertjCoreUtilStrings_StringToAppend;" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilStrings = { "Strings", "org.assertj.core.util", ptrTable, methods, NULL, 7, 0x11, 10, 0, -1, 15, -1, -1, -1 };
  return &_OrgAssertjCoreUtilStrings;
}

@end

jboolean OrgAssertjCoreUtilStrings_isNullOrEmptyWithNSString_(NSString *s) {
  OrgAssertjCoreUtilStrings_initialize();
  return s == nil || ((jint) [s length]) == 0;
}

jboolean OrgAssertjCoreUtilStrings_isEmptyWithNSString_(NSString *s) {
  OrgAssertjCoreUtilStrings_initialize();
  return OrgAssertjCoreUtilStrings_isNullOrEmptyWithNSString_(s);
}

NSString *OrgAssertjCoreUtilStrings_quoteWithNSString_(NSString *s) {
  OrgAssertjCoreUtilStrings_initialize();
  return s != nil ? OrgAssertjCoreUtilStrings_concatWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"'", s, @"'" } count:3 type:NSObject_class_()]) : nil;
}

id OrgAssertjCoreUtilStrings_quoteWithId_(id o) {
  OrgAssertjCoreUtilStrings_initialize();
  return [o isKindOfClass:[NSString class]] ? OrgAssertjCoreUtilStrings_quoteWithNSString_([nil_chk(o) description]) : o;
}

NSString *OrgAssertjCoreUtilStrings_concatWithNSObjectArray_(IOSObjectArray *objects) {
  OrgAssertjCoreUtilStrings_initialize();
  if (OrgAssertjCoreUtilArrays_isNullOrEmptyWithNSObjectArray_(objects)) {
    return nil;
  }
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ = objects;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id o = *b__++;
      [b appendWithId:o];
    }
  }
  return [b description];
}

NSString *OrgAssertjCoreUtilStrings_formatIfArgsWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args) {
  OrgAssertjCoreUtilStrings_initialize();
  return OrgAssertjCoreUtilArrays_isNullOrEmptyWithNSObjectArray_(args) ? message : NSString_java_formatWithNSString_withNSObjectArray_(message, args);
}

OrgAssertjCoreUtilStrings_StringsToJoin *OrgAssertjCoreUtilStrings_joinWithNSStringArray_(IOSObjectArray *strings) {
  OrgAssertjCoreUtilStrings_initialize();
  return create_OrgAssertjCoreUtilStrings_StringsToJoin_initWithNSStringArray_(strings);
}

OrgAssertjCoreUtilStrings_StringsToJoin *OrgAssertjCoreUtilStrings_joinWithJavaLangIterable_(id<JavaLangIterable> toStringable) {
  OrgAssertjCoreUtilStrings_initialize();
  id<JavaUtilList> strings = OrgAssertjCoreUtilLists_newArrayList();
  for (id __strong o in nil_chk(toStringable)) {
    [((id<JavaUtilList>) nil_chk(strings)) addWithId:NSString_java_valueOf_(o)];
  }
  return create_OrgAssertjCoreUtilStrings_StringsToJoin_initWithNSStringArray_([((id<JavaUtilList>) nil_chk(strings)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[strings size] type:NSString_class_()]]);
}

OrgAssertjCoreUtilStrings_StringToAppend *OrgAssertjCoreUtilStrings_appendWithNSString_(NSString *toAppend) {
  OrgAssertjCoreUtilStrings_initialize();
  return create_OrgAssertjCoreUtilStrings_StringToAppend_initWithNSString_(toAppend);
}

void OrgAssertjCoreUtilStrings_init(OrgAssertjCoreUtilStrings *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilStrings *new_OrgAssertjCoreUtilStrings_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilStrings, init)
}

OrgAssertjCoreUtilStrings *create_OrgAssertjCoreUtilStrings_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilStrings, init)
}

IOSObjectArray *OrgAssertjCoreUtilStrings__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilStrings)

@implementation OrgAssertjCoreUtilStrings_StringsToJoin

- (instancetype)initWithNSStringArray:(IOSObjectArray *)strings {
  OrgAssertjCoreUtilStrings_StringsToJoin_initWithNSStringArray_(self, strings);
  return self;
}

- (NSString *)withWithNSString:(NSString *)delimiter {
  return [self withWithNSString:delimiter withNSString:nil];
}

- (NSString *)withWithNSString:(NSString *)delimiter
                  withNSString:(NSString *)escapeString {
  if (delimiter == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Delimiter should not be null");
  }
  if (OrgAssertjCoreUtilArrays_isNullOrEmptyWithNSObjectArray_(strings_)) {
    return @"";
  }
  NSString *escape = escapeString == nil ? @"" : escapeString;
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  jint stringCount = ((IOSObjectArray *) nil_chk(strings_))->size_;
  for (jint i = 0; i < stringCount; i++) {
    NSString *s = IOSObjectArray_Get(strings_, i);
    if (s != nil) {
      [b appendWithNSString:escape];
      [b appendWithNSString:s];
      [b appendWithNSString:escape];
    }
    if (i < stringCount - 1) {
      [b appendWithNSString:delimiter];
    }
  }
  return [b description];
}

- (void)dealloc {
  RELEASE_(strings_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(withWithNSString:);
  methods[2].selector = @selector(withWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "strings_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "with", "LNSString;", "LNSString;LNSString;", "LOrgAssertjCoreUtilStrings;" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilStrings_StringsToJoin = { "StringsToJoin", "org.assertj.core.util", ptrTable, methods, fields, 7, 0x9, 3, 1, 4, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilStrings_StringsToJoin;
}

@end

void OrgAssertjCoreUtilStrings_StringsToJoin_initWithNSStringArray_(OrgAssertjCoreUtilStrings_StringsToJoin *self, IOSObjectArray *strings) {
  NSObject_init(self);
  JreStrongAssign(&self->strings_, strings);
}

OrgAssertjCoreUtilStrings_StringsToJoin *new_OrgAssertjCoreUtilStrings_StringsToJoin_initWithNSStringArray_(IOSObjectArray *strings) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilStrings_StringsToJoin, initWithNSStringArray_, strings)
}

OrgAssertjCoreUtilStrings_StringsToJoin *create_OrgAssertjCoreUtilStrings_StringsToJoin_initWithNSStringArray_(IOSObjectArray *strings) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilStrings_StringsToJoin, initWithNSStringArray_, strings)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilStrings_StringsToJoin)

@implementation OrgAssertjCoreUtilStrings_StringToAppend

- (instancetype)initWithNSString:(NSString *)toAppend {
  OrgAssertjCoreUtilStrings_StringToAppend_initWithNSString_(self, toAppend);
  return self;
}

- (NSString *)toWithNSString:(NSString *)s {
  if (![((NSString *) nil_chk(s)) hasSuffix:toAppend_]) {
    return OrgAssertjCoreUtilStrings_concatWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ s, toAppend_ } count:2 type:NSObject_class_()]);
  }
  return s;
}

- (void)dealloc {
  RELEASE_(toAppend_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(toWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "toAppend_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "to", "LOrgAssertjCoreUtilStrings;" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilStrings_StringToAppend = { "StringToAppend", "org.assertj.core.util", ptrTable, methods, fields, 7, 0x9, 2, 1, 2, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilStrings_StringToAppend;
}

@end

void OrgAssertjCoreUtilStrings_StringToAppend_initWithNSString_(OrgAssertjCoreUtilStrings_StringToAppend *self, NSString *toAppend) {
  NSObject_init(self);
  JreStrongAssign(&self->toAppend_, toAppend);
}

OrgAssertjCoreUtilStrings_StringToAppend *new_OrgAssertjCoreUtilStrings_StringToAppend_initWithNSString_(NSString *toAppend) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilStrings_StringToAppend, initWithNSString_, toAppend)
}

OrgAssertjCoreUtilStrings_StringToAppend *create_OrgAssertjCoreUtilStrings_StringToAppend_initWithNSString_(NSString *toAppend) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilStrings_StringToAppend, initWithNSString_, toAppend)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilStrings_StringToAppend)
