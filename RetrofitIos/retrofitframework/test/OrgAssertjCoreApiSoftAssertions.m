//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/SoftAssertions.java
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractSoftAssertions.h"
#include "OrgAssertjCoreApiSoftAssertions.h"
#include "java/lang/UnsupportedOperationException.h"

@implementation OrgAssertjCoreApiSoftAssertions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreApiSoftAssertions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)assertAll {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"asdf");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(assertAll);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _OrgAssertjCoreApiSoftAssertions = { "SoftAssertions", "org.assertj.core.api", NULL, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreApiSoftAssertions;
}

@end

void OrgAssertjCoreApiSoftAssertions_init(OrgAssertjCoreApiSoftAssertions *self) {
  OrgAssertjCoreApiAbstractSoftAssertions_init(self);
}

OrgAssertjCoreApiSoftAssertions *new_OrgAssertjCoreApiSoftAssertions_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiSoftAssertions, init)
}

OrgAssertjCoreApiSoftAssertions *create_OrgAssertjCoreApiSoftAssertions_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiSoftAssertions, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiSoftAssertions)
