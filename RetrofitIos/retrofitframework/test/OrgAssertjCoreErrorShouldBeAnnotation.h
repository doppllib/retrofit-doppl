//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldBeAnnotation.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldBeAnnotation")
#ifdef RESTRICT_OrgAssertjCoreErrorShouldBeAnnotation
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldBeAnnotation 0
#else
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldBeAnnotation 1
#endif
#undef RESTRICT_OrgAssertjCoreErrorShouldBeAnnotation

#if !defined (OrgAssertjCoreErrorShouldBeAnnotation_) && (INCLUDE_ALL_OrgAssertjCoreErrorShouldBeAnnotation || defined(INCLUDE_OrgAssertjCoreErrorShouldBeAnnotation))
#define OrgAssertjCoreErrorShouldBeAnnotation_

#define RESTRICT_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#define INCLUDE_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"

@class IOSClass;
@protocol OrgAssertjCoreErrorErrorMessageFactory;

@interface OrgAssertjCoreErrorShouldBeAnnotation : OrgAssertjCoreErrorBasicErrorMessageFactory

#pragma mark Public

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeAnnotationWithIOSClass:(IOSClass *)actual;

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotBeAnnotationWithIOSClass:(IOSClass *)actual;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreErrorShouldBeAnnotation)

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeAnnotation_shouldBeAnnotationWithIOSClass_(IOSClass *actual);

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeAnnotation_shouldNotBeAnnotationWithIOSClass_(IOSClass *actual);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreErrorShouldBeAnnotation)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldBeAnnotation")
