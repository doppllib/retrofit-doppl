//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/retrofit/mime/MultipartTypedOutputTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractCharSequenceAssert.h"
#include "OrgAssertjCoreApiAbstractLongAssert.h"
#include "OrgAssertjCoreApiAssertions.h"
#include "RetrofitMimeMultipartTypedOutput.h"
#include "RetrofitMimeMultipartTypedOutputTest.h"
#include "RetrofitMimeTypedString.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RetrofitMimeMultipartTypedOutputTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RetrofitMimeMultipartTypedOutputTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RetrofitMimeMultipartTypedOutputTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RetrofitMimeMultipartTypedOutputTest__Annotations$3();

@interface RetrofitMimeMultipartTypedOutputTest_1 : RetrofitMimeTypedString

- (instancetype)initWithNSString:(NSString *)string;

- (jlong)length;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitMimeMultipartTypedOutputTest_1)

__attribute__((unused)) static void RetrofitMimeMultipartTypedOutputTest_1_initWithNSString_(RetrofitMimeMultipartTypedOutputTest_1 *self, NSString *string);

__attribute__((unused)) static RetrofitMimeMultipartTypedOutputTest_1 *new_RetrofitMimeMultipartTypedOutputTest_1_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitMimeMultipartTypedOutputTest_1 *create_RetrofitMimeMultipartTypedOutputTest_1_initWithNSString_(NSString *string);

@implementation RetrofitMimeMultipartTypedOutputTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitMimeMultipartTypedOutputTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)singlePart {
  NSString *expected = @"--123\x0d\nContent-Disposition: form-data; name=\"greet\"\x0d\nContent-Type: text/plain; charset=UTF-8\x0d\nContent-Length: 13\x0d\nContent-Transfer-Encoding: binary\x0d\n\x0d\nHello, World!\x0d\n--123--\x0d\n";
  RetrofitMimeMultipartTypedOutput *mto = create_RetrofitMimeMultipartTypedOutput_initWithNSString_(@"123");
  [mto addPartWithNSString:@"greet" withRetrofitMimeTypedOutput:create_RetrofitMimeTypedString_initWithNSString_(@"Hello, World!")];
  JavaIoByteArrayOutputStream *out = create_JavaIoByteArrayOutputStream_init();
  [mto writeToWithJavaIoOutputStream:out];
  NSString *actual = [NSString java_stringWithBytes:[out toByteArray] charsetName:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(actual))) isEqualToWithId:expected];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([mto mimeType]))) isEqualToWithId:@"multipart/form-data; boundary=123"];
}

- (void)singlePartWithTransferEncoding {
  NSString *expected = @"--123\x0d\nContent-Disposition: form-data; name=\"greet\"\x0d\nContent-Type: text/plain; charset=UTF-8\x0d\nContent-Length: 13\x0d\nContent-Transfer-Encoding: 8-bit\x0d\n\x0d\nHello, World!\x0d\n--123--\x0d\n";
  RetrofitMimeMultipartTypedOutput *mto = create_RetrofitMimeMultipartTypedOutput_initWithNSString_(@"123");
  [mto addPartWithNSString:@"greet" withNSString:@"8-bit" withRetrofitMimeTypedOutput:create_RetrofitMimeTypedString_initWithNSString_(@"Hello, World!")];
  JavaIoByteArrayOutputStream *out = create_JavaIoByteArrayOutputStream_init();
  [mto writeToWithJavaIoOutputStream:out];
  NSString *actual = [NSString java_stringWithBytes:[out toByteArray] charsetName:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(actual))) isEqualToWithId:expected];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([mto mimeType]))) isEqualToWithId:@"multipart/form-data; boundary=123"];
}

- (void)threeParts {
  NSString *expected = @"--123\x0d\nContent-Disposition: form-data; name=\"quick\"\x0d\nContent-Type: text/plain; charset=UTF-8\x0d\nContent-Length: 5\x0d\nContent-Transfer-Encoding: binary\x0d\n\x0d\nbrown\x0d\n--123\x0d\nContent-Disposition: form-data; name=\"fox\"\x0d\nContent-Type: text/plain; charset=UTF-8\x0d\nContent-Length: 5\x0d\nContent-Transfer-Encoding: binary\x0d\n\x0d\njumps\x0d\n--123\x0d\nContent-Disposition: form-data; name=\"lazy\"\x0d\nContent-Type: text/plain; charset=UTF-8\x0d\nContent-Length: 3\x0d\nContent-Transfer-Encoding: binary\x0d\n\x0d\ndog\x0d\n--123--\x0d\n";
  RetrofitMimeMultipartTypedOutput *mto = create_RetrofitMimeMultipartTypedOutput_initWithNSString_(@"123");
  [mto addPartWithNSString:@"quick" withRetrofitMimeTypedOutput:create_RetrofitMimeTypedString_initWithNSString_(@"brown")];
  [mto addPartWithNSString:@"fox" withRetrofitMimeTypedOutput:create_RetrofitMimeTypedString_initWithNSString_(@"jumps")];
  [mto addPartWithNSString:@"lazy" withRetrofitMimeTypedOutput:create_RetrofitMimeTypedString_initWithNSString_(@"dog")];
  JavaIoByteArrayOutputStream *out = create_JavaIoByteArrayOutputStream_init();
  [mto writeToWithJavaIoOutputStream:out];
  NSString *actual = [NSString java_stringWithBytes:[out toByteArray] charsetName:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(actual))) isEqualToWithId:expected];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([mto mimeType]))) isEqualToWithId:@"multipart/form-data; boundary=123"];
}

- (void)withPartOfUnknownLength {
  RetrofitMimeMultipartTypedOutput *mto = create_RetrofitMimeMultipartTypedOutput_initWithNSString_(@"123");
  [mto addPartWithNSString:@"first" withRetrofitMimeTypedOutput:create_RetrofitMimeTypedString_initWithNSString_(@"value")];
  [mto addPartWithNSString:@"second" withRetrofitMimeTypedOutput:create_RetrofitMimeMultipartTypedOutputTest_1_initWithNSString_(@"unknown size")];
  [((OrgAssertjCoreApiAbstractLongAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithLong_([mto length]))) isEqualToWithLong:-1];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, 4, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(singlePart);
  methods[2].selector = @selector(singlePartWithTransferEncoding);
  methods[3].selector = @selector(threeParts);
  methods[4].selector = @selector(withPartOfUnknownLength);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", (void *)&RetrofitMimeMultipartTypedOutputTest__Annotations$0, (void *)&RetrofitMimeMultipartTypedOutputTest__Annotations$1, (void *)&RetrofitMimeMultipartTypedOutputTest__Annotations$2, (void *)&RetrofitMimeMultipartTypedOutputTest__Annotations$3 };
  static const J2ObjcClassInfo _RetrofitMimeMultipartTypedOutputTest = { "MultipartTypedOutputTest", "retrofit.mime", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_RetrofitMimeMultipartTypedOutputTest;
}

@end

void RetrofitMimeMultipartTypedOutputTest_init(RetrofitMimeMultipartTypedOutputTest *self) {
  NSObject_init(self);
}

RetrofitMimeMultipartTypedOutputTest *new_RetrofitMimeMultipartTypedOutputTest_init() {
  J2OBJC_NEW_IMPL(RetrofitMimeMultipartTypedOutputTest, init)
}

RetrofitMimeMultipartTypedOutputTest *create_RetrofitMimeMultipartTypedOutputTest_init() {
  J2OBJC_CREATE_IMPL(RetrofitMimeMultipartTypedOutputTest, init)
}

IOSObjectArray *RetrofitMimeMultipartTypedOutputTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitMimeMultipartTypedOutputTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitMimeMultipartTypedOutputTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitMimeMultipartTypedOutputTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitMimeMultipartTypedOutputTest)

@implementation RetrofitMimeMultipartTypedOutputTest_1

- (instancetype)initWithNSString:(NSString *)string {
  RetrofitMimeMultipartTypedOutputTest_1_initWithNSString_(self, string);
  return self;
}

- (jlong)length {
  return -1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(length);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LRetrofitMimeMultipartTypedOutputTest;", "withPartOfUnknownLength" };
  static const J2ObjcClassInfo _RetrofitMimeMultipartTypedOutputTest_1 = { "", "retrofit.mime", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 1, -1, 2, -1, -1 };
  return &_RetrofitMimeMultipartTypedOutputTest_1;
}

@end

void RetrofitMimeMultipartTypedOutputTest_1_initWithNSString_(RetrofitMimeMultipartTypedOutputTest_1 *self, NSString *string) {
  RetrofitMimeTypedString_initWithNSString_(self, string);
}

RetrofitMimeMultipartTypedOutputTest_1 *new_RetrofitMimeMultipartTypedOutputTest_1_initWithNSString_(NSString *string) {
  J2OBJC_NEW_IMPL(RetrofitMimeMultipartTypedOutputTest_1, initWithNSString_, string)
}

RetrofitMimeMultipartTypedOutputTest_1 *create_RetrofitMimeMultipartTypedOutputTest_1_initWithNSString_(NSString *string) {
  J2OBJC_CREATE_IMPL(RetrofitMimeMultipartTypedOutputTest_1, initWithNSString_, string)
}
