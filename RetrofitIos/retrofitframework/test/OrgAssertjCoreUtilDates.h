//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/util/Dates.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreUtilDates")
#ifdef RESTRICT_OrgAssertjCoreUtilDates
#define INCLUDE_ALL_OrgAssertjCoreUtilDates 0
#else
#define INCLUDE_ALL_OrgAssertjCoreUtilDates 1
#endif
#undef RESTRICT_OrgAssertjCoreUtilDates

#if !defined (OrgAssertjCoreUtilDates_) && (INCLUDE_ALL_OrgAssertjCoreUtilDates || defined(INCLUDE_OrgAssertjCoreUtilDates))
#define OrgAssertjCoreUtilDates_

@class JavaTextDateFormat;
@class JavaUtilCalendar;
@class JavaUtilDate;

@interface OrgAssertjCoreUtilDates : NSObject

#pragma mark Public

- (instancetype)init;

+ (jint)dayOfMonthOfWithJavaUtilDate:(JavaUtilDate *)date;

+ (jint)dayOfWeekOfWithJavaUtilDate:(JavaUtilDate *)date;

+ (NSString *)formatAsDatetimeWithJavaUtilCalendar:(JavaUtilCalendar *)calendar;

+ (NSString *)formatAsDatetimeWithJavaUtilDate:(JavaUtilDate *)date;

+ (NSString *)formatAsDatetimeWithMsWithJavaUtilDate:(JavaUtilDate *)date;

+ (NSString *)formatTimeDifferenceWithJavaUtilDate:(JavaUtilDate *)date1
                                  withJavaUtilDate:(JavaUtilDate *)date2;

+ (jint)hourOfDayOfWithJavaUtilDate:(JavaUtilDate *)date;

+ (jint)millisecondOfWithJavaUtilDate:(JavaUtilDate *)date;

+ (jint)minuteOfWithJavaUtilDate:(JavaUtilDate *)date;

+ (jint)monthOfWithJavaUtilDate:(JavaUtilDate *)date;

+ (JavaTextDateFormat *)newIsoDateFormat OBJC_METHOD_FAMILY_NONE;

+ (JavaTextDateFormat *)newIsoDateTimeFormat OBJC_METHOD_FAMILY_NONE;

+ (JavaTextDateFormat *)newIsoDateTimeWithMsFormat OBJC_METHOD_FAMILY_NONE;

+ (JavaUtilDate *)now;

+ (JavaUtilDate *)parseWithNSString:(NSString *)dateAsString;

+ (JavaUtilDate *)parseDatetimeWithNSString:(NSString *)dateAsString;

+ (JavaUtilDate *)parseDatetimeWithMsWithNSString:(NSString *)dateAsString;

+ (jint)secondOfWithJavaUtilDate:(JavaUtilDate *)date;

+ (jlong)timeDifferenceWithJavaUtilDate:(JavaUtilDate *)date1
                       withJavaUtilDate:(JavaUtilDate *)date2;

+ (JavaUtilCalendar *)toCalendarWithJavaUtilDate:(JavaUtilDate *)date;

+ (JavaUtilDate *)tomorrow;

+ (JavaUtilDate *)truncateTimeWithJavaUtilDate:(JavaUtilDate *)date;

+ (jint)yearOfWithJavaUtilDate:(JavaUtilDate *)date;

+ (JavaUtilDate *)yesterday;

@end

J2OBJC_STATIC_INIT(OrgAssertjCoreUtilDates)

FOUNDATION_EXPORT void OrgAssertjCoreUtilDates_init(OrgAssertjCoreUtilDates *self);

FOUNDATION_EXPORT OrgAssertjCoreUtilDates *new_OrgAssertjCoreUtilDates_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgAssertjCoreUtilDates *create_OrgAssertjCoreUtilDates_init();

FOUNDATION_EXPORT JavaTextDateFormat *OrgAssertjCoreUtilDates_newIsoDateFormat();

FOUNDATION_EXPORT JavaTextDateFormat *OrgAssertjCoreUtilDates_newIsoDateTimeFormat();

FOUNDATION_EXPORT JavaTextDateFormat *OrgAssertjCoreUtilDates_newIsoDateTimeWithMsFormat();

FOUNDATION_EXPORT NSString *OrgAssertjCoreUtilDates_formatAsDatetimeWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT NSString *OrgAssertjCoreUtilDates_formatAsDatetimeWithMsWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT NSString *OrgAssertjCoreUtilDates_formatAsDatetimeWithJavaUtilCalendar_(JavaUtilCalendar *calendar);

FOUNDATION_EXPORT JavaUtilDate *OrgAssertjCoreUtilDates_parseWithNSString_(NSString *dateAsString);

FOUNDATION_EXPORT JavaUtilDate *OrgAssertjCoreUtilDates_parseDatetimeWithNSString_(NSString *dateAsString);

FOUNDATION_EXPORT JavaUtilDate *OrgAssertjCoreUtilDates_parseDatetimeWithMsWithNSString_(NSString *dateAsString);

FOUNDATION_EXPORT JavaUtilCalendar *OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT jint OrgAssertjCoreUtilDates_yearOfWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT jint OrgAssertjCoreUtilDates_monthOfWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT jint OrgAssertjCoreUtilDates_dayOfMonthOfWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT jint OrgAssertjCoreUtilDates_dayOfWeekOfWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT jint OrgAssertjCoreUtilDates_hourOfDayOfWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT jint OrgAssertjCoreUtilDates_minuteOfWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT jint OrgAssertjCoreUtilDates_secondOfWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT jint OrgAssertjCoreUtilDates_millisecondOfWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT jlong OrgAssertjCoreUtilDates_timeDifferenceWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *date1, JavaUtilDate *date2);

FOUNDATION_EXPORT JavaUtilDate *OrgAssertjCoreUtilDates_truncateTimeWithJavaUtilDate_(JavaUtilDate *date);

FOUNDATION_EXPORT JavaUtilDate *OrgAssertjCoreUtilDates_now();

FOUNDATION_EXPORT JavaUtilDate *OrgAssertjCoreUtilDates_yesterday();

FOUNDATION_EXPORT JavaUtilDate *OrgAssertjCoreUtilDates_tomorrow();

FOUNDATION_EXPORT NSString *OrgAssertjCoreUtilDates_formatTimeDifferenceWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *date1, JavaUtilDate *date2);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreUtilDates)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreUtilDates")
