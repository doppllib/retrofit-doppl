//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/ObjectAssert.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractObjectAssert.h"
#include "OrgAssertjCoreApiObjectAssert.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiObjectAssert

- (instancetype)initWithId:(id)actual {
  OrgAssertjCoreApiObjectAssert_initWithId_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSObject;", "(TA;)V", "<A:Ljava/lang/Object;>Lorg/assertj/core/api/AbstractObjectAssert<Lorg/assertj/core/api/ObjectAssert<TA;>;TA;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiObjectAssert = { "ObjectAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, 2, -1 };
  return &_OrgAssertjCoreApiObjectAssert;
}

@end

void OrgAssertjCoreApiObjectAssert_initWithId_(OrgAssertjCoreApiObjectAssert *self, id actual) {
  OrgAssertjCoreApiAbstractObjectAssert_initWithId_withIOSClass_(self, actual, OrgAssertjCoreApiObjectAssert_class_());
}

OrgAssertjCoreApiObjectAssert *new_OrgAssertjCoreApiObjectAssert_initWithId_(id actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiObjectAssert, initWithId_, actual)
}

OrgAssertjCoreApiObjectAssert *create_OrgAssertjCoreApiObjectAssert_initWithId_(id actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiObjectAssert, initWithId_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiObjectAssert)
