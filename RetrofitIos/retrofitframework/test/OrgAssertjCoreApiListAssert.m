//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/ListAssert.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractListAssert.h"
#include "OrgAssertjCoreApiListAssert.h"
#include "java/util/List.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiListAssert

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)actual {
  OrgAssertjCoreApiListAssert_initWithJavaUtilList_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<TT;>;)V", "<T:Ljava/lang/Object;>Lorg/assertj/core/api/AbstractListAssert<Lorg/assertj/core/api/ListAssert<TT;>;Ljava/util/List<TT;>;TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiListAssert = { "ListAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, 2, -1 };
  return &_OrgAssertjCoreApiListAssert;
}

@end

void OrgAssertjCoreApiListAssert_initWithJavaUtilList_(OrgAssertjCoreApiListAssert *self, id<JavaUtilList> actual) {
  OrgAssertjCoreApiAbstractListAssert_initWithJavaUtilList_withIOSClass_(self, actual, OrgAssertjCoreApiListAssert_class_());
}

OrgAssertjCoreApiListAssert *new_OrgAssertjCoreApiListAssert_initWithJavaUtilList_(id<JavaUtilList> actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiListAssert, initWithJavaUtilList_, actual)
}

OrgAssertjCoreApiListAssert *create_OrgAssertjCoreApiListAssert_initWithJavaUtilList_(id<JavaUtilList> actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiListAssert, initWithJavaUtilList_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiListAssert)
