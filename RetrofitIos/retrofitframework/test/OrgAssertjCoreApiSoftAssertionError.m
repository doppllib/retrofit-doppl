//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/SoftAssertionError.java
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiSoftAssertionError.h"
#include "java/lang/AssertionError.h"
#include "java/lang/StringBuilder.h"
#include "java/util/List.h"

@interface OrgAssertjCoreApiSoftAssertionError () {
 @public
  id<JavaUtilList> errors_;
}

+ (NSString *)createMessageWithJavaUtilList:(id<JavaUtilList>)errors;

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreApiSoftAssertionError, errors_, id<JavaUtilList>)

inline jlong OrgAssertjCoreApiSoftAssertionError_get_serialVersionUID();
#define OrgAssertjCoreApiSoftAssertionError_serialVersionUID 5034494920024670595LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgAssertjCoreApiSoftAssertionError, serialVersionUID, jlong)

__attribute__((unused)) static NSString *OrgAssertjCoreApiSoftAssertionError_createMessageWithJavaUtilList_(id<JavaUtilList> errors);

@implementation OrgAssertjCoreApiSoftAssertionError

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)errors {
  OrgAssertjCoreApiSoftAssertionError_initWithJavaUtilList_(self, errors);
  return self;
}

+ (NSString *)createMessageWithJavaUtilList:(id<JavaUtilList>)errors {
  return OrgAssertjCoreApiSoftAssertionError_createMessageWithJavaUtilList_(errors);
}

- (id<JavaUtilList>)getErrors {
  return errors_;
}

- (void)dealloc {
  RELEASE_(errors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 0, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(createMessageWithJavaUtilList:);
  methods[2].selector = @selector(getErrors);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgAssertjCoreApiSoftAssertionError_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "errors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "createMessage", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", "()Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiSoftAssertionError = { "SoftAssertionError", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreApiSoftAssertionError;
}

@end

void OrgAssertjCoreApiSoftAssertionError_initWithJavaUtilList_(OrgAssertjCoreApiSoftAssertionError *self, id<JavaUtilList> errors) {
  JavaLangAssertionError_initWithId_(self, OrgAssertjCoreApiSoftAssertionError_createMessageWithJavaUtilList_(errors));
  JreStrongAssign(&self->errors_, errors);
}

OrgAssertjCoreApiSoftAssertionError *new_OrgAssertjCoreApiSoftAssertionError_initWithJavaUtilList_(id<JavaUtilList> errors) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiSoftAssertionError, initWithJavaUtilList_, errors)
}

OrgAssertjCoreApiSoftAssertionError *create_OrgAssertjCoreApiSoftAssertionError_initWithJavaUtilList_(id<JavaUtilList> errors) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiSoftAssertionError, initWithJavaUtilList_, errors)
}

NSString *OrgAssertjCoreApiSoftAssertionError_createMessageWithJavaUtilList_(id<JavaUtilList> errors) {
  OrgAssertjCoreApiSoftAssertionError_initialize();
  JavaLangStringBuilder *msg = create_JavaLangStringBuilder_initWithNSString_(@"\nThe following ");
  jint size = [((id<JavaUtilList>) nil_chk(errors)) size];
  if (size == 1) {
    [msg appendWithNSString:@"assertion"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk([msg appendWithInt:size])) appendWithNSString:@" assertions"];
  }
  [msg appendWithNSString:@" failed:\n"];
  for (jint i = 0; i < size; i++) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([msg appendWithInt:i + 1])) appendWithNSString:@") "])) appendWithNSString:[errors getWithInt:i]])) appendWithNSString:@"\n"];
  }
  return [msg description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiSoftAssertionError)
