//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldHaveTime.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveTime.h"
#include "java/lang/Long.h"
#include "java/util/Date.h"

@interface OrgAssertjCoreErrorShouldHaveTime ()

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                            withLong:(jlong)expectedTimestamp;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveTime_initWithJavaUtilDate_withLong_(OrgAssertjCoreErrorShouldHaveTime *self, JavaUtilDate *actual, jlong expectedTimestamp);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveTime *new_OrgAssertjCoreErrorShouldHaveTime_initWithJavaUtilDate_withLong_(JavaUtilDate *actual, jlong expectedTimestamp) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveTime *create_OrgAssertjCoreErrorShouldHaveTime_initWithJavaUtilDate_withLong_(JavaUtilDate *actual, jlong expectedTimestamp);

@implementation OrgAssertjCoreErrorShouldHaveTime

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveTimeWithJavaUtilDate:(JavaUtilDate *)actual
                                                                    withLong:(jlong)expectedTimestamp {
  return OrgAssertjCoreErrorShouldHaveTime_shouldHaveTimeWithJavaUtilDate_withLong_(actual, expectedTimestamp);
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                            withLong:(jlong)expectedTimestamp {
  OrgAssertjCoreErrorShouldHaveTime_initWithJavaUtilDate_withLong_(self, actual, expectedTimestamp);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveTimeWithJavaUtilDate:withLong:);
  methods[1].selector = @selector(initWithJavaUtilDate:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveTime", "LJavaUtilDate;J" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveTime = { "ShouldHaveTime", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveTime;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldHaveTime_shouldHaveTimeWithJavaUtilDate_withLong_(JavaUtilDate *actual, jlong expectedTimestamp) {
  OrgAssertjCoreErrorShouldHaveTime_initialize();
  return create_OrgAssertjCoreErrorShouldHaveTime_initWithJavaUtilDate_withLong_(actual, expectedTimestamp);
}

void OrgAssertjCoreErrorShouldHaveTime_initWithJavaUtilDate_withLong_(OrgAssertjCoreErrorShouldHaveTime *self, JavaUtilDate *actual, jlong expectedTimestamp) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting\n <%s>\nto have time:\n <%s>\nbut was:\n <%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual, JavaLangLong_valueOfWithLong_(expectedTimestamp), JavaLangLong_valueOfWithLong_([((JavaUtilDate *) nil_chk(actual)) getTime]) } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveTime *new_OrgAssertjCoreErrorShouldHaveTime_initWithJavaUtilDate_withLong_(JavaUtilDate *actual, jlong expectedTimestamp) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveTime, initWithJavaUtilDate_withLong_, actual, expectedTimestamp)
}

OrgAssertjCoreErrorShouldHaveTime *create_OrgAssertjCoreErrorShouldHaveTime_initWithJavaUtilDate_withLong_(JavaUtilDate *actual, jlong expectedTimestamp) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveTime, initWithJavaUtilDate_withLong_, actual, expectedTimestamp)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveTime)
