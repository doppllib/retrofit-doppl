//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/FileAssert.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractFileAssert.h"
#include "OrgAssertjCoreApiFileAssert.h"
#include "java/io/File.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiFileAssert

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreApiFileAssert_initWithJavaIoFile_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoFile;", "Lorg/assertj/core/api/AbstractFileAssert<Lorg/assertj/core/api/FileAssert;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiFileAssert = { "FileAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, 1, -1 };
  return &_OrgAssertjCoreApiFileAssert;
}

@end

void OrgAssertjCoreApiFileAssert_initWithJavaIoFile_(OrgAssertjCoreApiFileAssert *self, JavaIoFile *actual) {
  OrgAssertjCoreApiAbstractFileAssert_initWithJavaIoFile_withIOSClass_(self, actual, OrgAssertjCoreApiFileAssert_class_());
}

OrgAssertjCoreApiFileAssert *new_OrgAssertjCoreApiFileAssert_initWithJavaIoFile_(JavaIoFile *actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiFileAssert, initWithJavaIoFile_, actual)
}

OrgAssertjCoreApiFileAssert *create_OrgAssertjCoreApiFileAssert_initWithJavaIoFile_(JavaIoFile *actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiFileAssert, initWithJavaIoFile_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiFileAssert)
