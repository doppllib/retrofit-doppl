//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/util/Preconditions.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilPreconditions.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"

@interface OrgAssertjCoreUtilPreconditions ()

- (instancetype)init;

+ (void)throwExceptionForBeingEmpty;

+ (void)throwExceptionForBeingEmptyWithNSString:(NSString *)message;

@end

__attribute__((unused)) static void OrgAssertjCoreUtilPreconditions_init(OrgAssertjCoreUtilPreconditions *self);

__attribute__((unused)) static OrgAssertjCoreUtilPreconditions *new_OrgAssertjCoreUtilPreconditions_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreUtilPreconditions *create_OrgAssertjCoreUtilPreconditions_init();

__attribute__((unused)) static void OrgAssertjCoreUtilPreconditions_throwExceptionForBeingEmpty();

__attribute__((unused)) static void OrgAssertjCoreUtilPreconditions_throwExceptionForBeingEmptyWithNSString_(NSString *message);

NSString *OrgAssertjCoreUtilPreconditions_ARGUMENT_EMPTY = @"Argument expected not to be empty!";

@implementation OrgAssertjCoreUtilPreconditions

+ (NSString *)checkNotNullOrEmptyWithNSString:(NSString *)s {
  return OrgAssertjCoreUtilPreconditions_checkNotNullOrEmptyWithNSString_(s);
}

+ (NSString *)checkNotNullOrEmptyWithNSString:(NSString *)s
                                 withNSString:(NSString *)message {
  return OrgAssertjCoreUtilPreconditions_checkNotNullOrEmptyWithNSString_withNSString_(s, message);
}

+ (IOSObjectArray *)checkNotNullOrEmptyWithNSObjectArray:(IOSObjectArray *)array {
  return OrgAssertjCoreUtilPreconditions_checkNotNullOrEmptyWithNSObjectArray_(array);
}

+ (id)checkNotNullWithId:(id)reference {
  return OrgAssertjCoreUtilPreconditions_checkNotNullWithId_(reference);
}

+ (id)checkNotNullWithId:(id)reference
            withNSString:(NSString *)message {
  return OrgAssertjCoreUtilPreconditions_checkNotNullWithId_withNSString_(reference, message);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilPreconditions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)throwExceptionForBeingEmpty {
  OrgAssertjCoreUtilPreconditions_throwExceptionForBeingEmpty();
}

+ (void)throwExceptionForBeingEmptyWithNSString:(NSString *)message {
  OrgAssertjCoreUtilPreconditions_throwExceptionForBeingEmptyWithNSString_(message);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x9, 5, 6, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x9, 5, 8, -1, 9, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(checkNotNullOrEmptyWithNSString:);
  methods[1].selector = @selector(checkNotNullOrEmptyWithNSString:withNSString:);
  methods[2].selector = @selector(checkNotNullOrEmptyWithNSObjectArray:);
  methods[3].selector = @selector(checkNotNullWithId:);
  methods[4].selector = @selector(checkNotNullWithId:withNSString:);
  methods[5].selector = @selector(init);
  methods[6].selector = @selector(throwExceptionForBeingEmpty);
  methods[7].selector = @selector(throwExceptionForBeingEmptyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ARGUMENT_EMPTY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "checkNotNullOrEmpty", "LNSString;", "LNSString;LNSString;", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)[TT;", "checkNotNull", "LNSObject;", "<T:Ljava/lang/Object;>(TT;)TT;", "LNSObject;LNSString;", "<T:Ljava/lang/Object;>(TT;Ljava/lang/String;)TT;", "throwExceptionForBeingEmpty", &OrgAssertjCoreUtilPreconditions_ARGUMENT_EMPTY };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilPreconditions = { "Preconditions", "org.assertj.core.util", ptrTable, methods, fields, 7, 0x11, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilPreconditions;
}

@end

NSString *OrgAssertjCoreUtilPreconditions_checkNotNullOrEmptyWithNSString_(NSString *s) {
  OrgAssertjCoreUtilPreconditions_initialize();
  return OrgAssertjCoreUtilPreconditions_checkNotNullOrEmptyWithNSString_withNSString_(s, OrgAssertjCoreUtilPreconditions_ARGUMENT_EMPTY);
}

NSString *OrgAssertjCoreUtilPreconditions_checkNotNullOrEmptyWithNSString_withNSString_(NSString *s, NSString *message) {
  OrgAssertjCoreUtilPreconditions_initialize();
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_withNSString_(s, message);
  if ([((NSString *) nil_chk(s)) java_isEmpty]) {
    OrgAssertjCoreUtilPreconditions_throwExceptionForBeingEmptyWithNSString_(message);
  }
  return s;
}

IOSObjectArray *OrgAssertjCoreUtilPreconditions_checkNotNullOrEmptyWithNSObjectArray_(IOSObjectArray *array) {
  OrgAssertjCoreUtilPreconditions_initialize();
  IOSObjectArray *checked = OrgAssertjCoreUtilPreconditions_checkNotNullWithId_(array);
  if (((IOSObjectArray *) nil_chk(checked))->size_ == 0) {
    OrgAssertjCoreUtilPreconditions_throwExceptionForBeingEmpty();
  }
  return checked;
}

id OrgAssertjCoreUtilPreconditions_checkNotNullWithId_(id reference) {
  OrgAssertjCoreUtilPreconditions_initialize();
  if (reference == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  return reference;
}

id OrgAssertjCoreUtilPreconditions_checkNotNullWithId_withNSString_(id reference, NSString *message) {
  OrgAssertjCoreUtilPreconditions_initialize();
  if (reference == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(message);
  }
  return reference;
}

void OrgAssertjCoreUtilPreconditions_init(OrgAssertjCoreUtilPreconditions *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilPreconditions *new_OrgAssertjCoreUtilPreconditions_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilPreconditions, init)
}

OrgAssertjCoreUtilPreconditions *create_OrgAssertjCoreUtilPreconditions_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilPreconditions, init)
}

void OrgAssertjCoreUtilPreconditions_throwExceptionForBeingEmpty() {
  OrgAssertjCoreUtilPreconditions_initialize();
  OrgAssertjCoreUtilPreconditions_throwExceptionForBeingEmptyWithNSString_(OrgAssertjCoreUtilPreconditions_ARGUMENT_EMPTY);
}

void OrgAssertjCoreUtilPreconditions_throwExceptionForBeingEmptyWithNSString_(NSString *message) {
  OrgAssertjCoreUtilPreconditions_initialize();
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilPreconditions)
