//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/InternalIterables.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame.h"
#include "OrgAssertjCoreErrorElementsShouldBe.h"
#include "OrgAssertjCoreErrorElementsShouldBeAtLeast.h"
#include "OrgAssertjCoreErrorElementsShouldBeAtMost.h"
#include "OrgAssertjCoreErrorElementsShouldBeExactly.h"
#include "OrgAssertjCoreErrorElementsShouldHave.h"
#include "OrgAssertjCoreErrorElementsShouldHaveAtLeast.h"
#include "OrgAssertjCoreErrorElementsShouldHaveAtMost.h"
#include "OrgAssertjCoreErrorElementsShouldHaveExactly.h"
#include "OrgAssertjCoreErrorElementsShouldNotBe.h"
#include "OrgAssertjCoreErrorElementsShouldNotHave.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeEmpty.h"
#include "OrgAssertjCoreErrorShouldBeNullOrEmpty.h"
#include "OrgAssertjCoreErrorShouldBeSubsetOf.h"
#include "OrgAssertjCoreErrorShouldContain.h"
#include "OrgAssertjCoreErrorShouldContainExactly.h"
#include "OrgAssertjCoreErrorShouldContainNull.h"
#include "OrgAssertjCoreErrorShouldContainOnly.h"
#include "OrgAssertjCoreErrorShouldContainSequence.h"
#include "OrgAssertjCoreErrorShouldContainSubsequence.h"
#include "OrgAssertjCoreErrorShouldContainsOnlyOnce.h"
#include "OrgAssertjCoreErrorShouldEndWith.h"
#include "OrgAssertjCoreErrorShouldNotBeEmpty.h"
#include "OrgAssertjCoreErrorShouldNotContain.h"
#include "OrgAssertjCoreErrorShouldNotContainNull.h"
#include "OrgAssertjCoreErrorShouldNotHaveDuplicates.h"
#include "OrgAssertjCoreErrorShouldStartWith.h"
#include "OrgAssertjCoreInternalCommonValidations.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalConditions.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalArrays.h"
#include "OrgAssertjCoreInternalInternalIterables.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "OrgAssertjCoreUtilIterables.h"
#include "OrgAssertjCoreUtilLists.h"
#include "java/lang/AssertionError.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface OrgAssertjCoreInternalInternalIterables () {
 @public
  id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy_;
}

- (void)assertIterableContainsGivenValuesWithJavaLangIterable:(id<JavaLangIterable>)actual
                                            withNSObjectArray:(IOSObjectArray *)values
                           withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info;

- (jboolean)iterableContainsWithJavaLangIterable:(id<JavaLangIterable>)actual
                                          withId:(id)value;

- (void)iterableRemovesWithJavaLangIterable:(id<JavaLangIterable>)actual
                                     withId:(id)value;

- (id<JavaUtilSet>)containsOnlyWithJavaUtilSet:(id<JavaUtilSet>)actual
                             withNSObjectArray:(IOSObjectArray *)values;

- (id<JavaUtilSet>)setWithNSObjectArray:(IOSObjectArray *)elements;

- (id<JavaUtilSet>)setFromIterableWithJavaLangIterable:(id<JavaLangIterable>)iterable;

+ (void)checkNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                  withJavaLangIterable:(id<JavaLangIterable>)set;

- (JavaLangAssertionError *)actualIsNotSubsetOfSetWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                              withId:(id)actual
                                                                withJavaLangIterable:(id<JavaLangIterable>)set
                                                                withJavaLangIterable:(id<JavaLangIterable>)extra;

- (jboolean)containsSequenceAtGivenIndexWithJavaUtilList:(id<JavaUtilList>)actualAsList
                                       withNSObjectArray:(IOSObjectArray *)sequence
                                                 withInt:(jint)startingIndex;

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other;

- (JavaLangAssertionError *)actualDoesNotContainSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                      withJavaLangIterable:(id<JavaLangIterable>)actual
                                                                         withNSObjectArray:(IOSObjectArray *)sequence;

- (JavaLangAssertionError *)actualDoesNotContainSubsequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                         withJavaLangIterable:(id<JavaLangIterable>)actual
                                                                            withNSObjectArray:(IOSObjectArray *)subsequence;

- (JavaLangAssertionError *)actualDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                        withJavaLangIterable:(id<JavaLangIterable>)actual
                                                                           withNSObjectArray:(IOSObjectArray *)sequence;

- (jboolean)commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                  withJavaLangIterable:(id<JavaLangIterable>)actual
                                                                     withNSObjectArray:(IOSObjectArray *)sequence;

- (jboolean)conditionIsSatisfiedAtLeastNTimesWithJavaLangIterable:(id<JavaLangIterable>)actual
                                                          withInt:(jint)n
                                   withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

- (jboolean)conditionIsSatisfiedAtMostNTimesWithJavaLangIterable:(id<JavaLangIterable>)actual
                                  withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition
                                                         withInt:(jint)n;

- (jboolean)conditionIsSatisfiedNTimesWithJavaLangIterable:(id<JavaLangIterable>)actual
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition
                                                   withInt:(jint)times;

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withJavaLangIterable:(id<JavaLangIterable>)actual;

- (JavaLangAssertionError *)actualDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                      withJavaLangIterable:(id<JavaLangIterable>)actual
                                                                         withNSObjectArray:(IOSObjectArray *)sequence;

- (id<JavaUtilList>)notSatisfiesConditionWithJavaLangIterable:(id<JavaLangIterable>)actual
                               withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

- (id<JavaUtilList>)satisfiesConditionWithJavaLangIterable:(id<JavaLangIterable>)actual
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalIterables, comparisonStrategy_, id<OrgAssertjCoreInternalComparisonStrategy>)

inline OrgAssertjCoreInternalInternalIterables *OrgAssertjCoreInternalInternalIterables_get_INSTANCE();
static OrgAssertjCoreInternalInternalIterables *OrgAssertjCoreInternalInternalIterables_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalInternalIterables, INSTANCE, OrgAssertjCoreInternalInternalIterables *)

__attribute__((unused)) static void OrgAssertjCoreInternalInternalIterables_assertIterableContainsGivenValuesWithJavaLangIterable_withNSObjectArray_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, IOSObjectArray *values, id<OrgAssertjCoreApiAssertionInfo> info);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, id value);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalIterables_iterableRemovesWithJavaLangIterable_withId_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, id value);

__attribute__((unused)) static id<JavaUtilSet> OrgAssertjCoreInternalInternalIterables_containsOnlyWithJavaUtilSet_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<JavaUtilSet> actual, IOSObjectArray *values);

__attribute__((unused)) static id<JavaUtilSet> OrgAssertjCoreInternalInternalIterables_setWithNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, IOSObjectArray *elements);

__attribute__((unused)) static id<JavaUtilSet> OrgAssertjCoreInternalInternalIterables_setFromIterableWithJavaLangIterable_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> iterable);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalIterables_checkNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> set);

__attribute__((unused)) static JavaLangAssertionError *OrgAssertjCoreInternalInternalIterables_actualIsNotSubsetOfSetWithOrgAssertjCoreApiAssertionInfo_withId_withJavaLangIterable_withJavaLangIterable_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id actual, id<JavaLangIterable> set, id<JavaLangIterable> extra);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalIterables_containsSequenceAtGivenIndexWithJavaUtilList_withNSObjectArray_withInt_(OrgAssertjCoreInternalInternalIterables *self, id<JavaUtilList> actualAsList, IOSObjectArray *sequence, jint startingIndex);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalIterables_areEqualWithId_withId_(OrgAssertjCoreInternalInternalIterables *self, id actual, id other);

__attribute__((unused)) static JavaLangAssertionError *OrgAssertjCoreInternalInternalIterables_actualDoesNotContainSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual, IOSObjectArray *sequence);

__attribute__((unused)) static JavaLangAssertionError *OrgAssertjCoreInternalInternalIterables_actualDoesNotContainSubsequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual, IOSObjectArray *subsequence);

__attribute__((unused)) static JavaLangAssertionError *OrgAssertjCoreInternalInternalIterables_actualDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual, IOSObjectArray *sequence);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalIterables_commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual, IOSObjectArray *sequence);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedAtLeastNTimesWithJavaLangIterable_withInt_withOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, jint n, OrgAssertjCoreApiCondition *condition);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedAtMostNTimesWithJavaLangIterable_withOrgAssertjCoreApiCondition_withInt_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, OrgAssertjCoreApiCondition *condition, jint n);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedNTimesWithJavaLangIterable_withOrgAssertjCoreApiCondition_withInt_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, OrgAssertjCoreApiCondition *condition, jint times);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual);

__attribute__((unused)) static JavaLangAssertionError *OrgAssertjCoreInternalInternalIterables_actualDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual, IOSObjectArray *sequence);

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreInternalInternalIterables_notSatisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, OrgAssertjCoreApiCondition *condition);

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreInternalInternalIterables_satisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, OrgAssertjCoreApiCondition *condition);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalInternalIterables)

@implementation OrgAssertjCoreInternalInternalIterables

+ (OrgAssertjCoreInternalInternalIterables *)instance {
  return OrgAssertjCoreInternalInternalIterables_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInternalIterables_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreInternalInternalIterables_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
  return self;
}

- (id<JavaUtilComparator>)getComparator {
  if ([comparisonStrategy_ isKindOfClass:[OrgAssertjCoreInternalComparatorBasedComparisonStrategy class]]) {
    return [((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) nil_chk(((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) cast_chk(comparisonStrategy_, [OrgAssertjCoreInternalComparatorBasedComparisonStrategy class])))) getComparator];
  }
  return nil;
}

- (void)assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaLangIterable:(id<JavaLangIterable>)actual {
  if (actual == nil || OrgAssertjCoreUtilIterables_isNullOrEmptyWithJavaLangIterable_(actual)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeNullOrEmpty_shouldBeNullOrEmptyWithId_(actual)];
}

- (void)assertEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                 withJavaLangIterable:(id<JavaLangIterable>)actual {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  if (OrgAssertjCoreUtilIterables_isNullOrEmptyWithJavaLangIterable_(actual)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeEmpty_shouldBeEmptyWithId_(actual)];
}

- (void)assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangIterable:(id<JavaLangIterable>)actual {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  if (!OrgAssertjCoreUtilIterables_isNullOrEmptyWithJavaLangIterable_(actual)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeEmpty_shouldNotBeEmpty()];
}

- (void)assertHasSizeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withJavaLangIterable:(id<JavaLangIterable>)actual
                                                withInt:(jint)expectedSize {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  OrgAssertjCoreInternalCommonValidations_checkSizesWithId_withInt_withInt_withOrgAssertjCoreApiAssertionInfo_(actual, OrgAssertjCoreUtilIterables_sizeOfWithJavaLangIterable_(actual), expectedSize, info);
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaLangIterable:(id<JavaLangIterable>)actual
                                                       withId:(id)other {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  OrgAssertjCoreInternalInternalArrays_assertIsArrayWithOrgAssertjCoreApiAssertionInfo_withId_(info, other);
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withId_withInt_(info, actual, other, OrgAssertjCoreUtilIterables_sizeOfWithJavaLangIterable_(actual));
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaLangIterable:(id<JavaLangIterable>)actual
                                         withJavaLangIterable:(id<JavaLangIterable>)other {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withJavaLangIterable_withInt_(info, actual, other, OrgAssertjCoreUtilIterables_sizeOfWithJavaLangIterable_(actual));
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangIterable:(id<JavaLangIterable>)actual
                                       withNSObjectArray:(IOSObjectArray *)values {
  if (OrgAssertjCoreInternalInternalIterables_commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, values)) return;
  OrgAssertjCoreInternalInternalIterables_assertIterableContainsGivenValuesWithJavaLangIterable_withNSObjectArray_withOrgAssertjCoreApiAssertionInfo_(self, actual, values, info);
}

- (void)assertIterableContainsGivenValuesWithJavaLangIterable:(id<JavaLangIterable>)actual
                                            withNSObjectArray:(IOSObjectArray *)values
                           withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info {
  OrgAssertjCoreInternalInternalIterables_assertIterableContainsGivenValuesWithJavaLangIterable_withNSObjectArray_withOrgAssertjCoreApiAssertionInfo_(self, actual, values, info);
}

- (jboolean)iterableContainsWithJavaLangIterable:(id<JavaLangIterable>)actual
                                          withId:(id)value {
  return OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, actual, value);
}

- (void)iterableRemovesWithJavaLangIterable:(id<JavaLangIterable>)actual
                                     withId:(id)value {
  OrgAssertjCoreInternalInternalIterables_iterableRemovesWithJavaLangIterable_withId_(self, actual, value);
}

- (void)assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaLangIterable:(id<JavaLangIterable>)actual
                                           withNSObjectArray:(IOSObjectArray *)values {
  if (OrgAssertjCoreInternalInternalIterables_commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, values)) return;
  id<JavaUtilSet> notExpected = OrgAssertjCoreInternalInternalIterables_setFromIterableWithJavaLangIterable_(self, actual);
  id<JavaUtilSet> notFound = OrgAssertjCoreInternalInternalIterables_containsOnlyWithJavaUtilSet_withNSObjectArray_(self, notExpected, values);
  if ([((id<JavaUtilSet>) nil_chk(notExpected)) isEmpty] && [((id<JavaUtilSet>) nil_chk(notFound)) isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainOnly_shouldContainOnlyWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, notFound, notExpected, comparisonStrategy_)];
}

- (id<JavaUtilSet>)containsOnlyWithJavaUtilSet:(id<JavaUtilSet>)actual
                             withNSObjectArray:(IOSObjectArray *)values {
  return OrgAssertjCoreInternalInternalIterables_containsOnlyWithJavaUtilSet_withNSObjectArray_(self, actual, values);
}

- (id<JavaUtilSet>)setWithNSObjectArray:(IOSObjectArray *)elements {
  return OrgAssertjCoreInternalInternalIterables_setWithNSObjectArray_(self, elements);
}

- (id<JavaUtilSet>)setFromIterableWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  return OrgAssertjCoreInternalInternalIterables_setFromIterableWithJavaLangIterable_(self, iterable);
}

- (void)assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaLangIterable:(id<JavaLangIterable>)actual
                                               withNSObjectArray:(IOSObjectArray *)values {
  if (OrgAssertjCoreInternalInternalIterables_commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, values)) return;
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  id<JavaUtilSet> notOnlyOnce = create_JavaUtilLinkedHashSet_init();
  id<JavaLangIterable> actualDuplicates = [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(comparisonStrategy_)) duplicatesFromWithJavaLangIterable:actual];
  {
    IOSObjectArray *a__ = values;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id expectedOnlyOnce = *b__++;
      if (!OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, actual, expectedOnlyOnce)) {
        [notFound addWithId:expectedOnlyOnce];
      }
      else if (OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, actualDuplicates, expectedOnlyOnce)) {
        [notOnlyOnce addWithId:expectedOnlyOnce];
      }
    }
  }
  if (![notFound isEmpty] || ![notOnlyOnce isEmpty]) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainsOnlyOnce_shouldContainsOnlyOnceWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, notFound, notOnlyOnce, comparisonStrategy_)];
  }
}

- (void)assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaLangIterable:(id<JavaLangIterable>)actual
                                               withNSObjectArray:(IOSObjectArray *)sequence {
  if (OrgAssertjCoreInternalInternalIterables_commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence)) return;
  id<JavaUtilList> actualAsList = OrgAssertjCoreUtilLists_newArrayListWithJavaLangIterable_(actual);
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(actualAsList)) size]; i++) {
    if (OrgAssertjCoreInternalInternalIterables_containsSequenceAtGivenIndexWithJavaUtilList_withNSObjectArray_withInt_(self, actualAsList, sequence, i)) {
      return;
    }
  }
  @throw OrgAssertjCoreInternalInternalIterables_actualDoesNotContainSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence);
}

- (void)assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                               withJavaLangIterable:(id<JavaLangIterable>)actual
                                                  withNSObjectArray:(IOSObjectArray *)subsequence {
  if (OrgAssertjCoreInternalInternalIterables_commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, subsequence)) {
    return;
  }
  id<JavaUtilIterator> actualIterator = [((id<JavaLangIterable>) nil_chk(actual)) iterator];
  jint subsequenceIndex = 0;
  while ([((id<JavaUtilIterator>) nil_chk(actualIterator)) hasNext] && subsequenceIndex < ((IOSObjectArray *) nil_chk(subsequence))->size_) {
    id actualNext = [actualIterator next];
    id subsequenceNext = IOSObjectArray_Get(nil_chk(subsequence), subsequenceIndex);
    if (OrgAssertjCoreInternalInternalIterables_areEqualWithId_withId_(self, actualNext, subsequenceNext)) {
      subsequenceIndex++;
    }
  }
  if (subsequenceIndex < ((IOSObjectArray *) nil_chk(subsequence))->size_) {
    @throw OrgAssertjCoreInternalInternalIterables_actualDoesNotContainSubsequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, subsequence);
  }
}

- (void)assertIsSubsetOfWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                      withJavaLangIterable:(id<JavaLangIterable>)actual
                                      withJavaLangIterable:(id<JavaLangIterable>)values {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  OrgAssertjCoreInternalInternalIterables_checkNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(info, values);
  id<JavaUtilList> extra = OrgAssertjCoreUtilLists_newArrayList();
  for (id __strong actualElement in nil_chk(actual)) {
    if (!OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, values, actualElement)) {
      [((id<JavaUtilList>) nil_chk(extra)) addWithId:actualElement];
    }
  }
  if ([((id<JavaUtilList>) nil_chk(extra)) size] > 0) {
    @throw OrgAssertjCoreInternalInternalIterables_actualIsNotSubsetOfSetWithOrgAssertjCoreApiAssertionInfo_withId_withJavaLangIterable_withJavaLangIterable_(self, info, actual, values, extra);
  }
}

+ (void)checkNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                  withJavaLangIterable:(id<JavaLangIterable>)set {
  OrgAssertjCoreInternalInternalIterables_checkNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(info, set);
}

- (JavaLangAssertionError *)actualIsNotSubsetOfSetWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                              withId:(id)actual
                                                                withJavaLangIterable:(id<JavaLangIterable>)set
                                                                withJavaLangIterable:(id<JavaLangIterable>)extra {
  return OrgAssertjCoreInternalInternalIterables_actualIsNotSubsetOfSetWithOrgAssertjCoreApiAssertionInfo_withId_withJavaLangIterable_withJavaLangIterable_(self, info, actual, set, extra);
}

- (jboolean)containsSequenceAtGivenIndexWithJavaUtilList:(id<JavaUtilList>)actualAsList
                                       withNSObjectArray:(IOSObjectArray *)sequence
                                                 withInt:(jint)startingIndex {
  return OrgAssertjCoreInternalInternalIterables_containsSequenceAtGivenIndexWithJavaUtilList_withNSObjectArray_withInt_(self, actualAsList, sequence, startingIndex);
}

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other {
  return OrgAssertjCoreInternalInternalIterables_areEqualWithId_withId_(self, actual, other);
}

- (JavaLangAssertionError *)actualDoesNotContainSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                      withJavaLangIterable:(id<JavaLangIterable>)actual
                                                                         withNSObjectArray:(IOSObjectArray *)sequence {
  return OrgAssertjCoreInternalInternalIterables_actualDoesNotContainSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence);
}

- (JavaLangAssertionError *)actualDoesNotContainSubsequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                         withJavaLangIterable:(id<JavaLangIterable>)actual
                                                                            withNSObjectArray:(IOSObjectArray *)subsequence {
  return OrgAssertjCoreInternalInternalIterables_actualDoesNotContainSubsequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, subsequence);
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                          withJavaLangIterable:(id<JavaLangIterable>)actual
                                             withNSObjectArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalCommonValidations_checkIsNotNullAndNotEmptyWithNSObjectArray_(values);
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  id<JavaUtilSet> found = create_JavaUtilLinkedHashSet_init();
  {
    IOSObjectArray *a__ = values;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id o = *b__++;
      if (OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, actual, o)) {
        [found addWithId:o];
      }
    }
  }
  if ([found isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotContain_shouldNotContainWithId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, found, comparisonStrategy_)];
}

- (void)assertDoesNotContainAnyElementsOfWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                       withJavaLangIterable:(id<JavaLangIterable>)actual
                                                       withJavaLangIterable:(id<JavaLangIterable>)iterable {
  OrgAssertjCoreInternalCommonValidations_checkIsNotNullAndNotEmptyWithJavaLangIterable_(iterable);
  id<JavaUtilList> values = OrgAssertjCoreUtilLists_newArrayListWithJavaLangIterable_(iterable);
  [self assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info withJavaLangIterable:actual withNSObjectArray:[((id<JavaUtilList>) nil_chk(values)) toArray]];
}

- (void)assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withJavaLangIterable:(id<JavaLangIterable>)actual {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  id<JavaLangIterable> duplicates = [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(comparisonStrategy_)) duplicatesFromWithJavaLangIterable:actual];
  if (OrgAssertjCoreUtilIterables_isNullOrEmptyWithJavaLangIterable_(duplicates)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotHaveDuplicates_shouldNotHaveDuplicatesWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, duplicates, comparisonStrategy_)];
}

- (void)assertStartsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                      withJavaLangIterable:(id<JavaLangIterable>)actual
                                         withNSObjectArray:(IOSObjectArray *)sequence {
  if (OrgAssertjCoreInternalInternalIterables_commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence)) return;
  jint i = 0;
  for (id __strong actualCurrentElement in nil_chk(actual)) {
    if (i >= ((IOSObjectArray *) nil_chk(sequence))->size_) break;
    if (OrgAssertjCoreInternalInternalIterables_areEqualWithId_withId_(self, actualCurrentElement, IOSObjectArray_Get(sequence, i++))) continue;
    @throw OrgAssertjCoreInternalInternalIterables_actualDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence);
  }
  if (((IOSObjectArray *) nil_chk(sequence))->size_ > i) {
    @throw OrgAssertjCoreInternalInternalIterables_actualDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence);
  }
}

- (JavaLangAssertionError *)actualDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                        withJavaLangIterable:(id<JavaLangIterable>)actual
                                                                           withNSObjectArray:(IOSObjectArray *)sequence {
  return OrgAssertjCoreInternalInternalIterables_actualDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence);
}

- (void)assertEndsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangIterable:(id<JavaLangIterable>)actual
                                       withNSObjectArray:(IOSObjectArray *)sequence {
  if (OrgAssertjCoreInternalInternalIterables_commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence)) return;
  jint sizeOfActual = OrgAssertjCoreUtilIterables_sizeOfWithJavaLangIterable_(actual);
  if (sizeOfActual < ((IOSObjectArray *) nil_chk(sequence))->size_) {
    @throw OrgAssertjCoreInternalInternalIterables_actualDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence);
  }
  jint start = sizeOfActual - sequence->size_;
  jint sequenceIndex = 0;
  jint indexOfActual = 0;
  for (id __strong actualElement in nil_chk(actual)) {
    if (indexOfActual++ < start) continue;
    if (OrgAssertjCoreInternalInternalIterables_areEqualWithId_withId_(self, actualElement, IOSObjectArray_Get(sequence, sequenceIndex++))) continue;
    @throw OrgAssertjCoreInternalInternalIterables_actualDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence);
  }
}

- (jboolean)commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                  withJavaLangIterable:(id<JavaLangIterable>)actual
                                                                     withNSObjectArray:(IOSObjectArray *)sequence {
  return OrgAssertjCoreInternalInternalIterables_commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence);
}

- (void)assertContainsNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaLangIterable:(id<JavaLangIterable>)actual {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  if (!OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, actual, nil)) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainNull_shouldContainNullWithId_(actual)];
  }
}

- (void)assertDoesNotContainNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaLangIterable:(id<JavaLangIterable>)actual {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  if (OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, actual, nil)) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotContainNull_shouldNotContainNullWithId_(actual)];
  }
}

- (void)assertAreWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                               withJavaLangIterable:(id<JavaLangIterable>)actual
                     withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions_)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> notSatisfiesCondition = OrgAssertjCoreInternalInternalIterables_notSatisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(self, actual, condition);
    if ([((id<JavaUtilList>) nil_chk(notSatisfiesCondition)) isEmpty]) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldBe_elementsShouldBeWithId_withId_withOrgAssertjCoreApiCondition_(actual, notSatisfiesCondition, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
  }
}

- (void)assertAreNotWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                  withJavaLangIterable:(id<JavaLangIterable>)actual
                        withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions_)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalIterables_satisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(self, actual, condition);
    if ([((id<JavaUtilList>) nil_chk(satisfiesCondition)) isEmpty]) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldNotBe_elementsShouldNotBeWithId_withId_withOrgAssertjCoreApiCondition_(actual, satisfiesCondition, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
  }
}

- (void)assertHaveWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                withJavaLangIterable:(id<JavaLangIterable>)actual
                      withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions_)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> notSatisfiesCondition = OrgAssertjCoreInternalInternalIterables_notSatisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(self, actual, condition);
    if ([((id<JavaUtilList>) nil_chk(notSatisfiesCondition)) isEmpty]) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldHave_elementsShouldHaveWithId_withId_withOrgAssertjCoreApiCondition_(actual, notSatisfiesCondition, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
  }
}

- (void)assertDoNotHaveWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                     withJavaLangIterable:(id<JavaLangIterable>)actual
                           withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions_)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalIterables_satisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(self, actual, condition);
    if ([((id<JavaUtilList>) nil_chk(satisfiesCondition)) isEmpty]) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldNotHave_elementsShouldNotHaveWithId_withId_withOrgAssertjCoreApiCondition_(actual, satisfiesCondition, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
  }
}

- (void)assertAreAtLeastWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                      withJavaLangIterable:(id<JavaLangIterable>)actual
                                                   withInt:(jint)times
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions_)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    if (OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedAtLeastNTimesWithJavaLangIterable_withInt_withOrgAssertjCoreApiCondition_(self, actual, times, condition)) return;
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldBeAtLeast_elementsShouldBeAtLeastWithId_withInt_withOrgAssertjCoreApiCondition_(actual, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
  }
}

- (jboolean)conditionIsSatisfiedAtLeastNTimesWithJavaLangIterable:(id<JavaLangIterable>)actual
                                                          withInt:(jint)n
                                   withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedAtLeastNTimesWithJavaLangIterable_withInt_withOrgAssertjCoreApiCondition_(self, actual, n, condition);
}

- (void)assertAreAtMostWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                     withJavaLangIterable:(id<JavaLangIterable>)actual
                                                  withInt:(jint)n
                           withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions_)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    if (OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedAtMostNTimesWithJavaLangIterable_withOrgAssertjCoreApiCondition_withInt_(self, actual, condition, n)) return;
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldBeAtMost_elementsShouldBeAtMostWithId_withInt_withOrgAssertjCoreApiCondition_(actual, n, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
  }
}

- (jboolean)conditionIsSatisfiedAtMostNTimesWithJavaLangIterable:(id<JavaLangIterable>)actual
                                  withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition
                                                         withInt:(jint)n {
  return OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedAtMostNTimesWithJavaLangIterable_withOrgAssertjCoreApiCondition_withInt_(self, actual, condition, n);
}

- (void)assertAreExactlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                      withJavaLangIterable:(id<JavaLangIterable>)actual
                                                   withInt:(jint)times
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions_)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    if (OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedNTimesWithJavaLangIterable_withOrgAssertjCoreApiCondition_withInt_(self, actual, condition, times)) return;
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldBeExactly_elementsShouldBeExactlyWithId_withInt_withOrgAssertjCoreApiCondition_(actual, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
  }
}

- (jboolean)conditionIsSatisfiedNTimesWithJavaLangIterable:(id<JavaLangIterable>)actual
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition
                                                   withInt:(jint)times {
  return OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedNTimesWithJavaLangIterable_withOrgAssertjCoreApiCondition_withInt_(self, actual, condition, times);
}

- (void)assertHaveAtLeastWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaLangIterable:(id<JavaLangIterable>)actual
                                                    withInt:(jint)times
                             withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions_)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    if (OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedAtLeastNTimesWithJavaLangIterable_withInt_withOrgAssertjCoreApiCondition_(self, actual, times, condition)) return;
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldHaveAtLeast_elementsShouldHaveAtLeastWithId_withInt_withOrgAssertjCoreApiCondition_(actual, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
  }
}

- (void)assertHaveAtMostWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                      withJavaLangIterable:(id<JavaLangIterable>)actual
                                                   withInt:(jint)times
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions_)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    if (OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedAtMostNTimesWithJavaLangIterable_withOrgAssertjCoreApiCondition_withInt_(self, actual, condition, times)) return;
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldHaveAtMost_elementsShouldHaveAtMostWithId_withInt_withOrgAssertjCoreApiCondition_(actual, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
  }
}

- (void)assertHaveExactlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaLangIterable:(id<JavaLangIterable>)actual
                                                    withInt:(jint)times
                             withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions_)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    if (OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedNTimesWithJavaLangIterable_withOrgAssertjCoreApiCondition_withInt_(self, actual, condition, times)) return;
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldHaveExactly_elementsShouldHaveExactlyWithId_withInt_withOrgAssertjCoreApiCondition_(actual, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
  }
}

- (void)assertContainsAllWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaLangIterable:(id<JavaLangIterable>)actual
                                       withJavaLangIterable:(id<JavaLangIterable>)other {
  if (other == nil) {
    @throw OrgAssertjCoreInternalInternalIterables_iterableToLookForIsNull();
  }
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  IOSObjectArray *values = [((JavaUtilArrayList *) nil_chk(OrgAssertjCoreUtilLists_newArrayListWithJavaLangIterable_(other))) toArray];
  OrgAssertjCoreInternalInternalIterables_assertIterableContainsGivenValuesWithJavaLangIterable_withNSObjectArray_withOrgAssertjCoreApiAssertionInfo_(self, actual, values, info);
}

- (void)assertContainsExactlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withJavaLangIterable:(id<JavaLangIterable>)actual
                                              withNSObjectArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalCommonValidations_checkIsNotNullWithNSObjectArray_(values);
  [self assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info withJavaLangIterable:actual withId:values];
  id<JavaUtilSet> notExpected = OrgAssertjCoreInternalInternalIterables_setFromIterableWithJavaLangIterable_(self, actual);
  id<JavaUtilSet> notFound = OrgAssertjCoreInternalInternalIterables_containsOnlyWithJavaUtilSet_withNSObjectArray_(self, notExpected, values);
  if ([((id<JavaUtilSet>) nil_chk(notExpected)) isEmpty] && [((id<JavaUtilSet>) nil_chk(notFound)) isEmpty]) {
    jint i = 0;
    for (id __strong elementFromActual in nil_chk(actual)) {
      if (!OrgAssertjCoreInternalInternalIterables_areEqualWithId_withId_(self, elementFromActual, IOSObjectArray_Get(nil_chk(values), i))) {
        @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withInt_withOrgAssertjCoreInternalComparisonStrategy_(elementFromActual, IOSObjectArray_Get(values, i), i, comparisonStrategy_)];
      }
      i++;
    }
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainExactly_shouldContainExactlyWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, notFound, notExpected, comparisonStrategy_)];
}

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withJavaLangIterable:(id<JavaLangIterable>)actual {
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
}

- (JavaLangAssertionError *)actualDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                      withJavaLangIterable:(id<JavaLangIterable>)actual
                                                                         withNSObjectArray:(IOSObjectArray *)sequence {
  return OrgAssertjCoreInternalInternalIterables_actualDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(self, info, actual, sequence);
}

- (id<JavaUtilList>)notSatisfiesConditionWithJavaLangIterable:(id<JavaLangIterable>)actual
                               withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreInternalInternalIterables_notSatisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(self, actual, condition);
}

- (id<JavaUtilList>)satisfiesConditionWithJavaLangIterable:(id<JavaLangIterable>)actual
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreInternalInternalIterables_satisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(self, actual, condition);
}

+ (JavaLangNullPointerException *)iterableToLookForIsNull {
  return OrgAssertjCoreInternalInternalIterables_iterableToLookForIsNull();
}

+ (JavaLangIllegalArgumentException *)iterableToLookForIsEmpty {
  return OrgAssertjCoreInternalInternalIterables_iterableToLookForIsEmpty();
}

- (id<OrgAssertjCoreInternalComparisonStrategy>)getComparisonStrategy {
  return comparisonStrategy_;
}

- (void)dealloc {
  RELEASE_(comparisonStrategy_);
  RELEASE_(failures_);
  RELEASE_(conditions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalInternalIterables;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 10, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, 20, -1, -1 },
    { NULL, "Z", 0x2, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x2, 24, 22, -1, 25, -1, -1 },
    { NULL, "V", 0x1, 26, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 27, 28, -1, 29, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x82, 30, 31, -1, 32, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 33, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x1, 36, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 37, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 38, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 39, 13, -1, 14, -1, -1 },
    { NULL, "V", 0xa, 40, 3, -1, 4, -1, -1 },
    { NULL, "LJavaLangAssertionError;", 0x2, 41, 42, -1, 43, -1, -1 },
    { NULL, "Z", 0x2, 44, 45, -1, 46, -1, -1 },
    { NULL, "Z", 0x2, 47, 48, -1, -1, -1, -1 },
    { NULL, "LJavaLangAssertionError;", 0x2, 49, 16, -1, 50, -1, -1 },
    { NULL, "LJavaLangAssertionError;", 0x2, 51, 16, -1, 50, -1, -1 },
    { NULL, "V", 0x1, 52, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 53, 13, -1, 54, -1, -1 },
    { NULL, "V", 0x1, 55, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 56, 16, -1, 17, -1, -1 },
    { NULL, "LJavaLangAssertionError;", 0x2, 57, 16, -1, 50, -1, -1 },
    { NULL, "V", 0x1, 58, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x2, 59, 16, -1, 60, -1, -1 },
    { NULL, "V", 0x1, 61, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 62, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 63, 64, -1, 65, -1, -1 },
    { NULL, "V", 0x1, 66, 64, -1, 65, -1, -1 },
    { NULL, "V", 0x1, 67, 64, -1, 65, -1, -1 },
    { NULL, "V", 0x1, 68, 64, -1, 65, -1, -1 },
    { NULL, "V", 0x1, 69, 70, -1, 71, -1, -1 },
    { NULL, "Z", 0x2, 72, 73, -1, 74, -1, -1 },
    { NULL, "V", 0x1, 75, 70, -1, 71, -1, -1 },
    { NULL, "Z", 0x2, 76, 77, -1, 78, -1, -1 },
    { NULL, "V", 0x1, 79, 70, -1, 71, -1, -1 },
    { NULL, "Z", 0x2, 80, 77, -1, 78, -1, -1 },
    { NULL, "V", 0x1, 81, 70, -1, 71, -1, -1 },
    { NULL, "V", 0x1, 82, 70, -1, 71, -1, -1 },
    { NULL, "V", 0x1, 83, 70, -1, 71, -1, -1 },
    { NULL, "V", 0x1, 84, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 85, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x2, 86, 3, -1, 4, -1, -1 },
    { NULL, "LJavaLangAssertionError;", 0x2, 87, 16, -1, 50, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 88, 89, -1, 90, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 91, 89, -1, 90, -1, -1 },
    { NULL, "LJavaLangNullPointerException;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreInternalComparisonStrategy;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(getComparator);
  methods[4].selector = @selector(assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:);
  methods[5].selector = @selector(assertEmptyWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:);
  methods[6].selector = @selector(assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:);
  methods[7].selector = @selector(assertHasSizeWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withInt:);
  methods[8].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withId:);
  methods[9].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withJavaLangIterable:);
  methods[10].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[11].selector = @selector(assertIterableContainsGivenValuesWithJavaLangIterable:withNSObjectArray:withOrgAssertjCoreApiAssertionInfo:);
  methods[12].selector = @selector(iterableContainsWithJavaLangIterable:withId:);
  methods[13].selector = @selector(iterableRemovesWithJavaLangIterable:withId:);
  methods[14].selector = @selector(assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[15].selector = @selector(containsOnlyWithJavaUtilSet:withNSObjectArray:);
  methods[16].selector = @selector(setWithNSObjectArray:);
  methods[17].selector = @selector(setFromIterableWithJavaLangIterable:);
  methods[18].selector = @selector(assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[19].selector = @selector(assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[20].selector = @selector(assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[21].selector = @selector(assertIsSubsetOfWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withJavaLangIterable:);
  methods[22].selector = @selector(checkNotNullWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:);
  methods[23].selector = @selector(actualIsNotSubsetOfSetWithOrgAssertjCoreApiAssertionInfo:withId:withJavaLangIterable:withJavaLangIterable:);
  methods[24].selector = @selector(containsSequenceAtGivenIndexWithJavaUtilList:withNSObjectArray:withInt:);
  methods[25].selector = @selector(areEqualWithId:withId:);
  methods[26].selector = @selector(actualDoesNotContainSequenceWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[27].selector = @selector(actualDoesNotContainSubsequenceWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[28].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[29].selector = @selector(assertDoesNotContainAnyElementsOfWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withJavaLangIterable:);
  methods[30].selector = @selector(assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:);
  methods[31].selector = @selector(assertStartsWithWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[32].selector = @selector(actualDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[33].selector = @selector(assertEndsWithWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[34].selector = @selector(commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[35].selector = @selector(assertContainsNullWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:);
  methods[36].selector = @selector(assertDoesNotContainNullWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:);
  methods[37].selector = @selector(assertAreWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withOrgAssertjCoreApiCondition:);
  methods[38].selector = @selector(assertAreNotWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withOrgAssertjCoreApiCondition:);
  methods[39].selector = @selector(assertHaveWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withOrgAssertjCoreApiCondition:);
  methods[40].selector = @selector(assertDoNotHaveWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withOrgAssertjCoreApiCondition:);
  methods[41].selector = @selector(assertAreAtLeastWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withInt:withOrgAssertjCoreApiCondition:);
  methods[42].selector = @selector(conditionIsSatisfiedAtLeastNTimesWithJavaLangIterable:withInt:withOrgAssertjCoreApiCondition:);
  methods[43].selector = @selector(assertAreAtMostWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withInt:withOrgAssertjCoreApiCondition:);
  methods[44].selector = @selector(conditionIsSatisfiedAtMostNTimesWithJavaLangIterable:withOrgAssertjCoreApiCondition:withInt:);
  methods[45].selector = @selector(assertAreExactlyWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withInt:withOrgAssertjCoreApiCondition:);
  methods[46].selector = @selector(conditionIsSatisfiedNTimesWithJavaLangIterable:withOrgAssertjCoreApiCondition:withInt:);
  methods[47].selector = @selector(assertHaveAtLeastWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withInt:withOrgAssertjCoreApiCondition:);
  methods[48].selector = @selector(assertHaveAtMostWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withInt:withOrgAssertjCoreApiCondition:);
  methods[49].selector = @selector(assertHaveExactlyWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withInt:withOrgAssertjCoreApiCondition:);
  methods[50].selector = @selector(assertContainsAllWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withJavaLangIterable:);
  methods[51].selector = @selector(assertContainsExactlyWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[52].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:);
  methods[53].selector = @selector(actualDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo:withJavaLangIterable:withNSObjectArray:);
  methods[54].selector = @selector(notSatisfiesConditionWithJavaLangIterable:withOrgAssertjCoreApiCondition:);
  methods[55].selector = @selector(satisfiesConditionWithJavaLangIterable:withOrgAssertjCoreApiCondition:);
  methods[56].selector = @selector(iterableToLookForIsNull);
  methods[57].selector = @selector(iterableToLookForIsEmpty);
  methods[58].selector = @selector(getComparisonStrategy);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalInternalIterables;", .constantValue.asLong = 0, 0x1a, -1, 92, -1, -1 },
    { "comparisonStrategy_", "LOrgAssertjCoreInternalComparisonStrategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "conditions_", "LOrgAssertjCoreInternalConditions;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgAssertjCoreInternalComparisonStrategy;", "()Ljava/util/Comparator<*>;", "assertNullOrEmpty", "LOrgAssertjCoreApiAssertionInfo;LJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable<*>;)V", "assertEmpty", "assertNotEmpty", "assertHasSize", "LOrgAssertjCoreApiAssertionInfo;LJavaLangIterable;I", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable<*>;I)V", "assertHasSameSizeAs", "LOrgAssertjCoreApiAssertionInfo;LJavaLangIterable;LNSObject;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable<*>;Ljava/lang/Object;)V", "LOrgAssertjCoreApiAssertionInfo;LJavaLangIterable;LJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable<*>;Ljava/lang/Iterable<*>;)V", "assertContains", "LOrgAssertjCoreApiAssertionInfo;LJavaLangIterable;[LNSObject;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable<*>;[Ljava/lang/Object;)V", "assertIterableContainsGivenValues", "LJavaLangIterable;[LNSObject;LOrgAssertjCoreApiAssertionInfo;", "(Ljava/lang/Iterable<*>;[Ljava/lang/Object;Lorg/assertj/core/api/AssertionInfo;)V", "iterableContains", "LJavaLangIterable;LNSObject;", "(Ljava/lang/Iterable<*>;Ljava/lang/Object;)Z", "iterableRemoves", "(Ljava/lang/Iterable<*>;Ljava/lang/Object;)V", "assertContainsOnly", "containsOnly", "LJavaUtilSet;[LNSObject;", "(Ljava/util/Set<Ljava/lang/Object;>;[Ljava/lang/Object;)Ljava/util/Set<Ljava/lang/Object;>;", "set", "[LNSObject;", "([Ljava/lang/Object;)Ljava/util/Set<Ljava/lang/Object;>;", "setFromIterable", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)Ljava/util/Set<Ljava/lang/Object;>;", "assertContainsOnlyOnce", "assertContainsSequence", "assertContainsSubsequence", "assertIsSubsetOf", "checkNotNull", "actualIsNotSubsetOfSet", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LJavaLangIterable;LJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Iterable<*>;Ljava/lang/Iterable<*>;)Ljava/lang/AssertionError;", "containsSequenceAtGivenIndex", "LJavaUtilList;[LNSObject;I", "(Ljava/util/List<*>;[Ljava/lang/Object;I)Z", "areEqual", "LNSObject;LNSObject;", "actualDoesNotContainSequence", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable<*>;[Ljava/lang/Object;)Ljava/lang/AssertionError;", "actualDoesNotContainSubsequence", "assertDoesNotContain", "assertDoesNotContainAnyElementsOf", "<T:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable<TT;>;Ljava/lang/Iterable<+TT;>;)V", "assertDoesNotHaveDuplicates", "assertStartsWith", "actualDoesNotStartWithSequence", "assertEndsWith", "commonCheckThatIterableAssertionSucceeds", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable<*>;[Ljava/lang/Object;)Z", "assertContainsNull", "assertDoesNotContainNull", "assertAre", "LOrgAssertjCoreApiAssertionInfo;LJavaLangIterable;LOrgAssertjCoreApiCondition;", "<E:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable<+TE;>;Lorg/assertj/core/api/Condition<-TE;>;)V", "assertAreNot", "assertHave", "assertDoNotHave", "assertAreAtLeast", "LOrgAssertjCoreApiAssertionInfo;LJavaLangIterable;ILOrgAssertjCoreApiCondition;", "<E:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Iterable<+TE;>;ILorg/assertj/core/api/Condition<-TE;>;)V", "conditionIsSatisfiedAtLeastNTimes", "LJavaLangIterable;ILOrgAssertjCoreApiCondition;", "<E:Ljava/lang/Object;>(Ljava/lang/Iterable<+TE;>;ILorg/assertj/core/api/Condition<-TE;>;)Z", "assertAreAtMost", "conditionIsSatisfiedAtMostNTimes", "LJavaLangIterable;LOrgAssertjCoreApiCondition;I", "<E:Ljava/lang/Object;>(Ljava/lang/Iterable<+TE;>;Lorg/assertj/core/api/Condition<-TE;>;I)Z", "assertAreExactly", "conditionIsSatisfiedNTimes", "assertHaveAtLeast", "assertHaveAtMost", "assertHaveExactly", "assertContainsAll", "assertContainsExactly", "assertNotNull", "actualDoesNotEndWithSequence", "notSatisfiesCondition", "LJavaLangIterable;LOrgAssertjCoreApiCondition;", "<E:Ljava/lang/Object;>(Ljava/lang/Iterable<+TE;>;Lorg/assertj/core/api/Condition<-TE;>;)Ljava/util/List<TE;>;", "satisfiesCondition", &OrgAssertjCoreInternalInternalIterables_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInternalIterables = { "InternalIterables", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 59, 4, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInternalIterables;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalInternalIterables class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalInternalIterables_INSTANCE, new_OrgAssertjCoreInternalInternalIterables_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalInternalIterables)
  }
}

@end

OrgAssertjCoreInternalInternalIterables *OrgAssertjCoreInternalInternalIterables_instance() {
  OrgAssertjCoreInternalInternalIterables_initialize();
  return OrgAssertjCoreInternalInternalIterables_INSTANCE;
}

void OrgAssertjCoreInternalInternalIterables_init(OrgAssertjCoreInternalInternalIterables *self) {
  OrgAssertjCoreInternalInternalIterables_initWithOrgAssertjCoreInternalComparisonStrategy_(self, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

OrgAssertjCoreInternalInternalIterables *new_OrgAssertjCoreInternalInternalIterables_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalIterables, init)
}

OrgAssertjCoreInternalInternalIterables *create_OrgAssertjCoreInternalInternalIterables_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalIterables, init)
}

void OrgAssertjCoreInternalInternalIterables_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  NSObject_init(self);
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
  JreStrongAssign(&self->conditions_, OrgAssertjCoreInternalConditions_instance());
  JreStrongAssign(&self->comparisonStrategy_, comparisonStrategy);
}

OrgAssertjCoreInternalInternalIterables *new_OrgAssertjCoreInternalInternalIterables_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalIterables, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

OrgAssertjCoreInternalInternalIterables *create_OrgAssertjCoreInternalInternalIterables_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalIterables, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

void OrgAssertjCoreInternalInternalIterables_assertIterableContainsGivenValuesWithJavaLangIterable_withNSObjectArray_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, IOSObjectArray *values, id<OrgAssertjCoreApiAssertionInfo> info) {
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  {
    IOSObjectArray *a__ = values;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id value = *b__++;
      if (!OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, actual, value)) {
        [notFound addWithId:value];
      }
    }
  }
  if ([notFound isEmpty]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(self->failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContain_shouldContainWithId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, notFound, self->comparisonStrategy_)];
}

jboolean OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, id value) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) iterableContainsWithJavaLangIterable:actual withId:value];
}

void OrgAssertjCoreInternalInternalIterables_iterableRemovesWithJavaLangIterable_withId_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, id value) {
  [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) iterableRemovesWithJavaLangIterable:actual withId:value];
}

id<JavaUtilSet> OrgAssertjCoreInternalInternalIterables_containsOnlyWithJavaUtilSet_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<JavaUtilSet> actual, IOSObjectArray *values) {
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  for (id __strong o in nil_chk(OrgAssertjCoreInternalInternalIterables_setWithNSObjectArray_(self, values))) {
    if (OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, actual, o)) {
      OrgAssertjCoreInternalInternalIterables_iterableRemovesWithJavaLangIterable_withId_(self, actual, o);
    }
    else {
      [notFound addWithId:o];
    }
  }
  return notFound;
}

id<JavaUtilSet> OrgAssertjCoreInternalInternalIterables_setWithNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, IOSObjectArray *elements) {
  if (elements == nil) {
    return nil;
  }
  id<JavaUtilSet> set = create_JavaUtilHashSet_init();
  {
    IOSObjectArray *a__ = elements;
    id const *b__ = a__->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id e = *b__++;
      if (!OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, set, e)) {
        [set addWithId:e];
      }
    }
  }
  return set;
}

id<JavaUtilSet> OrgAssertjCoreInternalInternalIterables_setFromIterableWithJavaLangIterable_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> iterable) {
  if (iterable == nil) {
    return nil;
  }
  id<JavaUtilSet> set = create_JavaUtilHashSet_init();
  for (id __strong e in iterable) {
    if (!OrgAssertjCoreInternalInternalIterables_iterableContainsWithJavaLangIterable_withId_(self, set, e)) {
      [set addWithId:e];
    }
  }
  return set;
}

void OrgAssertjCoreInternalInternalIterables_checkNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> set) {
  OrgAssertjCoreInternalInternalIterables_initialize();
  if (set == nil) {
    @throw OrgAssertjCoreInternalInternalIterables_iterableToLookForIsNull();
  }
}

JavaLangAssertionError *OrgAssertjCoreInternalInternalIterables_actualIsNotSubsetOfSetWithOrgAssertjCoreApiAssertionInfo_withId_withJavaLangIterable_withJavaLangIterable_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id actual, id<JavaLangIterable> set, id<JavaLangIterable> extra) {
  return [((OrgAssertjCoreInternalFailures *) nil_chk(self->failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSubsetOf_shouldBeSubsetOfWithId_withId_withJavaLangIterable_withOrgAssertjCoreInternalComparisonStrategy_(actual, set, extra, self->comparisonStrategy_)];
}

jboolean OrgAssertjCoreInternalInternalIterables_containsSequenceAtGivenIndexWithJavaUtilList_withNSObjectArray_withInt_(OrgAssertjCoreInternalInternalIterables *self, id<JavaUtilList> actualAsList, IOSObjectArray *sequence, jint startingIndex) {
  if ([((id<JavaUtilList>) nil_chk(actualAsList)) size] - startingIndex < ((IOSObjectArray *) nil_chk(sequence))->size_) {
    return false;
  }
  for (jint i = 0; i < sequence->size_; i++) {
    if (!OrgAssertjCoreInternalInternalIterables_areEqualWithId_withId_(self, [actualAsList getWithInt:startingIndex + i], IOSObjectArray_Get(sequence, i))) {
      return false;
    }
  }
  return true;
}

jboolean OrgAssertjCoreInternalInternalIterables_areEqualWithId_withId_(OrgAssertjCoreInternalInternalIterables *self, id actual, id other) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) areEqualWithId:actual withId:other];
}

JavaLangAssertionError *OrgAssertjCoreInternalInternalIterables_actualDoesNotContainSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual, IOSObjectArray *sequence) {
  return [((OrgAssertjCoreInternalFailures *) nil_chk(self->failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainSequence_shouldContainSequenceWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, self->comparisonStrategy_)];
}

JavaLangAssertionError *OrgAssertjCoreInternalInternalIterables_actualDoesNotContainSubsequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual, IOSObjectArray *subsequence) {
  return [((OrgAssertjCoreInternalFailures *) nil_chk(self->failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainSubsequence_shouldContainSubsequenceWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, subsequence, self->comparisonStrategy_)];
}

JavaLangAssertionError *OrgAssertjCoreInternalInternalIterables_actualDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual, IOSObjectArray *sequence) {
  return [((OrgAssertjCoreInternalFailures *) nil_chk(self->failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldStartWith_shouldStartWithWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, self->comparisonStrategy_)];
}

jboolean OrgAssertjCoreInternalInternalIterables_commonCheckThatIterableAssertionSucceedsWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual, IOSObjectArray *sequence) {
  OrgAssertjCoreInternalCommonValidations_checkIsNotNullWithNSObjectArray_(sequence);
  OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(self, info, actual);
  if (![((id<JavaUtilIterator>) nil_chk([((id<JavaLangIterable>) nil_chk(actual)) iterator])) hasNext] && ((IOSObjectArray *) nil_chk(sequence))->size_ == 0) return true;
  OrgAssertjCoreInternalCommonValidations_failIfEmptySinceActualIsNotEmptyWithNSObjectArray_(sequence);
  return false;
}

jboolean OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedAtLeastNTimesWithJavaLangIterable_withInt_withOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, jint n, OrgAssertjCoreApiCondition *condition) {
  id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalIterables_satisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(self, actual, condition);
  return [((id<JavaUtilList>) nil_chk(satisfiesCondition)) size] >= n;
}

jboolean OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedAtMostNTimesWithJavaLangIterable_withOrgAssertjCoreApiCondition_withInt_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, OrgAssertjCoreApiCondition *condition, jint n) {
  id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalIterables_satisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(self, actual, condition);
  return [((id<JavaUtilList>) nil_chk(satisfiesCondition)) size] <= n;
}

jboolean OrgAssertjCoreInternalInternalIterables_conditionIsSatisfiedNTimesWithJavaLangIterable_withOrgAssertjCoreApiCondition_withInt_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, OrgAssertjCoreApiCondition *condition, jint times) {
  id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalIterables_satisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(self, actual, condition);
  return [((id<JavaUtilList>) nil_chk(satisfiesCondition)) size] == times;
}

void OrgAssertjCoreInternalInternalIterables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual) {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
}

JavaLangAssertionError *OrgAssertjCoreInternalInternalIterables_actualDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo_withJavaLangIterable_withNSObjectArray_(OrgAssertjCoreInternalInternalIterables *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangIterable> actual, IOSObjectArray *sequence) {
  return [((OrgAssertjCoreInternalFailures *) nil_chk(self->failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldEndWith_shouldEndWithWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, self->comparisonStrategy_)];
}

id<JavaUtilList> OrgAssertjCoreInternalInternalIterables_notSatisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, OrgAssertjCoreApiCondition *condition) {
  id<JavaUtilList> notSatisfiesCondition = create_JavaUtilLinkedList_init();
  for (id __strong o in nil_chk(actual)) {
    if (![((OrgAssertjCoreApiCondition *) nil_chk(condition)) matchesWithId:o]) {
      [notSatisfiesCondition addWithId:o];
    }
  }
  return notSatisfiesCondition;
}

id<JavaUtilList> OrgAssertjCoreInternalInternalIterables_satisfiesConditionWithJavaLangIterable_withOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalIterables *self, id<JavaLangIterable> actual, OrgAssertjCoreApiCondition *condition) {
  id<JavaUtilList> satisfiesCondition = create_JavaUtilLinkedList_init();
  for (id __strong o in nil_chk(actual)) {
    if ([((OrgAssertjCoreApiCondition *) nil_chk(condition)) matchesWithId:o]) {
      [satisfiesCondition addWithId:o];
    }
  }
  return satisfiesCondition;
}

JavaLangNullPointerException *OrgAssertjCoreInternalInternalIterables_iterableToLookForIsNull() {
  OrgAssertjCoreInternalInternalIterables_initialize();
  return create_JavaLangNullPointerException_initWithNSString_(@"The iterable to look for should not be null");
}

JavaLangIllegalArgumentException *OrgAssertjCoreInternalInternalIterables_iterableToLookForIsEmpty() {
  OrgAssertjCoreInternalInternalIterables_initialize();
  return create_JavaLangIllegalArgumentException_initWithNSString_(@"The iterable to look for should not be empty");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInternalIterables)
