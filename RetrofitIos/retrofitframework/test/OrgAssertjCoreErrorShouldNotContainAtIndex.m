//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldNotContainAtIndex.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldNotContainAtIndex.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/lang/Integer.h"

@interface OrgAssertjCoreErrorShouldNotContainAtIndex ()

- (instancetype)initWithId:(id)actual
                    withId:(id)expected
withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldNotContainAtIndex_initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldNotContainAtIndex *self, id actual, id expected, OrgAssertjCoreDataIndex *index, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotContainAtIndex *new_OrgAssertjCoreErrorShouldNotContainAtIndex_initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, OrgAssertjCoreDataIndex *index, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotContainAtIndex *create_OrgAssertjCoreErrorShouldNotContainAtIndex_initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, OrgAssertjCoreDataIndex *index, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

@implementation OrgAssertjCoreErrorShouldNotContainAtIndex

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotContainAtIndexWithId:(id)actual
                                                                     withId:(id)expected
                                                withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index
                               withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldNotContainAtIndex_shouldNotContainAtIndexWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(actual, expected, index, comparisonStrategy);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotContainAtIndexWithId:(id)actual
                                                                     withId:(id)expected
                                                withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  return OrgAssertjCoreErrorShouldNotContainAtIndex_shouldNotContainAtIndexWithId_withId_withOrgAssertjCoreDataIndex_(actual, expected, index);
}

- (instancetype)initWithId:(id)actual
                    withId:(id)expected
withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldNotContainAtIndex_initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, expected, index, comparisonStrategy);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldNotContainAtIndexWithId:withId:withOrgAssertjCoreDataIndex:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[1].selector = @selector(shouldNotContainAtIndexWithId:withId:withOrgAssertjCoreDataIndex:);
  methods[2].selector = @selector(initWithId:withId:withOrgAssertjCoreDataIndex:withOrgAssertjCoreInternalComparisonStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldNotContainAtIndex", "LNSObject;LNSObject;LOrgAssertjCoreDataIndex;LOrgAssertjCoreInternalComparisonStrategy;", "LNSObject;LNSObject;LOrgAssertjCoreDataIndex;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldNotContainAtIndex = { "ShouldNotContainAtIndex", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldNotContainAtIndex;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotContainAtIndex_shouldNotContainAtIndexWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, OrgAssertjCoreDataIndex *index, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldNotContainAtIndex_initialize();
  return create_OrgAssertjCoreErrorShouldNotContainAtIndex_initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(actual, expected, index, comparisonStrategy);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotContainAtIndex_shouldNotContainAtIndexWithId_withId_withOrgAssertjCoreDataIndex_(id actual, id expected, OrgAssertjCoreDataIndex *index) {
  OrgAssertjCoreErrorShouldNotContainAtIndex_initialize();
  return create_OrgAssertjCoreErrorShouldNotContainAtIndex_initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(actual, expected, index, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

void OrgAssertjCoreErrorShouldNotContainAtIndex_initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldNotContainAtIndex *self, id actual, id expected, OrgAssertjCoreDataIndex *index, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nnot to contain:\n <%s>\nat index <%s>\n%s", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected, JavaLangInteger_valueOfWithInt_(((OrgAssertjCoreDataIndex *) nil_chk(index))->value_), comparisonStrategy } count:4 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldNotContainAtIndex *new_OrgAssertjCoreErrorShouldNotContainAtIndex_initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, OrgAssertjCoreDataIndex *index, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldNotContainAtIndex, initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, index, comparisonStrategy)
}

OrgAssertjCoreErrorShouldNotContainAtIndex *create_OrgAssertjCoreErrorShouldNotContainAtIndex_initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, OrgAssertjCoreDataIndex *index, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldNotContainAtIndex, initWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, index, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldNotContainAtIndex)
