//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/CommonValidations.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreDataOffset.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveLineCount.h"
#include "OrgAssertjCoreErrorShouldHaveSameSizeAs.h"
#include "OrgAssertjCoreErrorShouldHaveSize.h"
#include "OrgAssertjCoreInternalCommonErrors.h"
#include "OrgAssertjCoreInternalCommonValidations.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreUtilIterables.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"

@interface OrgAssertjCoreInternalCommonValidations ()

- (instancetype)init;

@end

inline OrgAssertjCoreInternalFailures *OrgAssertjCoreInternalCommonValidations_get_failures();
inline OrgAssertjCoreInternalFailures *OrgAssertjCoreInternalCommonValidations_set_failures(OrgAssertjCoreInternalFailures *value);
static OrgAssertjCoreInternalFailures *OrgAssertjCoreInternalCommonValidations_failures;
J2OBJC_STATIC_FIELD_OBJ(OrgAssertjCoreInternalCommonValidations, failures, OrgAssertjCoreInternalFailures *)

__attribute__((unused)) static void OrgAssertjCoreInternalCommonValidations_init(OrgAssertjCoreInternalCommonValidations *self);

__attribute__((unused)) static OrgAssertjCoreInternalCommonValidations *new_OrgAssertjCoreInternalCommonValidations_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreInternalCommonValidations *create_OrgAssertjCoreInternalCommonValidations_init();

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalCommonValidations)

@implementation OrgAssertjCoreInternalCommonValidations

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalCommonValidations_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)checkIndexValueIsValidWithOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index
                                                  withInt:(jint)maximum {
  OrgAssertjCoreInternalCommonValidations_checkIndexValueIsValidWithOrgAssertjCoreDataIndex_withInt_(index, maximum);
}

+ (void)checkOffsetIsNotNullWithOrgAssertjCoreDataOffset:(OrgAssertjCoreDataOffset *)offset {
  OrgAssertjCoreInternalCommonValidations_checkOffsetIsNotNullWithOrgAssertjCoreDataOffset_(offset);
}

+ (void)checkNumberIsNotNullWithNSNumber:(NSNumber *)number {
  OrgAssertjCoreInternalCommonValidations_checkNumberIsNotNullWithNSNumber_(number);
}

+ (void)checkIsNotEmptyWithNSObjectArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalCommonValidations_checkIsNotEmptyWithNSObjectArray_(values);
}

+ (void)checkIsNotEmptyWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  OrgAssertjCoreInternalCommonValidations_checkIsNotEmptyWithJavaLangIterable_(iterable);
}

+ (void)checkIsNotNullWithNSObjectArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalCommonValidations_checkIsNotNullWithNSObjectArray_(values);
}

+ (void)checkIsNotNullWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  OrgAssertjCoreInternalCommonValidations_checkIsNotNullWithJavaLangIterable_(iterable);
}

+ (void)checkIsNotNullAndNotEmptyWithNSObjectArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalCommonValidations_checkIsNotNullAndNotEmptyWithNSObjectArray_(values);
}

+ (void)checkIsNotNullAndNotEmptyWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  OrgAssertjCoreInternalCommonValidations_checkIsNotNullAndNotEmptyWithJavaLangIterable_(iterable);
}

+ (void)failIfEmptySinceActualIsNotEmptyWithNSObjectArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalCommonValidations_failIfEmptySinceActualIsNotEmptyWithNSObjectArray_(values);
}

+ (void)hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                      withId:(id)actual
                                                      withId:(id)other
                                                     withInt:(jint)sizeOfActual {
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withId_withInt_(info, actual, other, sizeOfActual);
}

+ (void)hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                      withId:(id)actual
                                        withJavaLangIterable:(id<JavaLangIterable>)other
                                                     withInt:(jint)sizeOfActual {
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withJavaLangIterable_withInt_(info, actual, other, sizeOfActual);
}

+ (void)hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                      withId:(id)actual
                                             withJavaUtilMap:(id<JavaUtilMap>)other
                                                     withInt:(jint)sizeOfActual {
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withJavaUtilMap_withInt_(info, actual, other, sizeOfActual);
}

+ (void)checkOtherIsNotNullWithId:(id)other
                     withNSString:(NSString *)otherType {
  OrgAssertjCoreInternalCommonValidations_checkOtherIsNotNullWithId_withNSString_(other, otherType);
}

+ (void)checkSameSizesWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withId:(id)actual
                                                 withInt:(jint)sizeOfActual
                                                 withInt:(jint)sizeOfOther {
  OrgAssertjCoreInternalCommonValidations_checkSameSizesWithOrgAssertjCoreApiAssertionInfo_withId_withInt_withInt_(info, actual, sizeOfActual, sizeOfOther);
}

+ (void)checkSizesWithId:(id)actual
                 withInt:(jint)sizeOfActual
                 withInt:(jint)sizeOfOther
withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info {
  OrgAssertjCoreInternalCommonValidations_checkSizesWithId_withInt_withInt_withOrgAssertjCoreApiAssertionInfo_(actual, sizeOfActual, sizeOfOther, info);
}

+ (void)checkLineCountsWithId:(id)actual
                      withInt:(jint)lineCountOfActual
                      withInt:(jint)lineCountOfOther
withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info {
  OrgAssertjCoreInternalCommonValidations_checkLineCountsWithId_withInt_withInt_withOrgAssertjCoreApiAssertionInfo_(actual, lineCountOfActual, lineCountOfOther, info);
}

+ (void)checkTypeIsNotNullWithIOSClass:(IOSClass *)expectedType {
  OrgAssertjCoreInternalCommonValidations_checkTypeIsNotNullWithIOSClass_(expectedType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x8, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 7, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x8, 11, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 11, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x8, 12, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 12, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x8, 13, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x9, 14, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x8, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 27, 28, -1, 29, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkIndexValueIsValidWithOrgAssertjCoreDataIndex:withInt:);
  methods[2].selector = @selector(checkOffsetIsNotNullWithOrgAssertjCoreDataOffset:);
  methods[3].selector = @selector(checkNumberIsNotNullWithNSNumber:);
  methods[4].selector = @selector(checkIsNotEmptyWithNSObjectArray:);
  methods[5].selector = @selector(checkIsNotEmptyWithJavaLangIterable:);
  methods[6].selector = @selector(checkIsNotNullWithNSObjectArray:);
  methods[7].selector = @selector(checkIsNotNullWithJavaLangIterable:);
  methods[8].selector = @selector(checkIsNotNullAndNotEmptyWithNSObjectArray:);
  methods[9].selector = @selector(checkIsNotNullAndNotEmptyWithJavaLangIterable:);
  methods[10].selector = @selector(failIfEmptySinceActualIsNotEmptyWithNSObjectArray:);
  methods[11].selector = @selector(hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo:withId:withId:withInt:);
  methods[12].selector = @selector(hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo:withId:withJavaLangIterable:withInt:);
  methods[13].selector = @selector(hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo:withId:withJavaUtilMap:withInt:);
  methods[14].selector = @selector(checkOtherIsNotNullWithId:withNSString:);
  methods[15].selector = @selector(checkSameSizesWithOrgAssertjCoreApiAssertionInfo:withId:withInt:withInt:);
  methods[16].selector = @selector(checkSizesWithId:withInt:withInt:withOrgAssertjCoreApiAssertionInfo:);
  methods[17].selector = @selector(checkLineCountsWithId:withInt:withInt:withOrgAssertjCoreApiAssertionInfo:);
  methods[18].selector = @selector(checkTypeIsNotNullWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "failures", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0xa, -1, 30, -1, -1 },
  };
  static const void *ptrTable[] = { "checkIndexValueIsValid", "LOrgAssertjCoreDataIndex;I", "checkOffsetIsNotNull", "LOrgAssertjCoreDataOffset;", "(Lorg/assertj/core/data/Offset<*>;)V", "checkNumberIsNotNull", "LNSNumber;", "checkIsNotEmpty", "[LNSObject;", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)V", "checkIsNotNull", "checkIsNotNullAndNotEmpty", "failIfEmptySinceActualIsNotEmpty", "hasSameSizeAsCheck", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LNSObject;I", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LJavaLangIterable;I", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Iterable<*>;I)V", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LJavaUtilMap;I", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/util/Map<**>;I)V", "checkOtherIsNotNull", "LNSObject;LNSString;", "checkSameSizes", "LOrgAssertjCoreApiAssertionInfo;LNSObject;II", "checkSizes", "LNSObject;IILOrgAssertjCoreApiAssertionInfo;", "checkLineCounts", "checkTypeIsNotNull", "LIOSClass;", "(Ljava/lang/Class<*>;)V", &OrgAssertjCoreInternalCommonValidations_failures };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalCommonValidations = { "CommonValidations", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x10, 19, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalCommonValidations;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalCommonValidations class]) {
    JreStrongAssign(&OrgAssertjCoreInternalCommonValidations_failures, OrgAssertjCoreInternalFailures_instance());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalCommonValidations)
  }
}

@end

void OrgAssertjCoreInternalCommonValidations_init(OrgAssertjCoreInternalCommonValidations *self) {
  NSObject_init(self);
}

OrgAssertjCoreInternalCommonValidations *new_OrgAssertjCoreInternalCommonValidations_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalCommonValidations, init)
}

OrgAssertjCoreInternalCommonValidations *create_OrgAssertjCoreInternalCommonValidations_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalCommonValidations, init)
}

void OrgAssertjCoreInternalCommonValidations_checkIndexValueIsValidWithOrgAssertjCoreDataIndex_withInt_(OrgAssertjCoreDataIndex *index, jint maximum) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (index == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Index should not be null");
  if (index->value_ <= maximum) return;
  NSString *errorMessage = @"Index should be between <%d> and <%d> (inclusive,) but was:\n <%d>";
  @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(errorMessage, [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(maximum), JavaLangInteger_valueOfWithInt_(index->value_) } count:3 type:NSObject_class_()]));
}

void OrgAssertjCoreInternalCommonValidations_checkOffsetIsNotNullWithOrgAssertjCoreDataOffset_(OrgAssertjCoreDataOffset *offset) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (offset == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The given offset should not be null");
}

void OrgAssertjCoreInternalCommonValidations_checkNumberIsNotNullWithNSNumber_(NSNumber *number) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (number == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The given number should not be null");
}

void OrgAssertjCoreInternalCommonValidations_checkIsNotEmptyWithNSObjectArray_(IOSObjectArray *values) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (((IOSObjectArray *) nil_chk(values))->size_ == 0) @throw OrgAssertjCoreInternalCommonErrors_arrayOfValuesToLookForIsEmpty();
}

void OrgAssertjCoreInternalCommonValidations_checkIsNotEmptyWithJavaLangIterable_(id<JavaLangIterable> iterable) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (![((id<JavaUtilIterator>) nil_chk([((id<JavaLangIterable>) nil_chk(iterable)) iterator])) hasNext]) @throw OrgAssertjCoreInternalCommonErrors_iterableOfValuesToLookForIsEmpty();
}

void OrgAssertjCoreInternalCommonValidations_checkIsNotNullWithNSObjectArray_(IOSObjectArray *values) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (values == nil) @throw OrgAssertjCoreInternalCommonErrors_arrayOfValuesToLookForIsNull();
}

void OrgAssertjCoreInternalCommonValidations_checkIsNotNullWithJavaLangIterable_(id<JavaLangIterable> iterable) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (iterable == nil) @throw OrgAssertjCoreInternalCommonErrors_iterableOfValuesForIsNull();
}

void OrgAssertjCoreInternalCommonValidations_checkIsNotNullAndNotEmptyWithNSObjectArray_(IOSObjectArray *values) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  OrgAssertjCoreInternalCommonValidations_checkIsNotNullWithNSObjectArray_(values);
  OrgAssertjCoreInternalCommonValidations_checkIsNotEmptyWithNSObjectArray_(values);
}

void OrgAssertjCoreInternalCommonValidations_checkIsNotNullAndNotEmptyWithJavaLangIterable_(id<JavaLangIterable> iterable) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  OrgAssertjCoreInternalCommonValidations_checkIsNotNullWithJavaLangIterable_(iterable);
  OrgAssertjCoreInternalCommonValidations_checkIsNotEmptyWithJavaLangIterable_(iterable);
}

void OrgAssertjCoreInternalCommonValidations_failIfEmptySinceActualIsNotEmptyWithNSObjectArray_(IOSObjectArray *values) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (((IOSObjectArray *) nil_chk(values))->size_ == 0) @throw create_JavaLangAssertionError_initWithId_(@"actual is not empty");
}

void OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withId_withInt_(id<OrgAssertjCoreApiAssertionInfo> info, id actual, id other, jint sizeOfActual) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  OrgAssertjCoreInternalCommonValidations_checkOtherIsNotNullWithId_withNSString_(other, @"Array");
  OrgAssertjCoreInternalCommonValidations_checkSameSizesWithOrgAssertjCoreApiAssertionInfo_withId_withInt_withInt_(info, actual, sizeOfActual, JavaLangReflectArray_getLengthWithId_(other));
}

void OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withJavaLangIterable_withInt_(id<OrgAssertjCoreApiAssertionInfo> info, id actual, id<JavaLangIterable> other, jint sizeOfActual) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  OrgAssertjCoreInternalCommonValidations_checkOtherIsNotNullWithId_withNSString_(other, @"Iterable");
  OrgAssertjCoreInternalCommonValidations_checkSameSizesWithOrgAssertjCoreApiAssertionInfo_withId_withInt_withInt_(info, actual, sizeOfActual, OrgAssertjCoreUtilIterables_sizeOfWithJavaLangIterable_(other));
}

void OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withJavaUtilMap_withInt_(id<OrgAssertjCoreApiAssertionInfo> info, id actual, id<JavaUtilMap> other, jint sizeOfActual) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  OrgAssertjCoreInternalCommonValidations_checkOtherIsNotNullWithId_withNSString_(other, @"Map");
  OrgAssertjCoreInternalCommonValidations_checkSameSizesWithOrgAssertjCoreApiAssertionInfo_withId_withInt_withInt_(info, actual, sizeOfActual, [((id<JavaUtilMap>) nil_chk(other)) size]);
}

void OrgAssertjCoreInternalCommonValidations_checkOtherIsNotNullWithId_withNSString_(id other, NSString *otherType) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (other == nil) @throw create_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$$", @"The ", otherType, @" to compare actual size with should not be null"));
}

void OrgAssertjCoreInternalCommonValidations_checkSameSizesWithOrgAssertjCoreApiAssertionInfo_withId_withInt_withInt_(id<OrgAssertjCoreApiAssertionInfo> info, id actual, jint sizeOfActual, jint sizeOfOther) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (sizeOfActual != sizeOfOther) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(OrgAssertjCoreInternalCommonValidations_failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveSameSizeAs_shouldHaveSameSizeAsWithId_withId_withId_(actual, JavaLangInteger_valueOfWithInt_(sizeOfActual), JavaLangInteger_valueOfWithInt_(sizeOfOther))];
}

void OrgAssertjCoreInternalCommonValidations_checkSizesWithId_withInt_withInt_withOrgAssertjCoreApiAssertionInfo_(id actual, jint sizeOfActual, jint sizeOfOther, id<OrgAssertjCoreApiAssertionInfo> info) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (sizeOfActual != sizeOfOther) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(OrgAssertjCoreInternalCommonValidations_failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveSize_shouldHaveSizeWithId_withInt_withInt_(actual, sizeOfActual, sizeOfOther)];
}

void OrgAssertjCoreInternalCommonValidations_checkLineCountsWithId_withInt_withInt_withOrgAssertjCoreApiAssertionInfo_(id actual, jint lineCountOfActual, jint lineCountOfOther, id<OrgAssertjCoreApiAssertionInfo> info) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (lineCountOfActual != lineCountOfOther) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(OrgAssertjCoreInternalCommonValidations_failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveLineCount_shouldHaveLinesCountWithId_withInt_withInt_(actual, lineCountOfActual, lineCountOfOther)];
}

void OrgAssertjCoreInternalCommonValidations_checkTypeIsNotNullWithIOSClass_(IOSClass *expectedType) {
  OrgAssertjCoreInternalCommonValidations_initialize();
  if (expectedType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The given type should not be null");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalCommonValidations)
