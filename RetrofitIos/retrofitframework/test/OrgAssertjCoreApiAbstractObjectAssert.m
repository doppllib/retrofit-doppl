//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/AbstractObjectAssert.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractObjectAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalInternalObjects.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractObjectAssert

- (instancetype)initWithId:(id)actual
              withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractObjectAssert_initWithId_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractObjectAssert *)isEqualToIgnoringNullFieldsWithId:(id)other {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(objects_)) assertIsLenientEqualsToIgnoringNullFieldsWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:other];
  return ((OrgAssertjCoreApiAbstractObjectAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectAssert *)isLenientEqualsToByIgnoringNullFieldsWithId:(id)other {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(objects_)) assertIsLenientEqualsToIgnoringNullFieldsWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:other];
  return ((OrgAssertjCoreApiAbstractObjectAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectAssert *)isEqualToComparingOnlyGivenFieldsWithId:(id)other
                                                                 withNSStringArray:(IOSObjectArray *)fieldsUsedInComparison {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(objects_)) assertIsEqualToComparingOnlyGivenFieldsWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:other withNSStringArray:fieldsUsedInComparison];
  return ((OrgAssertjCoreApiAbstractObjectAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectAssert *)isLenientEqualsToByAcceptingFieldsWithId:(id)other
                                                                  withNSStringArray:(IOSObjectArray *)fields {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(objects_)) assertIsEqualToComparingOnlyGivenFieldsWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:other withNSStringArray:fields];
  return ((OrgAssertjCoreApiAbstractObjectAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectAssert *)isEqualToIgnoringGivenFieldsWithId:(id)other
                                                            withNSStringArray:(IOSObjectArray *)fieldsToIgnore {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(objects_)) assertIsEqualToIgnoringGivenFieldsWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:other withNSStringArray:fieldsToIgnore];
  return ((OrgAssertjCoreApiAbstractObjectAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectAssert *)isLenientEqualsToByIgnoringFieldsWithId:(id)other
                                                                 withNSStringArray:(IOSObjectArray *)fields {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(objects_)) assertIsEqualToIgnoringGivenFieldsWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:other withNSStringArray:fields];
  return ((OrgAssertjCoreApiAbstractObjectAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectAssert *)isEqualToComparingFieldByFieldWithId:(id)other {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(objects_)) assertIsEqualToIgnoringGivenFieldsWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:other withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]];
  return ((OrgAssertjCoreApiAbstractObjectAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectAssert *)isEqualsToByComparingFieldsWithId:(id)other {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(objects_)) assertIsEqualToIgnoringGivenFieldsWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:other withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]];
  return ((OrgAssertjCoreApiAbstractObjectAssert *) myself_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectAssert;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectAssert;", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectAssert;", 0x81, 6, 7, -1, 8, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectAssert;", 0x81, 9, 7, -1, 8, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectAssert;", 0x81, 10, 7, -1, 8, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectAssert;", 0x81, 11, 7, -1, 8, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectAssert;", 0x1, 12, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectAssert;", 0x1, 13, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withIOSClass:);
  methods[1].selector = @selector(isEqualToIgnoringNullFieldsWithId:);
  methods[2].selector = @selector(isLenientEqualsToByIgnoringNullFieldsWithId:);
  methods[3].selector = @selector(isEqualToComparingOnlyGivenFieldsWithId:withNSStringArray:);
  methods[4].selector = @selector(isLenientEqualsToByAcceptingFieldsWithId:withNSStringArray:);
  methods[5].selector = @selector(isEqualToIgnoringGivenFieldsWithId:withNSStringArray:);
  methods[6].selector = @selector(isLenientEqualsToByIgnoringFieldsWithId:withNSStringArray:);
  methods[7].selector = @selector(isEqualToComparingFieldByFieldWithId:);
  methods[8].selector = @selector(isEqualsToByComparingFieldsWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSObject;LIOSClass;", "(TA;Ljava/lang/Class<*>;)V", "isEqualToIgnoringNullFields", "LNSObject;", "(TA;)TS;", "isLenientEqualsToByIgnoringNullFields", "isEqualToComparingOnlyGivenFields", "LNSObject;[LNSString;", "(TA;[Ljava/lang/String;)TS;", "isLenientEqualsToByAcceptingFields", "isEqualToIgnoringGivenFields", "isLenientEqualsToByIgnoringFields", "isEqualToComparingFieldByField", "isEqualsToByComparingFields", "<S:Lorg/assertj/core/api/AbstractObjectAssert<TS;TA;>;A:Ljava/lang/Object;>Lorg/assertj/core/api/AbstractAssert<TS;TA;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractObjectAssert = { "AbstractObjectAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x401, 9, 0, -1, -1, -1, 14, -1 };
  return &_OrgAssertjCoreApiAbstractObjectAssert;
}

@end

void OrgAssertjCoreApiAbstractObjectAssert_initWithId_withIOSClass_(OrgAssertjCoreApiAbstractObjectAssert *self, id actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractObjectAssert)
