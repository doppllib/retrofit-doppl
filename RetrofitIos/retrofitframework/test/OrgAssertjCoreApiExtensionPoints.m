//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/ExtensionPoints.java
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiExtensionPoints.h"

@interface OrgAssertjCoreApiExtensionPoints : NSObject

@end

@implementation OrgAssertjCoreApiExtensionPoints

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreApiExtensionPoints;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiExtensionPoints;", 0x401, 3, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiExtensionPoints;", 0x401, 4, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiExtensionPoints;", 0x401, 5, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isWithOrgAssertjCoreApiCondition:);
  methods[1].selector = @selector(isNotWithOrgAssertjCoreApiCondition:);
  methods[2].selector = @selector(hasWithOrgAssertjCoreApiCondition:);
  methods[3].selector = @selector(doesNotHaveWithOrgAssertjCoreApiCondition:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "is", "LOrgAssertjCoreApiCondition;", "(Lorg/assertj/core/api/Condition<-TA;>;)TS;", "isNot", "has", "doesNotHave", "<S::Lorg/assertj/core/api/ExtensionPoints<TS;TA;>;A:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiExtensionPoints = { "ExtensionPoints", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x609, 4, 0, -1, -1, -1, 6, -1 };
  return &_OrgAssertjCoreApiExtensionPoints;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiExtensionPoints)
