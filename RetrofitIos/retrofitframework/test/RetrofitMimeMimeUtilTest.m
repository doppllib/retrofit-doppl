//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractCharSequenceAssert.h"
#include "OrgAssertjCoreApiAssertions.h"
#include "RetrofitMimeMimeUtil.h"
#include "RetrofitMimeMimeUtilTest.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *RetrofitMimeMimeUtilTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RetrofitMimeMimeUtilTest__Annotations$1();

@implementation RetrofitMimeMimeUtilTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitMimeMimeUtilTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)charsetParsing {
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain;charset=utf-8", @"ERROR")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain; charset=utf-8", @"ERROR")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain;  charset=utf-8", @"ERROR")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain; \tcharset=utf-8", @"ERROR")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain; \x0d\n\tcharset=utf-8", @"ERROR")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain; CHARSET=utf-8", @"ERROR")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain; charset=UTF-8", @"ERROR")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain; charset=\"\\u\\tf-\\8\"", @"ERROR")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain; charset=\"utf-8\"", @"ERROR")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain;charset=utf-8;other=thing", @"ERROR")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_withNSString_(@"text/plain; notthecharset=utf-16;", @"UTF-8")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
}

- (void)oldCharsetParsing {
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain;charset=utf-8")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain; charset=utf-8")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain;  charset=utf-8")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain; \tcharset=utf-8")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain; \x0d\n\tcharset=utf-8")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain; CHARSET=utf-8")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain; charset=UTF-8")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain; charset=\"\\u\\tf-\\8\"")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain; charset=\"utf-8\"")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain;charset=utf-8;other=thing")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_(RetrofitMimeMimeUtil_parseCharsetWithNSString_(@"text/plain; notthecharset=utf-16;")))) isEqualToIgnoringCaseWithJavaLangCharSequence:@"UTF-8"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(charsetParsing);
  methods[2].selector = @selector(oldCharsetParsing);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&RetrofitMimeMimeUtilTest__Annotations$0, (void *)&RetrofitMimeMimeUtilTest__Annotations$1 };
  static const J2ObjcClassInfo _RetrofitMimeMimeUtilTest = { "MimeUtilTest", "retrofit.mime", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RetrofitMimeMimeUtilTest;
}

@end

void RetrofitMimeMimeUtilTest_init(RetrofitMimeMimeUtilTest *self) {
  NSObject_init(self);
}

RetrofitMimeMimeUtilTest *new_RetrofitMimeMimeUtilTest_init() {
  J2OBJC_NEW_IMPL(RetrofitMimeMimeUtilTest, init)
}

RetrofitMimeMimeUtilTest *create_RetrofitMimeMimeUtilTest_init() {
  J2OBJC_CREATE_IMPL(RetrofitMimeMimeUtilTest, init)
}

IOSObjectArray *RetrofitMimeMimeUtilTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitMimeMimeUtilTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitMimeMimeUtilTest)
