//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/core-doppl/androidbasetest/src/main/java/co/touchlab/doppl/testing/PlatformUtils.java
//

#include "CoTouchlabDopplTestingPlatformUtils.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"

@implementation CoTouchlabDopplTestingPlatformUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabDopplTestingPlatformUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isJ2objc {
  return CoTouchlabDopplTestingPlatformUtils_isJ2objc();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isJ2objc);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _CoTouchlabDopplTestingPlatformUtils = { "PlatformUtils", "co.touchlab.doppl.testing", NULL, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabDopplTestingPlatformUtils;
}

@end

void CoTouchlabDopplTestingPlatformUtils_init(CoTouchlabDopplTestingPlatformUtils *self) {
  NSObject_init(self);
}

CoTouchlabDopplTestingPlatformUtils *new_CoTouchlabDopplTestingPlatformUtils_init() {
  J2OBJC_NEW_IMPL(CoTouchlabDopplTestingPlatformUtils, init)
}

CoTouchlabDopplTestingPlatformUtils *create_CoTouchlabDopplTestingPlatformUtils_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabDopplTestingPlatformUtils, init)
}

jboolean CoTouchlabDopplTestingPlatformUtils_isJ2objc() {
  CoTouchlabDopplTestingPlatformUtils_initialize();
  return [((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"java.vendor"))) java_contains:@"J2ObjC"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabDopplTestingPlatformUtils)
