//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldBeAfter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeAfter.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "OrgAssertjCoreUtilDates.h"
#include "java/util/Date.h"

@interface OrgAssertjCoreErrorShouldBeAfter ()

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)other
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeAfter_initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldBeAfter *self, JavaUtilDate *actual, JavaUtilDate *other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeAfter *new_OrgAssertjCoreErrorShouldBeAfter_initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, JavaUtilDate *other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeAfter *create_OrgAssertjCoreErrorShouldBeAfter_initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, JavaUtilDate *other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

@implementation OrgAssertjCoreErrorShouldBeAfter

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeAfterWithJavaUtilDate:(JavaUtilDate *)actual
                                                           withJavaUtilDate:(JavaUtilDate *)other
                               withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldBeAfter_shouldBeAfterWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, comparisonStrategy);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeAfterWithJavaUtilDate:(JavaUtilDate *)actual
                                                           withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreErrorShouldBeAfter_shouldBeAfterWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeAfterWithJavaUtilDate:(JavaUtilDate *)actual
                                                                    withInt:(jint)year {
  return OrgAssertjCoreErrorShouldBeAfter_shouldBeAfterWithJavaUtilDate_withInt_(actual, year);
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)other
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldBeAfter_initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, other, comparisonStrategy);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeAfterWithJavaUtilDate:withJavaUtilDate:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[1].selector = @selector(shouldBeAfterWithJavaUtilDate:withJavaUtilDate:);
  methods[2].selector = @selector(shouldBeAfterWithJavaUtilDate:withInt:);
  methods[3].selector = @selector(initWithJavaUtilDate:withJavaUtilDate:withOrgAssertjCoreInternalComparisonStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeAfter", "LJavaUtilDate;LJavaUtilDate;LOrgAssertjCoreInternalComparisonStrategy;", "LJavaUtilDate;LJavaUtilDate;", "LJavaUtilDate;I" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeAfter = { "ShouldBeAfter", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeAfter;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeAfter_shouldBeAfterWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, JavaUtilDate *other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldBeAfter_initialize();
  return create_OrgAssertjCoreErrorShouldBeAfter_initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, comparisonStrategy);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeAfter_shouldBeAfterWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreErrorShouldBeAfter_initialize();
  return create_OrgAssertjCoreErrorShouldBeAfter_initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeAfter_shouldBeAfterWithJavaUtilDate_withInt_(JavaUtilDate *actual, jint year) {
  OrgAssertjCoreErrorShouldBeAfter_initialize();
  JavaUtilDate *januaryTheFirstOfGivenYear = OrgAssertjCoreUtilDates_parseWithNSString_(JreStrcat("I$", year, @"-01-01"));
  return create_OrgAssertjCoreErrorShouldBeAfter_initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, januaryTheFirstOfGivenYear, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

void OrgAssertjCoreErrorShouldBeAfter_initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldBeAfter *self, JavaUtilDate *actual, JavaUtilDate *other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto be strictly after:\n <%s>%s", [IOSObjectArray arrayWithObjects:(id[]){ actual, other, comparisonStrategy } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeAfter *new_OrgAssertjCoreErrorShouldBeAfter_initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, JavaUtilDate *other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeAfter, initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_, actual, other, comparisonStrategy)
}

OrgAssertjCoreErrorShouldBeAfter *create_OrgAssertjCoreErrorShouldBeAfter_initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, JavaUtilDate *other, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeAfter, initWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_, actual, other, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeAfter)
