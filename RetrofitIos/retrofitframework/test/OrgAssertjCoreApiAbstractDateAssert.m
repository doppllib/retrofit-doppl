//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/AbstractDateAssert.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractDateAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalInternalDates.h"
#include "OrgAssertjCorePresentationRepresentation.h"
#include "OrgAssertjCoreUtilDates.h"
#include "OrgAssertjCoreUtilLists.h"
#include "OrgAssertjCoreUtilPreconditions.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Deprecated.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/annotation/Annotation.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgAssertjCoreApiAbstractDateAssert ()

- (JavaUtilDate *)parseDateWithDefaultDateFormatsWithNSString:(NSString *)dateAsString;

- (id<JavaUtilList>)dateFormatsInOrderOfUsage;

- (JavaUtilDate *)parseDateWithWithNSString:(NSString *)dateAsString
                     withJavaUtilCollection:(id<JavaUtilCollection>)dateFormats;

@end

inline id<JavaUtilList> OrgAssertjCoreApiAbstractDateAssert_get_DEFAULT_DATE_FORMATS();
static id<JavaUtilList> OrgAssertjCoreApiAbstractDateAssert_DEFAULT_DATE_FORMATS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreApiAbstractDateAssert, DEFAULT_DATE_FORMATS, id<JavaUtilList>)

inline NSString *OrgAssertjCoreApiAbstractDateAssert_get_DATE_FORMAT_PATTERN_SHOULD_NOT_BE_NULL();
static NSString *OrgAssertjCoreApiAbstractDateAssert_DATE_FORMAT_PATTERN_SHOULD_NOT_BE_NULL = @"Given date format pattern should not be null";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreApiAbstractDateAssert, DATE_FORMAT_PATTERN_SHOULD_NOT_BE_NULL, NSString *)

inline NSString *OrgAssertjCoreApiAbstractDateAssert_get_DATE_FORMAT_SHOULD_NOT_BE_NULL();
static NSString *OrgAssertjCoreApiAbstractDateAssert_DATE_FORMAT_SHOULD_NOT_BE_NULL = @"Given date format should not be null";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreApiAbstractDateAssert, DATE_FORMAT_SHOULD_NOT_BE_NULL, NSString *)

__attribute__((unused)) static JavaUtilDate *OrgAssertjCoreApiAbstractDateAssert_parseDateWithDefaultDateFormatsWithNSString_(OrgAssertjCoreApiAbstractDateAssert *self, NSString *dateAsString);

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreApiAbstractDateAssert_dateFormatsInOrderOfUsage(OrgAssertjCoreApiAbstractDateAssert *self);

__attribute__((unused)) static JavaUtilDate *OrgAssertjCoreApiAbstractDateAssert_parseDateWithWithNSString_withJavaUtilCollection_(OrgAssertjCoreApiAbstractDateAssert *self, NSString *dateAsString, id<JavaUtilCollection> dateFormats);

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$1();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$2();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$3();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$4();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$5();

@interface OrgAssertjCoreApiAbstractDateAssert_1 : JavaLangThreadLocal

- (instancetype)init;

- (JavaUtilLinkedHashSet *)initialValue OBJC_METHOD_FAMILY_NONE;

- (JavaUtilLinkedHashSet *)get;

- (JavaUtilLinkedHashSet *)childValueWithId:(JavaUtilLinkedHashSet *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreApiAbstractDateAssert_1)

__attribute__((unused)) static void OrgAssertjCoreApiAbstractDateAssert_1_init(OrgAssertjCoreApiAbstractDateAssert_1 *self);

__attribute__((unused)) static OrgAssertjCoreApiAbstractDateAssert_1 *new_OrgAssertjCoreApiAbstractDateAssert_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreApiAbstractDateAssert_1 *create_OrgAssertjCoreApiAbstractDateAssert_1_init();

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreApiAbstractDateAssert)

JavaLangThreadLocal *OrgAssertjCoreApiAbstractDateAssert_userDateFormats;

@implementation OrgAssertjCoreApiAbstractDateAssert

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                        withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractDateAssert_initWithJavaUtilDate_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToWithNSString:(NSString *)dateAsString {
  return ((OrgAssertjCoreApiAbstractDateAssert *) [self isEqualToWithId:[self parseWithNSString:dateAsString]]);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringHoursWithNSString:(NSString *)dateAsString {
  return [self isEqualToIgnoringHoursWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringHoursWithJavaUtilDate:(JavaUtilDate *)date {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsEqualWithPrecisionWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:date withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, HOURS)];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringMinutesWithNSString:(NSString *)dateAsString {
  return [self isEqualToIgnoringMinutesWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringMinutesWithJavaUtilDate:(JavaUtilDate *)date {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsEqualWithPrecisionWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:date withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES)];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringSecondsWithNSString:(NSString *)dateAsString {
  return [self isEqualToIgnoringSecondsWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringSecondsWithJavaUtilDate:(JavaUtilDate *)date {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsEqualWithPrecisionWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:date withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringMillisWithNSString:(NSString *)dateAsString {
  return [self isEqualToIgnoringMillisWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringMillisWithJavaUtilDate:(JavaUtilDate *)date {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsEqualWithPrecisionWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:date withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isNotEqualToWithNSString:(NSString *)dateAsString {
  return ((OrgAssertjCoreApiAbstractDateAssert *) [self isNotEqualToWithId:[self parseWithNSString:dateAsString]]);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInWithNSStringArray:(IOSObjectArray *)datesAsString {
  IOSObjectArray *dates = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(datesAsString))->size_ type:JavaUtilDate_class_()];
  for (jint i = 0; i < datesAsString->size_; i++) {
    IOSObjectArray_Set(dates, i, [self parseWithNSString:IOSObjectArray_Get(datesAsString, i)]);
  }
  return ((OrgAssertjCoreApiAbstractDateAssert *) [self isInWithNSObjectArray:dates]);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInWithStringDateCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)datesAsString {
  id<JavaUtilCollection> dates = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilCollection>) nil_chk(datesAsString)) size]);
  for (NSString * __strong dateAsString in datesAsString) {
    [dates addWithId:[self parseWithNSString:dateAsString]];
  }
  return ((OrgAssertjCoreApiAbstractDateAssert *) [self isInWithJavaLangIterable:dates]);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isNotInWithNSStringArray:(IOSObjectArray *)datesAsString {
  IOSObjectArray *dates = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(datesAsString))->size_ type:JavaUtilDate_class_()];
  for (jint i = 0; i < datesAsString->size_; i++) {
    IOSObjectArray_Set(dates, i, [self parseWithNSString:IOSObjectArray_Get(datesAsString, i)]);
  }
  return ((OrgAssertjCoreApiAbstractDateAssert *) [self isNotInWithNSObjectArray:dates]);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isNotInWithStringDateCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)datesAsString {
  id<JavaUtilCollection> dates = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilCollection>) nil_chk(datesAsString)) size]);
  for (NSString * __strong dateAsString in datesAsString) {
    [dates addWithId:[self parseWithNSString:dateAsString]];
  }
  return ((OrgAssertjCoreApiAbstractDateAssert *) [self isNotInWithJavaLangIterable:dates]);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isBeforeWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsBeforeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isBeforeWithNSString:(NSString *)dateAsString {
  return [self isBeforeWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isBeforeOrEqualsToWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsBeforeOrEqualsToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isBeforeOrEqualsToWithNSString:(NSString *)dateAsString {
  return [self isBeforeOrEqualsToWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isAfterWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsAfterWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isAfterWithNSString:(NSString *)dateAsString {
  return [self isAfterWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isAfterOrEqualsToWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsAfterOrEqualsToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isAfterOrEqualsToWithNSString:(NSString *)dateAsString {
  return [self isAfterOrEqualsToWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isBetweenWithJavaUtilDate:(JavaUtilDate *)start
                                                  withJavaUtilDate:(JavaUtilDate *)end {
  return [self isBetweenWithJavaUtilDate:start withJavaUtilDate:end withBoolean:true withBoolean:false];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isBetweenWithNSString:(NSString *)start
                                                  withNSString:(NSString *)end {
  return [self isBetweenWithJavaUtilDate:[self parseWithNSString:start] withJavaUtilDate:[self parseWithNSString:end]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isBetweenWithJavaUtilDate:(JavaUtilDate *)start
                                                  withJavaUtilDate:(JavaUtilDate *)end
                                                       withBoolean:(jboolean)inclusiveStart
                                                       withBoolean:(jboolean)inclusiveEnd {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:start withJavaUtilDate:end withBoolean:inclusiveStart withBoolean:inclusiveEnd];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isBetweenWithNSString:(NSString *)start
                                                  withNSString:(NSString *)end
                                                   withBoolean:(jboolean)inclusiveStart
                                                   withBoolean:(jboolean)inclusiveEnd {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:[self parseWithNSString:start] withJavaUtilDate:[self parseWithNSString:end] withBoolean:inclusiveStart withBoolean:inclusiveEnd];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isNotBetweenWithJavaUtilDate:(JavaUtilDate *)start
                                                     withJavaUtilDate:(JavaUtilDate *)end
                                                          withBoolean:(jboolean)inclusiveStart
                                                          withBoolean:(jboolean)inclusiveEnd {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsNotBetweenWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:start withJavaUtilDate:end withBoolean:inclusiveStart withBoolean:inclusiveEnd];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isNotBetweenWithNSString:(NSString *)start
                                                     withNSString:(NSString *)end
                                                      withBoolean:(jboolean)inclusiveStart
                                                      withBoolean:(jboolean)inclusiveEnd {
  return [self isNotBetweenWithJavaUtilDate:[self parseWithNSString:start] withJavaUtilDate:[self parseWithNSString:end] withBoolean:inclusiveStart withBoolean:inclusiveEnd];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isNotBetweenWithJavaUtilDate:(JavaUtilDate *)start
                                                     withJavaUtilDate:(JavaUtilDate *)end {
  return [self isNotBetweenWithJavaUtilDate:start withJavaUtilDate:end withBoolean:true withBoolean:false];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isNotBetweenWithNSString:(NSString *)start
                                                     withNSString:(NSString *)end {
  return [self isNotBetweenWithJavaUtilDate:[self parseWithNSString:start] withJavaUtilDate:[self parseWithNSString:end] withBoolean:true withBoolean:false];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInThePast {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInThePastWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isToday {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsTodayWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInTheFuture {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInTheFutureWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isBeforeYearWithInt:(jint)year {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsBeforeYearWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withInt:year];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isAfterYearWithInt:(jint)year {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsAfterYearWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withInt:year];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinYearWithInt:(jint)year {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsWithinYearWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withInt:year];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinMonthWithInt:(jint)month {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsWithinMonthWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withInt:month];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinDayOfMonthWithInt:(jint)dayOfMonth {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsWithinDayOfMonthWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withInt:dayOfMonth];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinDayOfWeekWithInt:(jint)dayOfWeek {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsWithinDayOfWeekWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withInt:dayOfWeek];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinHourOfDayWithInt:(jint)hourOfDay {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsWithinHourOfDayWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withInt:hourOfDay];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinMinuteWithInt:(jint)minute {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsWithinMinuteWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withInt:minute];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinSecondWithInt:(jint)second {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsWithinSecondWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withInt:second];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinMillisecondWithInt:(jint)millisecond {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsWithinMillisecondWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withInt:millisecond];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameYearAsWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInSameYearAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameYearAsWithNSString:(NSString *)dateAsString {
  return [self isInSameYearAsWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMonthAsWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInSameMonthAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMonthAsWithNSString:(NSString *)dateAsString {
  return [self isInSameMonthAsWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameDayAsWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInSameDayAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameDayAsWithNSString:(NSString *)dateAsString {
  return [self isInSameDayAsWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameHourWindowAsWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInSameHourWindowAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameHourWindowAsWithNSString:(NSString *)dateAsString {
  return [self isInSameHourWindowAsWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameHourAsWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInSameHourAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameHourAsWithNSString:(NSString *)dateAsString {
  return [self isInSameHourAsWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMinuteWindowAsWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInSameMinuteWindowAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMinuteWindowAsWithNSString:(NSString *)dateAsString {
  return [self isInSameMinuteWindowAsWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMinuteAsWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInSameMinuteAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMinuteAsWithNSString:(NSString *)dateAsString {
  return [self isInSameMinuteAsWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameSecondWindowAsWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInSameSecondWindowAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameSecondWindowAsWithNSString:(NSString *)dateAsString {
  return [self isInSameSecondWindowAsWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameSecondAsWithJavaUtilDate:(JavaUtilDate *)other {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsInSameSecondAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameSecondAsWithNSString:(NSString *)dateAsString {
  return [self isInSameSecondAsWithJavaUtilDate:[self parseWithNSString:dateAsString]];
}

- (OrgAssertjCoreApiAbstractDateAssert *)isCloseToWithJavaUtilDate:(JavaUtilDate *)other
                                                          withLong:(jlong)deltaInMilliseconds {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertIsCloseToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withJavaUtilDate:other withLong:deltaInMilliseconds];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)isCloseToWithNSString:(NSString *)dateAsString
                                                      withLong:(jlong)deltaInMilliseconds {
  return [self isCloseToWithJavaUtilDate:[self parseWithNSString:dateAsString] withLong:deltaInMilliseconds];
}

- (OrgAssertjCoreApiAbstractDateAssert *)hasTimeWithLong:(jlong)timestamp {
  [((OrgAssertjCoreInternalInternalDates *) nil_chk(dates_)) assertHasTimeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilDate:actual_ withLong:timestamp];
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)withDateFormatWithJavaTextDateFormat:(JavaTextDateFormat *)userCustomDateFormat {
  OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithJavaTextDateFormat_(userCustomDateFormat);
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)withDateFormatWithNSString:(NSString *)userCustomDateFormatPattern {
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_withNSString_(userCustomDateFormatPattern, OrgAssertjCoreApiAbstractDateAssert_DATE_FORMAT_PATTERN_SHOULD_NOT_BE_NULL);
  return [self withDateFormatWithJavaTextDateFormat:create_JavaTextSimpleDateFormat_initWithNSString_(userCustomDateFormatPattern)];
}

+ (void)registerCustomDateFormatWithJavaTextDateFormat:(JavaTextDateFormat *)userCustomDateFormat {
  OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithJavaTextDateFormat_(userCustomDateFormat);
}

+ (void)registerCustomDateFormatWithNSString:(NSString *)userCustomDateFormatPattern {
  OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithNSString_(userCustomDateFormatPattern);
}

+ (void)useDefaultDateFormatsOnly {
  OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormatsOnly();
}

- (OrgAssertjCoreApiAbstractDateAssert *)withDefaultDateFormatsOnly {
  OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormatsOnly();
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (JavaUtilDate *)parseWithNSString:(NSString *)dateAsString {
  if (dateAsString == nil) return nil;
  JavaUtilDate *date = OrgAssertjCoreApiAbstractDateAssert_parseDateWithWithNSString_withJavaUtilCollection_(self, dateAsString, [((JavaLangThreadLocal *) nil_chk(OrgAssertjCoreApiAbstractDateAssert_userDateFormats)) get]);
  if (date != nil) return date;
  date = OrgAssertjCoreApiAbstractDateAssert_parseDateWithDefaultDateFormatsWithNSString_(self, dateAsString);
  if (date != nil) return date;
  @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$$$$", @"Failed to parse ", dateAsString, @" with any of these date formats: ", [((id<OrgAssertjCorePresentationRepresentation>) nil_chk([((OrgAssertjCoreApiWritableAssertionInfo *) nil_chk(info_)) representation])) toStringOfWithId:OrgAssertjCoreApiAbstractDateAssert_dateFormatsInOrderOfUsage(self)]));
}

- (JavaUtilDate *)parseDateWithDefaultDateFormatsWithNSString:(NSString *)dateAsString {
  return OrgAssertjCoreApiAbstractDateAssert_parseDateWithDefaultDateFormatsWithNSString_(self, dateAsString);
}

- (id<JavaUtilList>)dateFormatsInOrderOfUsage {
  return OrgAssertjCoreApiAbstractDateAssert_dateFormatsInOrderOfUsage(self);
}

- (JavaUtilDate *)parseDateWithWithNSString:(NSString *)dateAsString
                     withJavaUtilCollection:(id<JavaUtilCollection>)dateFormats {
  return OrgAssertjCoreApiAbstractDateAssert_parseDateWithWithNSString_withJavaUtilCollection_(self, dateAsString, dateFormats);
}

- (OrgAssertjCoreApiAbstractDateAssert *)usingComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)customComparator {
  [super usingComparatorWithJavaUtilComparator:customComparator];
  JreStrongAssignAndConsume(&self->dates_, new_OrgAssertjCoreInternalInternalDates_initWithOrgAssertjCoreInternalComparisonStrategy_(create_OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(customComparator)));
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)usingDefaultComparator {
  [super usingDefaultComparator];
  JreStrongAssign(&self->dates_, OrgAssertjCoreInternalInternalDates_instance());
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

+ (void)useDateFormatWithJavaTextDateFormat:(JavaTextDateFormat *)userCustomDateFormat {
  OrgAssertjCoreApiAbstractDateAssert_useDateFormatWithJavaTextDateFormat_(userCustomDateFormat);
}

+ (void)useDateFormatWithNSString:(NSString *)userCustomDateFormatPattern {
  OrgAssertjCoreApiAbstractDateAssert_useDateFormatWithNSString_(userCustomDateFormatPattern);
}

- (OrgAssertjCoreApiAbstractDateAssert *)withIsoDateFormat {
  OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormatsOnly();
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDateAssert *)withDefaultDateFormats {
  OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormatsOnly();
  return ((OrgAssertjCoreApiAbstractDateAssert *) myself_);
}

+ (void)useIsoDateFormat {
  OrgAssertjCoreApiAbstractDateAssert_useIsoDateFormat();
}

+ (void)useDefaultDateFormats {
  OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormats();
}

- (void)dealloc {
  RELEASE_(dates_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 8, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 8, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 9, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 9, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 10, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 10, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 11, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x81, 12, 13, -1, 14, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x81, 18, 13, -1, 14, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 19, 16, -1, 17, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 20, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 20, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 21, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 21, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 22, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 22, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 23, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 23, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 24, 25, -1, 26, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 24, 27, -1, 28, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 24, 29, -1, 30, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 24, 31, -1, 32, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 33, 29, -1, 30, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 33, 31, -1, 32, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 33, 25, -1, 26, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 33, 27, -1, 28, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, -1, -1, -1, 34, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, -1, -1, -1, 34, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, -1, -1, -1, 34, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 35, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 38, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 39, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 40, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 41, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 42, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 43, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 44, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 45, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 46, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 47, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 47, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 48, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 48, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 49, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 49, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 50, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 50, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 51, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 51, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 52, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 52, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 53, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 53, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 54, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 54, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 55, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 55, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 56, 57, -1, 58, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 56, 59, -1, 60, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 61, 62, -1, 63, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 64, 65, -1, 66, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 64, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x9, 67, 65, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 67, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, -1, -1, -1, 34, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x0, 68, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x2, 69, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 70, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x2, 71, 72, -1, 73, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, 74, 75, -1, 76, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, -1, -1, -1, 34, -1, -1 },
    { NULL, "V", 0x9, 77, 65, -1, -1, 78, -1 },
    { NULL, "V", 0x9, 77, 3, -1, -1, 79, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, -1, -1, -1, 34, 80, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x1, -1, -1, -1, 34, 81, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, 82, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, 83, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilDate:withIOSClass:);
  methods[1].selector = @selector(isEqualToWithNSString:);
  methods[2].selector = @selector(isEqualToIgnoringHoursWithNSString:);
  methods[3].selector = @selector(isEqualToIgnoringHoursWithJavaUtilDate:);
  methods[4].selector = @selector(isEqualToIgnoringMinutesWithNSString:);
  methods[5].selector = @selector(isEqualToIgnoringMinutesWithJavaUtilDate:);
  methods[6].selector = @selector(isEqualToIgnoringSecondsWithNSString:);
  methods[7].selector = @selector(isEqualToIgnoringSecondsWithJavaUtilDate:);
  methods[8].selector = @selector(isEqualToIgnoringMillisWithNSString:);
  methods[9].selector = @selector(isEqualToIgnoringMillisWithJavaUtilDate:);
  methods[10].selector = @selector(isNotEqualToWithNSString:);
  methods[11].selector = @selector(isInWithNSStringArray:);
  methods[12].selector = @selector(isInWithStringDateCollectionWithJavaUtilCollection:);
  methods[13].selector = @selector(isNotInWithNSStringArray:);
  methods[14].selector = @selector(isNotInWithStringDateCollectionWithJavaUtilCollection:);
  methods[15].selector = @selector(isBeforeWithJavaUtilDate:);
  methods[16].selector = @selector(isBeforeWithNSString:);
  methods[17].selector = @selector(isBeforeOrEqualsToWithJavaUtilDate:);
  methods[18].selector = @selector(isBeforeOrEqualsToWithNSString:);
  methods[19].selector = @selector(isAfterWithJavaUtilDate:);
  methods[20].selector = @selector(isAfterWithNSString:);
  methods[21].selector = @selector(isAfterOrEqualsToWithJavaUtilDate:);
  methods[22].selector = @selector(isAfterOrEqualsToWithNSString:);
  methods[23].selector = @selector(isBetweenWithJavaUtilDate:withJavaUtilDate:);
  methods[24].selector = @selector(isBetweenWithNSString:withNSString:);
  methods[25].selector = @selector(isBetweenWithJavaUtilDate:withJavaUtilDate:withBoolean:withBoolean:);
  methods[26].selector = @selector(isBetweenWithNSString:withNSString:withBoolean:withBoolean:);
  methods[27].selector = @selector(isNotBetweenWithJavaUtilDate:withJavaUtilDate:withBoolean:withBoolean:);
  methods[28].selector = @selector(isNotBetweenWithNSString:withNSString:withBoolean:withBoolean:);
  methods[29].selector = @selector(isNotBetweenWithJavaUtilDate:withJavaUtilDate:);
  methods[30].selector = @selector(isNotBetweenWithNSString:withNSString:);
  methods[31].selector = @selector(isInThePast);
  methods[32].selector = @selector(isToday);
  methods[33].selector = @selector(isInTheFuture);
  methods[34].selector = @selector(isBeforeYearWithInt:);
  methods[35].selector = @selector(isAfterYearWithInt:);
  methods[36].selector = @selector(isWithinYearWithInt:);
  methods[37].selector = @selector(isWithinMonthWithInt:);
  methods[38].selector = @selector(isWithinDayOfMonthWithInt:);
  methods[39].selector = @selector(isWithinDayOfWeekWithInt:);
  methods[40].selector = @selector(isWithinHourOfDayWithInt:);
  methods[41].selector = @selector(isWithinMinuteWithInt:);
  methods[42].selector = @selector(isWithinSecondWithInt:);
  methods[43].selector = @selector(isWithinMillisecondWithInt:);
  methods[44].selector = @selector(isInSameYearAsWithJavaUtilDate:);
  methods[45].selector = @selector(isInSameYearAsWithNSString:);
  methods[46].selector = @selector(isInSameMonthAsWithJavaUtilDate:);
  methods[47].selector = @selector(isInSameMonthAsWithNSString:);
  methods[48].selector = @selector(isInSameDayAsWithJavaUtilDate:);
  methods[49].selector = @selector(isInSameDayAsWithNSString:);
  methods[50].selector = @selector(isInSameHourWindowAsWithJavaUtilDate:);
  methods[51].selector = @selector(isInSameHourWindowAsWithNSString:);
  methods[52].selector = @selector(isInSameHourAsWithJavaUtilDate:);
  methods[53].selector = @selector(isInSameHourAsWithNSString:);
  methods[54].selector = @selector(isInSameMinuteWindowAsWithJavaUtilDate:);
  methods[55].selector = @selector(isInSameMinuteWindowAsWithNSString:);
  methods[56].selector = @selector(isInSameMinuteAsWithJavaUtilDate:);
  methods[57].selector = @selector(isInSameMinuteAsWithNSString:);
  methods[58].selector = @selector(isInSameSecondWindowAsWithJavaUtilDate:);
  methods[59].selector = @selector(isInSameSecondWindowAsWithNSString:);
  methods[60].selector = @selector(isInSameSecondAsWithJavaUtilDate:);
  methods[61].selector = @selector(isInSameSecondAsWithNSString:);
  methods[62].selector = @selector(isCloseToWithJavaUtilDate:withLong:);
  methods[63].selector = @selector(isCloseToWithNSString:withLong:);
  methods[64].selector = @selector(hasTimeWithLong:);
  methods[65].selector = @selector(withDateFormatWithJavaTextDateFormat:);
  methods[66].selector = @selector(withDateFormatWithNSString:);
  methods[67].selector = @selector(registerCustomDateFormatWithJavaTextDateFormat:);
  methods[68].selector = @selector(registerCustomDateFormatWithNSString:);
  methods[69].selector = @selector(useDefaultDateFormatsOnly);
  methods[70].selector = @selector(withDefaultDateFormatsOnly);
  methods[71].selector = @selector(parseWithNSString:);
  methods[72].selector = @selector(parseDateWithDefaultDateFormatsWithNSString:);
  methods[73].selector = @selector(dateFormatsInOrderOfUsage);
  methods[74].selector = @selector(parseDateWithWithNSString:withJavaUtilCollection:);
  methods[75].selector = @selector(usingComparatorWithJavaUtilComparator:);
  methods[76].selector = @selector(usingDefaultComparator);
  methods[77].selector = @selector(useDateFormatWithJavaTextDateFormat:);
  methods[78].selector = @selector(useDateFormatWithNSString:);
  methods[79].selector = @selector(withIsoDateFormat);
  methods[80].selector = @selector(withDefaultDateFormats);
  methods[81].selector = @selector(useIsoDateFormat);
  methods[82].selector = @selector(useDefaultDateFormats);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_DATE_FORMATS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 84, 85, -1 },
    { "DATE_FORMAT_PATTERN_SHOULD_NOT_BE_NULL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 86, -1, -1 },
    { "DATE_FORMAT_SHOULD_NOT_BE_NULL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 87, -1, -1 },
    { "userDateFormats", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x8, -1, 88, 89, -1 },
    { "dates_", "LOrgAssertjCoreInternalInternalDates;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilDate;LIOSClass;", "(Ljava/util/Date;Ljava/lang/Class<*>;)V", "isEqualTo", "LNSString;", "(Ljava/lang/String;)TS;", "isEqualToIgnoringHours", "LJavaUtilDate;", "(Ljava/util/Date;)TS;", "isEqualToIgnoringMinutes", "isEqualToIgnoringSeconds", "isEqualToIgnoringMillis", "isNotEqualTo", "isIn", "[LNSString;", "([Ljava/lang/String;)TS;", "isInWithStringDateCollection", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/String;>;)TS;", "isNotIn", "isNotInWithStringDateCollection", "isBefore", "isBeforeOrEqualsTo", "isAfter", "isAfterOrEqualsTo", "isBetween", "LJavaUtilDate;LJavaUtilDate;", "(Ljava/util/Date;Ljava/util/Date;)TS;", "LNSString;LNSString;", "(Ljava/lang/String;Ljava/lang/String;)TS;", "LJavaUtilDate;LJavaUtilDate;ZZ", "(Ljava/util/Date;Ljava/util/Date;ZZ)TS;", "LNSString;LNSString;ZZ", "(Ljava/lang/String;Ljava/lang/String;ZZ)TS;", "isNotBetween", "()TS;", "isBeforeYear", "I", "(I)TS;", "isAfterYear", "isWithinYear", "isWithinMonth", "isWithinDayOfMonth", "isWithinDayOfWeek", "isWithinHourOfDay", "isWithinMinute", "isWithinSecond", "isWithinMillisecond", "isInSameYearAs", "isInSameMonthAs", "isInSameDayAs", "isInSameHourWindowAs", "isInSameHourAs", "isInSameMinuteWindowAs", "isInSameMinuteAs", "isInSameSecondWindowAs", "isInSameSecondAs", "isCloseTo", "LJavaUtilDate;J", "(Ljava/util/Date;J)TS;", "LNSString;J", "(Ljava/lang/String;J)TS;", "hasTime", "J", "(J)TS;", "withDateFormat", "LJavaTextDateFormat;", "(Ljava/text/DateFormat;)TS;", "registerCustomDateFormat", "parse", "parseDateWithDefaultDateFormats", "()Ljava/util/List<Ljava/text/DateFormat;>;", "parseDateWith", "LNSString;LJavaUtilCollection;", "(Ljava/lang/String;Ljava/util/Collection<Ljava/text/DateFormat;>;)Ljava/util/Date;", "usingComparator", "LJavaUtilComparator;", "(Ljava/util/Comparator<-Ljava/util/Date;>;)TS;", "useDateFormat", (void *)&OrgAssertjCoreApiAbstractDateAssert__Annotations$0, (void *)&OrgAssertjCoreApiAbstractDateAssert__Annotations$1, (void *)&OrgAssertjCoreApiAbstractDateAssert__Annotations$2, (void *)&OrgAssertjCoreApiAbstractDateAssert__Annotations$3, (void *)&OrgAssertjCoreApiAbstractDateAssert__Annotations$4, (void *)&OrgAssertjCoreApiAbstractDateAssert__Annotations$5, &OrgAssertjCoreApiAbstractDateAssert_DEFAULT_DATE_FORMATS, "Ljava/util/List<Ljava/text/DateFormat;>;", &OrgAssertjCoreApiAbstractDateAssert_DATE_FORMAT_PATTERN_SHOULD_NOT_BE_NULL, &OrgAssertjCoreApiAbstractDateAssert_DATE_FORMAT_SHOULD_NOT_BE_NULL, &OrgAssertjCoreApiAbstractDateAssert_userDateFormats, "Ljava/lang/ThreadLocal<Ljava/util/LinkedHashSet<Ljava/text/DateFormat;>;>;", "<S:Lorg/assertj/core/api/AbstractDateAssert<TS;>;>Lorg/assertj/core/api/AbstractAssert<TS;Ljava/util/Date;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractDateAssert = { "AbstractDateAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 83, 5, -1, -1, -1, 90, -1 };
  return &_OrgAssertjCoreApiAbstractDateAssert;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreApiAbstractDateAssert class]) {
    JreStrongAssign(&OrgAssertjCoreApiAbstractDateAssert_DEFAULT_DATE_FORMATS, OrgAssertjCoreUtilLists_newArrayListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ OrgAssertjCoreUtilDates_newIsoDateTimeWithMsFormat(), OrgAssertjCoreUtilDates_newIsoDateTimeFormat(), OrgAssertjCoreUtilDates_newIsoDateFormat() } count:3 type:JavaTextDateFormat_class_()]));
    JreStrongAssignAndConsume(&OrgAssertjCoreApiAbstractDateAssert_userDateFormats, new_OrgAssertjCoreApiAbstractDateAssert_1_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreApiAbstractDateAssert)
  }
}

@end

void OrgAssertjCoreApiAbstractDateAssert_initWithJavaUtilDate_withIOSClass_(OrgAssertjCoreApiAbstractDateAssert *self, JavaUtilDate *actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->dates_, OrgAssertjCoreInternalInternalDates_instance());
}

void OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithJavaTextDateFormat_(JavaTextDateFormat *userCustomDateFormat) {
  OrgAssertjCoreApiAbstractDateAssert_initialize();
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_withNSString_(userCustomDateFormat, OrgAssertjCoreApiAbstractDateAssert_DATE_FORMAT_SHOULD_NOT_BE_NULL);
  [((JavaUtilLinkedHashSet *) nil_chk([((JavaLangThreadLocal *) nil_chk(OrgAssertjCoreApiAbstractDateAssert_userDateFormats)) get])) addWithId:userCustomDateFormat];
}

void OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithNSString_(NSString *userCustomDateFormatPattern) {
  OrgAssertjCoreApiAbstractDateAssert_initialize();
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_withNSString_(userCustomDateFormatPattern, OrgAssertjCoreApiAbstractDateAssert_DATE_FORMAT_PATTERN_SHOULD_NOT_BE_NULL);
  OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithJavaTextDateFormat_(create_JavaTextSimpleDateFormat_initWithNSString_(userCustomDateFormatPattern));
}

void OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormatsOnly() {
  OrgAssertjCoreApiAbstractDateAssert_initialize();
  [((JavaUtilLinkedHashSet *) nil_chk([((JavaLangThreadLocal *) nil_chk(OrgAssertjCoreApiAbstractDateAssert_userDateFormats)) get])) clear];
}

JavaUtilDate *OrgAssertjCoreApiAbstractDateAssert_parseDateWithDefaultDateFormatsWithNSString_(OrgAssertjCoreApiAbstractDateAssert *self, NSString *dateAsString) {
  @synchronized(OrgAssertjCoreApiAbstractDateAssert_DEFAULT_DATE_FORMATS) {
    return OrgAssertjCoreApiAbstractDateAssert_parseDateWithWithNSString_withJavaUtilCollection_(self, dateAsString, OrgAssertjCoreApiAbstractDateAssert_DEFAULT_DATE_FORMATS);
  }
}

id<JavaUtilList> OrgAssertjCoreApiAbstractDateAssert_dateFormatsInOrderOfUsage(OrgAssertjCoreApiAbstractDateAssert *self) {
  id<JavaUtilList> allDateFormatsInOrderOfUsage = OrgAssertjCoreUtilLists_newArrayListWithJavaLangIterable_([((JavaLangThreadLocal *) nil_chk(OrgAssertjCoreApiAbstractDateAssert_userDateFormats)) get]);
  [((id<JavaUtilList>) nil_chk(allDateFormatsInOrderOfUsage)) addAllWithJavaUtilCollection:OrgAssertjCoreApiAbstractDateAssert_DEFAULT_DATE_FORMATS];
  return allDateFormatsInOrderOfUsage;
}

JavaUtilDate *OrgAssertjCoreApiAbstractDateAssert_parseDateWithWithNSString_withJavaUtilCollection_(OrgAssertjCoreApiAbstractDateAssert *self, NSString *dateAsString, id<JavaUtilCollection> dateFormats) {
  for (JavaTextDateFormat * __strong defaultDateFormat in nil_chk(dateFormats)) {
    @try {
      return [((JavaTextDateFormat *) nil_chk(defaultDateFormat)) parseWithNSString:dateAsString];
    }
    @catch (JavaTextParseException *e) {
    }
  }
  return nil;
}

void OrgAssertjCoreApiAbstractDateAssert_useDateFormatWithJavaTextDateFormat_(JavaTextDateFormat *userCustomDateFormat) {
  OrgAssertjCoreApiAbstractDateAssert_initialize();
  OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithJavaTextDateFormat_(userCustomDateFormat);
}

void OrgAssertjCoreApiAbstractDateAssert_useDateFormatWithNSString_(NSString *userCustomDateFormatPattern) {
  OrgAssertjCoreApiAbstractDateAssert_initialize();
  OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithJavaTextDateFormat_(create_JavaTextSimpleDateFormat_initWithNSString_(userCustomDateFormatPattern));
}

void OrgAssertjCoreApiAbstractDateAssert_useIsoDateFormat() {
  OrgAssertjCoreApiAbstractDateAssert_initialize();
  OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormatsOnly();
}

void OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormats() {
  OrgAssertjCoreApiAbstractDateAssert_initialize();
  OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormatsOnly();
}

IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAbstractDateAssert__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractDateAssert)

@implementation OrgAssertjCoreApiAbstractDateAssert_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreApiAbstractDateAssert_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaUtilLinkedHashSet *)initialValue {
  return create_JavaUtilLinkedHashSet_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLinkedHashSet;", 0x4, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/LinkedHashSet<Ljava/text/DateFormat;>;", "LOrgAssertjCoreApiAbstractDateAssert;", "Ljava/lang/ThreadLocal<Ljava/util/LinkedHashSet<Ljava/text/DateFormat;>;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractDateAssert_1 = { "", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 1, -1, -1, 2, -1 };
  return &_OrgAssertjCoreApiAbstractDateAssert_1;
}

@end

void OrgAssertjCoreApiAbstractDateAssert_1_init(OrgAssertjCoreApiAbstractDateAssert_1 *self) {
  JavaLangThreadLocal_init(self);
}

OrgAssertjCoreApiAbstractDateAssert_1 *new_OrgAssertjCoreApiAbstractDateAssert_1_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiAbstractDateAssert_1, init)
}

OrgAssertjCoreApiAbstractDateAssert_1 *create_OrgAssertjCoreApiAbstractDateAssert_1_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiAbstractDateAssert_1, init)
}
