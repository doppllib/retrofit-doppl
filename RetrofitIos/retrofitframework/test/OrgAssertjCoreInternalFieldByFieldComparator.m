//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/FieldByFieldComparator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreInternalFieldByFieldComparator.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "java/util/Comparator.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline jint OrgAssertjCoreInternalFieldByFieldComparator_get_NOT_EQUAL();
#define OrgAssertjCoreInternalFieldByFieldComparator_NOT_EQUAL -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgAssertjCoreInternalFieldByFieldComparator, NOT_EQUAL, jint)

@implementation OrgAssertjCoreInternalFieldByFieldComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalFieldByFieldComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(id)actual
               withId:(id)other {
  if (actual == nil && other == nil) return 0;
  if (actual == nil || other == nil) return OrgAssertjCoreInternalFieldByFieldComparator_NOT_EQUAL;
  return [self areEqualWithId:actual withId:other] ? 0 : OrgAssertjCoreInternalFieldByFieldComparator_NOT_EQUAL;
}

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other {
  return [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) areEqualToIgnoringGivenFieldsWithId:actual withId:other withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]];
}

- (NSString *)description {
  return @"field by field comparator on all fields";
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  methods[2].selector = @selector(areEqualWithId:withId:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_EQUAL", "I", .constantValue.asInt = OrgAssertjCoreInternalFieldByFieldComparator_NOT_EQUAL, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "compare", "LNSObject;LNSObject;", "areEqual", "toString", "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalFieldByFieldComparator = { "FieldByFieldComparator", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, 4, -1 };
  return &_OrgAssertjCoreInternalFieldByFieldComparator;
}

@end

void OrgAssertjCoreInternalFieldByFieldComparator_init(OrgAssertjCoreInternalFieldByFieldComparator *self) {
  NSObject_init(self);
}

OrgAssertjCoreInternalFieldByFieldComparator *new_OrgAssertjCoreInternalFieldByFieldComparator_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalFieldByFieldComparator, init)
}

OrgAssertjCoreInternalFieldByFieldComparator *create_OrgAssertjCoreInternalFieldByFieldComparator_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalFieldByFieldComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalFieldByFieldComparator)
