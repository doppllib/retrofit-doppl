//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/AbstractDateAssert.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreApiAbstractDateAssert")
#ifdef RESTRICT_OrgAssertjCoreApiAbstractDateAssert
#define INCLUDE_ALL_OrgAssertjCoreApiAbstractDateAssert 0
#else
#define INCLUDE_ALL_OrgAssertjCoreApiAbstractDateAssert 1
#endif
#undef RESTRICT_OrgAssertjCoreApiAbstractDateAssert

#if !defined (OrgAssertjCoreApiAbstractDateAssert_) && (INCLUDE_ALL_OrgAssertjCoreApiAbstractDateAssert || defined(INCLUDE_OrgAssertjCoreApiAbstractDateAssert))
#define OrgAssertjCoreApiAbstractDateAssert_

#define RESTRICT_OrgAssertjCoreApiAbstractAssert 1
#define INCLUDE_OrgAssertjCoreApiAbstractAssert 1
#include "OrgAssertjCoreApiAbstractAssert.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaLangThreadLocal;
@class JavaTextDateFormat;
@class JavaUtilDate;
@class OrgAssertjCoreApiCondition;
@class OrgAssertjCoreDescriptionDescription;
@class OrgAssertjCoreInternalInternalDates;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;

@interface OrgAssertjCoreApiAbstractDateAssert : OrgAssertjCoreApiAbstractAssert {
 @public
  OrgAssertjCoreInternalInternalDates *dates_;
}

#pragma mark Public

- (OrgAssertjCoreApiAbstractDateAssert *)asWithNSString:(NSString *)arg0
                                      withNSObjectArray:(IOSObjectArray *)arg1;

- (OrgAssertjCoreApiAbstractDateAssert *)asWithOrgAssertjCoreDescriptionDescription:(OrgAssertjCoreDescriptionDescription *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)describedAsWithNSString:(NSString *)arg0
                                               withNSObjectArray:(IOSObjectArray *)arg1;

- (OrgAssertjCoreApiAbstractDateAssert *)describedAsWithOrgAssertjCoreDescriptionDescription:(OrgAssertjCoreDescriptionDescription *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)doesNotHaveSameClassAsWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)doesNotHaveWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)hasSameClassAsWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)hasTimeWithLong:(jlong)timestamp;

- (OrgAssertjCoreApiAbstractDateAssert *)hasWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isAfterWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isAfterWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isAfterOrEqualsToWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isAfterOrEqualsToWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isAfterYearWithInt:(jint)year;

- (OrgAssertjCoreApiAbstractDateAssert *)isBeforeWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isBeforeWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isBeforeOrEqualsToWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isBeforeOrEqualsToWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isBeforeYearWithInt:(jint)year;

- (OrgAssertjCoreApiAbstractDateAssert *)isBetweenWithJavaUtilDate:(JavaUtilDate *)start
                                                  withJavaUtilDate:(JavaUtilDate *)end;

- (OrgAssertjCoreApiAbstractDateAssert *)isBetweenWithJavaUtilDate:(JavaUtilDate *)start
                                                  withJavaUtilDate:(JavaUtilDate *)end
                                                       withBoolean:(jboolean)inclusiveStart
                                                       withBoolean:(jboolean)inclusiveEnd;

- (OrgAssertjCoreApiAbstractDateAssert *)isBetweenWithNSString:(NSString *)start
                                                  withNSString:(NSString *)end;

- (OrgAssertjCoreApiAbstractDateAssert *)isBetweenWithNSString:(NSString *)start
                                                  withNSString:(NSString *)end
                                                   withBoolean:(jboolean)inclusiveStart
                                                   withBoolean:(jboolean)inclusiveEnd;

- (OrgAssertjCoreApiAbstractDateAssert *)isCloseToWithJavaUtilDate:(JavaUtilDate *)other
                                                          withLong:(jlong)deltaInMilliseconds;

- (OrgAssertjCoreApiAbstractDateAssert *)isCloseToWithNSString:(NSString *)dateAsString
                                                      withLong:(jlong)deltaInMilliseconds;

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringHoursWithJavaUtilDate:(JavaUtilDate *)date;

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringHoursWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringMillisWithJavaUtilDate:(JavaUtilDate *)date;

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringMillisWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringMinutesWithJavaUtilDate:(JavaUtilDate *)date;

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringMinutesWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringSecondsWithJavaUtilDate:(JavaUtilDate *)date;

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToIgnoringSecondsWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isEqualToWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isExactlyInstanceOfWithIOSClass:(IOSClass *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isInWithNSStringArray:(IOSObjectArray *)datesAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameDayAsWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameDayAsWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameHourAsWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameHourAsWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameHourWindowAsWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameHourWindowAsWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMinuteAsWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMinuteAsWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMinuteWindowAsWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMinuteWindowAsWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMonthAsWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameMonthAsWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameSecondAsWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameSecondAsWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameSecondWindowAsWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameSecondWindowAsWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameYearAsWithJavaUtilDate:(JavaUtilDate *)other;

- (OrgAssertjCoreApiAbstractDateAssert *)isInSameYearAsWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isInstanceOfAnyWithIOSClassArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isInstanceOfWithIOSClass:(IOSClass *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isInTheFuture;

- (OrgAssertjCoreApiAbstractDateAssert *)isInThePast;

- (OrgAssertjCoreApiAbstractDateAssert *)isInWithJavaLangIterable:(id<JavaLangIterable>)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isInWithNSObjectArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isInWithStringDateCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)datesAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotBetweenWithJavaUtilDate:(JavaUtilDate *)start
                                                     withJavaUtilDate:(JavaUtilDate *)end;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotBetweenWithJavaUtilDate:(JavaUtilDate *)start
                                                     withJavaUtilDate:(JavaUtilDate *)end
                                                          withBoolean:(jboolean)inclusiveStart
                                                          withBoolean:(jboolean)inclusiveEnd;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotBetweenWithNSString:(NSString *)start
                                                     withNSString:(NSString *)end;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotBetweenWithNSString:(NSString *)start
                                                     withNSString:(NSString *)end
                                                      withBoolean:(jboolean)inclusiveStart
                                                      withBoolean:(jboolean)inclusiveEnd;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotEqualToWithNSString:(NSString *)dateAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotEqualToWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotExactlyInstanceOfWithIOSClass:(IOSClass *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotInWithNSStringArray:(IOSObjectArray *)datesAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotInstanceOfAnyWithIOSClassArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotInstanceOfWithIOSClass:(IOSClass *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotInWithJavaLangIterable:(id<JavaLangIterable>)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotInWithNSObjectArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotInWithStringDateCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)datesAsString;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotNull;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotOfAnyClassInWithIOSClassArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotSameAsWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isNotWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isOfAnyClassInWithIOSClassArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isSameAsWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)isToday;

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinDayOfMonthWithInt:(jint)dayOfMonth;

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinDayOfWeekWithInt:(jint)dayOfWeek;

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinHourOfDayWithInt:(jint)hourOfDay;

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinMillisecondWithInt:(jint)millisecond;

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinMinuteWithInt:(jint)minute;

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinMonthWithInt:(jint)month;

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinSecondWithInt:(jint)second;

- (OrgAssertjCoreApiAbstractDateAssert *)isWithinYearWithInt:(jint)year;

- (OrgAssertjCoreApiAbstractDateAssert *)isWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)arg0;

- (OrgAssertjCoreApiAbstractDateAssert *)overridingErrorMessageWithNSString:(NSString *)arg0
                                                          withNSObjectArray:(IOSObjectArray *)arg1;

+ (void)registerCustomDateFormatWithJavaTextDateFormat:(JavaTextDateFormat *)userCustomDateFormat;

+ (void)registerCustomDateFormatWithNSString:(NSString *)userCustomDateFormatPattern;

+ (void)useDateFormatWithJavaTextDateFormat:(JavaTextDateFormat *)userCustomDateFormat;

+ (void)useDateFormatWithNSString:(NSString *)userCustomDateFormatPattern;

+ (void)useDefaultDateFormats;

+ (void)useDefaultDateFormatsOnly;

+ (void)useIsoDateFormat;

- (OrgAssertjCoreApiAbstractDateAssert *)usingComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)customComparator;

- (OrgAssertjCoreApiAbstractDateAssert *)usingDefaultComparator;

- (OrgAssertjCoreApiAbstractDateAssert *)withDateFormatWithJavaTextDateFormat:(JavaTextDateFormat *)userCustomDateFormat;

- (OrgAssertjCoreApiAbstractDateAssert *)withDateFormatWithNSString:(NSString *)userCustomDateFormatPattern;

- (OrgAssertjCoreApiAbstractDateAssert *)withDefaultDateFormats;

- (OrgAssertjCoreApiAbstractDateAssert *)withDefaultDateFormatsOnly;

- (OrgAssertjCoreApiAbstractDateAssert *)withIsoDateFormat;

#pragma mark Protected

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                        withIOSClass:(IOSClass *)selfType;

- (OrgAssertjCoreApiAbstractDateAssert *)inBinary;

- (OrgAssertjCoreApiAbstractDateAssert *)inHexadecimal;

#pragma mark Package-Private

- (JavaUtilDate *)parseWithNSString:(NSString *)dateAsString;

@end

J2OBJC_STATIC_INIT(OrgAssertjCoreApiAbstractDateAssert)

J2OBJC_FIELD_SETTER(OrgAssertjCoreApiAbstractDateAssert, dates_, OrgAssertjCoreInternalInternalDates *)

inline JavaLangThreadLocal *OrgAssertjCoreApiAbstractDateAssert_get_userDateFormats();
inline JavaLangThreadLocal *OrgAssertjCoreApiAbstractDateAssert_set_userDateFormats(JavaLangThreadLocal *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangThreadLocal *OrgAssertjCoreApiAbstractDateAssert_userDateFormats;
J2OBJC_STATIC_FIELD_OBJ(OrgAssertjCoreApiAbstractDateAssert, userDateFormats, JavaLangThreadLocal *)

FOUNDATION_EXPORT void OrgAssertjCoreApiAbstractDateAssert_initWithJavaUtilDate_withIOSClass_(OrgAssertjCoreApiAbstractDateAssert *self, JavaUtilDate *actual, IOSClass *selfType);

FOUNDATION_EXPORT void OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithJavaTextDateFormat_(JavaTextDateFormat *userCustomDateFormat);

FOUNDATION_EXPORT void OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithNSString_(NSString *userCustomDateFormatPattern);

FOUNDATION_EXPORT void OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormatsOnly();

FOUNDATION_EXPORT void OrgAssertjCoreApiAbstractDateAssert_useDateFormatWithJavaTextDateFormat_(JavaTextDateFormat *userCustomDateFormat);

FOUNDATION_EXPORT void OrgAssertjCoreApiAbstractDateAssert_useDateFormatWithNSString_(NSString *userCustomDateFormatPattern);

FOUNDATION_EXPORT void OrgAssertjCoreApiAbstractDateAssert_useIsoDateFormat();

FOUNDATION_EXPORT void OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormats();

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreApiAbstractDateAssert)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreApiAbstractDateAssert")
