//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/condition/DoesNotHave.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreConditionDoesNotHave.h"
#include "OrgAssertjCoreConditionNegative.h"

@interface OrgAssertjCoreConditionDoesNotHave ()

- (instancetype)initWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

@end

__attribute__((unused)) static void OrgAssertjCoreConditionDoesNotHave_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreConditionDoesNotHave *self, OrgAssertjCoreApiCondition *condition);

__attribute__((unused)) static OrgAssertjCoreConditionDoesNotHave *new_OrgAssertjCoreConditionDoesNotHave_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreConditionDoesNotHave *create_OrgAssertjCoreConditionDoesNotHave_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition);

@implementation OrgAssertjCoreConditionDoesNotHave

+ (OrgAssertjCoreConditionDoesNotHave *)doesNotHaveWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreConditionDoesNotHave_doesNotHaveWithOrgAssertjCoreApiCondition_(condition);
}

- (instancetype)initWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreConditionDoesNotHave_initWithOrgAssertjCoreApiCondition_(self, condition);
  return self;
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"does not have :<%s>", [IOSObjectArray arrayWithObjects:(id[]){ condition_ } count:1 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreConditionDoesNotHave;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(doesNotHaveWithOrgAssertjCoreApiCondition:);
  methods[1].selector = @selector(initWithOrgAssertjCoreApiCondition:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doesNotHave", "LOrgAssertjCoreApiCondition;", "<T:Ljava/lang/Object;>(Lorg/assertj/core/api/Condition<-TT;>;)Lorg/assertj/core/condition/DoesNotHave<TT;>;", "(Lorg/assertj/core/api/Condition<-TT;>;)V", "toString", "<T:Ljava/lang/Object;>Lorg/assertj/core/condition/Negative<TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreConditionDoesNotHave = { "DoesNotHave", "org.assertj.core.condition", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, 5, -1 };
  return &_OrgAssertjCoreConditionDoesNotHave;
}

@end

OrgAssertjCoreConditionDoesNotHave *OrgAssertjCoreConditionDoesNotHave_doesNotHaveWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) {
  OrgAssertjCoreConditionDoesNotHave_initialize();
  return create_OrgAssertjCoreConditionDoesNotHave_initWithOrgAssertjCoreApiCondition_(condition);
}

void OrgAssertjCoreConditionDoesNotHave_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreConditionDoesNotHave *self, OrgAssertjCoreApiCondition *condition) {
  OrgAssertjCoreConditionNegative_initWithOrgAssertjCoreApiCondition_(self, condition);
}

OrgAssertjCoreConditionDoesNotHave *new_OrgAssertjCoreConditionDoesNotHave_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreConditionDoesNotHave, initWithOrgAssertjCoreApiCondition_, condition)
}

OrgAssertjCoreConditionDoesNotHave *create_OrgAssertjCoreConditionDoesNotHave_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreConditionDoesNotHave, initWithOrgAssertjCoreApiCondition_, condition)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreConditionDoesNotHave)
