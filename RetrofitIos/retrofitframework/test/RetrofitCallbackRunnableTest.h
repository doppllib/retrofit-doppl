//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/retrofit/CallbackRunnableTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RetrofitCallbackRunnableTest")
#ifdef RESTRICT_RetrofitCallbackRunnableTest
#define INCLUDE_ALL_RetrofitCallbackRunnableTest 0
#else
#define INCLUDE_ALL_RetrofitCallbackRunnableTest 1
#endif
#undef RESTRICT_RetrofitCallbackRunnableTest

#if !defined (RetrofitCallbackRunnableTest_) && (INCLUDE_ALL_RetrofitCallbackRunnableTest || defined(INCLUDE_RetrofitCallbackRunnableTest))
#define RetrofitCallbackRunnableTest_

@interface RetrofitCallbackRunnableTest : NSObject

#pragma mark Public

- (instancetype)init;

- (void)errorPassedToFailure;

- (void)responsePassedToSuccess;

- (void)setUp;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitCallbackRunnableTest)

FOUNDATION_EXPORT void RetrofitCallbackRunnableTest_init(RetrofitCallbackRunnableTest *self);

FOUNDATION_EXPORT RetrofitCallbackRunnableTest *new_RetrofitCallbackRunnableTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RetrofitCallbackRunnableTest *create_RetrofitCallbackRunnableTest_init();

J2OBJC_TYPE_LITERAL_HEADER(RetrofitCallbackRunnableTest)

#endif

#if !defined (RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable_) && (INCLUDE_ALL_RetrofitCallbackRunnableTest || defined(INCLUDE_RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable))
#define RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable_

#define RESTRICT_RetrofitCallbackRunnable 1
#define INCLUDE_RetrofitCallbackRunnable 1
#include "RetrofitCallbackRunnable.h"

@class RetrofitResponseWrapper;
@protocol JavaUtilConcurrentExecutor;
@protocol RetrofitCallback;
@protocol RetrofitErrorHandler;

@interface RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable : RetrofitCallbackRunnable

#pragma mark Public

- (RetrofitResponseWrapper *)obtainResponse;

#pragma mark Package-Private

- (instancetype)initWithRetrofitCallback:(id<RetrofitCallback>)callback
          withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)callbackExecutor
                withRetrofitErrorHandler:(id<RetrofitErrorHandler>)errorHandler;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable)

FOUNDATION_EXPORT void RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable *self, id<RetrofitCallback> callback, id<JavaUtilConcurrentExecutor> callbackExecutor, id<RetrofitErrorHandler> errorHandler);

FOUNDATION_EXPORT RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable *new_RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(id<RetrofitCallback> callback, id<JavaUtilConcurrentExecutor> callbackExecutor, id<RetrofitErrorHandler> errorHandler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable *create_RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(id<RetrofitCallback> callback, id<JavaUtilConcurrentExecutor> callbackExecutor, id<RetrofitErrorHandler> errorHandler);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable)

#endif

#pragma pop_macro("INCLUDE_ALL_RetrofitCallbackRunnableTest")
