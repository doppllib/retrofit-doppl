//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/AbstractThrowableAssert.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractThrowableAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalInternalThrowables.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractThrowableAssert

- (instancetype)initWithNSException:(NSException *)actual
                       withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractThrowableAssert_initWithNSException_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractThrowableAssert *)hasMessageWithNSString:(NSString *)message {
  [((OrgAssertjCoreInternalInternalThrowables *) nil_chk(throwables_)) assertHasMessageWithOrgAssertjCoreApiAssertionInfo:info_ withNSException:actual_ withNSString:message];
  return ((OrgAssertjCoreApiAbstractThrowableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractThrowableAssert *)hasNoCause {
  [((OrgAssertjCoreInternalInternalThrowables *) nil_chk(throwables_)) assertHasNoCauseWithOrgAssertjCoreApiAssertionInfo:info_ withNSException:actual_];
  return ((OrgAssertjCoreApiAbstractThrowableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractThrowableAssert *)hasMessageStartingWithWithNSString:(NSString *)description_ {
  [((OrgAssertjCoreInternalInternalThrowables *) nil_chk(throwables_)) assertHasMessageStartingWithWithOrgAssertjCoreApiAssertionInfo:info_ withNSException:actual_ withNSString:description_];
  return ((OrgAssertjCoreApiAbstractThrowableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractThrowableAssert *)hasMessageContainingWithNSString:(NSString *)description_ {
  [((OrgAssertjCoreInternalInternalThrowables *) nil_chk(throwables_)) assertHasMessageContainingWithOrgAssertjCoreApiAssertionInfo:info_ withNSException:actual_ withNSString:description_];
  return ((OrgAssertjCoreApiAbstractThrowableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractThrowableAssert *)hasMessageEndingWithWithNSString:(NSString *)description_ {
  [((OrgAssertjCoreInternalInternalThrowables *) nil_chk(throwables_)) assertHasMessageEndingWithWithOrgAssertjCoreApiAssertionInfo:info_ withNSException:actual_ withNSString:description_];
  return ((OrgAssertjCoreApiAbstractThrowableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractThrowableAssert *)hasCauseInstanceOfWithIOSClass:(IOSClass *)type {
  [((OrgAssertjCoreInternalInternalThrowables *) nil_chk(throwables_)) assertHasCauseInstanceOfWithOrgAssertjCoreApiAssertionInfo:info_ withNSException:actual_ withIOSClass:type];
  return ((OrgAssertjCoreApiAbstractThrowableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractThrowableAssert *)hasCauseExactlyInstanceOfWithIOSClass:(IOSClass *)type {
  [((OrgAssertjCoreInternalInternalThrowables *) nil_chk(throwables_)) assertHasCauseExactlyInstanceOfWithOrgAssertjCoreApiAssertionInfo:info_ withNSException:actual_ withIOSClass:type];
  return ((OrgAssertjCoreApiAbstractThrowableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractThrowableAssert *)hasRootCauseInstanceOfWithIOSClass:(IOSClass *)type {
  [((OrgAssertjCoreInternalInternalThrowables *) nil_chk(throwables_)) assertHasRootCauseInstanceOfWithOrgAssertjCoreApiAssertionInfo:info_ withNSException:actual_ withIOSClass:type];
  return ((OrgAssertjCoreApiAbstractThrowableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractThrowableAssert *)hasRootCauseExactlyInstanceOfWithIOSClass:(IOSClass *)type {
  [((OrgAssertjCoreInternalInternalThrowables *) nil_chk(throwables_)) assertHasRootCauseExactlyInstanceOfWithOrgAssertjCoreApiAssertionInfo:info_ withNSException:actual_ withIOSClass:type];
  return ((OrgAssertjCoreApiAbstractThrowableAssert *) myself_);
}

- (void)dealloc {
  RELEASE_(throwables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractThrowableAssert;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractThrowableAssert;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractThrowableAssert;", 0x1, 6, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractThrowableAssert;", 0x1, 7, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractThrowableAssert;", 0x1, 8, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractThrowableAssert;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractThrowableAssert;", 0x1, 12, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractThrowableAssert;", 0x1, 13, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractThrowableAssert;", 0x1, 14, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSException:withIOSClass:);
  methods[1].selector = @selector(hasMessageWithNSString:);
  methods[2].selector = @selector(hasNoCause);
  methods[3].selector = @selector(hasMessageStartingWithWithNSString:);
  methods[4].selector = @selector(hasMessageContainingWithNSString:);
  methods[5].selector = @selector(hasMessageEndingWithWithNSString:);
  methods[6].selector = @selector(hasCauseInstanceOfWithIOSClass:);
  methods[7].selector = @selector(hasCauseExactlyInstanceOfWithIOSClass:);
  methods[8].selector = @selector(hasRootCauseInstanceOfWithIOSClass:);
  methods[9].selector = @selector(hasRootCauseExactlyInstanceOfWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "throwables_", "LOrgAssertjCoreInternalInternalThrowables;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;LIOSClass;", "(TA;Ljava/lang/Class<*>;)V", "hasMessage", "LNSString;", "(Ljava/lang/String;)TS;", "()TS;", "hasMessageStartingWith", "hasMessageContaining", "hasMessageEndingWith", "hasCauseInstanceOf", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;)TS;", "hasCauseExactlyInstanceOf", "hasRootCauseInstanceOf", "hasRootCauseExactlyInstanceOf", "<S:Lorg/assertj/core/api/AbstractThrowableAssert<TS;TA;>;A:Ljava/lang/Throwable;>Lorg/assertj/core/api/AbstractAssert<TS;TA;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractThrowableAssert = { "AbstractThrowableAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 10, 1, -1, -1, -1, 15, -1 };
  return &_OrgAssertjCoreApiAbstractThrowableAssert;
}

@end

void OrgAssertjCoreApiAbstractThrowableAssert_initWithNSException_withIOSClass_(OrgAssertjCoreApiAbstractThrowableAssert *self, NSException *actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->throwables_, OrgAssertjCoreInternalInternalThrowables_instance());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractThrowableAssert)
