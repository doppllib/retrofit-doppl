//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/BinaryDiff.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreInternalBinaryDiff.h"
#include "OrgAssertjCoreInternalBinaryDiffResult.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"

@implementation OrgAssertjCoreInternalBinaryDiff

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalBinaryDiff_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgAssertjCoreInternalBinaryDiffResult *)diffWithJavaIoFile:(JavaIoFile *)actual
                                                 withByteArray:(IOSByteArray *)expected {
  JavaIoInputStream *expectedStream = create_JavaIoByteArrayInputStream_initWithByteArray_(expected);
  JavaIoInputStream *actualStream = nil;
  jboolean threw = true;
  @try {
    actualStream = create_JavaIoFileInputStream_initWithJavaIoFile_(actual);
    OrgAssertjCoreInternalBinaryDiffResult *result = [self diffWithJavaIoInputStream:actualStream withJavaIoInputStream:expectedStream];
    threw = false;
    return result;
  }
  @finally {
    @try {
      if (actualStream != nil) [actualStream close];
    }
    @catch (JavaIoIOException *e) {
      if (!threw) @throw e;
    }
  }
}

- (OrgAssertjCoreInternalBinaryDiffResult *)diffWithJavaIoInputStream:(JavaIoInputStream *)actualStream
                                                withJavaIoInputStream:(JavaIoInputStream *)expectedStream {
  jint index = 0;
  while (true) {
    jint actual = [((JavaIoInputStream *) nil_chk(actualStream)) read];
    jint expected = [((JavaIoInputStream *) nil_chk(expectedStream)) read];
    if (actual == -1 && expected == -1) return OrgAssertjCoreInternalBinaryDiffResult_noDiff();
    if (actual != expected) return create_OrgAssertjCoreInternalBinaryDiffResult_initWithInt_withInt_withInt_(index, expected, actual);
    index += 1;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreInternalBinaryDiffResult;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreInternalBinaryDiffResult;", 0x1, 0, 3, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(diffWithJavaIoFile:withByteArray:);
  methods[2].selector = @selector(diffWithJavaIoInputStream:withJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "diff", "LJavaIoFile;[B", "LJavaIoIOException;", "LJavaIoInputStream;LJavaIoInputStream;" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalBinaryDiff = { "BinaryDiff", "org.assertj.core.internal", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalBinaryDiff;
}

@end

void OrgAssertjCoreInternalBinaryDiff_init(OrgAssertjCoreInternalBinaryDiff *self) {
  NSObject_init(self);
}

OrgAssertjCoreInternalBinaryDiff *new_OrgAssertjCoreInternalBinaryDiff_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalBinaryDiff, init)
}

OrgAssertjCoreInternalBinaryDiff *create_OrgAssertjCoreInternalBinaryDiff_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalBinaryDiff, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalBinaryDiff)
