//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/util/Maps.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCorePresentationRepresentation.h"
#include "OrgAssertjCorePresentationStandardRepresentation.h"
#include "OrgAssertjCoreUtilMaps.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"

@interface OrgAssertjCoreUtilMaps ()

+ (id)formatWithJavaUtilMap:(id<JavaUtilMap>)map
                     withId:(id)o
withOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)p;

- (instancetype)init;

@end

__attribute__((unused)) static id OrgAssertjCoreUtilMaps_formatWithJavaUtilMap_withId_withOrgAssertjCorePresentationRepresentation_(id<JavaUtilMap> map, id o, id<OrgAssertjCorePresentationRepresentation> p);

__attribute__((unused)) static void OrgAssertjCoreUtilMaps_init(OrgAssertjCoreUtilMaps *self);

__attribute__((unused)) static OrgAssertjCoreUtilMaps *new_OrgAssertjCoreUtilMaps_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreUtilMaps *create_OrgAssertjCoreUtilMaps_init();

@implementation OrgAssertjCoreUtilMaps

+ (id<JavaUtilMap>)newHashMap {
  return OrgAssertjCoreUtilMaps_newHashMap();
}

+ (id<JavaUtilConcurrentConcurrentMap>)newConcurrentHashMap {
  return OrgAssertjCoreUtilMaps_newConcurrentHashMap();
}

+ (JavaUtilWeakHashMap *)newWeakHashMap {
  return OrgAssertjCoreUtilMaps_newWeakHashMap();
}

+ (jboolean)isNullOrEmptyWithJavaUtilMap:(id<JavaUtilMap>)map {
  return OrgAssertjCoreUtilMaps_isNullOrEmptyWithJavaUtilMap_(map);
}

+ (NSString *)formatWithJavaUtilMap:(id<JavaUtilMap>)map {
  return OrgAssertjCoreUtilMaps_formatWithJavaUtilMap_(map);
}

+ (NSString *)formatWithOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)p
                                                 withJavaUtilMap:(id<JavaUtilMap>)map {
  return OrgAssertjCoreUtilMaps_formatWithOrgAssertjCorePresentationRepresentation_withJavaUtilMap_(p, map);
}

+ (id)formatWithJavaUtilMap:(id<JavaUtilMap>)map
                     withId:(id)o
withOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)p {
  return OrgAssertjCoreUtilMaps_formatWithJavaUtilMap_withId_withOrgAssertjCorePresentationRepresentation_(map, o, p);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilMaps_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilMap;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilConcurrentConcurrentMap;", 0x9, -1, -1, -1, 1, -1, -1 },
    { NULL, "LJavaUtilWeakHashMap;", 0x9, -1, -1, -1, 2, -1, -1 },
    { NULL, "Z", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 4, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 8, -1, 9, -1, -1 },
    { NULL, "LNSObject;", 0xa, 6, 10, -1, 11, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newHashMap);
  methods[1].selector = @selector(newConcurrentHashMap);
  methods[2].selector = @selector(newWeakHashMap);
  methods[3].selector = @selector(isNullOrEmptyWithJavaUtilMap:);
  methods[4].selector = @selector(formatWithJavaUtilMap:);
  methods[5].selector = @selector(formatWithOrgAssertjCorePresentationRepresentation:withJavaUtilMap:);
  methods[6].selector = @selector(formatWithJavaUtilMap:withId:withOrgAssertjCorePresentationRepresentation:);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "<K:Ljava/lang/Object;V:Ljava/lang/Object;>()Ljava/util/Map<TK;TV;>;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>()Ljava/util/concurrent/ConcurrentMap<TK;TV;>;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>()Ljava/util/WeakHashMap<TK;TV;>;", "isNullOrEmpty", "LJavaUtilMap;", "(Ljava/util/Map<**>;)Z", "format", "(Ljava/util/Map<**>;)Ljava/lang/String;", "LOrgAssertjCorePresentationRepresentation;LJavaUtilMap;", "(Lorg/assertj/core/presentation/Representation;Ljava/util/Map<**>;)Ljava/lang/String;", "LJavaUtilMap;LNSObject;LOrgAssertjCorePresentationRepresentation;", "(Ljava/util/Map<**>;Ljava/lang/Object;Lorg/assertj/core/presentation/Representation;)Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilMaps = { "Maps", "org.assertj.core.util", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilMaps;
}

@end

id<JavaUtilMap> OrgAssertjCoreUtilMaps_newHashMap() {
  OrgAssertjCoreUtilMaps_initialize();
  return create_JavaUtilHashMap_init();
}

id<JavaUtilConcurrentConcurrentMap> OrgAssertjCoreUtilMaps_newConcurrentHashMap() {
  OrgAssertjCoreUtilMaps_initialize();
  return create_JavaUtilConcurrentConcurrentHashMap_init();
}

JavaUtilWeakHashMap *OrgAssertjCoreUtilMaps_newWeakHashMap() {
  OrgAssertjCoreUtilMaps_initialize();
  return create_JavaUtilWeakHashMap_init();
}

jboolean OrgAssertjCoreUtilMaps_isNullOrEmptyWithJavaUtilMap_(id<JavaUtilMap> map) {
  OrgAssertjCoreUtilMaps_initialize();
  return map == nil || [map isEmpty];
}

NSString *OrgAssertjCoreUtilMaps_formatWithJavaUtilMap_(id<JavaUtilMap> map) {
  OrgAssertjCoreUtilMaps_initialize();
  return OrgAssertjCoreUtilMaps_formatWithOrgAssertjCorePresentationRepresentation_withJavaUtilMap_(create_OrgAssertjCorePresentationStandardRepresentation_init(), map);
}

NSString *OrgAssertjCoreUtilMaps_formatWithOrgAssertjCorePresentationRepresentation_withJavaUtilMap_(id<OrgAssertjCorePresentationRepresentation> p, id<JavaUtilMap> map) {
  OrgAssertjCoreUtilMaps_initialize();
  if (map == nil) {
    return nil;
  }
  id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([map entrySet])) iterator];
  if (![((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    return @"{}";
  }
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:@"{"];
  for (; ; ) {
    id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) cast_check([i next], JavaUtilMap_Entry_class_());
    [buffer appendWithId:OrgAssertjCoreUtilMaps_formatWithJavaUtilMap_withId_withOrgAssertjCorePresentationRepresentation_(map, [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], p)];
    [buffer appendWithChar:'='];
    [buffer appendWithId:OrgAssertjCoreUtilMaps_formatWithJavaUtilMap_withId_withOrgAssertjCorePresentationRepresentation_(map, [e getValue], p)];
    if (![i hasNext]) {
      return [((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:@"}"])) description];
    }
    [buffer appendWithNSString:@", "];
  }
}

id OrgAssertjCoreUtilMaps_formatWithJavaUtilMap_withId_withOrgAssertjCorePresentationRepresentation_(id<JavaUtilMap> map, id o, id<OrgAssertjCorePresentationRepresentation> p) {
  OrgAssertjCoreUtilMaps_initialize();
  return o == map ? @"(this Map)" : [((id<OrgAssertjCorePresentationRepresentation>) nil_chk(p)) toStringOfWithId:o];
}

void OrgAssertjCoreUtilMaps_init(OrgAssertjCoreUtilMaps *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilMaps *new_OrgAssertjCoreUtilMaps_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilMaps, init)
}

OrgAssertjCoreUtilMaps *create_OrgAssertjCoreUtilMaps_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilMaps, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilMaps)
