//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldContainCharSequenceSequence.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequenceSequence")
#ifdef RESTRICT_OrgAssertjCoreErrorShouldContainCharSequenceSequence
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequenceSequence 0
#else
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequenceSequence 1
#endif
#undef RESTRICT_OrgAssertjCoreErrorShouldContainCharSequenceSequence

#if !defined (OrgAssertjCoreErrorShouldContainCharSequenceSequence_) && (INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequenceSequence || defined(INCLUDE_OrgAssertjCoreErrorShouldContainCharSequenceSequence))
#define OrgAssertjCoreErrorShouldContainCharSequenceSequence_

#define RESTRICT_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#define INCLUDE_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"

@class IOSObjectArray;
@protocol JavaLangCharSequence;
@protocol OrgAssertjCoreErrorErrorMessageFactory;
@protocol OrgAssertjCoreInternalComparisonStrategy;

@interface OrgAssertjCoreErrorShouldContainCharSequenceSequence : OrgAssertjCoreErrorBasicErrorMessageFactory

#pragma mark Public

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainSequenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                              withJavaLangCharSequenceArray:(IOSObjectArray *)strings
                                                                                    withInt:(jint)firstBadOrderIndex;

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainSequenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                              withJavaLangCharSequenceArray:(IOSObjectArray *)strings
                                                                                    withInt:(jint)badOrderIndex
                                               withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreErrorShouldContainCharSequenceSequence)

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequenceSequence_shouldContainSequenceWithJavaLangCharSequence_withJavaLangCharSequenceArray_withInt_(id<JavaLangCharSequence> actual, IOSObjectArray *strings, jint firstBadOrderIndex);

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequenceSequence_shouldContainSequenceWithJavaLangCharSequence_withJavaLangCharSequenceArray_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, IOSObjectArray *strings, jint badOrderIndex, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreErrorShouldContainCharSequenceSequence)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequenceSequence")
