//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/AbstractSoftAssertions.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractSoftAssertions.h"
#include "OrgAssertjCoreApiBigDecimalAssert.h"
#include "OrgAssertjCoreApiBooleanArrayAssert.h"
#include "OrgAssertjCoreApiBooleanAssert.h"
#include "OrgAssertjCoreApiByteArrayAssert.h"
#include "OrgAssertjCoreApiByteAssert.h"
#include "OrgAssertjCoreApiCharArrayAssert.h"
#include "OrgAssertjCoreApiCharSequenceAssert.h"
#include "OrgAssertjCoreApiCharacterAssert.h"
#include "OrgAssertjCoreApiClassAssert.h"
#include "OrgAssertjCoreApiDateAssert.h"
#include "OrgAssertjCoreApiDoubleArrayAssert.h"
#include "OrgAssertjCoreApiDoubleAssert.h"
#include "OrgAssertjCoreApiFileAssert.h"
#include "OrgAssertjCoreApiFloatArrayAssert.h"
#include "OrgAssertjCoreApiFloatAssert.h"
#include "OrgAssertjCoreApiInputStreamAssert.h"
#include "OrgAssertjCoreApiIntArrayAssert.h"
#include "OrgAssertjCoreApiIntegerAssert.h"
#include "OrgAssertjCoreApiIterableAssert.h"
#include "OrgAssertjCoreApiListAssert.h"
#include "OrgAssertjCoreApiLongArrayAssert.h"
#include "OrgAssertjCoreApiLongAssert.h"
#include "OrgAssertjCoreApiMapAssert.h"
#include "OrgAssertjCoreApiObjectArrayAssert.h"
#include "OrgAssertjCoreApiObjectAssert.h"
#include "OrgAssertjCoreApiShortArrayAssert.h"
#include "OrgAssertjCoreApiShortAssert.h"
#include "OrgAssertjCoreApiStringAssert.h"
#include "OrgAssertjCoreApiThrowableAssert.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigDecimal.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation OrgAssertjCoreApiAbstractSoftAssertions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreApiAbstractSoftAssertions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)proxyWithIOSClass:(IOSClass *)assertClass
           withIOSClass:(IOSClass *)actualClass
                 withId:(id)actual {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Well shit");
}

- (OrgAssertjCoreApiBigDecimalAssert *)assertThatWithJavaMathBigDecimal:(JavaMathBigDecimal *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiBigDecimalAssert_class_() withIOSClass:JavaMathBigDecimal_class_() withId:actual];
}

- (OrgAssertjCoreApiBooleanAssert *)assertThatWithBoolean:(jboolean)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiBooleanAssert_class_() withIOSClass:JavaLangBoolean_class_() withId:JavaLangBoolean_valueOfWithBoolean_(actual)];
}

- (OrgAssertjCoreApiBooleanAssert *)assertThatWithJavaLangBoolean:(JavaLangBoolean *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiBooleanAssert_class_() withIOSClass:JavaLangBoolean_class_() withId:actual];
}

- (OrgAssertjCoreApiBooleanArrayAssert *)assertThatWithBooleanArray:(IOSBooleanArray *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiBooleanArrayAssert_class_() withIOSClass:IOSClass_booleanArray(1) withId:actual];
}

- (OrgAssertjCoreApiByteAssert *)assertThatWithByte:(jbyte)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiByteAssert_class_() withIOSClass:JavaLangByte_class_() withId:JavaLangByte_valueOfWithByte_(actual)];
}

- (OrgAssertjCoreApiByteAssert *)assertThatWithJavaLangByte:(JavaLangByte *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiByteAssert_class_() withIOSClass:JavaLangByte_class_() withId:actual];
}

- (OrgAssertjCoreApiByteArrayAssert *)assertThatWithByteArray:(IOSByteArray *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiByteArrayAssert_class_() withIOSClass:IOSClass_byteArray(1) withId:actual];
}

- (OrgAssertjCoreApiCharacterAssert *)assertThatWithChar:(jchar)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiCharacterAssert_class_() withIOSClass:JavaLangCharacter_class_() withId:JavaLangCharacter_valueOfWithChar_(actual)];
}

- (OrgAssertjCoreApiCharArrayAssert *)assertThatWithCharArray:(IOSCharArray *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiCharArrayAssert_class_() withIOSClass:IOSClass_charArray(1) withId:actual];
}

- (OrgAssertjCoreApiCharacterAssert *)assertThatWithJavaLangCharacter:(JavaLangCharacter *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiCharacterAssert_class_() withIOSClass:JavaLangCharacter_class_() withId:actual];
}

- (OrgAssertjCoreApiClassAssert *)assertThatWithIOSClass:(IOSClass *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiClassAssert_class_() withIOSClass:IOSClass_class_() withId:actual];
}

- (OrgAssertjCoreApiIterableAssert *)assertThatWithJavaLangIterable:(id<JavaLangIterable>)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiIterableAssert_class_() withIOSClass:JavaLangIterable_class_() withId:actual];
}

- (OrgAssertjCoreApiIterableAssert *)assertThatWithJavaUtilIterator:(id<JavaUtilIterator>)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiIterableAssert_class_() withIOSClass:JavaUtilIterator_class_() withId:actual];
}

- (OrgAssertjCoreApiDoubleAssert *)assertThatWithDouble:(jdouble)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiDoubleAssert_class_() withIOSClass:JavaLangDouble_class_() withId:JavaLangDouble_valueOfWithDouble_(actual)];
}

- (OrgAssertjCoreApiDoubleAssert *)assertThatWithJavaLangDouble:(JavaLangDouble *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiDoubleAssert_class_() withIOSClass:JavaLangDouble_class_() withId:actual];
}

- (OrgAssertjCoreApiDoubleArrayAssert *)assertThatWithDoubleArray:(IOSDoubleArray *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiDoubleArrayAssert_class_() withIOSClass:IOSClass_doubleArray(1) withId:actual];
}

- (OrgAssertjCoreApiFileAssert *)assertThatWithJavaIoFile:(JavaIoFile *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiFileAssert_class_() withIOSClass:JavaIoFile_class_() withId:actual];
}

- (OrgAssertjCoreApiInputStreamAssert *)assertThatWithJavaIoInputStream:(JavaIoInputStream *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiInputStreamAssert_class_() withIOSClass:JavaIoInputStream_class_() withId:actual];
}

- (OrgAssertjCoreApiFloatAssert *)assertThatWithFloat:(jfloat)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiFloatAssert_class_() withIOSClass:JavaLangFloat_class_() withId:JavaLangFloat_valueOfWithFloat_(actual)];
}

- (OrgAssertjCoreApiFloatAssert *)assertThatWithJavaLangFloat:(JavaLangFloat *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiFloatAssert_class_() withIOSClass:JavaLangFloat_class_() withId:actual];
}

- (OrgAssertjCoreApiFloatArrayAssert *)assertThatWithFloatArray:(IOSFloatArray *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiFloatArrayAssert_class_() withIOSClass:IOSClass_floatArray(1) withId:actual];
}

- (OrgAssertjCoreApiIntegerAssert *)assertThatWithInt:(jint)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiIntegerAssert_class_() withIOSClass:JavaLangInteger_class_() withId:JavaLangInteger_valueOfWithInt_(actual)];
}

- (OrgAssertjCoreApiIntArrayAssert *)assertThatWithIntArray:(IOSIntArray *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiIntArrayAssert_class_() withIOSClass:IOSClass_intArray(1) withId:actual];
}

- (OrgAssertjCoreApiIntegerAssert *)assertThatWithJavaLangInteger:(JavaLangInteger *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiIntegerAssert_class_() withIOSClass:JavaLangInteger_class_() withId:actual];
}

- (OrgAssertjCoreApiListAssert *)assertThatWithJavaUtilList:(id<JavaUtilList>)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiListAssert_class_() withIOSClass:JavaUtilList_class_() withId:actual];
}

- (OrgAssertjCoreApiLongAssert *)assertThatWithLong:(jlong)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiLongAssert_class_() withIOSClass:JavaLangLong_class_() withId:JavaLangLong_valueOfWithLong_(actual)];
}

- (OrgAssertjCoreApiLongAssert *)assertThatWithJavaLangLong:(JavaLangLong *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiLongAssert_class_() withIOSClass:JavaLangLong_class_() withId:actual];
}

- (OrgAssertjCoreApiLongArrayAssert *)assertThatWithLongArray:(IOSLongArray *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiLongArrayAssert_class_() withIOSClass:IOSClass_longArray(1) withId:actual];
}

- (OrgAssertjCoreApiObjectAssert *)assertThatWithId:(id)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiObjectAssert_class_() withIOSClass:NSObject_class_() withId:actual];
}

- (OrgAssertjCoreApiObjectArrayAssert *)assertThatWithNSObjectArray:(IOSObjectArray *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiObjectArrayAssert_class_() withIOSClass:IOSClass_arrayType(NSObject_class_(), 1) withId:actual];
}

- (OrgAssertjCoreApiMapAssert *)assertThatWithJavaUtilMap:(id<JavaUtilMap>)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiMapAssert_class_() withIOSClass:JavaUtilMap_class_() withId:actual];
}

- (OrgAssertjCoreApiShortAssert *)assertThatWithShort:(jshort)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiShortAssert_class_() withIOSClass:JavaLangShort_class_() withId:JavaLangShort_valueOfWithShort_(actual)];
}

- (OrgAssertjCoreApiShortAssert *)assertThatWithJavaLangShort:(JavaLangShort *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiShortAssert_class_() withIOSClass:JavaLangShort_class_() withId:actual];
}

- (OrgAssertjCoreApiShortArrayAssert *)assertThatWithShortArray:(IOSShortArray *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiShortArrayAssert_class_() withIOSClass:IOSClass_shortArray(1) withId:actual];
}

- (OrgAssertjCoreApiCharSequenceAssert *)assertThatWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiCharSequenceAssert_class_() withIOSClass:JavaLangCharSequence_class_() withId:actual];
}

- (OrgAssertjCoreApiStringAssert *)assertThatWithNSString:(NSString *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiStringAssert_class_() withIOSClass:NSString_class_() withId:actual];
}

- (OrgAssertjCoreApiDateAssert *)assertThatWithJavaUtilDate:(JavaUtilDate *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiDateAssert_class_() withIOSClass:JavaUtilDate_class_() withId:actual];
}

- (OrgAssertjCoreApiThrowableAssert *)assertThatWithNSException:(NSException *)actual {
  return [self proxyWithIOSClass:OrgAssertjCoreApiThrowableAssert_class_() withIOSClass:NSException_class_() withId:actual];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiBigDecimalAssert;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiBooleanAssert;", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiBooleanAssert;", 0x1, 3, 6, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiBooleanArrayAssert;", 0x1, 3, 7, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiByteAssert;", 0x1, 3, 8, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiByteAssert;", 0x1, 3, 9, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiByteArrayAssert;", 0x1, 3, 10, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiCharacterAssert;", 0x1, 3, 11, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiCharArrayAssert;", 0x1, 3, 12, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiCharacterAssert;", 0x1, 3, 13, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiClassAssert;", 0x1, 3, 14, -1, 15, -1, -1 },
    { NULL, "LOrgAssertjCoreApiIterableAssert;", 0x1, 3, 16, -1, 17, -1, -1 },
    { NULL, "LOrgAssertjCoreApiIterableAssert;", 0x1, 3, 18, -1, 19, -1, -1 },
    { NULL, "LOrgAssertjCoreApiDoubleAssert;", 0x1, 3, 20, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiDoubleAssert;", 0x1, 3, 21, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiDoubleArrayAssert;", 0x1, 3, 22, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiFileAssert;", 0x1, 3, 23, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiInputStreamAssert;", 0x1, 3, 24, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiFloatAssert;", 0x1, 3, 25, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiFloatAssert;", 0x1, 3, 26, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiFloatArrayAssert;", 0x1, 3, 27, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiIntegerAssert;", 0x1, 3, 28, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiIntArrayAssert;", 0x1, 3, 29, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiIntegerAssert;", 0x1, 3, 30, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiListAssert;", 0x1, 3, 31, -1, 32, -1, -1 },
    { NULL, "LOrgAssertjCoreApiLongAssert;", 0x1, 3, 33, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiLongAssert;", 0x1, 3, 34, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiLongArrayAssert;", 0x1, 3, 35, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectAssert;", 0x1, 3, 36, -1, 37, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectArrayAssert;", 0x1, 3, 38, -1, 39, -1, -1 },
    { NULL, "LOrgAssertjCoreApiMapAssert;", 0x1, 3, 40, -1, 41, -1, -1 },
    { NULL, "LOrgAssertjCoreApiShortAssert;", 0x1, 3, 42, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiShortAssert;", 0x1, 3, 43, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiShortArrayAssert;", 0x1, 3, 44, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiCharSequenceAssert;", 0x1, 3, 45, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiStringAssert;", 0x1, 3, 46, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiDateAssert;", 0x1, 3, 47, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiThrowableAssert;", 0x1, 3, 48, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(proxyWithIOSClass:withIOSClass:withId:);
  methods[2].selector = @selector(assertThatWithJavaMathBigDecimal:);
  methods[3].selector = @selector(assertThatWithBoolean:);
  methods[4].selector = @selector(assertThatWithJavaLangBoolean:);
  methods[5].selector = @selector(assertThatWithBooleanArray:);
  methods[6].selector = @selector(assertThatWithByte:);
  methods[7].selector = @selector(assertThatWithJavaLangByte:);
  methods[8].selector = @selector(assertThatWithByteArray:);
  methods[9].selector = @selector(assertThatWithChar:);
  methods[10].selector = @selector(assertThatWithCharArray:);
  methods[11].selector = @selector(assertThatWithJavaLangCharacter:);
  methods[12].selector = @selector(assertThatWithIOSClass:);
  methods[13].selector = @selector(assertThatWithJavaLangIterable:);
  methods[14].selector = @selector(assertThatWithJavaUtilIterator:);
  methods[15].selector = @selector(assertThatWithDouble:);
  methods[16].selector = @selector(assertThatWithJavaLangDouble:);
  methods[17].selector = @selector(assertThatWithDoubleArray:);
  methods[18].selector = @selector(assertThatWithJavaIoFile:);
  methods[19].selector = @selector(assertThatWithJavaIoInputStream:);
  methods[20].selector = @selector(assertThatWithFloat:);
  methods[21].selector = @selector(assertThatWithJavaLangFloat:);
  methods[22].selector = @selector(assertThatWithFloatArray:);
  methods[23].selector = @selector(assertThatWithInt:);
  methods[24].selector = @selector(assertThatWithIntArray:);
  methods[25].selector = @selector(assertThatWithJavaLangInteger:);
  methods[26].selector = @selector(assertThatWithJavaUtilList:);
  methods[27].selector = @selector(assertThatWithLong:);
  methods[28].selector = @selector(assertThatWithJavaLangLong:);
  methods[29].selector = @selector(assertThatWithLongArray:);
  methods[30].selector = @selector(assertThatWithId:);
  methods[31].selector = @selector(assertThatWithNSObjectArray:);
  methods[32].selector = @selector(assertThatWithJavaUtilMap:);
  methods[33].selector = @selector(assertThatWithShort:);
  methods[34].selector = @selector(assertThatWithJavaLangShort:);
  methods[35].selector = @selector(assertThatWithShortArray:);
  methods[36].selector = @selector(assertThatWithJavaLangCharSequence:);
  methods[37].selector = @selector(assertThatWithNSString:);
  methods[38].selector = @selector(assertThatWithJavaUtilDate:);
  methods[39].selector = @selector(assertThatWithNSException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "proxy", "LIOSClass;LIOSClass;LNSObject;", "<T:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/Class<TV;>;Ljava/lang/Class<TT;>;TT;)TV;", "assertThat", "LJavaMathBigDecimal;", "Z", "LJavaLangBoolean;", "[Z", "B", "LJavaLangByte;", "[B", "C", "[C", "LJavaLangCharacter;", "LIOSClass;", "(Ljava/lang/Class<*>;)Lorg/assertj/core/api/ClassAssert;", "LJavaLangIterable;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;)Lorg/assertj/core/api/IterableAssert<TT;>;", "LJavaUtilIterator;", "<T:Ljava/lang/Object;>(Ljava/util/Iterator<TT;>;)Lorg/assertj/core/api/IterableAssert<TT;>;", "D", "LJavaLangDouble;", "[D", "LJavaIoFile;", "LJavaIoInputStream;", "F", "LJavaLangFloat;", "[F", "I", "[I", "LJavaLangInteger;", "LJavaUtilList;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;)Lorg/assertj/core/api/ListAssert<TT;>;", "J", "LJavaLangLong;", "[J", "LNSObject;", "<T:Ljava/lang/Object;>(TT;)Lorg/assertj/core/api/ObjectAssert<TT;>;", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)Lorg/assertj/core/api/ObjectArrayAssert<TT;>;", "LJavaUtilMap;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;)Lorg/assertj/core/api/MapAssert<TK;TV;>;", "S", "LJavaLangShort;", "[S", "LJavaLangCharSequence;", "LNSString;", "LJavaUtilDate;", "LNSException;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractSoftAssertions = { "AbstractSoftAssertions", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x401, 40, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreApiAbstractSoftAssertions;
}

@end

void OrgAssertjCoreApiAbstractSoftAssertions_init(OrgAssertjCoreApiAbstractSoftAssertions *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractSoftAssertions)
