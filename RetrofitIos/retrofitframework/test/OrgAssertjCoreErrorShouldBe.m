//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/error/ShouldBe.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBe.h"

@interface OrgAssertjCoreErrorShouldBe ()

- (instancetype)initWithId:(id)actual
withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBe_initWithId_withOrgAssertjCoreApiCondition_(OrgAssertjCoreErrorShouldBe *self, id actual, OrgAssertjCoreApiCondition *condition);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBe *new_OrgAssertjCoreErrorShouldBe_initWithId_withOrgAssertjCoreApiCondition_(id actual, OrgAssertjCoreApiCondition *condition) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBe *create_OrgAssertjCoreErrorShouldBe_initWithId_withOrgAssertjCoreApiCondition_(id actual, OrgAssertjCoreApiCondition *condition);

@implementation OrgAssertjCoreErrorShouldBe

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeWithId:(id)actual
                              withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreErrorShouldBe_shouldBeWithId_withOrgAssertjCoreApiCondition_(actual, condition);
}

- (instancetype)initWithId:(id)actual
withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreErrorShouldBe_initWithId_withOrgAssertjCoreApiCondition_(self, actual, condition);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeWithId:withOrgAssertjCoreApiCondition:);
  methods[1].selector = @selector(initWithId:withOrgAssertjCoreApiCondition:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBe", "LNSObject;LOrgAssertjCoreApiCondition;", "<T:Ljava/lang/Object;>(TT;Lorg/assertj/core/api/Condition<-TT;>;)Lorg/assertj/core/error/ErrorMessageFactory;", "(Ljava/lang/Object;Lorg/assertj/core/api/Condition<*>;)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBe = { "ShouldBe", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBe;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBe_shouldBeWithId_withOrgAssertjCoreApiCondition_(id actual, OrgAssertjCoreApiCondition *condition) {
  OrgAssertjCoreErrorShouldBe_initialize();
  return create_OrgAssertjCoreErrorShouldBe_initWithId_withOrgAssertjCoreApiCondition_(actual, condition);
}

void OrgAssertjCoreErrorShouldBe_initWithId_withOrgAssertjCoreApiCondition_(OrgAssertjCoreErrorShouldBe *self, id actual, OrgAssertjCoreApiCondition *condition) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto be <%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual, condition } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBe *new_OrgAssertjCoreErrorShouldBe_initWithId_withOrgAssertjCoreApiCondition_(id actual, OrgAssertjCoreApiCondition *condition) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBe, initWithId_withOrgAssertjCoreApiCondition_, actual, condition)
}

OrgAssertjCoreErrorShouldBe *create_OrgAssertjCoreErrorShouldBe_initWithId_withOrgAssertjCoreApiCondition_(id actual, OrgAssertjCoreApiCondition *condition) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBe, initWithId_withOrgAssertjCoreApiCondition_, actual, condition)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBe)
