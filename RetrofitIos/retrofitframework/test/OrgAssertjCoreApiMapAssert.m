//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/MapAssert.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractMapAssert.h"
#include "OrgAssertjCoreApiMapAssert.h"
#include "java/util/Map.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiMapAssert

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)actual {
  OrgAssertjCoreApiMapAssert_initWithJavaUtilMap_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilMap:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaUtilMap;", "(Ljava/util/Map<TK;TV;>;)V", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Lorg/assertj/core/api/AbstractMapAssert<Lorg/assertj/core/api/MapAssert<TK;TV;>;Ljava/util/Map<TK;TV;>;TK;TV;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiMapAssert = { "MapAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, 2, -1 };
  return &_OrgAssertjCoreApiMapAssert;
}

@end

void OrgAssertjCoreApiMapAssert_initWithJavaUtilMap_(OrgAssertjCoreApiMapAssert *self, id<JavaUtilMap> actual) {
  OrgAssertjCoreApiAbstractMapAssert_initWithJavaUtilMap_withIOSClass_(self, actual, OrgAssertjCoreApiMapAssert_class_());
}

OrgAssertjCoreApiMapAssert *new_OrgAssertjCoreApiMapAssert_initWithJavaUtilMap_(id<JavaUtilMap> actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiMapAssert, initWithJavaUtilMap_, actual)
}

OrgAssertjCoreApiMapAssert *create_OrgAssertjCoreApiMapAssert_initWithJavaUtilMap_(id<JavaUtilMap> actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiMapAssert, initWithJavaUtilMap_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiMapAssert)
