//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/condition/Join.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreConditionJoin.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"

@interface OrgAssertjCoreConditionJoin ()

+ (JavaLangNullPointerException *)conditionsIsNull;

+ (OrgAssertjCoreApiCondition *)notNullWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

@end

__attribute__((unused)) static JavaLangNullPointerException *OrgAssertjCoreConditionJoin_conditionsIsNull();

__attribute__((unused)) static OrgAssertjCoreApiCondition *OrgAssertjCoreConditionJoin_notNullWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition);

@implementation OrgAssertjCoreConditionJoin

- (instancetype)initWithOrgAssertjCoreApiConditionArray:(IOSObjectArray *)conditions {
  OrgAssertjCoreConditionJoin_initWithOrgAssertjCoreApiConditionArray_(self, conditions);
  return self;
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)conditions {
  OrgAssertjCoreConditionJoin_initWithJavaLangIterable_(self, conditions);
  return self;
}

+ (JavaLangNullPointerException *)conditionsIsNull {
  return OrgAssertjCoreConditionJoin_conditionsIsNull();
}

+ (OrgAssertjCoreApiCondition *)notNullWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreConditionJoin_notNullWithOrgAssertjCoreApiCondition_(condition);
}

- (id<JavaUtilCollection>)conditions {
  return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(conditions_);
}

- (void)dealloc {
  RELEASE_(conditions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x84, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaLangNullPointerException;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiCondition;", 0xa, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x14, -1, -1, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgAssertjCoreApiConditionArray:);
  methods[1].selector = @selector(initWithJavaLangIterable:);
  methods[2].selector = @selector(conditionsIsNull);
  methods[3].selector = @selector(notNullWithOrgAssertjCoreApiCondition:);
  methods[4].selector = @selector(conditions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "conditions_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x10, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "[LOrgAssertjCoreApiCondition;", "([Lorg/assertj/core/api/Condition<-TT;>;)V", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Lorg/assertj/core/api/Condition<-TT;>;>;)V", "notNull", "LOrgAssertjCoreApiCondition;", "<T:Ljava/lang/Object;>(Lorg/assertj/core/api/Condition<TT;>;)Lorg/assertj/core/api/Condition<TT;>;", "()Ljava/util/Collection<Lorg/assertj/core/api/Condition<-TT;>;>;", "Ljava/util/Collection<Lorg/assertj/core/api/Condition<-TT;>;>;", "<T:Ljava/lang/Object;>Lorg/assertj/core/api/Condition<TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreConditionJoin = { "Join", "org.assertj.core.condition", ptrTable, methods, fields, 7, 0x401, 5, 1, -1, -1, -1, 9, -1 };
  return &_OrgAssertjCoreConditionJoin;
}

@end

void OrgAssertjCoreConditionJoin_initWithOrgAssertjCoreApiConditionArray_(OrgAssertjCoreConditionJoin *self, IOSObjectArray *conditions) {
  OrgAssertjCoreApiCondition_init(self);
  if (conditions == nil) @throw OrgAssertjCoreConditionJoin_conditionsIsNull();
  JreStrongAssignAndConsume(&self->conditions_, new_JavaUtilArrayList_init());
  {
    IOSObjectArray *a__ = conditions;
    OrgAssertjCoreApiCondition * const *b__ = a__->buffer_;
    OrgAssertjCoreApiCondition * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgAssertjCoreApiCondition *condition = *b__++;
      [self->conditions_ addWithId:OrgAssertjCoreConditionJoin_notNullWithOrgAssertjCoreApiCondition_(condition)];
    }
  }
}

void OrgAssertjCoreConditionJoin_initWithJavaLangIterable_(OrgAssertjCoreConditionJoin *self, id<JavaLangIterable> conditions) {
  OrgAssertjCoreApiCondition_init(self);
  if (conditions == nil) @throw OrgAssertjCoreConditionJoin_conditionsIsNull();
  JreStrongAssignAndConsume(&self->conditions_, new_JavaUtilArrayList_init());
  for (OrgAssertjCoreApiCondition * __strong condition in conditions) [self->conditions_ addWithId:OrgAssertjCoreConditionJoin_notNullWithOrgAssertjCoreApiCondition_(condition)];
}

JavaLangNullPointerException *OrgAssertjCoreConditionJoin_conditionsIsNull() {
  OrgAssertjCoreConditionJoin_initialize();
  return create_JavaLangNullPointerException_initWithNSString_(@"The given conditions should not be null");
}

OrgAssertjCoreApiCondition *OrgAssertjCoreConditionJoin_notNullWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) {
  OrgAssertjCoreConditionJoin_initialize();
  if (condition == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The given conditions should not have null entries");
  return condition;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreConditionJoin)
