//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/api/IterableAssert.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractIterableAssert.h"
#include "OrgAssertjCoreApiIterableAssert.h"
#include "java/lang/Iterable.h"
#include "java/util/AbstractCollection.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgAssertjCoreApiIterableAssert ()

+ (id<JavaLangIterable>)toLazyIterableWithJavaUtilIterator:(id<JavaUtilIterator>)actual;

+ (id<JavaLangIterable>)toIterableWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

@end

__attribute__((unused)) static id<JavaLangIterable> OrgAssertjCoreApiIterableAssert_toLazyIterableWithJavaUtilIterator_(id<JavaUtilIterator> actual);

__attribute__((unused)) static id<JavaLangIterable> OrgAssertjCoreApiIterableAssert_toIterableWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

@interface OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper : JavaUtilAbstractCollection {
 @public
  id<JavaUtilIterator> iterator_;
  id<JavaLangIterable> iterable_;
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

- (id<JavaUtilIterator>)iterator;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper)

J2OBJC_FIELD_SETTER(OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper, iterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper, iterable_, id<JavaLangIterable>)

__attribute__((unused)) static void OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper_initWithJavaUtilIterator_(OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper *self, id<JavaUtilIterator> iterator);

__attribute__((unused)) static OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper *new_OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper_initWithJavaUtilIterator_(id<JavaUtilIterator> iterator) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper *create_OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper_initWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper)

@implementation OrgAssertjCoreApiIterableAssert

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)actual {
  OrgAssertjCoreApiIterableAssert_initWithJavaLangIterable_(self, actual);
  return self;
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)actual {
  OrgAssertjCoreApiIterableAssert_initWithJavaUtilIterator_(self, actual);
  return self;
}

+ (id<JavaLangIterable>)toLazyIterableWithJavaUtilIterator:(id<JavaUtilIterator>)actual {
  return OrgAssertjCoreApiIterableAssert_toLazyIterableWithJavaUtilIterator_(actual);
}

+ (id<JavaLangIterable>)toIterableWithJavaUtilIterator:(id<JavaUtilIterator>)iterator {
  return OrgAssertjCoreApiIterableAssert_toIterableWithJavaUtilIterator_(iterator);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaLangIterable;", 0xa, 4, 2, -1, 5, -1, -1 },
    { NULL, "LJavaLangIterable;", 0xa, 6, 2, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:);
  methods[1].selector = @selector(initWithJavaUtilIterator:);
  methods[2].selector = @selector(toLazyIterableWithJavaUtilIterator:);
  methods[3].selector = @selector(toIterableWithJavaUtilIterator:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangIterable;", "(Ljava/lang/Iterable<TT;>;)V", "LJavaUtilIterator;", "(Ljava/util/Iterator<TT;>;)V", "toLazyIterable", "<T:Ljava/lang/Object;>(Ljava/util/Iterator<TT;>;)Ljava/lang/Iterable<TT;>;", "toIterable", "LOrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper;", "<T:Ljava/lang/Object;>Lorg/assertj/core/api/AbstractIterableAssert<Lorg/assertj/core/api/IterableAssert<TT;>;Ljava/lang/Iterable<TT;>;TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiIterableAssert = { "IterableAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, 7, -1, 8, -1 };
  return &_OrgAssertjCoreApiIterableAssert;
}

@end

void OrgAssertjCoreApiIterableAssert_initWithJavaLangIterable_(OrgAssertjCoreApiIterableAssert *self, id<JavaLangIterable> actual) {
  OrgAssertjCoreApiAbstractIterableAssert_initWithJavaLangIterable_withIOSClass_(self, actual, OrgAssertjCoreApiIterableAssert_class_());
}

OrgAssertjCoreApiIterableAssert *new_OrgAssertjCoreApiIterableAssert_initWithJavaLangIterable_(id<JavaLangIterable> actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiIterableAssert, initWithJavaLangIterable_, actual)
}

OrgAssertjCoreApiIterableAssert *create_OrgAssertjCoreApiIterableAssert_initWithJavaLangIterable_(id<JavaLangIterable> actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiIterableAssert, initWithJavaLangIterable_, actual)
}

void OrgAssertjCoreApiIterableAssert_initWithJavaUtilIterator_(OrgAssertjCoreApiIterableAssert *self, id<JavaUtilIterator> actual) {
  OrgAssertjCoreApiIterableAssert_initWithJavaLangIterable_(self, OrgAssertjCoreApiIterableAssert_toLazyIterableWithJavaUtilIterator_(actual));
}

OrgAssertjCoreApiIterableAssert *new_OrgAssertjCoreApiIterableAssert_initWithJavaUtilIterator_(id<JavaUtilIterator> actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiIterableAssert, initWithJavaUtilIterator_, actual)
}

OrgAssertjCoreApiIterableAssert *create_OrgAssertjCoreApiIterableAssert_initWithJavaUtilIterator_(id<JavaUtilIterator> actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiIterableAssert, initWithJavaUtilIterator_, actual)
}

id<JavaLangIterable> OrgAssertjCoreApiIterableAssert_toLazyIterableWithJavaUtilIterator_(id<JavaUtilIterator> actual) {
  OrgAssertjCoreApiIterableAssert_initialize();
  if (actual == nil) {
    return nil;
  }
  return create_OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper_initWithJavaUtilIterator_(actual);
}

id<JavaLangIterable> OrgAssertjCoreApiIterableAssert_toIterableWithJavaUtilIterator_(id<JavaUtilIterator> iterator) {
  OrgAssertjCoreApiIterableAssert_initialize();
  JavaUtilArrayList *list = create_JavaUtilArrayList_init();
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    [list addWithId:[iterator next]];
  }
  return list;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiIterableAssert)

@implementation OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator {
  OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper_initWithJavaUtilIterator_(self, iterator);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  if (iterable_ == nil) {
    JreStrongAssign(&iterable_, OrgAssertjCoreApiIterableAssert_toIterableWithJavaUtilIterator_(iterator_));
  }
  return [((id<JavaLangIterable>) nil_chk(iterable_)) iterator];
}

- (jint)size {
  jint size = 0;
  id<JavaUtilIterator> localIterator = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(localIterator)) hasNext]) {
    [localIterator next];
    size++;
  }
  return size;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(iterator_);
  RELEASE_(iterable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilIterator:);
  methods[1].selector = @selector(iterator);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
    { "iterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilIterator;", "(Ljava/util/Iterator<TT;>;)V", "()Ljava/util/Iterator<TT;>;", "Ljava/util/Iterator<TT;>;", "Ljava/lang/Iterable<TT;>;", "LOrgAssertjCoreApiIterableAssert;", "<T:Ljava/lang/Object;>Ljava/util/AbstractCollection<TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper = { "LazyIteratorToIterableWrapper", "org.assertj.core.api", ptrTable, methods, fields, 7, 0xa, 3, 2, 5, -1, -1, 6, -1 };
  return &_OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper;
}

@end

void OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper_initWithJavaUtilIterator_(OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper *self, id<JavaUtilIterator> iterator) {
  JavaUtilAbstractCollection_init(self);
  JreStrongAssign(&self->iterator_, iterator);
}

OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper *new_OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper_initWithJavaUtilIterator_(id<JavaUtilIterator> iterator) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper, initWithJavaUtilIterator_, iterator)
}

OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper *create_OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper_initWithJavaUtilIterator_(id<JavaUtilIterator> iterator) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper, initWithJavaUtilIterator_, iterator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiIterableAssert_LazyIteratorToIterableWrapper)
