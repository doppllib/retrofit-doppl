//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/InternalObjects.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreErrorAssertionErrorFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeEqual.h"
#include "OrgAssertjCoreErrorShouldBeEqualByComparingOnlyGivenFields.h"
#include "OrgAssertjCoreErrorShouldBeEqualToIgnoringFields.h"
#include "OrgAssertjCoreErrorShouldBeExactlyInstanceOf.h"
#include "OrgAssertjCoreErrorShouldBeIn.h"
#include "OrgAssertjCoreErrorShouldBeInstance.h"
#include "OrgAssertjCoreErrorShouldBeInstanceOfAny.h"
#include "OrgAssertjCoreErrorShouldBeOfClassIn.h"
#include "OrgAssertjCoreErrorShouldBeSame.h"
#include "OrgAssertjCoreErrorShouldHaveSameClass.h"
#include "OrgAssertjCoreErrorShouldNotBeEqual.h"
#include "OrgAssertjCoreErrorShouldNotBeExactlyInstanceOf.h"
#include "OrgAssertjCoreErrorShouldNotBeIn.h"
#include "OrgAssertjCoreErrorShouldNotBeInstance.h"
#include "OrgAssertjCoreErrorShouldNotBeInstanceOfAny.h"
#include "OrgAssertjCoreErrorShouldNotBeNull.h"
#include "OrgAssertjCoreErrorShouldNotBeOfClassIn.h"
#include "OrgAssertjCoreErrorShouldNotBeSame.h"
#include "OrgAssertjCoreErrorShouldNotHaveSameClass.h"
#include "OrgAssertjCoreInternalCommonValidations.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalPropertySupport.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "OrgAssertjCorePresentationRepresentation.h"
#include "OrgAssertjCoreUtilIntrospectionFieldSupport.h"
#include "OrgAssertjCoreUtilIntrospectionIntrospectionError.h"
#include "OrgAssertjCoreUtilLists.h"
#include "OrgAssertjCoreUtilObjects.h"
#include "OrgAssertjCoreUtilSets.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/reflect/Field.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface OrgAssertjCoreInternalInternalObjects () {
 @public
  id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy_;
  OrgAssertjCoreUtilIntrospectionFieldSupport *fieldSupport_;
}

- (jboolean)objectIsInstanceOfOneOfGivenClassesWithId:(id)actual
                                    withIOSClassArray:(IOSObjectArray *)types
                   withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info;

- (jboolean)isInstanceOfClassWithId:(id)actual
                       withIOSClass:(IOSClass *)clazz
 withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info;

- (jboolean)haveSameClassWithId:(id)actual
                         withId:(id)other
withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info;

- (jboolean)actualIsExactlyInstanceOfTypeWithId:(id)actual
                                   withIOSClass:(IOSClass *)expectedType
             withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info;

- (jboolean)isOfOneOfGivenTypesWithId:(id)actual
                    withIOSClassArray:(IOSObjectArray *)types
   withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info;

- (void)checkIsNotNullAndIsNotEmptyWithIOSClassArray:(IOSObjectArray *)types;

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other;

- (void)checkIsNotNullAndNotEmptyWithNSObjectArray:(IOSObjectArray *)values;

- (jboolean)isItemInArrayWithId:(id)item
              withNSObjectArray:(IOSObjectArray *)arrayOfValues;

- (void)checkIsNotNullAndNotEmptyWithJavaLangIterable:(id<JavaLangIterable>)values;

- (jboolean)isActualInWithId:(id)actual
        withJavaLangIterable:(id<JavaLangIterable>)values;

- (OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *)isEqualToComparingOnlyGivenFieldsWithId:(id)actual
                                                                                               withId:(id)other
                                                                                    withNSStringArray:(IOSObjectArray *)fields;

- (OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *)isEqualToIgnoringGivenFieldsWithId:(id)actual
                                                                                          withId:(id)other
                                                                               withNSStringArray:(IOSObjectArray *)fields;

- (id)getFieldOrPropertyValueWithId:(id)a
           withJavaLangReflectField:(JavaLangReflectField *)field;

- (id)getNestedFieldOrPropertyValueWithId:(id)a
                             withNSString:(NSString *)fieldName;

+ (id<JavaUtilSet>)getDeclaredFieldsIncludingInheritedWithIOSClass:(IOSClass *)clazz;

- (void)assertOtherTypeIsCompatibleWithActualClassWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                              withId:(id)other
                                                                        withIOSClass:(IOSClass *)clazz;

- (void)isInstanceOfWithId:(id)object
              withIOSClass:(IOSClass *)clazz
withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info;

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalObjects, comparisonStrategy_, id<OrgAssertjCoreInternalComparisonStrategy>)
J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalObjects, fieldSupport_, OrgAssertjCoreUtilIntrospectionFieldSupport *)

inline OrgAssertjCoreInternalInternalObjects *OrgAssertjCoreInternalInternalObjects_get_INSTANCE();
static OrgAssertjCoreInternalInternalObjects *OrgAssertjCoreInternalInternalObjects_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalInternalObjects, INSTANCE, OrgAssertjCoreInternalInternalObjects *)

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalObjects_objectIsInstanceOfOneOfGivenClassesWithId_withIOSClassArray_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id actual, IOSObjectArray *types, id<OrgAssertjCoreApiAssertionInfo> info);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalObjects_isInstanceOfClassWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id actual, IOSClass *clazz, id<OrgAssertjCoreApiAssertionInfo> info);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalObjects_haveSameClassWithId_withId_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id actual, id other, id<OrgAssertjCoreApiAssertionInfo> info);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalObjects_actualIsExactlyInstanceOfTypeWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id actual, IOSClass *expectedType, id<OrgAssertjCoreApiAssertionInfo> info);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalObjects_isOfOneOfGivenTypesWithId_withIOSClassArray_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id actual, IOSObjectArray *types, id<OrgAssertjCoreApiAssertionInfo> info);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndIsNotEmptyWithIOSClassArray_(OrgAssertjCoreInternalInternalObjects *self, IOSObjectArray *types);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalObjects_areEqualWithId_withId_(OrgAssertjCoreInternalInternalObjects *self, id actual, id other);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndNotEmptyWithNSObjectArray_(OrgAssertjCoreInternalInternalObjects *self, IOSObjectArray *values);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalObjects_isItemInArrayWithId_withNSObjectArray_(OrgAssertjCoreInternalInternalObjects *self, id item, IOSObjectArray *arrayOfValues);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndNotEmptyWithJavaLangIterable_(OrgAssertjCoreInternalInternalObjects *self, id<JavaLangIterable> values);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalObjects_isActualInWithId_withJavaLangIterable_(OrgAssertjCoreInternalInternalObjects *self, id actual, id<JavaLangIterable> values);

__attribute__((unused)) static OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *OrgAssertjCoreInternalInternalObjects_isEqualToComparingOnlyGivenFieldsWithId_withId_withNSStringArray_(OrgAssertjCoreInternalInternalObjects *self, id actual, id other, IOSObjectArray *fields);

__attribute__((unused)) static OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *OrgAssertjCoreInternalInternalObjects_isEqualToIgnoringGivenFieldsWithId_withId_withNSStringArray_(OrgAssertjCoreInternalInternalObjects *self, id actual, id other, IOSObjectArray *fields);

__attribute__((unused)) static id OrgAssertjCoreInternalInternalObjects_getFieldOrPropertyValueWithId_withJavaLangReflectField_(OrgAssertjCoreInternalInternalObjects *self, id a, JavaLangReflectField *field);

__attribute__((unused)) static id OrgAssertjCoreInternalInternalObjects_getNestedFieldOrPropertyValueWithId_withNSString_(OrgAssertjCoreInternalInternalObjects *self, id a, NSString *fieldName);

__attribute__((unused)) static id<JavaUtilSet> OrgAssertjCoreInternalInternalObjects_getDeclaredFieldsIncludingInheritedWithIOSClass_(IOSClass *clazz);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalObjects_assertOtherTypeIsCompatibleWithActualClassWithOrgAssertjCoreApiAssertionInfo_withId_withIOSClass_(OrgAssertjCoreInternalInternalObjects *self, id<OrgAssertjCoreApiAssertionInfo> info, id other, IOSClass *clazz);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalObjects_isInstanceOfWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id object, IOSClass *clazz, id<OrgAssertjCoreApiAssertionInfo> info);

@interface OrgAssertjCoreInternalInternalObjects_ByFieldsComparison () {
 @public
  id<JavaUtilList> fieldsNames_;
  id<JavaUtilList> expectedValues_;
  id<JavaUtilList> rejectedValues_;
}

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalObjects_ByFieldsComparison, fieldsNames_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalObjects_ByFieldsComparison, expectedValues_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalObjects_ByFieldsComparison, rejectedValues_, id<JavaUtilList>)

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalInternalObjects)

@implementation OrgAssertjCoreInternalInternalObjects

+ (OrgAssertjCoreInternalInternalObjects *)instance {
  return OrgAssertjCoreInternalInternalObjects_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInternalObjects_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreInternalInternalObjects_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
  return self;
}

- (id<JavaUtilComparator>)getComparator {
  return [comparisonStrategy_ isKindOfClass:[OrgAssertjCoreInternalComparatorBasedComparisonStrategy class]] ? [((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) nil_chk(((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) cast_chk(comparisonStrategy_, [OrgAssertjCoreInternalComparatorBasedComparisonStrategy class])))) getComparator] : nil;
}

- (id<OrgAssertjCoreInternalComparisonStrategy>)getComparisonStrategy {
  return comparisonStrategy_;
}

- (void)assertIsInstanceOfWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                      withId:(id)actual
                                                withIOSClass:(IOSClass *)type {
  if (!OrgAssertjCoreInternalInternalObjects_isInstanceOfClassWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(self, actual, type, info)) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInstance_shouldBeInstanceWithId_withIOSClass_(actual, type)];
}

- (void)assertIsInstanceOfAnyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                         withId:(id)actual
                                              withIOSClassArray:(IOSObjectArray *)types {
  if (OrgAssertjCoreInternalInternalObjects_objectIsInstanceOfOneOfGivenClassesWithId_withIOSClassArray_withOrgAssertjCoreApiAssertionInfo_(self, actual, types, info)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInstanceOfAny_shouldBeInstanceOfAnyWithId_withIOSClassArray_(actual, types)];
}

- (jboolean)objectIsInstanceOfOneOfGivenClassesWithId:(id)actual
                                    withIOSClassArray:(IOSObjectArray *)types
                   withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info {
  return OrgAssertjCoreInternalInternalObjects_objectIsInstanceOfOneOfGivenClassesWithId_withIOSClassArray_withOrgAssertjCoreApiAssertionInfo_(self, actual, types, info);
}

- (void)assertIsNotInstanceOfWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                         withId:(id)actual
                                                   withIOSClass:(IOSClass *)type {
  if (OrgAssertjCoreInternalInternalObjects_isInstanceOfClassWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(self, actual, type, info)) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeInstance_shouldNotBeInstanceWithId_withIOSClass_(actual, type)];
}

- (jboolean)isInstanceOfClassWithId:(id)actual
                       withIOSClass:(IOSClass *)clazz
 withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info {
  return OrgAssertjCoreInternalInternalObjects_isInstanceOfClassWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(self, actual, clazz, info);
}

- (void)assertIsNotInstanceOfAnyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                            withId:(id)actual
                                                 withIOSClassArray:(IOSObjectArray *)types {
  if (!OrgAssertjCoreInternalInternalObjects_objectIsInstanceOfOneOfGivenClassesWithId_withIOSClassArray_withOrgAssertjCoreApiAssertionInfo_(self, actual, types, info)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeInstanceOfAny_shouldNotBeInstanceOfAnyWithId_withIOSClassArray_(actual, types)];
}

- (void)assertHasSameClassAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                        withId:(id)actual
                                                        withId:(id)other {
  if (!OrgAssertjCoreInternalInternalObjects_haveSameClassWithId_withId_withOrgAssertjCoreApiAssertionInfo_(self, actual, other, info)) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveSameClass_shouldHaveSameClassWithId_withId_(actual, other)];
}

- (jboolean)haveSameClassWithId:(id)actual
                         withId:(id)other
withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info {
  return OrgAssertjCoreInternalInternalObjects_haveSameClassWithId_withId_withOrgAssertjCoreApiAssertionInfo_(self, actual, other, info);
}

- (void)assertDoesNotHaveSameClassAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                withId:(id)actual
                                                                withId:(id)other {
  if (OrgAssertjCoreInternalInternalObjects_haveSameClassWithId_withId_withOrgAssertjCoreApiAssertionInfo_(self, actual, other, info)) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotHaveSameClass_shouldNotHaveSameClassWithId_withId_(actual, other)];
}

- (void)assertIsExactlyInstanceOfWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                             withId:(id)actual
                                                       withIOSClass:(IOSClass *)type {
  if (!OrgAssertjCoreInternalInternalObjects_actualIsExactlyInstanceOfTypeWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(self, actual, type, info)) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeExactlyInstanceOf_shouldBeExactlyInstanceWithId_withIOSClass_(actual, type)];
}

- (jboolean)actualIsExactlyInstanceOfTypeWithId:(id)actual
                                   withIOSClass:(IOSClass *)expectedType
             withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info {
  return OrgAssertjCoreInternalInternalObjects_actualIsExactlyInstanceOfTypeWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(self, actual, expectedType, info);
}

- (void)assertIsNotExactlyInstanceOfWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                withId:(id)actual
                                                          withIOSClass:(IOSClass *)type {
  if (OrgAssertjCoreInternalInternalObjects_actualIsExactlyInstanceOfTypeWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(self, actual, type, info)) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeExactlyInstanceOf_shouldNotBeExactlyInstanceWithId_withIOSClass_(actual, type)];
}

- (void)assertIsOfAnyClassInWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                        withId:(id)actual
                                             withIOSClassArray:(IOSObjectArray *)types {
  jboolean itemInArray = OrgAssertjCoreInternalInternalObjects_isOfOneOfGivenTypesWithId_withIOSClassArray_withOrgAssertjCoreApiAssertionInfo_(self, actual, types, info);
  if (!itemInArray) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeOfClassIn_shouldBeOfClassInWithId_withId_(actual, types)];
}

- (jboolean)isOfOneOfGivenTypesWithId:(id)actual
                    withIOSClassArray:(IOSObjectArray *)types
   withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info {
  return OrgAssertjCoreInternalInternalObjects_isOfOneOfGivenTypesWithId_withIOSClassArray_withOrgAssertjCoreApiAssertionInfo_(self, actual, types, info);
}

- (void)assertIsNotOfAnyClassInWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                           withId:(id)actual
                                                withIOSClassArray:(IOSObjectArray *)types {
  jboolean itemInArray = OrgAssertjCoreInternalInternalObjects_isOfOneOfGivenTypesWithId_withIOSClassArray_withOrgAssertjCoreApiAssertionInfo_(self, actual, types, info);
  if (itemInArray) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeOfClassIn_shouldNotBeOfClassInWithId_withId_(actual, types)];
}

- (void)checkIsNotNullAndIsNotEmptyWithIOSClassArray:(IOSObjectArray *)types {
  OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndIsNotEmptyWithIOSClassArray_(self, types);
}

- (void)assertEqualWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                               withId:(id)actual
                                               withId:(id)expected {
  if (OrgAssertjCoreInternalInternalObjects_areEqualWithId_withId_(self, actual, expected)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorAssertionErrorFactory:OrgAssertjCoreErrorShouldBeEqual_shouldBeEqualWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_withOrgAssertjCorePresentationRepresentation_(actual, expected, comparisonStrategy_, [((id<OrgAssertjCoreApiAssertionInfo>) nil_chk(info)) representation])];
}

- (void)assertNotEqualWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withId:(id)actual
                                                  withId:(id)other {
  if (!OrgAssertjCoreInternalInternalObjects_areEqualWithId_withId_(self, actual, other)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeEqual_shouldNotBeEqualWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, comparisonStrategy_)];
}

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other {
  return OrgAssertjCoreInternalInternalObjects_areEqualWithId_withId_(self, actual, other);
}

- (void)assertNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withId:(id)actual {
  if (actual == nil) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorAssertionErrorFactory:OrgAssertjCoreErrorShouldBeEqual_shouldBeEqualWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_withOrgAssertjCorePresentationRepresentation_(actual, nil, comparisonStrategy_, [((id<OrgAssertjCoreApiAssertionInfo>) nil_chk(info)) representation])];
}

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withId:(id)actual {
  if (actual != nil) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeNull_shouldNotBeNull()];
}

- (void)assertSameWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withId:(id)actual
                                              withId:(id)expected {
  if (actual == expected) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSame_shouldBeSameWithId_withId_(actual, expected)];
}

- (void)assertNotSameWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withId:(id)actual
                                                 withId:(id)other {
  if (actual != other) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeSame_shouldNotBeSameWithId_(actual)];
}

- (void)assertIsInWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withId:(id)actual
                                   withNSObjectArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndNotEmptyWithNSObjectArray_(self, values);
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  if (OrgAssertjCoreInternalInternalObjects_isItemInArrayWithId_withNSObjectArray_(self, actual, values)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeIn_shouldBeInWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, comparisonStrategy_)];
}

- (void)assertIsNotInWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withId:(id)actual
                                      withNSObjectArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndNotEmptyWithNSObjectArray_(self, values);
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  if (!OrgAssertjCoreInternalInternalObjects_isItemInArrayWithId_withNSObjectArray_(self, actual, values)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeIn_shouldNotBeInWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, comparisonStrategy_)];
}

- (void)checkIsNotNullAndNotEmptyWithNSObjectArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndNotEmptyWithNSObjectArray_(self, values);
}

- (jboolean)isItemInArrayWithId:(id)item
              withNSObjectArray:(IOSObjectArray *)arrayOfValues {
  return OrgAssertjCoreInternalInternalObjects_isItemInArrayWithId_withNSObjectArray_(self, item, arrayOfValues);
}

- (void)assertIsInWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withId:(id)actual
                                withJavaLangIterable:(id<JavaLangIterable>)values {
  OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndNotEmptyWithJavaLangIterable_(self, values);
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  if (OrgAssertjCoreInternalInternalObjects_isActualInWithId_withJavaLangIterable_(self, actual, values)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeIn_shouldBeInWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, comparisonStrategy_)];
}

- (void)assertIsNotInWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withId:(id)actual
                                   withJavaLangIterable:(id<JavaLangIterable>)values {
  OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndNotEmptyWithJavaLangIterable_(self, values);
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  if (!OrgAssertjCoreInternalInternalObjects_isActualInWithId_withJavaLangIterable_(self, actual, values)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeIn_shouldNotBeInWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, comparisonStrategy_)];
}

- (void)checkIsNotNullAndNotEmptyWithJavaLangIterable:(id<JavaLangIterable>)values {
  OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndNotEmptyWithJavaLangIterable_(self, values);
}

- (jboolean)isActualInWithId:(id)actual
        withJavaLangIterable:(id<JavaLangIterable>)values {
  return OrgAssertjCoreInternalInternalObjects_isActualInWithId_withJavaLangIterable_(self, actual, values);
}

- (void)assertIsLenientEqualsToIgnoringNullFieldsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                             withId:(id)actual
                                                                             withId:(id)other {
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  OrgAssertjCoreInternalInternalObjects_assertOtherTypeIsCompatibleWithActualClassWithOrgAssertjCoreApiAssertionInfo_withId_withIOSClass_(self, info, other, [nil_chk(actual) java_getClass]);
  id<JavaUtilList> fieldsNames = create_JavaUtilLinkedList_init();
  id<JavaUtilList> rejectedValues = create_JavaUtilLinkedList_init();
  id<JavaUtilList> expectedValues = create_JavaUtilLinkedList_init();
  id<JavaUtilList> nullFields = create_JavaUtilLinkedList_init();
  for (JavaLangReflectField * __strong field in nil_chk(OrgAssertjCoreInternalInternalObjects_getDeclaredFieldsIncludingInheritedWithIOSClass_([actual java_getClass]))) {
    @try {
      id otherFieldValue = OrgAssertjCoreInternalInternalObjects_getFieldOrPropertyValueWithId_withJavaLangReflectField_(self, other, field);
      if (otherFieldValue == nil) {
        [nullFields addWithId:[((JavaLangReflectField *) nil_chk(field)) getName]];
      }
      else {
        id actualFieldValue = OrgAssertjCoreInternalInternalObjects_getFieldOrPropertyValueWithId_withJavaLangReflectField_(self, actual, field);
        if (![otherFieldValue isEqual:actualFieldValue]) {
          [fieldsNames addWithId:[((JavaLangReflectField *) nil_chk(field)) getName]];
          [rejectedValues addWithId:actualFieldValue];
          [expectedValues addWithId:otherFieldValue];
        }
      }
    }
    @catch (OrgAssertjCoreUtilIntrospectionIntrospectionError *e) {
    }
  }
  if (![fieldsNames isEmpty]) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeEqualToIgnoringFields_shouldBeEqualToIgnoringGivenFieldsWithId_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_(actual, fieldsNames, rejectedValues, expectedValues, nullFields)];
}

- (void)assertIsEqualToComparingOnlyGivenFieldsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                           withId:(id)actual
                                                                           withId:(id)other
                                                                withNSStringArray:(IOSObjectArray *)fields {
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  OrgAssertjCoreInternalInternalObjects_assertOtherTypeIsCompatibleWithActualClassWithOrgAssertjCoreApiAssertionInfo_withId_withIOSClass_(self, info, other, [nil_chk(actual) java_getClass]);
  OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *byFieldsComparison = OrgAssertjCoreInternalInternalObjects_isEqualToComparingOnlyGivenFieldsWithId_withId_withNSStringArray_(self, actual, other, fields);
  if ([((OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *) nil_chk(byFieldsComparison)) isFieldsNamesNotEmpty]) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeEqualByComparingOnlyGivenFields_shouldBeEqualComparingOnlyGivenFieldsWithId_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_(actual, byFieldsComparison->fieldsNames_, byFieldsComparison->rejectedValues_, byFieldsComparison->expectedValues_, OrgAssertjCoreUtilLists_newArrayListWithNSObjectArray_(fields))];
}

- (OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *)isEqualToComparingOnlyGivenFieldsWithId:(id)actual
                                                                                               withId:(id)other
                                                                                    withNSStringArray:(IOSObjectArray *)fields {
  return OrgAssertjCoreInternalInternalObjects_isEqualToComparingOnlyGivenFieldsWithId_withId_withNSStringArray_(self, actual, other, fields);
}

- (void)assertIsEqualToIgnoringGivenFieldsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                      withId:(id)actual
                                                                      withId:(id)other
                                                           withNSStringArray:(IOSObjectArray *)fields {
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  OrgAssertjCoreInternalInternalObjects_assertOtherTypeIsCompatibleWithActualClassWithOrgAssertjCoreApiAssertionInfo_withId_withIOSClass_(self, info, other, [nil_chk(actual) java_getClass]);
  OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *byFieldsComparison = OrgAssertjCoreInternalInternalObjects_isEqualToIgnoringGivenFieldsWithId_withId_withNSStringArray_(self, actual, other, fields);
  if ([((OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *) nil_chk(byFieldsComparison)) isFieldsNamesNotEmpty]) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeEqualToIgnoringFields_shouldBeEqualToIgnoringGivenFieldsWithId_withJavaUtilList_withJavaUtilList_withJavaUtilList_withJavaUtilList_(actual, byFieldsComparison->fieldsNames_, byFieldsComparison->rejectedValues_, byFieldsComparison->expectedValues_, OrgAssertjCoreUtilLists_newArrayListWithNSObjectArray_(fields))];
}

- (OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *)isEqualToIgnoringGivenFieldsWithId:(id)actual
                                                                                          withId:(id)other
                                                                               withNSStringArray:(IOSObjectArray *)fields {
  return OrgAssertjCoreInternalInternalObjects_isEqualToIgnoringGivenFieldsWithId_withId_withNSStringArray_(self, actual, other, fields);
}

- (id)getFieldOrPropertyValueWithId:(id)a
           withJavaLangReflectField:(JavaLangReflectField *)field {
  return OrgAssertjCoreInternalInternalObjects_getFieldOrPropertyValueWithId_withJavaLangReflectField_(self, a, field);
}

- (id)getNestedFieldOrPropertyValueWithId:(id)a
                             withNSString:(NSString *)fieldName {
  return OrgAssertjCoreInternalInternalObjects_getNestedFieldOrPropertyValueWithId_withNSString_(self, a, fieldName);
}

+ (id<JavaUtilSet>)getDeclaredFieldsIncludingInheritedWithIOSClass:(IOSClass *)clazz {
  return OrgAssertjCoreInternalInternalObjects_getDeclaredFieldsIncludingInheritedWithIOSClass_(clazz);
}

- (void)assertOtherTypeIsCompatibleWithActualClassWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                              withId:(id)other
                                                                        withIOSClass:(IOSClass *)clazz {
  OrgAssertjCoreInternalInternalObjects_assertOtherTypeIsCompatibleWithActualClassWithOrgAssertjCoreApiAssertionInfo_withId_withIOSClass_(self, info, other, clazz);
}

- (void)isInstanceOfWithId:(id)object
              withIOSClass:(IOSClass *)clazz
withOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info {
  OrgAssertjCoreInternalInternalObjects_isInstanceOfWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(self, object, clazz, info);
}

- (jboolean)areEqualToIgnoringGivenFieldsWithId:(id)actual
                                         withId:(id)other
                              withNSStringArray:(IOSObjectArray *)fields {
  return [((OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *) nil_chk(OrgAssertjCoreInternalInternalObjects_isEqualToIgnoringGivenFieldsWithId_withId_withNSStringArray_(self, actual, other, fields))) isFieldsNamesEmpty];
}

- (jboolean)areEqualToComparingOnlyGivenFieldsWithId:(id)actual
                                              withId:(id)other
                                   withNSStringArray:(IOSObjectArray *)fields {
  return [((OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *) nil_chk(OrgAssertjCoreInternalInternalObjects_isEqualToComparingOnlyGivenFieldsWithId_withId_withNSStringArray_(self, actual, other, fields))) isFieldsNamesEmpty];
}

- (void)dealloc {
  RELEASE_(propertySupport_);
  RELEASE_(comparisonStrategy_);
  RELEASE_(failures_);
  RELEASE_(fieldSupport_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalInternalObjects;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreInternalComparisonStrategy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x2, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x2, 22, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 23, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 24, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x2, 25, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 26, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, 29, -1, -1 },
    { NULL, "V", 0x1, 30, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 46, -1, 47, -1, -1 },
    { NULL, "V", 0x1, 41, 46, -1, 47, -1, -1 },
    { NULL, "V", 0x2, 42, 48, -1, 49, -1, -1 },
    { NULL, "Z", 0x2, 50, 51, -1, 52, -1, -1 },
    { NULL, "V", 0x1, 53, 17, -1, 54, -1, -1 },
    { NULL, "V", 0x81, 55, 56, -1, 57, -1, -1 },
    { NULL, "LOrgAssertjCoreInternalInternalObjects_ByFieldsComparison;", 0x2, 58, 59, -1, 60, -1, -1 },
    { NULL, "V", 0x81, 61, 56, -1, 57, -1, -1 },
    { NULL, "LOrgAssertjCoreInternalInternalObjects_ByFieldsComparison;", 0x2, 62, 59, -1, 60, -1, -1 },
    { NULL, "LNSObject;", 0x2, 63, 64, -1, 65, -1, -1 },
    { NULL, "LNSObject;", 0x2, 66, 67, -1, 68, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xa, 69, 70, -1, 71, -1, -1 },
    { NULL, "V", 0x2, 72, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 73, 13, -1, 74, -1, -1 },
    { NULL, "Z", 0x81, 75, 59, -1, -1, -1, -1 },
    { NULL, "Z", 0x81, 76, 59, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(getComparator);
  methods[4].selector = @selector(getComparisonStrategy);
  methods[5].selector = @selector(assertIsInstanceOfWithOrgAssertjCoreApiAssertionInfo:withId:withIOSClass:);
  methods[6].selector = @selector(assertIsInstanceOfAnyWithOrgAssertjCoreApiAssertionInfo:withId:withIOSClassArray:);
  methods[7].selector = @selector(objectIsInstanceOfOneOfGivenClassesWithId:withIOSClassArray:withOrgAssertjCoreApiAssertionInfo:);
  methods[8].selector = @selector(assertIsNotInstanceOfWithOrgAssertjCoreApiAssertionInfo:withId:withIOSClass:);
  methods[9].selector = @selector(isInstanceOfClassWithId:withIOSClass:withOrgAssertjCoreApiAssertionInfo:);
  methods[10].selector = @selector(assertIsNotInstanceOfAnyWithOrgAssertjCoreApiAssertionInfo:withId:withIOSClassArray:);
  methods[11].selector = @selector(assertHasSameClassAsWithOrgAssertjCoreApiAssertionInfo:withId:withId:);
  methods[12].selector = @selector(haveSameClassWithId:withId:withOrgAssertjCoreApiAssertionInfo:);
  methods[13].selector = @selector(assertDoesNotHaveSameClassAsWithOrgAssertjCoreApiAssertionInfo:withId:withId:);
  methods[14].selector = @selector(assertIsExactlyInstanceOfWithOrgAssertjCoreApiAssertionInfo:withId:withIOSClass:);
  methods[15].selector = @selector(actualIsExactlyInstanceOfTypeWithId:withIOSClass:withOrgAssertjCoreApiAssertionInfo:);
  methods[16].selector = @selector(assertIsNotExactlyInstanceOfWithOrgAssertjCoreApiAssertionInfo:withId:withIOSClass:);
  methods[17].selector = @selector(assertIsOfAnyClassInWithOrgAssertjCoreApiAssertionInfo:withId:withIOSClassArray:);
  methods[18].selector = @selector(isOfOneOfGivenTypesWithId:withIOSClassArray:withOrgAssertjCoreApiAssertionInfo:);
  methods[19].selector = @selector(assertIsNotOfAnyClassInWithOrgAssertjCoreApiAssertionInfo:withId:withIOSClassArray:);
  methods[20].selector = @selector(checkIsNotNullAndIsNotEmptyWithIOSClassArray:);
  methods[21].selector = @selector(assertEqualWithOrgAssertjCoreApiAssertionInfo:withId:withId:);
  methods[22].selector = @selector(assertNotEqualWithOrgAssertjCoreApiAssertionInfo:withId:withId:);
  methods[23].selector = @selector(areEqualWithId:withId:);
  methods[24].selector = @selector(assertNullWithOrgAssertjCoreApiAssertionInfo:withId:);
  methods[25].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withId:);
  methods[26].selector = @selector(assertSameWithOrgAssertjCoreApiAssertionInfo:withId:withId:);
  methods[27].selector = @selector(assertNotSameWithOrgAssertjCoreApiAssertionInfo:withId:withId:);
  methods[28].selector = @selector(assertIsInWithOrgAssertjCoreApiAssertionInfo:withId:withNSObjectArray:);
  methods[29].selector = @selector(assertIsNotInWithOrgAssertjCoreApiAssertionInfo:withId:withNSObjectArray:);
  methods[30].selector = @selector(checkIsNotNullAndNotEmptyWithNSObjectArray:);
  methods[31].selector = @selector(isItemInArrayWithId:withNSObjectArray:);
  methods[32].selector = @selector(assertIsInWithOrgAssertjCoreApiAssertionInfo:withId:withJavaLangIterable:);
  methods[33].selector = @selector(assertIsNotInWithOrgAssertjCoreApiAssertionInfo:withId:withJavaLangIterable:);
  methods[34].selector = @selector(checkIsNotNullAndNotEmptyWithJavaLangIterable:);
  methods[35].selector = @selector(isActualInWithId:withJavaLangIterable:);
  methods[36].selector = @selector(assertIsLenientEqualsToIgnoringNullFieldsWithOrgAssertjCoreApiAssertionInfo:withId:withId:);
  methods[37].selector = @selector(assertIsEqualToComparingOnlyGivenFieldsWithOrgAssertjCoreApiAssertionInfo:withId:withId:withNSStringArray:);
  methods[38].selector = @selector(isEqualToComparingOnlyGivenFieldsWithId:withId:withNSStringArray:);
  methods[39].selector = @selector(assertIsEqualToIgnoringGivenFieldsWithOrgAssertjCoreApiAssertionInfo:withId:withId:withNSStringArray:);
  methods[40].selector = @selector(isEqualToIgnoringGivenFieldsWithId:withId:withNSStringArray:);
  methods[41].selector = @selector(getFieldOrPropertyValueWithId:withJavaLangReflectField:);
  methods[42].selector = @selector(getNestedFieldOrPropertyValueWithId:withNSString:);
  methods[43].selector = @selector(getDeclaredFieldsIncludingInheritedWithIOSClass:);
  methods[44].selector = @selector(assertOtherTypeIsCompatibleWithActualClassWithOrgAssertjCoreApiAssertionInfo:withId:withIOSClass:);
  methods[45].selector = @selector(isInstanceOfWithId:withIOSClass:withOrgAssertjCoreApiAssertionInfo:);
  methods[46].selector = @selector(areEqualToIgnoringGivenFieldsWithId:withId:withNSStringArray:);
  methods[47].selector = @selector(areEqualToComparingOnlyGivenFieldsWithId:withId:withNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalInternalObjects;", .constantValue.asLong = 0, 0x1a, -1, 77, -1, -1 },
    { "propertySupport_", "LOrgAssertjCoreInternalPropertySupport;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "comparisonStrategy_", "LOrgAssertjCoreInternalComparisonStrategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fieldSupport_", "LOrgAssertjCoreUtilIntrospectionFieldSupport;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgAssertjCoreInternalComparisonStrategy;", "()Ljava/util/Comparator<*>;", "assertIsInstanceOf", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LIOSClass;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Class<*>;)V", "assertIsInstanceOfAny", "LOrgAssertjCoreApiAssertionInfo;LNSObject;[LIOSClass;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;[Ljava/lang/Class<*>;)V", "objectIsInstanceOfOneOfGivenClasses", "LNSObject;[LIOSClass;LOrgAssertjCoreApiAssertionInfo;", "(Ljava/lang/Object;[Ljava/lang/Class<*>;Lorg/assertj/core/api/AssertionInfo;)Z", "assertIsNotInstanceOf", "isInstanceOfClass", "LNSObject;LIOSClass;LOrgAssertjCoreApiAssertionInfo;", "(Ljava/lang/Object;Ljava/lang/Class<*>;Lorg/assertj/core/api/AssertionInfo;)Z", "assertIsNotInstanceOfAny", "assertHasSameClassAs", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LNSObject;", "haveSameClass", "LNSObject;LNSObject;LOrgAssertjCoreApiAssertionInfo;", "assertDoesNotHaveSameClassAs", "assertIsExactlyInstanceOf", "actualIsExactlyInstanceOfType", "assertIsNotExactlyInstanceOf", "assertIsOfAnyClassIn", "isOfOneOfGivenTypes", "assertIsNotOfAnyClassIn", "checkIsNotNullAndIsNotEmpty", "[LIOSClass;", "([Ljava/lang/Class<*>;)V", "assertEqual", "assertNotEqual", "areEqual", "LNSObject;LNSObject;", "assertNull", "LOrgAssertjCoreApiAssertionInfo;LNSObject;", "assertNotNull", "assertSame", "assertNotSame", "assertIsIn", "LOrgAssertjCoreApiAssertionInfo;LNSObject;[LNSObject;", "assertIsNotIn", "checkIsNotNullAndNotEmpty", "[LNSObject;", "isItemInArray", "LNSObject;[LNSObject;", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Iterable<*>;)V", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)V", "isActualIn", "LNSObject;LJavaLangIterable;", "(Ljava/lang/Object;Ljava/lang/Iterable<*>;)Z", "assertIsLenientEqualsToIgnoringNullFields", "<A:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;TA;TA;)V", "assertIsEqualToComparingOnlyGivenFields", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LNSObject;[LNSString;", "<A:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;TA;TA;[Ljava/lang/String;)V", "isEqualToComparingOnlyGivenFields", "LNSObject;LNSObject;[LNSString;", "<A:Ljava/lang/Object;>(TA;TA;[Ljava/lang/String;)Lorg/assertj/core/internal/InternalObjects$ByFieldsComparison;", "assertIsEqualToIgnoringGivenFields", "isEqualToIgnoringGivenFields", "getFieldOrPropertyValue", "LNSObject;LJavaLangReflectField;", "<A:Ljava/lang/Object;>(TA;Ljava/lang/reflect/Field;)Ljava/lang/Object;", "getNestedFieldOrPropertyValue", "LNSObject;LNSString;", "<A:Ljava/lang/Object;>(TA;Ljava/lang/String;)Ljava/lang/Object;", "getDeclaredFieldsIncludingInherited", "LIOSClass;", "(Ljava/lang/Class<*>;)Ljava/util/Set<Ljava/lang/reflect/Field;>;", "assertOtherTypeIsCompatibleWithActualClass", "isInstanceOf", "(Ljava/lang/Object;Ljava/lang/Class<*>;Lorg/assertj/core/api/AssertionInfo;)V", "areEqualToIgnoringGivenFields", "areEqualToComparingOnlyGivenFields", &OrgAssertjCoreInternalInternalObjects_INSTANCE, "LOrgAssertjCoreInternalInternalObjects_ByFieldsComparison;" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInternalObjects = { "InternalObjects", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 48, 5, -1, 78, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInternalObjects;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalInternalObjects class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalInternalObjects_INSTANCE, new_OrgAssertjCoreInternalInternalObjects_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalInternalObjects)
  }
}

@end

OrgAssertjCoreInternalInternalObjects *OrgAssertjCoreInternalInternalObjects_instance() {
  OrgAssertjCoreInternalInternalObjects_initialize();
  return OrgAssertjCoreInternalInternalObjects_INSTANCE;
}

void OrgAssertjCoreInternalInternalObjects_init(OrgAssertjCoreInternalInternalObjects *self) {
  OrgAssertjCoreInternalInternalObjects_initWithOrgAssertjCoreInternalComparisonStrategy_(self, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

OrgAssertjCoreInternalInternalObjects *new_OrgAssertjCoreInternalInternalObjects_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalObjects, init)
}

OrgAssertjCoreInternalInternalObjects *create_OrgAssertjCoreInternalInternalObjects_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalObjects, init)
}

void OrgAssertjCoreInternalInternalObjects_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalInternalObjects *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  NSObject_init(self);
  JreStrongAssign(&self->propertySupport_, OrgAssertjCoreInternalPropertySupport_instance());
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
  JreStrongAssignAndConsume(&self->fieldSupport_, new_OrgAssertjCoreUtilIntrospectionFieldSupport_initWithBoolean_(false));
  JreStrongAssign(&self->comparisonStrategy_, comparisonStrategy);
}

OrgAssertjCoreInternalInternalObjects *new_OrgAssertjCoreInternalInternalObjects_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalObjects, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

OrgAssertjCoreInternalInternalObjects *create_OrgAssertjCoreInternalInternalObjects_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalObjects, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

jboolean OrgAssertjCoreInternalInternalObjects_objectIsInstanceOfOneOfGivenClassesWithId_withIOSClassArray_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id actual, IOSObjectArray *types, id<OrgAssertjCoreApiAssertionInfo> info) {
  OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndIsNotEmptyWithIOSClassArray_(self, types);
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  {
    IOSObjectArray *a__ = types;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *type = *b__++;
      if (type == nil) {
        NSString *format = @"The given array of types:<%s> should not have null elements";
        @throw create_JavaLangNullPointerException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(format, [IOSObjectArray arrayWithObjects:(id[]){ [((id<OrgAssertjCorePresentationRepresentation>) nil_chk([((id<OrgAssertjCoreApiAssertionInfo>) nil_chk(info)) representation])) toStringOfWithId:types] } count:1 type:NSObject_class_()]));
      }
      if ([type isInstance:actual]) {
        return true;
      }
    }
  }
  return false;
}

jboolean OrgAssertjCoreInternalInternalObjects_isInstanceOfClassWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id actual, IOSClass *clazz, id<OrgAssertjCoreApiAssertionInfo> info) {
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  OrgAssertjCoreInternalCommonValidations_checkTypeIsNotNullWithIOSClass_(clazz);
  return [((IOSClass *) nil_chk(clazz)) isInstance:actual];
}

jboolean OrgAssertjCoreInternalInternalObjects_haveSameClassWithId_withId_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id actual, id other, id<OrgAssertjCoreApiAssertionInfo> info) {
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  if (other == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The given object should not be null");
  }
  IOSClass *actualClass = [nil_chk(actual) java_getClass];
  IOSClass *otherClass = [other java_getClass];
  return [actualClass isEqual:otherClass];
}

jboolean OrgAssertjCoreInternalInternalObjects_actualIsExactlyInstanceOfTypeWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id actual, IOSClass *expectedType, id<OrgAssertjCoreApiAssertionInfo> info) {
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  OrgAssertjCoreInternalCommonValidations_checkTypeIsNotNullWithIOSClass_(expectedType);
  return [((IOSClass *) nil_chk(expectedType)) isEqual:[nil_chk(actual) java_getClass]];
}

jboolean OrgAssertjCoreInternalInternalObjects_isOfOneOfGivenTypesWithId_withIOSClassArray_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id actual, IOSObjectArray *types, id<OrgAssertjCoreApiAssertionInfo> info) {
  [self assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  if (types == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The given types should not be null");
  return OrgAssertjCoreInternalInternalObjects_isItemInArrayWithId_withNSObjectArray_(self, [nil_chk(actual) java_getClass], types);
}

void OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndIsNotEmptyWithIOSClassArray_(OrgAssertjCoreInternalInternalObjects *self, IOSObjectArray *types) {
  if (types == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The given array of types should not be null");
  }
  if (types->size_ == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The given array of types should not be empty");
  }
}

jboolean OrgAssertjCoreInternalInternalObjects_areEqualWithId_withId_(OrgAssertjCoreInternalInternalObjects *self, id actual, id other) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) areEqualWithId:actual withId:other];
}

void OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndNotEmptyWithNSObjectArray_(OrgAssertjCoreInternalInternalObjects *self, IOSObjectArray *values) {
  if (values == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The given array should not be null");
  }
  if (values->size_ == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The given array should not be empty");
  }
}

jboolean OrgAssertjCoreInternalInternalObjects_isItemInArrayWithId_withNSObjectArray_(OrgAssertjCoreInternalInternalObjects *self, id item, IOSObjectArray *arrayOfValues) {
  {
    IOSObjectArray *a__ = arrayOfValues;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id value = *b__++;
      if (OrgAssertjCoreInternalInternalObjects_areEqualWithId_withId_(self, value, item)) return true;
    }
  }
  return false;
}

void OrgAssertjCoreInternalInternalObjects_checkIsNotNullAndNotEmptyWithJavaLangIterable_(OrgAssertjCoreInternalInternalObjects *self, id<JavaLangIterable> values) {
  if (values == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The given iterable should not be null");
  }
  if (![((id<JavaUtilIterator>) nil_chk([values iterator])) hasNext]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The given iterable should not be empty");
  }
}

jboolean OrgAssertjCoreInternalInternalObjects_isActualInWithId_withJavaLangIterable_(OrgAssertjCoreInternalInternalObjects *self, id actual, id<JavaLangIterable> values) {
  for (id __strong value in nil_chk(values)) {
    if (OrgAssertjCoreInternalInternalObjects_areEqualWithId_withId_(self, value, actual)) {
      return true;
    }
  }
  return false;
}

OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *OrgAssertjCoreInternalInternalObjects_isEqualToComparingOnlyGivenFieldsWithId_withId_withNSStringArray_(OrgAssertjCoreInternalInternalObjects *self, id actual, id other, IOSObjectArray *fields) {
  id<JavaUtilList> rejectedFieldsNames = create_JavaUtilLinkedList_init();
  id<JavaUtilList> expectedValues = create_JavaUtilLinkedList_init();
  id<JavaUtilList> rejectedValues = create_JavaUtilLinkedList_init();
  {
    IOSObjectArray *a__ = fields;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *fieldName = *b__++;
      id actualFieldValue = OrgAssertjCoreInternalInternalObjects_getNestedFieldOrPropertyValueWithId_withNSString_(self, actual, fieldName);
      id otherFieldValue = OrgAssertjCoreInternalInternalObjects_getNestedFieldOrPropertyValueWithId_withNSString_(self, other, fieldName);
      if (!OrgAssertjCoreUtilObjects_areEqualWithId_withId_(actualFieldValue, otherFieldValue)) {
        [rejectedFieldsNames addWithId:fieldName];
        [expectedValues addWithId:otherFieldValue];
        [rejectedValues addWithId:actualFieldValue];
      }
    }
  }
  return create_OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(rejectedFieldsNames, expectedValues, rejectedValues);
}

OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *OrgAssertjCoreInternalInternalObjects_isEqualToIgnoringGivenFieldsWithId_withId_withNSStringArray_(OrgAssertjCoreInternalInternalObjects *self, id actual, id other, IOSObjectArray *fields) {
  id<JavaUtilList> fieldsNames = create_JavaUtilLinkedList_init();
  id<JavaUtilList> expectedValues = create_JavaUtilLinkedList_init();
  id<JavaUtilList> rejectedValues = create_JavaUtilLinkedList_init();
  id<JavaUtilSet> ignoredFields = OrgAssertjCoreUtilSets_newLinkedHashSetWithNSObjectArray_(fields);
  for (JavaLangReflectField * __strong field in nil_chk(OrgAssertjCoreInternalInternalObjects_getDeclaredFieldsIncludingInheritedWithIOSClass_([nil_chk(actual) java_getClass]))) {
    @try {
      if (![((id<JavaUtilSet>) nil_chk(ignoredFields)) containsWithId:[((JavaLangReflectField *) nil_chk(field)) getName]]) {
        id actualFieldValue = OrgAssertjCoreInternalInternalObjects_getFieldOrPropertyValueWithId_withJavaLangReflectField_(self, actual, field);
        id otherFieldValue = OrgAssertjCoreInternalInternalObjects_getFieldOrPropertyValueWithId_withJavaLangReflectField_(self, other, field);
        if (!OrgAssertjCoreUtilObjects_areEqualWithId_withId_(actualFieldValue, otherFieldValue)) {
          [fieldsNames addWithId:[field getName]];
          [rejectedValues addWithId:actualFieldValue];
          [expectedValues addWithId:otherFieldValue];
        }
      }
    }
    @catch (OrgAssertjCoreUtilIntrospectionIntrospectionError *e) {
    }
  }
  return create_OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(fieldsNames, expectedValues, rejectedValues);
}

id OrgAssertjCoreInternalInternalObjects_getFieldOrPropertyValueWithId_withJavaLangReflectField_(OrgAssertjCoreInternalInternalObjects *self, id a, JavaLangReflectField *field) {
  @try {
    return [((JavaLangReflectField *) nil_chk(field)) getWithId:a];
  }
  @catch (JavaLangIllegalAccessException *e) {
    return [((OrgAssertjCoreInternalPropertySupport *) nil_chk(self->propertySupport_)) propertyValueWithNSString:[field getName] withIOSClass:NSObject_class_() withId:a];
  }
}

id OrgAssertjCoreInternalInternalObjects_getNestedFieldOrPropertyValueWithId_withNSString_(OrgAssertjCoreInternalInternalObjects *self, id a, NSString *fieldName) {
  @try {
    return [((OrgAssertjCoreUtilIntrospectionFieldSupport *) nil_chk(self->fieldSupport_)) fieldValueWithNSString:fieldName withIOSClass:NSObject_class_() withId:a];
  }
  @catch (OrgAssertjCoreUtilIntrospectionIntrospectionError *e) {
    @try {
      return [((OrgAssertjCoreInternalPropertySupport *) nil_chk(self->propertySupport_)) propertyValueOfWithNSString:fieldName withIOSClass:NSObject_class_() withId:a];
    }
    @catch (OrgAssertjCoreUtilIntrospectionIntrospectionError *e2) {
      NSString *msg = NSString_java_formatWithNSString_withNSObjectArray_(@"Unable to obtain the value of <'%s'> field/property from <%s>, expecting a public field or getter", [IOSObjectArray arrayWithObjects:(id[]){ fieldName, a } count:2 type:NSObject_class_()]);
      @throw create_OrgAssertjCoreUtilIntrospectionIntrospectionError_initWithNSString_(msg);
    }
  }
}

id<JavaUtilSet> OrgAssertjCoreInternalInternalObjects_getDeclaredFieldsIncludingInheritedWithIOSClass_(IOSClass *clazz) {
  OrgAssertjCoreInternalInternalObjects_initialize();
  if (clazz == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"expecting Class parameter not to be null");
  id<JavaUtilSet> declaredFields = OrgAssertjCoreUtilSets_newLinkedHashSetWithNSObjectArray_([clazz getDeclaredFields]);
  IOSClass *superclazz = [clazz getSuperclass];
  while (superclazz != nil && ![((NSString *) nil_chk([superclazz getName])) hasPrefix:@"java.lang"]) {
    [((id<JavaUtilSet>) nil_chk(declaredFields)) addAllWithJavaUtilCollection:OrgAssertjCoreUtilSets_newLinkedHashSetWithNSObjectArray_([superclazz getDeclaredFields])];
    superclazz = [superclazz getSuperclass];
  }
  return declaredFields;
}

void OrgAssertjCoreInternalInternalObjects_assertOtherTypeIsCompatibleWithActualClassWithOrgAssertjCoreApiAssertionInfo_withId_withIOSClass_(OrgAssertjCoreInternalInternalObjects *self, id<OrgAssertjCoreApiAssertionInfo> info, id other, IOSClass *clazz) {
  if (other == nil) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(self->failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInstance_shouldBeInstanceButWasNullWithNSString_withIOSClass_(@"other", clazz)];
  OrgAssertjCoreInternalInternalObjects_isInstanceOfWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(self, other, clazz, info);
}

void OrgAssertjCoreInternalInternalObjects_isInstanceOfWithId_withIOSClass_withOrgAssertjCoreApiAssertionInfo_(OrgAssertjCoreInternalInternalObjects *self, id object, IOSClass *clazz, id<OrgAssertjCoreApiAssertionInfo> info) {
  if (![((IOSClass *) nil_chk(clazz)) isInstance:object]) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(self->failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInstance_shouldBeInstanceWithId_withIOSClass_(object, clazz)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInternalObjects)

@implementation OrgAssertjCoreInternalInternalObjects_ByFieldsComparison

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)fieldsNames
                    withJavaUtilList:(id<JavaUtilList>)expectedValues
                    withJavaUtilList:(id<JavaUtilList>)rejectedValues {
  OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(self, fieldsNames, expectedValues, rejectedValues);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isFieldsNamesEmpty {
  return [((id<JavaUtilList>) nil_chk(fieldsNames_)) isEmpty];
}

- (jboolean)isFieldsNamesNotEmpty {
  return ![self isFieldsNamesEmpty];
}

- (void)dealloc {
  RELEASE_(fieldsNames_);
  RELEASE_(expectedValues_);
  RELEASE_(rejectedValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:withJavaUtilList:withJavaUtilList:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(isFieldsNamesEmpty);
  methods[3].selector = @selector(isFieldsNamesNotEmpty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fieldsNames_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "expectedValues_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "rejectedValues_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/Object;>;Ljava/util/List<Ljava/lang/Object;>;)V", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<Ljava/lang/Object;>;", "LOrgAssertjCoreInternalInternalObjects;" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInternalObjects_ByFieldsComparison = { "ByFieldsComparison", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x9, 4, 3, 4, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInternalObjects_ByFieldsComparison;
}

@end

void OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *self, id<JavaUtilList> fieldsNames, id<JavaUtilList> expectedValues, id<JavaUtilList> rejectedValues) {
  NSObject_init(self);
  JreStrongAssign(&self->fieldsNames_, fieldsNames);
  JreStrongAssign(&self->expectedValues_, expectedValues);
  JreStrongAssign(&self->rejectedValues_, rejectedValues);
}

OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *new_OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(id<JavaUtilList> fieldsNames, id<JavaUtilList> expectedValues, id<JavaUtilList> rejectedValues) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalObjects_ByFieldsComparison, initWithJavaUtilList_withJavaUtilList_withJavaUtilList_, fieldsNames, expectedValues, rejectedValues)
}

OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *create_OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(id<JavaUtilList> fieldsNames, id<JavaUtilList> expectedValues, id<JavaUtilList> rejectedValues) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalObjects_ByFieldsComparison, initWithJavaUtilList_withJavaUtilList_withJavaUtilList_, fieldsNames, expectedValues, rejectedValues)
}

void OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_init(OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *self) {
  OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_initWithJavaUtilList_withJavaUtilList_withJavaUtilList_(self, create_JavaUtilArrayList_init(), create_JavaUtilArrayList_init(), create_JavaUtilArrayList_init());
}

OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *new_OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalObjects_ByFieldsComparison, init)
}

OrgAssertjCoreInternalInternalObjects_ByFieldsComparison *create_OrgAssertjCoreInternalInternalObjects_ByFieldsComparison_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalObjects_ByFieldsComparison, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInternalObjects_ByFieldsComparison)
