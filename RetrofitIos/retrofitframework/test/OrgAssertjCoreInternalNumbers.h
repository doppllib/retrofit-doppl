//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/Numbers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreInternalNumbers")
#ifdef RESTRICT_OrgAssertjCoreInternalNumbers
#define INCLUDE_ALL_OrgAssertjCoreInternalNumbers 0
#else
#define INCLUDE_ALL_OrgAssertjCoreInternalNumbers 1
#endif
#undef RESTRICT_OrgAssertjCoreInternalNumbers

#if !defined (OrgAssertjCoreInternalNumbers_) && (INCLUDE_ALL_OrgAssertjCoreInternalNumbers || defined(INCLUDE_OrgAssertjCoreInternalNumbers))
#define OrgAssertjCoreInternalNumbers_

#define RESTRICT_OrgAssertjCoreInternalComparables 1
#define INCLUDE_OrgAssertjCoreInternalComparables 1
#include "OrgAssertjCoreInternalComparables.h"

@protocol JavaLangComparable;
@protocol OrgAssertjCoreApiAssertionInfo;
@protocol OrgAssertjCoreInternalComparisonStrategy;

@interface OrgAssertjCoreInternalNumbers : OrgAssertjCoreInternalComparables

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

- (void)assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withJavaLangComparable:(id<JavaLangComparable>)actual
                                   withJavaLangComparable:(id<JavaLangComparable>)start
                                   withJavaLangComparable:(id<JavaLangComparable>)end;

- (void)assertIsNegativeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangComparable:(id<JavaLangComparable>)actual;

- (void)assertIsNotNegativeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaLangComparable:(id<JavaLangComparable>)actual;

- (void)assertIsNotPositiveWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaLangComparable:(id<JavaLangComparable>)actual;

- (void)assertIsNotZeroWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withJavaLangComparable:(id<JavaLangComparable>)actual;

- (void)assertIsPositiveWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangComparable:(id<JavaLangComparable>)actual;

- (void)assertIsStrictlyBetweenWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withJavaLangComparable:(id<JavaLangComparable>)actual
                                           withJavaLangComparable:(id<JavaLangComparable>)start
                                           withJavaLangComparable:(id<JavaLangComparable>)end;

- (void)assertIsZeroWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                withJavaLangComparable:(id<JavaLangComparable>)actual;

#pragma mark Protected

- (id<JavaLangComparable>)zero;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreInternalNumbers)

FOUNDATION_EXPORT void OrgAssertjCoreInternalNumbers_init(OrgAssertjCoreInternalNumbers *self);

FOUNDATION_EXPORT void OrgAssertjCoreInternalNumbers_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalNumbers *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreInternalNumbers)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreInternalNumbers")
