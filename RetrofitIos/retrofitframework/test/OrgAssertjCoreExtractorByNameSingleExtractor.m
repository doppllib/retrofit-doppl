//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/extractor/ByNameSingleExtractor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreExtractorByNameSingleExtractor.h"
#include "OrgAssertjCoreInternalPropertySupport.h"
#include "OrgAssertjCoreUtilIntrospectionFieldSupport.h"
#include "OrgAssertjCoreUtilIntrospectionIntrospectionError.h"
#include "java/lang/IllegalArgumentException.h"

@interface OrgAssertjCoreExtractorByNameSingleExtractor () {
 @public
  NSString *propertyOrFieldName_;
}

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreExtractorByNameSingleExtractor, propertyOrFieldName_, NSString *)

@implementation OrgAssertjCoreExtractorByNameSingleExtractor

- (instancetype)initWithNSString:(NSString *)propertyOrFieldName {
  OrgAssertjCoreExtractorByNameSingleExtractor_initWithNSString_(self, propertyOrFieldName);
  return self;
}

- (id)extractWithId:(id)input {
  if (propertyOrFieldName_ == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The name of the field/property to read should not be null");
  if (((jint) [propertyOrFieldName_ length]) == 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The name of the field/property to read should not be empty");
  if (input == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The object to extract field/property from should not be null");
  @try {
    return [((OrgAssertjCoreInternalPropertySupport *) nil_chk(OrgAssertjCoreInternalPropertySupport_instance())) propertyValueOfWithNSString:propertyOrFieldName_ withIOSClass:NSObject_class_() withId:input];
  }
  @catch (OrgAssertjCoreUtilIntrospectionIntrospectionError *fieldIntrospectionError) {
    @try {
      return [((OrgAssertjCoreUtilIntrospectionFieldSupport *) nil_chk(OrgAssertjCoreUtilIntrospectionFieldSupport_instance())) fieldValueWithNSString:propertyOrFieldName_ withIOSClass:NSObject_class_() withId:input];
    }
    @catch (OrgAssertjCoreUtilIntrospectionIntrospectionError *propertyIntrospectionError) {
      NSString *message = NSString_java_formatWithNSString_withNSObjectArray_(@"\nCan't find any field or property with name '%s'.\nError when introspecting fields was :\n- %s \nError when introspecting properties was :\n- %s", [IOSObjectArray arrayWithObjects:(id[]){ propertyOrFieldName_, [((OrgAssertjCoreUtilIntrospectionIntrospectionError *) nil_chk(fieldIntrospectionError)) getMessage], [((OrgAssertjCoreUtilIntrospectionIntrospectionError *) nil_chk(propertyIntrospectionError)) getMessage] } count:3 type:NSObject_class_()]);
      @throw create_OrgAssertjCoreUtilIntrospectionIntrospectionError_initWithNSString_(message);
    }
  }
}

- (void)dealloc {
  RELEASE_(propertyOrFieldName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(extractWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "propertyOrFieldName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "extract", "LNSObject;", "(TT;)Ljava/lang/Object;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/assertj/core/api/iterable/Extractor<TT;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreExtractorByNameSingleExtractor = { "ByNameSingleExtractor", "org.assertj.core.extractor", ptrTable, methods, fields, 7, 0x0, 2, 1, -1, -1, -1, 4, -1 };
  return &_OrgAssertjCoreExtractorByNameSingleExtractor;
}

@end

void OrgAssertjCoreExtractorByNameSingleExtractor_initWithNSString_(OrgAssertjCoreExtractorByNameSingleExtractor *self, NSString *propertyOrFieldName) {
  NSObject_init(self);
  JreStrongAssign(&self->propertyOrFieldName_, propertyOrFieldName);
}

OrgAssertjCoreExtractorByNameSingleExtractor *new_OrgAssertjCoreExtractorByNameSingleExtractor_initWithNSString_(NSString *propertyOrFieldName) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreExtractorByNameSingleExtractor, initWithNSString_, propertyOrFieldName)
}

OrgAssertjCoreExtractorByNameSingleExtractor *create_OrgAssertjCoreExtractorByNameSingleExtractor_initWithNSString_(NSString *propertyOrFieldName) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreExtractorByNameSingleExtractor, initWithNSString_, propertyOrFieldName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreExtractorByNameSingleExtractor)
