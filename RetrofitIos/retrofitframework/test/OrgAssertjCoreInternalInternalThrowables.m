//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/test/java/org/assertj/core/internal/InternalThrowables.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldContainCharSequence.h"
#include "OrgAssertjCoreErrorShouldEndWith.h"
#include "OrgAssertjCoreErrorShouldHaveCauseExactlyInstance.h"
#include "OrgAssertjCoreErrorShouldHaveCauseInstance.h"
#include "OrgAssertjCoreErrorShouldHaveMessage.h"
#include "OrgAssertjCoreErrorShouldHaveNoCause.h"
#include "OrgAssertjCoreErrorShouldHaveRootCauseExactlyInstance.h"
#include "OrgAssertjCoreErrorShouldHaveRootCauseInstance.h"
#include "OrgAssertjCoreErrorShouldStartWith.h"
#include "OrgAssertjCoreInternalCommonValidations.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalInternalThrowables.h"
#include "OrgAssertjCoreUtilObjects.h"
#include "OrgAssertjCoreUtilThrowables.h"
#include "java/lang/AssertionError.h"

@interface OrgAssertjCoreInternalInternalThrowables ()

+ (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withNSException:(NSException *)actual;

@end

inline OrgAssertjCoreInternalInternalThrowables *OrgAssertjCoreInternalInternalThrowables_get_INSTANCE();
static OrgAssertjCoreInternalInternalThrowables *OrgAssertjCoreInternalInternalThrowables_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalInternalThrowables, INSTANCE, OrgAssertjCoreInternalInternalThrowables *)

__attribute__((unused)) static void OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(id<OrgAssertjCoreApiAssertionInfo> info, NSException *actual);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalInternalThrowables)

@implementation OrgAssertjCoreInternalInternalThrowables

+ (OrgAssertjCoreInternalInternalThrowables *)instance {
  return OrgAssertjCoreInternalInternalThrowables_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInternalThrowables_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)assertHasMessageWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withNSException:(NSException *)actual
                                              withNSString:(NSString *)message {
  OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(info, actual);
  if (OrgAssertjCoreUtilObjects_areEqualWithId_withId_([((NSException *) nil_chk(actual)) getMessage], message)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveMessage_shouldHaveMessageWithNSException_withNSString_(actual, message)];
}

- (void)assertHasNoCauseWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withNSException:(NSException *)actual {
  OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(info, actual);
  NSException *actualCause = [((NSException *) nil_chk(actual)) getCause];
  if (actualCause == nil) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveNoCause_shouldHaveNoCauseWithNSException_(actual)];
}

- (void)assertHasMessageStartingWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                       withNSException:(NSException *)actual
                                                          withNSString:(NSString *)description_ {
  OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(info, actual);
  if ([((NSException *) nil_chk(actual)) getMessage] != nil && [((NSString *) nil_chk([actual getMessage])) hasPrefix:description_]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldStartWith_shouldStartWithWithId_withId_([actual getMessage], description_)];
}

- (void)assertHasMessageContainingWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                     withNSException:(NSException *)actual
                                                        withNSString:(NSString *)description_ {
  OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(info, actual);
  if ([((NSException *) nil_chk(actual)) getMessage] != nil && [((NSString *) nil_chk([actual getMessage])) java_contains:description_]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainCharSequence_shouldContainWithJavaLangCharSequence_withJavaLangCharSequence_([actual getMessage], description_)];
}

- (void)assertHasMessageEndingWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                     withNSException:(NSException *)actual
                                                        withNSString:(NSString *)description_ {
  OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(info, actual);
  if ([((NSException *) nil_chk(actual)) getMessage] != nil && [((NSString *) nil_chk([actual getMessage])) hasSuffix:description_]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldEndWith_shouldEndWithWithId_withId_([actual getMessage], description_)];
}

- (void)assertHasCauseInstanceOfWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                   withNSException:(NSException *)actual
                                                      withIOSClass:(IOSClass *)type {
  OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(info, actual);
  OrgAssertjCoreInternalCommonValidations_checkTypeIsNotNullWithIOSClass_(type);
  if ([((IOSClass *) nil_chk(type)) isInstance:[((NSException *) nil_chk(actual)) getCause]]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveCauseInstance_shouldHaveCauseInstanceWithNSException_withIOSClass_(actual, type)];
}

- (void)assertHasCauseExactlyInstanceOfWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                          withNSException:(NSException *)actual
                                                             withIOSClass:(IOSClass *)type {
  OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(info, actual);
  OrgAssertjCoreInternalCommonValidations_checkTypeIsNotNullWithIOSClass_(type);
  NSException *cause = [((NSException *) nil_chk(actual)) getCause];
  if (cause != nil && [((IOSClass *) nil_chk(type)) isEqual:[cause java_getClass]]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_shouldHaveCauseExactlyInstanceWithNSException_withIOSClass_(actual, type)];
}

- (void)assertHasRootCauseInstanceOfWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                       withNSException:(NSException *)actual
                                                          withIOSClass:(IOSClass *)type {
  OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(info, actual);
  OrgAssertjCoreInternalCommonValidations_checkTypeIsNotNullWithIOSClass_(type);
  if ([((IOSClass *) nil_chk(type)) isInstance:OrgAssertjCoreUtilThrowables_getRootCauseWithNSException_(actual)]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveRootCauseInstance_shouldHaveRootCauseInstanceWithNSException_withIOSClass_(actual, type)];
}

- (void)assertHasRootCauseExactlyInstanceOfWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                              withNSException:(NSException *)actual
                                                                 withIOSClass:(IOSClass *)type {
  OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(info, actual);
  OrgAssertjCoreInternalCommonValidations_checkTypeIsNotNullWithIOSClass_(type);
  NSException *rootCause = OrgAssertjCoreUtilThrowables_getRootCauseWithNSException_(actual);
  if (rootCause != nil && [((IOSClass *) nil_chk(type)) isEqual:[rootCause java_getClass]]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveRootCauseExactlyInstance_shouldHaveRootCauseExactlyInstanceWithNSException_withIOSClass_(actual, type)];
}

+ (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withNSException:(NSException *)actual {
  OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(info, actual);
}

- (void)dealloc {
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalInternalThrowables;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 12, 8, -1, 9, -1, -1 },
    { NULL, "V", 0xa, 13, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(assertHasMessageWithOrgAssertjCoreApiAssertionInfo:withNSException:withNSString:);
  methods[3].selector = @selector(assertHasNoCauseWithOrgAssertjCoreApiAssertionInfo:withNSException:);
  methods[4].selector = @selector(assertHasMessageStartingWithWithOrgAssertjCoreApiAssertionInfo:withNSException:withNSString:);
  methods[5].selector = @selector(assertHasMessageContainingWithOrgAssertjCoreApiAssertionInfo:withNSException:withNSString:);
  methods[6].selector = @selector(assertHasMessageEndingWithWithOrgAssertjCoreApiAssertionInfo:withNSException:withNSString:);
  methods[7].selector = @selector(assertHasCauseInstanceOfWithOrgAssertjCoreApiAssertionInfo:withNSException:withIOSClass:);
  methods[8].selector = @selector(assertHasCauseExactlyInstanceOfWithOrgAssertjCoreApiAssertionInfo:withNSException:withIOSClass:);
  methods[9].selector = @selector(assertHasRootCauseInstanceOfWithOrgAssertjCoreApiAssertionInfo:withNSException:withIOSClass:);
  methods[10].selector = @selector(assertHasRootCauseExactlyInstanceOfWithOrgAssertjCoreApiAssertionInfo:withNSException:withIOSClass:);
  methods[11].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalInternalThrowables;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "assertHasMessage", "LOrgAssertjCoreApiAssertionInfo;LNSException;LNSString;", "assertHasNoCause", "LOrgAssertjCoreApiAssertionInfo;LNSException;", "assertHasMessageStartingWith", "assertHasMessageContaining", "assertHasMessageEndingWith", "assertHasCauseInstanceOf", "LOrgAssertjCoreApiAssertionInfo;LNSException;LIOSClass;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Throwable;Ljava/lang/Class<+Ljava/lang/Throwable;>;)V", "assertHasCauseExactlyInstanceOf", "assertHasRootCauseInstanceOf", "assertHasRootCauseExactlyInstanceOf", "assertNotNull", &OrgAssertjCoreInternalInternalThrowables_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInternalThrowables = { "InternalThrowables", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 12, 2, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInternalThrowables;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalInternalThrowables class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalInternalThrowables_INSTANCE, new_OrgAssertjCoreInternalInternalThrowables_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalInternalThrowables)
  }
}

@end

OrgAssertjCoreInternalInternalThrowables *OrgAssertjCoreInternalInternalThrowables_instance() {
  OrgAssertjCoreInternalInternalThrowables_initialize();
  return OrgAssertjCoreInternalInternalThrowables_INSTANCE;
}

void OrgAssertjCoreInternalInternalThrowables_init(OrgAssertjCoreInternalInternalThrowables *self) {
  NSObject_init(self);
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
}

OrgAssertjCoreInternalInternalThrowables *new_OrgAssertjCoreInternalInternalThrowables_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalThrowables, init)
}

OrgAssertjCoreInternalInternalThrowables *create_OrgAssertjCoreInternalInternalThrowables_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalThrowables, init)
}

void OrgAssertjCoreInternalInternalThrowables_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withNSException_(id<OrgAssertjCoreApiAssertionInfo> info, NSException *actual) {
  OrgAssertjCoreInternalInternalThrowables_initialize();
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInternalThrowables)
