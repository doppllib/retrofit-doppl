//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/main/java/retrofit/android/AndroidLog.java
//

#include "J2ObjC_source.h"
#include "RetrofitAndroidAndroidLog.h"
#include "android/util/Log.h"
#include "java/lang/Math.h"

@interface RetrofitAndroidAndroidLog () {
 @public
  NSString *tag_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitAndroidAndroidLog, tag_, NSString *)

inline jint RetrofitAndroidAndroidLog_get_LOG_CHUNK_SIZE();
#define RetrofitAndroidAndroidLog_LOG_CHUNK_SIZE 4000
J2OBJC_STATIC_FIELD_CONSTANT(RetrofitAndroidAndroidLog, LOG_CHUNK_SIZE, jint)

@implementation RetrofitAndroidAndroidLog

- (instancetype)initWithNSString:(NSString *)tag {
  RetrofitAndroidAndroidLog_initWithNSString_(self, tag);
  return self;
}

- (void)logWithNSString:(NSString *)message {
  for (jint i = 0, len = ((jint) [((NSString *) nil_chk(message)) length]); i < len; i += RetrofitAndroidAndroidLog_LOG_CHUNK_SIZE) {
    jint end = JavaLangMath_minWithInt_withInt_(len, i + RetrofitAndroidAndroidLog_LOG_CHUNK_SIZE);
    [self logChunkWithNSString:[message java_substring:i endIndex:end]];
  }
}

- (void)logChunkWithNSString:(NSString *)chunk {
  AndroidUtilLog_dWithNSString_withNSString_([self getTag], chunk);
}

- (NSString *)getTag {
  return tag_;
}

- (void)dealloc {
  RELEASE_(tag_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(logWithNSString:);
  methods[2].selector = @selector(logChunkWithNSString:);
  methods[3].selector = @selector(getTag);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_CHUNK_SIZE", "I", .constantValue.asInt = RetrofitAndroidAndroidLog_LOG_CHUNK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "tag_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "log", "logChunk" };
  static const J2ObjcClassInfo _RetrofitAndroidAndroidLog = { "AndroidLog", "retrofit.android", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_RetrofitAndroidAndroidLog;
}

@end

void RetrofitAndroidAndroidLog_initWithNSString_(RetrofitAndroidAndroidLog *self, NSString *tag) {
  NSObject_init(self);
  JreStrongAssign(&self->tag_, tag);
}

RetrofitAndroidAndroidLog *new_RetrofitAndroidAndroidLog_initWithNSString_(NSString *tag) {
  J2OBJC_NEW_IMPL(RetrofitAndroidAndroidLog, initWithNSString_, tag)
}

RetrofitAndroidAndroidLog *create_RetrofitAndroidAndroidLog_initWithNSString_(NSString *tag) {
  J2OBJC_CREATE_IMPL(RetrofitAndroidAndroidLog, initWithNSString_, tag)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitAndroidAndroidLog)
