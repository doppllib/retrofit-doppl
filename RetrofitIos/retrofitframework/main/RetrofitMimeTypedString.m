//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/main/java/retrofit/mime/TypedString.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RetrofitMimeTypedByteArray.h"
#include "RetrofitMimeTypedString.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/RuntimeException.h"

@interface RetrofitMimeTypedString ()

+ (IOSByteArray *)convertToBytesWithNSString:(NSString *)string;

@end

__attribute__((unused)) static IOSByteArray *RetrofitMimeTypedString_convertToBytesWithNSString_(NSString *string);

@implementation RetrofitMimeTypedString

- (instancetype)initWithNSString:(NSString *)string {
  RetrofitMimeTypedString_initWithNSString_(self, string);
  return self;
}

+ (IOSByteArray *)convertToBytesWithNSString:(NSString *)string {
  return RetrofitMimeTypedString_convertToBytesWithNSString_(string);
}

- (NSString *)description {
  @try {
    return JreStrcat("$$C", @"TypedString[", [NSString java_stringWithBytes:[self getBytes] charsetName:@"UTF-8"], ']');
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangAssertionError_initWithId_(@"Must be able to decode UTF-8");
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(convertToBytesWithNSString:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "convertToBytes", "toString" };
  static const J2ObjcClassInfo _RetrofitMimeTypedString = { "TypedString", "retrofit.mime", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_RetrofitMimeTypedString;
}

@end

void RetrofitMimeTypedString_initWithNSString_(RetrofitMimeTypedString *self, NSString *string) {
  RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(self, @"text/plain; charset=UTF-8", RetrofitMimeTypedString_convertToBytesWithNSString_(string));
}

RetrofitMimeTypedString *new_RetrofitMimeTypedString_initWithNSString_(NSString *string) {
  J2OBJC_NEW_IMPL(RetrofitMimeTypedString, initWithNSString_, string)
}

RetrofitMimeTypedString *create_RetrofitMimeTypedString_initWithNSString_(NSString *string) {
  J2OBJC_CREATE_IMPL(RetrofitMimeTypedString, initWithNSString_, string)
}

IOSByteArray *RetrofitMimeTypedString_convertToBytesWithNSString_(NSString *string) {
  RetrofitMimeTypedString_initialize();
  @try {
    return [((NSString *) nil_chk(string)) java_getBytesWithCharsetName:@"UTF-8"];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitMimeTypedString)
