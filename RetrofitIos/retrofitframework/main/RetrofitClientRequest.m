//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/main/java/retrofit/client/Request.java
//

#include "J2ObjC_source.h"
#include "RetrofitClientRequest.h"
#include "RetrofitMimeTypedOutput.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface RetrofitClientRequest () {
 @public
  NSString *method_;
  NSString *url_;
  id<JavaUtilList> headers_;
  id<RetrofitMimeTypedOutput> body_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitClientRequest, method_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitClientRequest, url_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitClientRequest, headers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RetrofitClientRequest, body_, id<RetrofitMimeTypedOutput>)

@implementation RetrofitClientRequest

- (instancetype)initWithNSString:(NSString *)method
                    withNSString:(NSString *)url
                withJavaUtilList:(id<JavaUtilList>)headers
     withRetrofitMimeTypedOutput:(id<RetrofitMimeTypedOutput>)body {
  RetrofitClientRequest_initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_(self, method, url, headers, body);
  return self;
}

- (NSString *)getMethod {
  return method_;
}

- (NSString *)getUrl {
  return url_;
}

- (id<JavaUtilList>)getHeaders {
  return headers_;
}

- (id<RetrofitMimeTypedOutput>)getBody {
  return body_;
}

- (void)dealloc {
  RELEASE_(method_);
  RELEASE_(url_);
  RELEASE_(headers_);
  RELEASE_(body_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LRetrofitMimeTypedOutput;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withJavaUtilList:withRetrofitMimeTypedOutput:);
  methods[1].selector = @selector(getMethod);
  methods[2].selector = @selector(getUrl);
  methods[3].selector = @selector(getHeaders);
  methods[4].selector = @selector(getBody);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "method_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "url_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "body_", "LRetrofitMimeTypedOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LJavaUtilList;LRetrofitMimeTypedOutput;", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/List<Lretrofit/client/Header;>;Lretrofit/mime/TypedOutput;)V", "()Ljava/util/List<Lretrofit/client/Header;>;", "Ljava/util/List<Lretrofit/client/Header;>;" };
  static const J2ObjcClassInfo _RetrofitClientRequest = { "Request", "retrofit.client", ptrTable, methods, fields, 7, 0x11, 5, 4, -1, -1, -1, -1, -1 };
  return &_RetrofitClientRequest;
}

@end

void RetrofitClientRequest_initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_(RetrofitClientRequest *self, NSString *method, NSString *url, id<JavaUtilList> headers, id<RetrofitMimeTypedOutput> body) {
  NSObject_init(self);
  if (method == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Method must not be null.");
  }
  if (url == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"URL must not be null.");
  }
  JreStrongAssign(&self->method_, method);
  JreStrongAssign(&self->url_, url);
  if (headers == nil) {
    JreStrongAssign(&self->headers_, JavaUtilCollections_emptyList());
  }
  else {
    JreStrongAssign(&self->headers_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(create_JavaUtilArrayList_initWithJavaUtilCollection_(headers)));
  }
  JreStrongAssign(&self->body_, body);
}

RetrofitClientRequest *new_RetrofitClientRequest_initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_(NSString *method, NSString *url, id<JavaUtilList> headers, id<RetrofitMimeTypedOutput> body) {
  J2OBJC_NEW_IMPL(RetrofitClientRequest, initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_, method, url, headers, body)
}

RetrofitClientRequest *create_RetrofitClientRequest_initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_(NSString *method, NSString *url, id<JavaUtilList> headers, id<RetrofitMimeTypedOutput> body) {
  J2OBJC_CREATE_IMPL(RetrofitClientRequest, initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_, method, url, headers, body)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitClientRequest)
