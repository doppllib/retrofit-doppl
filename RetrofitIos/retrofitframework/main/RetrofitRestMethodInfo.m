//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/main/java/retrofit/RestMethodInfo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RetrofitCallback.h"
#include "RetrofitClientHeader.h"
#include "RetrofitClientResponse.h"
#include "RetrofitHttpBody.h"
#include "RetrofitHttpEncodedPath.h"
#include "RetrofitHttpEncodedQuery.h"
#include "RetrofitHttpEncodedQueryMap.h"
#include "RetrofitHttpField.h"
#include "RetrofitHttpFieldMap.h"
#include "RetrofitHttpFormUrlEncoded.h"
#include "RetrofitHttpHeader.h"
#include "RetrofitHttpHeaders.h"
#include "RetrofitHttpMultipart.h"
#include "RetrofitHttpPart.h"
#include "RetrofitHttpPartMap.h"
#include "RetrofitHttpPath.h"
#include "RetrofitHttpQuery.h"
#include "RetrofitHttpQueryMap.h"
#include "RetrofitHttpRestMethod.h"
#include "RetrofitHttpStreaming.h"
#include "RetrofitPlatform.h"
#include "RetrofitRestMethodInfo.h"
#include "RetrofitTypes.h"
#include "RxObservable.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/WildcardType.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface RetrofitRestMethodInfo ()

- (JavaLangRuntimeException *)methodErrorWithNSString:(NSString *)message
                                    withNSObjectArray:(IOSObjectArray *)args;

- (JavaLangRuntimeException *)parameterErrorWithInt:(jint)index
                                       withNSString:(NSString *)message
                                  withNSObjectArray:(IOSObjectArray *)args;

- (void)parseMethodAnnotations;

- (void)parsePathWithNSString:(NSString *)path;

- (RetrofitRestMethodInfo_ResponseType *)parseResponseType;

+ (id<JavaLangReflectType>)getParameterUpperBoundWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)type;

- (void)parseParameters;

- (void)validatePathNameWithInt:(jint)index
                   withNSString:(NSString *)name;

@end

inline NSString *RetrofitRestMethodInfo_get_PARAM();
static NSString *RetrofitRestMethodInfo_PARAM = @"[a-zA-Z][a-zA-Z0-9_-]*";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RetrofitRestMethodInfo, PARAM, NSString *)

inline JavaUtilRegexPattern *RetrofitRestMethodInfo_get_PARAM_NAME_REGEX();
static JavaUtilRegexPattern *RetrofitRestMethodInfo_PARAM_NAME_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RetrofitRestMethodInfo, PARAM_NAME_REGEX, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *RetrofitRestMethodInfo_get_PARAM_URL_REGEX();
static JavaUtilRegexPattern *RetrofitRestMethodInfo_PARAM_URL_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RetrofitRestMethodInfo, PARAM_URL_REGEX, JavaUtilRegexPattern *)

__attribute__((unused)) static JavaLangRuntimeException *RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(RetrofitRestMethodInfo *self, NSString *message, IOSObjectArray *args);

__attribute__((unused)) static JavaLangRuntimeException *RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(RetrofitRestMethodInfo *self, jint index, NSString *message, IOSObjectArray *args);

__attribute__((unused)) static void RetrofitRestMethodInfo_parseMethodAnnotations(RetrofitRestMethodInfo *self);

__attribute__((unused)) static void RetrofitRestMethodInfo_parsePathWithNSString_(RetrofitRestMethodInfo *self, NSString *path);

__attribute__((unused)) static RetrofitRestMethodInfo_ResponseType *RetrofitRestMethodInfo_parseResponseType(RetrofitRestMethodInfo *self);

__attribute__((unused)) static id<JavaLangReflectType> RetrofitRestMethodInfo_getParameterUpperBoundWithJavaLangReflectParameterizedType_(id<JavaLangReflectParameterizedType> type);

__attribute__((unused)) static void RetrofitRestMethodInfo_parseParameters(RetrofitRestMethodInfo *self);

__attribute__((unused)) static void RetrofitRestMethodInfo_validatePathNameWithInt_withNSString_(RetrofitRestMethodInfo *self, jint index, NSString *name);

__attribute__((unused)) static void RetrofitRestMethodInfo_ResponseType_initWithNSString_withInt_(RetrofitRestMethodInfo_ResponseType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static void RetrofitRestMethodInfo_RequestType_initWithNSString_withInt_(RetrofitRestMethodInfo_RequestType *self, NSString *__name, jint __ordinal);

@interface RetrofitRestMethodInfo_RxSupport : NSObject

- (instancetype)init;

+ (jboolean)isObservableWithIOSClass:(IOSClass *)rawType;

+ (id<JavaLangReflectType>)getObservableTypeWithJavaLangReflectType:(id<JavaLangReflectType>)contextType
                                                       withIOSClass:(IOSClass *)contextRawType;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitRestMethodInfo_RxSupport)

__attribute__((unused)) static void RetrofitRestMethodInfo_RxSupport_init(RetrofitRestMethodInfo_RxSupport *self);

__attribute__((unused)) static RetrofitRestMethodInfo_RxSupport *new_RetrofitRestMethodInfo_RxSupport_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitRestMethodInfo_RxSupport *create_RetrofitRestMethodInfo_RxSupport_init();

__attribute__((unused)) static jboolean RetrofitRestMethodInfo_RxSupport_isObservableWithIOSClass_(IOSClass *rawType);

__attribute__((unused)) static id<JavaLangReflectType> RetrofitRestMethodInfo_RxSupport_getObservableTypeWithJavaLangReflectType_withIOSClass_(id<JavaLangReflectType> contextType, IOSClass *contextRawType);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitRestMethodInfo_RxSupport)

J2OBJC_INITIALIZED_DEFN(RetrofitRestMethodInfo)

@implementation RetrofitRestMethodInfo

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  RetrofitRestMethodInfo_initWithJavaLangReflectMethod_(self, method);
  return self;
}

- (JavaLangRuntimeException *)methodErrorWithNSString:(NSString *)message
                                    withNSObjectArray:(IOSObjectArray *)args {
  return RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, message, args);
}

- (JavaLangRuntimeException *)parameterErrorWithInt:(jint)index
                                       withNSString:(NSString *)message
                                  withNSObjectArray:(IOSObjectArray *)args {
  return RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, index, message, args);
}

- (void)init__ {
  @synchronized(self) {
    if (loaded_) return;
    RetrofitRestMethodInfo_parseMethodAnnotations(self);
    RetrofitRestMethodInfo_parseParameters(self);
    loaded_ = true;
  }
}

- (void)parseMethodAnnotations {
  RetrofitRestMethodInfo_parseMethodAnnotations(self);
}

- (void)parsePathWithNSString:(NSString *)path {
  RetrofitRestMethodInfo_parsePathWithNSString_(self, path);
}

- (id<JavaUtilList>)parseHeadersWithNSStringArray:(IOSObjectArray *)headers {
  id<JavaUtilList> headerList = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = headers;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *header = *b__++;
      jint colon = [((NSString *) nil_chk(header)) java_indexOf:':'];
      if (colon == -1 || colon == 0 || colon == ((jint) [header length]) - 1) {
        @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"@Headers value must be in the form \"Name: Value\". Found: \"%s\"", [IOSObjectArray arrayWithObjects:(id[]){ header } count:1 type:NSObject_class_()]);
      }
      NSString *headerName = [header java_substring:0 endIndex:colon];
      NSString *headerValue = [((NSString *) nil_chk([header java_substring:colon + 1])) java_trim];
      if ([@"Content-Type" java_equalsIgnoreCase:headerName]) {
        JreStrongAssign(&contentTypeHeader_, headerValue);
      }
      else {
        [headerList addWithId:create_RetrofitClientHeader_initWithNSString_withNSString_(headerName, headerValue)];
      }
    }
  }
  return headerList;
}

- (RetrofitRestMethodInfo_ResponseType *)parseResponseType {
  return RetrofitRestMethodInfo_parseResponseType(self);
}

+ (id<JavaLangReflectType>)getParameterUpperBoundWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)type {
  return RetrofitRestMethodInfo_getParameterUpperBoundWithJavaLangReflectParameterizedType_(type);
}

- (void)parseParameters {
  RetrofitRestMethodInfo_parseParameters(self);
}

- (void)validatePathNameWithInt:(jint)index
                   withNSString:(NSString *)name {
  RetrofitRestMethodInfo_validatePathNameWithInt_withNSString_(self, index, name);
}

+ (id<JavaUtilSet>)parsePathParametersWithNSString:(NSString *)path {
  return RetrofitRestMethodInfo_parsePathParametersWithNSString_(path);
}

- (void)dealloc {
  RELEASE_(method_);
  RELEASE_(responseType_);
  RELEASE_(responseObjectType_);
  RELEASE_(requestType_);
  RELEASE_(requestMethod_);
  RELEASE_(requestUrl_);
  RELEASE_(requestUrlParamNames_);
  RELEASE_(requestQuery_);
  RELEASE_(headers_);
  RELEASE_(contentTypeHeader_);
  RELEASE_(requestParamAnnotations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangRuntimeException;", 0x82, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangRuntimeException;", 0x82, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "LRetrofitRestMethodInfo_ResponseType;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x8, 15, 7, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectMethod:);
  methods[1].selector = @selector(methodErrorWithNSString:withNSObjectArray:);
  methods[2].selector = @selector(parameterErrorWithInt:withNSString:withNSObjectArray:);
  methods[3].selector = @selector(init__);
  methods[4].selector = @selector(parseMethodAnnotations);
  methods[5].selector = @selector(parsePathWithNSString:);
  methods[6].selector = @selector(parseHeadersWithNSStringArray:);
  methods[7].selector = @selector(parseResponseType);
  methods[8].selector = @selector(getParameterUpperBoundWithJavaLangReflectParameterizedType:);
  methods[9].selector = @selector(parseParameters);
  methods[10].selector = @selector(validatePathNameWithInt:withNSString:);
  methods[11].selector = @selector(parsePathParametersWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "PARAM_NAME_REGEX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "PARAM_URL_REGEX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "method_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "loaded_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "responseType_", "LRetrofitRestMethodInfo_ResponseType;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "isSynchronous_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "isObservable_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "responseObjectType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requestType_", "LRetrofitRestMethodInfo_RequestType;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requestMethod_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requestHasBody_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requestUrl_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requestUrlParamNames_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x0, -1, -1, 20, -1 },
    { "requestQuery_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "headers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 21, -1 },
    { "contentTypeHeader_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isStreaming_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "requestParamAnnotations_", "[LJavaLangAnnotationAnnotation;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectMethod;", "methodError", "LNSString;[LNSObject;", "parameterError", "ILNSString;[LNSObject;", "init", "parsePath", "LNSString;", "parseHeaders", "[LNSString;", "([Ljava/lang/String;)Ljava/util/List<Lretrofit/client/Header;>;", "getParameterUpperBound", "LJavaLangReflectParameterizedType;", "validatePathName", "ILNSString;", "parsePathParameters", "(Ljava/lang/String;)Ljava/util/Set<Ljava/lang/String;>;", &RetrofitRestMethodInfo_PARAM, &RetrofitRestMethodInfo_PARAM_NAME_REGEX, &RetrofitRestMethodInfo_PARAM_URL_REGEX, "Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/List<Lretrofit/client/Header;>;", "LRetrofitRestMethodInfo_ResponseType;LRetrofitRestMethodInfo_RequestType;LRetrofitRestMethodInfo_RxSupport;" };
  static const J2ObjcClassInfo _RetrofitRestMethodInfo = { "RestMethodInfo", "retrofit", ptrTable, methods, fields, 7, 0x10, 12, 19, -1, 22, -1, -1, -1 };
  return &_RetrofitRestMethodInfo;
}

+ (void)initialize {
  if (self == [RetrofitRestMethodInfo class]) {
    JreStrongAssign(&RetrofitRestMethodInfo_PARAM_NAME_REGEX, JavaUtilRegexPattern_compileWithNSString_(RetrofitRestMethodInfo_PARAM));
    JreStrongAssign(&RetrofitRestMethodInfo_PARAM_URL_REGEX, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$", @"\\{(", RetrofitRestMethodInfo_PARAM, @")\\}")));
    J2OBJC_SET_INITIALIZED(RetrofitRestMethodInfo)
  }
}

@end

void RetrofitRestMethodInfo_initWithJavaLangReflectMethod_(RetrofitRestMethodInfo *self, JavaLangReflectMethod *method) {
  NSObject_init(self);
  self->loaded_ = false;
  JreStrongAssign(&self->requestType_, JreLoadEnum(RetrofitRestMethodInfo_RequestType, SIMPLE));
  JreStrongAssign(&self->method_, method);
  JreStrongAssign(&self->responseType_, RetrofitRestMethodInfo_parseResponseType(self));
  self->isSynchronous_ = (self->responseType_ == JreLoadEnum(RetrofitRestMethodInfo_ResponseType, OBJECT));
  self->isObservable_ = (self->responseType_ == JreLoadEnum(RetrofitRestMethodInfo_ResponseType, OBSERVABLE));
}

RetrofitRestMethodInfo *new_RetrofitRestMethodInfo_initWithJavaLangReflectMethod_(JavaLangReflectMethod *method) {
  J2OBJC_NEW_IMPL(RetrofitRestMethodInfo, initWithJavaLangReflectMethod_, method)
}

RetrofitRestMethodInfo *create_RetrofitRestMethodInfo_initWithJavaLangReflectMethod_(JavaLangReflectMethod *method) {
  J2OBJC_CREATE_IMPL(RetrofitRestMethodInfo, initWithJavaLangReflectMethod_, method)
}

JavaLangRuntimeException *RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(RetrofitRestMethodInfo *self, NSString *message, IOSObjectArray *args) {
  if (((IOSObjectArray *) nil_chk(args))->size_ > 0) {
    message = NSString_java_formatWithNSString_withNSObjectArray_(message, args);
  }
  return create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$$$", [((IOSClass *) nil_chk([((JavaLangReflectMethod *) nil_chk(self->method_)) getDeclaringClass])) getSimpleName], '.', [self->method_ getName], @": ", message));
}

JavaLangRuntimeException *RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(RetrofitRestMethodInfo *self, jint index, NSString *message, IOSObjectArray *args) {
  return RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, JreStrcat("$$IC", message, @" (parameter #", (index + 1), ')'), args);
}

void RetrofitRestMethodInfo_parseMethodAnnotations(RetrofitRestMethodInfo *self) {
  {
    IOSObjectArray *a__ = [((JavaLangReflectMethod *) nil_chk(self->method_)) getAnnotations];
    id<JavaLangAnnotationAnnotation> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangAnnotationAnnotation> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangAnnotationAnnotation> methodAnnotation = *b__++;
      IOSClass *annotationType = [((id<JavaLangAnnotationAnnotation>) nil_chk(methodAnnotation)) annotationType];
      id<RetrofitHttpRestMethod> methodInfo = nil;
      {
        IOSObjectArray *a__ = [((IOSClass *) nil_chk(annotationType)) getAnnotations];
        id<JavaLangAnnotationAnnotation> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<JavaLangAnnotationAnnotation> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaLangAnnotationAnnotation> innerAnnotation = *b__++;
          if (RetrofitHttpRestMethod_class_() == [((id<JavaLangAnnotationAnnotation>) nil_chk(innerAnnotation)) annotationType]) {
            methodInfo = (id<RetrofitHttpRestMethod>) cast_check(innerAnnotation, RetrofitHttpRestMethod_class_());
            break;
          }
        }
      }
      if (methodInfo != nil) {
        if (self->requestMethod_ != nil) {
          @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Only one HTTP method is allowed. Found: %s and %s.", [IOSObjectArray arrayWithObjects:(id[]){ self->requestMethod_, [methodInfo value] } count:2 type:NSObject_class_()]);
        }
        NSString *path;
        @try {
          path = (NSString *) cast_chk([((JavaLangReflectMethod *) nil_chk([annotationType getMethod:@"value" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]])) invokeWithId:methodAnnotation withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NSString class]);
        }
        @catch (JavaLangException *e) {
          @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Failed to extract String 'value' from @%s annotation.", [IOSObjectArray arrayWithObjects:(id[]){ [annotationType getSimpleName] } count:1 type:NSObject_class_()]);
        }
        RetrofitRestMethodInfo_parsePathWithNSString_(self, path);
        JreStrongAssign(&self->requestMethod_, [methodInfo value]);
        self->requestHasBody_ = [methodInfo hasBody];
      }
      else if (annotationType == RetrofitHttpHeaders_class_()) {
        IOSObjectArray *headersToParse = [((id<RetrofitHttpHeaders>) cast_check(methodAnnotation, RetrofitHttpHeaders_class_())) value];
        if (((IOSObjectArray *) nil_chk(headersToParse))->size_ == 0) {
          @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"@Headers annotation is empty.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
        }
        JreStrongAssign(&self->headers_, [self parseHeadersWithNSStringArray:headersToParse]);
      }
      else if (annotationType == RetrofitHttpMultipart_class_()) {
        if (self->requestType_ != JreLoadEnum(RetrofitRestMethodInfo_RequestType, SIMPLE)) {
          @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Only one encoding annotation is allowed.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
        }
        JreStrongAssign(&self->requestType_, JreLoadEnum(RetrofitRestMethodInfo_RequestType, MULTIPART));
      }
      else if (annotationType == RetrofitHttpFormUrlEncoded_class_()) {
        if (self->requestType_ != JreLoadEnum(RetrofitRestMethodInfo_RequestType, SIMPLE)) {
          @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Only one encoding annotation is allowed.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
        }
        JreStrongAssign(&self->requestType_, JreLoadEnum(RetrofitRestMethodInfo_RequestType, FORM_URL_ENCODED));
      }
      else if (annotationType == RetrofitHttpStreaming_class_()) {
        if (self->responseObjectType_ != (id) RetrofitClientResponse_class_()) {
          @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Only methods having %s as data type are allowed to have @%s annotation.", [IOSObjectArray arrayWithObjects:(id[]){ [RetrofitClientResponse_class_() getSimpleName], [RetrofitHttpStreaming_class_() getSimpleName] } count:2 type:NSObject_class_()]);
        }
        self->isStreaming_ = true;
      }
    }
  }
  if (self->requestMethod_ == nil) {
    @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"HTTP method annotation is required (e.g., @GET, @POST, etc.).", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  if (!self->requestHasBody_) {
    if (self->requestType_ == JreLoadEnum(RetrofitRestMethodInfo_RequestType, MULTIPART)) {
      @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Multipart can only be specified on HTTP methods with request body (e.g., @POST).", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
    if (self->requestType_ == JreLoadEnum(RetrofitRestMethodInfo_RequestType, FORM_URL_ENCODED)) {
      @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST).", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
  }
}

void RetrofitRestMethodInfo_parsePathWithNSString_(RetrofitRestMethodInfo *self, NSString *path) {
  if (path == nil || ((jint) [path length]) == 0 || [path charAtWithInt:0] != '/') {
    @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"URL path \"%s\" must start with '/'.", [IOSObjectArray arrayWithObjects:(id[]){ path } count:1 type:NSObject_class_()]);
  }
  NSString *url = path;
  NSString *query = nil;
  jint question = [path java_indexOf:'?'];
  if (question != -1 && question < ((jint) [path length]) - 1) {
    url = [path java_substring:0 endIndex:question];
    query = [path java_substring:question + 1];
    JavaUtilRegexMatcher *queryParamMatcher = [((JavaUtilRegexPattern *) nil_chk(RetrofitRestMethodInfo_PARAM_URL_REGEX)) matcherWithJavaLangCharSequence:query];
    if ([((JavaUtilRegexMatcher *) nil_chk(queryParamMatcher)) find]) {
      @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"URL query string \"%s\" must not have replace block. For dynamic query parameters use @Query.", [IOSObjectArray arrayWithObjects:(id[]){ query } count:1 type:NSObject_class_()]);
    }
  }
  id<JavaUtilSet> urlParams = RetrofitRestMethodInfo_parsePathParametersWithNSString_(path);
  JreStrongAssign(&self->requestUrl_, url);
  JreStrongAssign(&self->requestUrlParamNames_, urlParams);
  JreStrongAssign(&self->requestQuery_, query);
}

RetrofitRestMethodInfo_ResponseType *RetrofitRestMethodInfo_parseResponseType(RetrofitRestMethodInfo *self) {
  id<JavaLangReflectType> returnType = [((JavaLangReflectMethod *) nil_chk(self->method_)) getGenericReturnType];
  id<JavaLangReflectType> lastArgType = nil;
  IOSClass *lastArgClass = nil;
  IOSObjectArray *parameterTypes = [self->method_ getGenericParameterTypes];
  if (((IOSObjectArray *) nil_chk(parameterTypes))->size_ > 0) {
    id<JavaLangReflectType> typeToCheck = IOSObjectArray_Get(parameterTypes, parameterTypes->size_ - 1);
    lastArgType = typeToCheck;
    if ([JavaLangReflectParameterizedType_class_() isInstance:typeToCheck]) {
      typeToCheck = [((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(typeToCheck, JavaLangReflectParameterizedType_class_())))) getRawType];
    }
    if ([typeToCheck isKindOfClass:[IOSClass class]]) {
      lastArgClass = (IOSClass *) cast_chk(typeToCheck, [IOSClass class]);
    }
  }
  jboolean hasReturnType = returnType != (id) [IOSClass voidClass];
  jboolean hasCallback = lastArgClass != nil && [RetrofitCallback_class_() isAssignableFrom:lastArgClass];
  if (hasReturnType && hasCallback) {
    @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Must have return type or Callback as last argument, not both.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  if (!hasReturnType && !hasCallback) {
    @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Must have either a return type or Callback as last argument.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  if (hasReturnType) {
    if (JreLoadStatic(RetrofitPlatform, HAS_RX_JAVA)) {
      IOSClass *rawReturnType = RetrofitTypes_getRawTypeWithJavaLangReflectType_(returnType);
      if (RetrofitRestMethodInfo_RxSupport_isObservableWithIOSClass_(rawReturnType)) {
        returnType = RetrofitRestMethodInfo_RxSupport_getObservableTypeWithJavaLangReflectType_withIOSClass_(returnType, rawReturnType);
        JreStrongAssign(&self->responseObjectType_, RetrofitRestMethodInfo_getParameterUpperBoundWithJavaLangReflectParameterizedType_((id<JavaLangReflectParameterizedType>) cast_check(returnType, JavaLangReflectParameterizedType_class_())));
        return JreLoadEnum(RetrofitRestMethodInfo_ResponseType, OBSERVABLE);
      }
    }
    JreStrongAssign(&self->responseObjectType_, returnType);
    return JreLoadEnum(RetrofitRestMethodInfo_ResponseType, OBJECT);
  }
  lastArgType = RetrofitTypes_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(lastArgType, RetrofitTypes_getRawTypeWithJavaLangReflectType_(lastArgType), RetrofitCallback_class_());
  if ([JavaLangReflectParameterizedType_class_() isInstance:lastArgType]) {
    JreStrongAssign(&self->responseObjectType_, RetrofitRestMethodInfo_getParameterUpperBoundWithJavaLangReflectParameterizedType_((id<JavaLangReflectParameterizedType>) cast_check(lastArgType, JavaLangReflectParameterizedType_class_())));
    return JreLoadEnum(RetrofitRestMethodInfo_ResponseType, VOID);
  }
  @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Last parameter must be of type Callback<X> or Callback<? super X>.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
}

id<JavaLangReflectType> RetrofitRestMethodInfo_getParameterUpperBoundWithJavaLangReflectParameterizedType_(id<JavaLangReflectParameterizedType> type) {
  RetrofitRestMethodInfo_initialize();
  IOSObjectArray *types = [((id<JavaLangReflectParameterizedType>) nil_chk(type)) getActualTypeArguments];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(types))->size_; i++) {
    id<JavaLangReflectType> paramType = IOSObjectArray_Get(types, i);
    if ([JavaLangReflectWildcardType_class_() isInstance:paramType]) {
      IOSObjectArray_Set(types, i, IOSObjectArray_Get(nil_chk([((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(paramType, JavaLangReflectWildcardType_class_())))) getUpperBounds]), 0));
    }
  }
  return IOSObjectArray_Get(types, 0);
}

void RetrofitRestMethodInfo_parseParameters(RetrofitRestMethodInfo *self) {
  IOSObjectArray *methodParameterTypes = [((JavaLangReflectMethod *) nil_chk(self->method_)) getParameterTypes];
  IOSObjectArray *methodParameterAnnotationArrays = [self->method_ getParameterAnnotations];
  jint count = ((IOSObjectArray *) nil_chk(methodParameterAnnotationArrays))->size_;
  if (!self->isSynchronous_ && !self->isObservable_) {
    count -= 1;
  }
  IOSObjectArray *requestParamAnnotations = [IOSObjectArray arrayWithLength:count type:JavaLangAnnotationAnnotation_class_()];
  jboolean gotField = false;
  jboolean gotPart = false;
  jboolean gotBody = false;
  for (jint i = 0; i < count; i++) {
    IOSClass *methodParameterType = IOSObjectArray_Get(nil_chk(methodParameterTypes), i);
    IOSObjectArray *methodParameterAnnotations = IOSObjectArray_Get(methodParameterAnnotationArrays, i);
    if (methodParameterAnnotations != nil) {
      {
        IOSObjectArray *a__ = methodParameterAnnotations;
        id<JavaLangAnnotationAnnotation> const *b__ = a__->buffer_;
        id<JavaLangAnnotationAnnotation> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaLangAnnotationAnnotation> methodParameterAnnotation = *b__++;
          IOSClass *methodAnnotationType = [((id<JavaLangAnnotationAnnotation>) nil_chk(methodParameterAnnotation)) annotationType];
          if (methodAnnotationType == RetrofitHttpPath_class_()) {
            NSString *name = [((id<RetrofitHttpPath>) cast_check(methodParameterAnnotation, RetrofitHttpPath_class_())) value];
            RetrofitRestMethodInfo_validatePathNameWithInt_withNSString_(self, i, name);
          }
          else if (methodAnnotationType == RetrofitHttpEncodedPath_class_()) {
            NSString *name = [((id<RetrofitHttpEncodedPath>) cast_check(methodParameterAnnotation, RetrofitHttpEncodedPath_class_())) value];
            RetrofitRestMethodInfo_validatePathNameWithInt_withNSString_(self, i, name);
          }
          else if (methodAnnotationType == RetrofitHttpQuery_class_()) {
          }
          else if (methodAnnotationType == RetrofitHttpEncodedQuery_class_()) {
          }
          else if (methodAnnotationType == RetrofitHttpQueryMap_class_()) {
            if (![JavaUtilMap_class_() isAssignableFrom:methodParameterType]) {
              @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"@QueryMap parameter type must be Map.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
            }
          }
          else if (methodAnnotationType == RetrofitHttpEncodedQueryMap_class_()) {
            if (![JavaUtilMap_class_() isAssignableFrom:methodParameterType]) {
              @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"@EncodedQueryMap parameter type must be Map.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
            }
          }
          else if (methodAnnotationType == RetrofitHttpHeader_class_()) {
          }
          else if (methodAnnotationType == RetrofitHttpField_class_()) {
            if (self->requestType_ != JreLoadEnum(RetrofitRestMethodInfo_RequestType, FORM_URL_ENCODED)) {
              @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"@Field parameters can only be used with form encoding.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
            }
            gotField = true;
          }
          else if (methodAnnotationType == RetrofitHttpFieldMap_class_()) {
            if (self->requestType_ != JreLoadEnum(RetrofitRestMethodInfo_RequestType, FORM_URL_ENCODED)) {
              @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"@FieldMap parameters can only be used with form encoding.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
            }
            if (![JavaUtilMap_class_() isAssignableFrom:methodParameterType]) {
              @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"@FieldMap parameter type must be Map.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
            }
            gotField = true;
          }
          else if (methodAnnotationType == RetrofitHttpPart_class_()) {
            if (self->requestType_ != JreLoadEnum(RetrofitRestMethodInfo_RequestType, MULTIPART)) {
              @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"@Part parameters can only be used with multipart encoding.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
            }
            gotPart = true;
          }
          else if (methodAnnotationType == RetrofitHttpPartMap_class_()) {
            if (self->requestType_ != JreLoadEnum(RetrofitRestMethodInfo_RequestType, MULTIPART)) {
              @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"@PartMap parameters can only be used with multipart encoding.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
            }
            if (![JavaUtilMap_class_() isAssignableFrom:methodParameterType]) {
              @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"@PartMap parameter type must be Map.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
            }
            gotPart = true;
          }
          else if (methodAnnotationType == RetrofitHttpBody_class_()) {
            if (self->requestType_ != JreLoadEnum(RetrofitRestMethodInfo_RequestType, SIMPLE)) {
              @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"@Body parameters cannot be used with form or multi-part encoding.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
            }
            if (gotBody) {
              @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Multiple @Body method annotations found.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
            }
            gotBody = true;
          }
          else {
            continue;
          }
          if (IOSObjectArray_Get(requestParamAnnotations, i) != nil) {
            @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"Multiple Retrofit annotations found, only one allowed: @%s, @%s.", [IOSObjectArray arrayWithObjects:(id[]){ [((IOSClass *) nil_chk([((id<JavaLangAnnotationAnnotation>) nil_chk(IOSObjectArray_Get(requestParamAnnotations, i))) annotationType])) getSimpleName], [((IOSClass *) nil_chk(methodAnnotationType)) getSimpleName] } count:2 type:NSObject_class_()]);
          }
          IOSObjectArray_Set(requestParamAnnotations, i, methodParameterAnnotation);
        }
      }
    }
    if (IOSObjectArray_Get(requestParamAnnotations, i) == nil) {
      @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, i, @"No Retrofit annotation found.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
  }
  if (self->requestType_ == JreLoadEnum(RetrofitRestMethodInfo_RequestType, SIMPLE) && !self->requestHasBody_ && gotBody) {
    @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Non-body HTTP method cannot contain @Body or @TypedOutput.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  if (self->requestType_ == JreLoadEnum(RetrofitRestMethodInfo_RequestType, FORM_URL_ENCODED) && !gotField) {
    @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Form-encoded method must contain at least one @Field.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  if (self->requestType_ == JreLoadEnum(RetrofitRestMethodInfo_RequestType, MULTIPART) && !gotPart) {
    @throw RetrofitRestMethodInfo_methodErrorWithNSString_withNSObjectArray_(self, @"Multipart method must contain at least one @Part.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  JreStrongAssign(&self->requestParamAnnotations_, requestParamAnnotations);
}

void RetrofitRestMethodInfo_validatePathNameWithInt_withNSString_(RetrofitRestMethodInfo *self, jint index, NSString *name) {
  if (![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(RetrofitRestMethodInfo_PARAM_NAME_REGEX)) matcherWithJavaLangCharSequence:name])) matches]) {
    @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, index, @"@Path parameter name must match %s. Found: %s", [IOSObjectArray arrayWithObjects:(id[]){ [((JavaUtilRegexPattern *) nil_chk(RetrofitRestMethodInfo_PARAM_URL_REGEX)) pattern], name } count:2 type:NSObject_class_()]);
  }
  if (![((id<JavaUtilSet>) nil_chk(self->requestUrlParamNames_)) containsWithId:name]) {
    @throw RetrofitRestMethodInfo_parameterErrorWithInt_withNSString_withNSObjectArray_(self, index, @"URL \"%s\" does not contain \"{%s}\".", [IOSObjectArray arrayWithObjects:(id[]){ self->requestUrl_, name } count:2 type:NSObject_class_()]);
  }
}

id<JavaUtilSet> RetrofitRestMethodInfo_parsePathParametersWithNSString_(NSString *path) {
  RetrofitRestMethodInfo_initialize();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(RetrofitRestMethodInfo_PARAM_URL_REGEX)) matcherWithJavaLangCharSequence:path];
  id<JavaUtilSet> patterns = create_JavaUtilLinkedHashSet_init();
  while ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    [patterns addWithId:[m groupWithInt:1]];
  }
  return patterns;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitRestMethodInfo)

J2OBJC_INITIALIZED_DEFN(RetrofitRestMethodInfo_ResponseType)

RetrofitRestMethodInfo_ResponseType *RetrofitRestMethodInfo_ResponseType_values_[3];

@implementation RetrofitRestMethodInfo_ResponseType

+ (IOSObjectArray *)values {
  return RetrofitRestMethodInfo_ResponseType_values();
}

+ (RetrofitRestMethodInfo_ResponseType *)valueOfWithNSString:(NSString *)name {
  return RetrofitRestMethodInfo_ResponseType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LRetrofitRestMethodInfo_ResponseType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofitRestMethodInfo_ResponseType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VOID", "LRetrofitRestMethodInfo_ResponseType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "OBSERVABLE", "LRetrofitRestMethodInfo_ResponseType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "OBJECT", "LRetrofitRestMethodInfo_ResponseType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(RetrofitRestMethodInfo_ResponseType, VOID), &JreEnum(RetrofitRestMethodInfo_ResponseType, OBSERVABLE), &JreEnum(RetrofitRestMethodInfo_ResponseType, OBJECT), "LRetrofitRestMethodInfo;", "Ljava/lang/Enum<Lretrofit/RestMethodInfo$ResponseType;>;" };
  static const J2ObjcClassInfo _RetrofitRestMethodInfo_ResponseType = { "ResponseType", "retrofit", ptrTable, methods, fields, 7, 0x401a, 2, 3, 5, -1, -1, 6, -1 };
  return &_RetrofitRestMethodInfo_ResponseType;
}

+ (void)initialize {
  if (self == [RetrofitRestMethodInfo_ResponseType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"VOID", @"OBSERVABLE", @"OBJECT",
    };
    for (jint i = 0; i < 3; i++) {
      (RetrofitRestMethodInfo_ResponseType_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      RetrofitRestMethodInfo_ResponseType_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(RetrofitRestMethodInfo_ResponseType)
  }
}

@end

void RetrofitRestMethodInfo_ResponseType_initWithNSString_withInt_(RetrofitRestMethodInfo_ResponseType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *RetrofitRestMethodInfo_ResponseType_values() {
  RetrofitRestMethodInfo_ResponseType_initialize();
  return [IOSObjectArray arrayWithObjects:RetrofitRestMethodInfo_ResponseType_values_ count:3 type:RetrofitRestMethodInfo_ResponseType_class_()];
}

RetrofitRestMethodInfo_ResponseType *RetrofitRestMethodInfo_ResponseType_valueOfWithNSString_(NSString *name) {
  RetrofitRestMethodInfo_ResponseType_initialize();
  for (int i = 0; i < 3; i++) {
    RetrofitRestMethodInfo_ResponseType *e = RetrofitRestMethodInfo_ResponseType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RetrofitRestMethodInfo_ResponseType *RetrofitRestMethodInfo_ResponseType_fromOrdinal(NSUInteger ordinal) {
  RetrofitRestMethodInfo_ResponseType_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return RetrofitRestMethodInfo_ResponseType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitRestMethodInfo_ResponseType)

J2OBJC_INITIALIZED_DEFN(RetrofitRestMethodInfo_RequestType)

RetrofitRestMethodInfo_RequestType *RetrofitRestMethodInfo_RequestType_values_[3];

@implementation RetrofitRestMethodInfo_RequestType

+ (IOSObjectArray *)values {
  return RetrofitRestMethodInfo_RequestType_values();
}

+ (RetrofitRestMethodInfo_RequestType *)valueOfWithNSString:(NSString *)name {
  return RetrofitRestMethodInfo_RequestType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LRetrofitRestMethodInfo_RequestType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofitRestMethodInfo_RequestType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SIMPLE", "LRetrofitRestMethodInfo_RequestType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "MULTIPART", "LRetrofitRestMethodInfo_RequestType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "FORM_URL_ENCODED", "LRetrofitRestMethodInfo_RequestType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(RetrofitRestMethodInfo_RequestType, SIMPLE), &JreEnum(RetrofitRestMethodInfo_RequestType, MULTIPART), &JreEnum(RetrofitRestMethodInfo_RequestType, FORM_URL_ENCODED), "LRetrofitRestMethodInfo;", "Ljava/lang/Enum<Lretrofit/RestMethodInfo$RequestType;>;" };
  static const J2ObjcClassInfo _RetrofitRestMethodInfo_RequestType = { "RequestType", "retrofit", ptrTable, methods, fields, 7, 0x4018, 2, 3, 5, -1, -1, 6, -1 };
  return &_RetrofitRestMethodInfo_RequestType;
}

+ (void)initialize {
  if (self == [RetrofitRestMethodInfo_RequestType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"SIMPLE", @"MULTIPART", @"FORM_URL_ENCODED",
    };
    for (jint i = 0; i < 3; i++) {
      (RetrofitRestMethodInfo_RequestType_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      RetrofitRestMethodInfo_RequestType_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(RetrofitRestMethodInfo_RequestType)
  }
}

@end

void RetrofitRestMethodInfo_RequestType_initWithNSString_withInt_(RetrofitRestMethodInfo_RequestType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *RetrofitRestMethodInfo_RequestType_values() {
  RetrofitRestMethodInfo_RequestType_initialize();
  return [IOSObjectArray arrayWithObjects:RetrofitRestMethodInfo_RequestType_values_ count:3 type:RetrofitRestMethodInfo_RequestType_class_()];
}

RetrofitRestMethodInfo_RequestType *RetrofitRestMethodInfo_RequestType_valueOfWithNSString_(NSString *name) {
  RetrofitRestMethodInfo_RequestType_initialize();
  for (int i = 0; i < 3; i++) {
    RetrofitRestMethodInfo_RequestType *e = RetrofitRestMethodInfo_RequestType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RetrofitRestMethodInfo_RequestType *RetrofitRestMethodInfo_RequestType_fromOrdinal(NSUInteger ordinal) {
  RetrofitRestMethodInfo_RequestType_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return RetrofitRestMethodInfo_RequestType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitRestMethodInfo_RequestType)

@implementation RetrofitRestMethodInfo_RxSupport

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitRestMethodInfo_RxSupport_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isObservableWithIOSClass:(IOSClass *)rawType {
  return RetrofitRestMethodInfo_RxSupport_isObservableWithIOSClass_(rawType);
}

+ (id<JavaLangReflectType>)getObservableTypeWithJavaLangReflectType:(id<JavaLangReflectType>)contextType
                                                       withIOSClass:(IOSClass *)contextRawType {
  return RetrofitRestMethodInfo_RxSupport_getObservableTypeWithJavaLangReflectType_withIOSClass_(contextType, contextRawType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isObservableWithIOSClass:);
  methods[2].selector = @selector(getObservableTypeWithJavaLangReflectType:withIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isObservable", "LIOSClass;", "getObservableType", "LJavaLangReflectType;LIOSClass;", "LRetrofitRestMethodInfo;" };
  static const J2ObjcClassInfo _RetrofitRestMethodInfo_RxSupport = { "RxSupport", "retrofit", ptrTable, methods, NULL, 7, 0x1a, 3, 0, 4, -1, -1, -1, -1 };
  return &_RetrofitRestMethodInfo_RxSupport;
}

@end

void RetrofitRestMethodInfo_RxSupport_init(RetrofitRestMethodInfo_RxSupport *self) {
  NSObject_init(self);
}

RetrofitRestMethodInfo_RxSupport *new_RetrofitRestMethodInfo_RxSupport_init() {
  J2OBJC_NEW_IMPL(RetrofitRestMethodInfo_RxSupport, init)
}

RetrofitRestMethodInfo_RxSupport *create_RetrofitRestMethodInfo_RxSupport_init() {
  J2OBJC_CREATE_IMPL(RetrofitRestMethodInfo_RxSupport, init)
}

jboolean RetrofitRestMethodInfo_RxSupport_isObservableWithIOSClass_(IOSClass *rawType) {
  RetrofitRestMethodInfo_RxSupport_initialize();
  return rawType == RxObservable_class_();
}

id<JavaLangReflectType> RetrofitRestMethodInfo_RxSupport_getObservableTypeWithJavaLangReflectType_withIOSClass_(id<JavaLangReflectType> contextType, IOSClass *contextRawType) {
  RetrofitRestMethodInfo_RxSupport_initialize();
  return RetrofitTypes_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(contextType, contextRawType, RxObservable_class_());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitRestMethodInfo_RxSupport)
