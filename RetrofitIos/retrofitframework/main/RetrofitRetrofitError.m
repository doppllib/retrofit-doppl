//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/main/java/retrofit/RetrofitError.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RetrofitClientResponse.h"
#include "RetrofitConverterConversionException.h"
#include "RetrofitConverterConverter.h"
#include "RetrofitMimeTypedInput.h"
#include "RetrofitRetrofitError.h"
#include "java/io/IOException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Type.h"

@interface RetrofitRetrofitError () {
 @public
  NSString *url_;
  RetrofitClientResponse *response_;
  id<RetrofitConverterConverter> converter_;
  id<JavaLangReflectType> successType_;
  RetrofitRetrofitError_Kind *kind_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitRetrofitError, url_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitRetrofitError, response_, RetrofitClientResponse *)
J2OBJC_FIELD_SETTER(RetrofitRetrofitError, converter_, id<RetrofitConverterConverter>)
J2OBJC_FIELD_SETTER(RetrofitRetrofitError, successType_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(RetrofitRetrofitError, kind_, RetrofitRetrofitError_Kind *)

__attribute__((unused)) static IOSObjectArray *RetrofitRetrofitError__Annotations$0();

__attribute__((unused)) static void RetrofitRetrofitError_Kind_initWithNSString_withInt_(RetrofitRetrofitError_Kind *self, NSString *__name, jint __ordinal);

@implementation RetrofitRetrofitError

+ (RetrofitRetrofitError *)networkErrorWithNSString:(NSString *)url
                              withJavaIoIOException:(JavaIoIOException *)exception {
  return RetrofitRetrofitError_networkErrorWithNSString_withJavaIoIOException_(url, exception);
}

+ (RetrofitRetrofitError *)conversionErrorWithNSString:(NSString *)url
                            withRetrofitClientResponse:(RetrofitClientResponse *)response
                        withRetrofitConverterConverter:(id<RetrofitConverterConverter>)converter
                               withJavaLangReflectType:(id<JavaLangReflectType>)successType
              withRetrofitConverterConversionException:(RetrofitConverterConversionException *)exception {
  return RetrofitRetrofitError_conversionErrorWithNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitConverterConversionException_(url, response, converter, successType, exception);
}

+ (RetrofitRetrofitError *)httpErrorWithNSString:(NSString *)url
                      withRetrofitClientResponse:(RetrofitClientResponse *)response
                  withRetrofitConverterConverter:(id<RetrofitConverterConverter>)converter
                         withJavaLangReflectType:(id<JavaLangReflectType>)successType {
  return RetrofitRetrofitError_httpErrorWithNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_(url, response, converter, successType);
}

+ (RetrofitRetrofitError *)unexpectedErrorWithNSString:(NSString *)url
                                       withNSException:(NSException *)exception {
  return RetrofitRetrofitError_unexpectedErrorWithNSString_withNSException_(url, exception);
}

- (instancetype)initWithNSString:(NSString *)message
                    withNSString:(NSString *)url
      withRetrofitClientResponse:(RetrofitClientResponse *)response
  withRetrofitConverterConverter:(id<RetrofitConverterConverter>)converter
         withJavaLangReflectType:(id<JavaLangReflectType>)successType
  withRetrofitRetrofitError_Kind:(RetrofitRetrofitError_Kind *)kind
                 withNSException:(NSException *)exception {
  RetrofitRetrofitError_initWithNSString_withNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitRetrofitError_Kind_withNSException_(self, message, url, response, converter, successType, kind, exception);
  return self;
}

- (NSString *)getUrl {
  return url_;
}

- (RetrofitClientResponse *)getResponse {
  return response_;
}

- (jboolean)isNetworkError {
  return kind_ == JreLoadEnum(RetrofitRetrofitError_Kind, NETWORK);
}

- (RetrofitRetrofitError_Kind *)getKind {
  return kind_;
}

- (id)getBody {
  return [self getBodyAsWithJavaLangReflectType:successType_];
}

- (id<JavaLangReflectType>)getSuccessType {
  return successType_;
}

- (id)getBodyAsWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  if (response_ == nil) {
    return nil;
  }
  id<RetrofitMimeTypedInput> body = [response_ getBody];
  if (body == nil) {
    return nil;
  }
  @try {
    return [((id<RetrofitConverterConverter>) nil_chk(converter_)) fromBodyWithRetrofitMimeTypedInput:body withJavaLangReflectType:type];
  }
  @catch (RetrofitConverterConversionException *e) {
    @throw create_JavaLangRuntimeException_initWithNSException_(e);
  }
}

- (void)dealloc {
  RELEASE_(url_);
  RELEASE_(response_);
  RELEASE_(converter_);
  RELEASE_(successType_);
  RELEASE_(kind_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRetrofitRetrofitError;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LRetrofitRetrofitError;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LRetrofitRetrofitError;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LRetrofitRetrofitError;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofitClientResponse;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "LRetrofitRetrofitError_Kind;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(networkErrorWithNSString:withJavaIoIOException:);
  methods[1].selector = @selector(conversionErrorWithNSString:withRetrofitClientResponse:withRetrofitConverterConverter:withJavaLangReflectType:withRetrofitConverterConversionException:);
  methods[2].selector = @selector(httpErrorWithNSString:withRetrofitClientResponse:withRetrofitConverterConverter:withJavaLangReflectType:);
  methods[3].selector = @selector(unexpectedErrorWithNSString:withNSException:);
  methods[4].selector = @selector(initWithNSString:withNSString:withRetrofitClientResponse:withRetrofitConverterConverter:withJavaLangReflectType:withRetrofitRetrofitError_Kind:withNSException:);
  methods[5].selector = @selector(getUrl);
  methods[6].selector = @selector(getResponse);
  methods[7].selector = @selector(isNetworkError);
  methods[8].selector = @selector(getKind);
  methods[9].selector = @selector(getBody);
  methods[10].selector = @selector(getSuccessType);
  methods[11].selector = @selector(getBodyAsWithJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "url_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "response_", "LRetrofitClientResponse;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "converter_", "LRetrofitConverterConverter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "successType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "kind_", "LRetrofitRetrofitError_Kind;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "networkError", "LNSString;LJavaIoIOException;", "conversionError", "LNSString;LRetrofitClientResponse;LRetrofitConverterConverter;LJavaLangReflectType;LRetrofitConverterConversionException;", "httpError", "LNSString;LRetrofitClientResponse;LRetrofitConverterConverter;LJavaLangReflectType;", "unexpectedError", "LNSString;LNSException;", "LNSString;LNSString;LRetrofitClientResponse;LRetrofitConverterConverter;LJavaLangReflectType;LRetrofitRetrofitError_Kind;LNSException;", (void *)&RetrofitRetrofitError__Annotations$0, "getBodyAs", "LJavaLangReflectType;", "LRetrofitRetrofitError_Kind;" };
  static const J2ObjcClassInfo _RetrofitRetrofitError = { "RetrofitError", "retrofit", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, 12, -1, -1, -1 };
  return &_RetrofitRetrofitError;
}

@end

RetrofitRetrofitError *RetrofitRetrofitError_networkErrorWithNSString_withJavaIoIOException_(NSString *url, JavaIoIOException *exception) {
  RetrofitRetrofitError_initialize();
  return create_RetrofitRetrofitError_initWithNSString_withNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitRetrofitError_Kind_withNSException_([((JavaIoIOException *) nil_chk(exception)) getMessage], url, nil, nil, nil, JreLoadEnum(RetrofitRetrofitError_Kind, NETWORK), exception);
}

RetrofitRetrofitError *RetrofitRetrofitError_conversionErrorWithNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitConverterConversionException_(NSString *url, RetrofitClientResponse *response, id<RetrofitConverterConverter> converter, id<JavaLangReflectType> successType, RetrofitConverterConversionException *exception) {
  RetrofitRetrofitError_initialize();
  return create_RetrofitRetrofitError_initWithNSString_withNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitRetrofitError_Kind_withNSException_([((RetrofitConverterConversionException *) nil_chk(exception)) getMessage], url, response, converter, successType, JreLoadEnum(RetrofitRetrofitError_Kind, CONVERSION), exception);
}

RetrofitRetrofitError *RetrofitRetrofitError_httpErrorWithNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_(NSString *url, RetrofitClientResponse *response, id<RetrofitConverterConverter> converter, id<JavaLangReflectType> successType) {
  RetrofitRetrofitError_initialize();
  NSString *message = JreStrcat("IC$", [((RetrofitClientResponse *) nil_chk(response)) getStatus], ' ', [response getReason]);
  return create_RetrofitRetrofitError_initWithNSString_withNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitRetrofitError_Kind_withNSException_(message, url, response, converter, successType, JreLoadEnum(RetrofitRetrofitError_Kind, HTTP), nil);
}

RetrofitRetrofitError *RetrofitRetrofitError_unexpectedErrorWithNSString_withNSException_(NSString *url, NSException *exception) {
  RetrofitRetrofitError_initialize();
  return create_RetrofitRetrofitError_initWithNSString_withNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitRetrofitError_Kind_withNSException_([((NSException *) nil_chk(exception)) getMessage], url, nil, nil, nil, JreLoadEnum(RetrofitRetrofitError_Kind, UNEXPECTED), exception);
}

void RetrofitRetrofitError_initWithNSString_withNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitRetrofitError_Kind_withNSException_(RetrofitRetrofitError *self, NSString *message, NSString *url, RetrofitClientResponse *response, id<RetrofitConverterConverter> converter, id<JavaLangReflectType> successType, RetrofitRetrofitError_Kind *kind, NSException *exception) {
  JavaLangRuntimeException_initWithNSString_withNSException_(self, message, exception);
  JreStrongAssign(&self->url_, url);
  JreStrongAssign(&self->response_, response);
  JreStrongAssign(&self->converter_, converter);
  JreStrongAssign(&self->successType_, successType);
  JreStrongAssign(&self->kind_, kind);
}

RetrofitRetrofitError *new_RetrofitRetrofitError_initWithNSString_withNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitRetrofitError_Kind_withNSException_(NSString *message, NSString *url, RetrofitClientResponse *response, id<RetrofitConverterConverter> converter, id<JavaLangReflectType> successType, RetrofitRetrofitError_Kind *kind, NSException *exception) {
  J2OBJC_NEW_IMPL(RetrofitRetrofitError, initWithNSString_withNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitRetrofitError_Kind_withNSException_, message, url, response, converter, successType, kind, exception)
}

RetrofitRetrofitError *create_RetrofitRetrofitError_initWithNSString_withNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitRetrofitError_Kind_withNSException_(NSString *message, NSString *url, RetrofitClientResponse *response, id<RetrofitConverterConverter> converter, id<JavaLangReflectType> successType, RetrofitRetrofitError_Kind *kind, NSException *exception) {
  J2OBJC_CREATE_IMPL(RetrofitRetrofitError, initWithNSString_withNSString_withRetrofitClientResponse_withRetrofitConverterConverter_withJavaLangReflectType_withRetrofitRetrofitError_Kind_withNSException_, message, url, response, converter, successType, kind, exception)
}

IOSObjectArray *RetrofitRetrofitError__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitRetrofitError)

J2OBJC_INITIALIZED_DEFN(RetrofitRetrofitError_Kind)

RetrofitRetrofitError_Kind *RetrofitRetrofitError_Kind_values_[4];

@implementation RetrofitRetrofitError_Kind

+ (IOSObjectArray *)values {
  return RetrofitRetrofitError_Kind_values();
}

+ (RetrofitRetrofitError_Kind *)valueOfWithNSString:(NSString *)name {
  return RetrofitRetrofitError_Kind_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LRetrofitRetrofitError_Kind;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofitRetrofitError_Kind;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NETWORK", "LRetrofitRetrofitError_Kind;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "CONVERSION", "LRetrofitRetrofitError_Kind;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "HTTP", "LRetrofitRetrofitError_Kind;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "UNEXPECTED", "LRetrofitRetrofitError_Kind;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(RetrofitRetrofitError_Kind, NETWORK), &JreEnum(RetrofitRetrofitError_Kind, CONVERSION), &JreEnum(RetrofitRetrofitError_Kind, HTTP), &JreEnum(RetrofitRetrofitError_Kind, UNEXPECTED), "LRetrofitRetrofitError;", "Ljava/lang/Enum<Lretrofit/RetrofitError$Kind;>;" };
  static const J2ObjcClassInfo _RetrofitRetrofitError_Kind = { "Kind", "retrofit", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_RetrofitRetrofitError_Kind;
}

+ (void)initialize {
  if (self == [RetrofitRetrofitError_Kind class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"NETWORK", @"CONVERSION", @"HTTP", @"UNEXPECTED",
    };
    for (jint i = 0; i < 4; i++) {
      (RetrofitRetrofitError_Kind_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      RetrofitRetrofitError_Kind_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(RetrofitRetrofitError_Kind)
  }
}

@end

void RetrofitRetrofitError_Kind_initWithNSString_withInt_(RetrofitRetrofitError_Kind *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *RetrofitRetrofitError_Kind_values() {
  RetrofitRetrofitError_Kind_initialize();
  return [IOSObjectArray arrayWithObjects:RetrofitRetrofitError_Kind_values_ count:4 type:RetrofitRetrofitError_Kind_class_()];
}

RetrofitRetrofitError_Kind *RetrofitRetrofitError_Kind_valueOfWithNSString_(NSString *name) {
  RetrofitRetrofitError_Kind_initialize();
  for (int i = 0; i < 4; i++) {
    RetrofitRetrofitError_Kind *e = RetrofitRetrofitError_Kind_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

RetrofitRetrofitError_Kind *RetrofitRetrofitError_Kind_fromOrdinal(NSUInteger ordinal) {
  RetrofitRetrofitError_Kind_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return RetrofitRetrofitError_Kind_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitRetrofitError_Kind)
