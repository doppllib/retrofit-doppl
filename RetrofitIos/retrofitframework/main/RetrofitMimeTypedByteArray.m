//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/main/java/retrofit/mime/TypedByteArray.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RetrofitMimeTypedByteArray.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Arrays.h"

@interface RetrofitMimeTypedByteArray () {
 @public
  NSString *mimeType_;
  IOSByteArray *bytes_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitMimeTypedByteArray, mimeType_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitMimeTypedByteArray, bytes_, IOSByteArray *)

@implementation RetrofitMimeTypedByteArray

- (instancetype)initWithNSString:(NSString *)mimeType
                   withByteArray:(IOSByteArray *)bytes {
  RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(self, mimeType, bytes);
  return self;
}

- (IOSByteArray *)getBytes {
  return bytes_;
}

- (NSString *)fileName {
  return nil;
}

- (NSString *)mimeType {
  return mimeType_;
}

- (jlong)length {
  return ((IOSByteArray *) nil_chk(bytes_))->size_;
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:bytes_];
}

- (JavaIoInputStream *)in {
  return create_JavaIoByteArrayInputStream_initWithByteArray_(bytes_);
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  RetrofitMimeTypedByteArray *that = (RetrofitMimeTypedByteArray *) cast_chk(o, [RetrofitMimeTypedByteArray class]);
  if (!JavaUtilArrays_equalsWithByteArray_withByteArray_(bytes_, that->bytes_)) return false;
  if (![((NSString *) nil_chk(mimeType_)) isEqual:that->mimeType_]) return false;
  return true;
}

- (NSUInteger)hash {
  jint result = ((jint) [((NSString *) nil_chk(mimeType_)) hash]);
  result = 31 * result + JavaUtilArrays_hashCodeWithByteArray_(bytes_);
  return result;
}

- (NSString *)description {
  return JreStrcat("$JC", @"TypedByteArray[length=", [self length], ']');
}

- (void)dealloc {
  RELEASE_(mimeType_);
  RELEASE_(bytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withByteArray:);
  methods[1].selector = @selector(getBytes);
  methods[2].selector = @selector(fileName);
  methods[3].selector = @selector(mimeType);
  methods[4].selector = @selector(length);
  methods[5].selector = @selector(writeToWithJavaIoOutputStream:);
  methods[6].selector = @selector(in);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mimeType_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bytes_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[B", "writeTo", "LJavaIoOutputStream;", "LJavaIoIOException;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _RetrofitMimeTypedByteArray = { "TypedByteArray", "retrofit.mime", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, -1, -1, -1, -1 };
  return &_RetrofitMimeTypedByteArray;
}

@end

void RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(RetrofitMimeTypedByteArray *self, NSString *mimeType, IOSByteArray *bytes) {
  NSObject_init(self);
  if (mimeType == nil) {
    mimeType = @"application/unknown";
  }
  if (bytes == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"bytes");
  }
  JreStrongAssign(&self->mimeType_, mimeType);
  JreStrongAssign(&self->bytes_, bytes);
}

RetrofitMimeTypedByteArray *new_RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(NSString *mimeType, IOSByteArray *bytes) {
  J2OBJC_NEW_IMPL(RetrofitMimeTypedByteArray, initWithNSString_withByteArray_, mimeType, bytes)
}

RetrofitMimeTypedByteArray *create_RetrofitMimeTypedByteArray_initWithNSString_withByteArray_(NSString *mimeType, IOSByteArray *bytes) {
  J2OBJC_CREATE_IMPL(RetrofitMimeTypedByteArray, initWithNSString_withByteArray_, mimeType, bytes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitMimeTypedByteArray)
