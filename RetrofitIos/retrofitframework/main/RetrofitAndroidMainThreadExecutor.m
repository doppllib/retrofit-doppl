//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/main/java/retrofit/android/MainThreadExecutor.java
//

#include "J2ObjC_source.h"
#include "RetrofitAndroidMainThreadExecutor.h"
#include "java/lang/Runnable.h"

@implementation RetrofitAndroidMainThreadExecutor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitAndroidMainThreadExecutor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  [[NSOperationQueue mainQueue] addOperation:[NSBlockOperation blockOperationWithBlock:^{
    [r run];
  }]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;" };
  static const J2ObjcClassInfo _RetrofitAndroidMainThreadExecutor = { "MainThreadExecutor", "retrofit.android", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, -1, -1, -1, -1 };
  return &_RetrofitAndroidMainThreadExecutor;
}

@end

void RetrofitAndroidMainThreadExecutor_init(RetrofitAndroidMainThreadExecutor *self) {
  NSObject_init(self);
}

RetrofitAndroidMainThreadExecutor *new_RetrofitAndroidMainThreadExecutor_init() {
  J2OBJC_NEW_IMPL(RetrofitAndroidMainThreadExecutor, init)
}

RetrofitAndroidMainThreadExecutor *create_RetrofitAndroidMainThreadExecutor_init() {
  J2OBJC_CREATE_IMPL(RetrofitAndroidMainThreadExecutor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitAndroidMainThreadExecutor)
