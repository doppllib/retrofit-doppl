//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/retrofit-doppl/retrofit/src/main/java/retrofit/ExceptionCatchingTypedInput.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RetrofitExceptionCatchingTypedInput.h"
#include "RetrofitMimeTypedInput.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"

@class RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream;

@interface RetrofitExceptionCatchingTypedInput () {
 @public
  id<RetrofitMimeTypedInput> delegate_;
  RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *delegateStream_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitExceptionCatchingTypedInput, delegate_, id<RetrofitMimeTypedInput>)
J2OBJC_FIELD_SETTER(RetrofitExceptionCatchingTypedInput, delegateStream_, RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *)

@interface RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream : JavaIoInputStream {
 @public
  JavaIoInputStream *delegate_;
  JavaIoIOException *thrownException_;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)delegate;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)buffer;

- (jint)readWithByteArray:(IOSByteArray *)buffer
                  withInt:(jint)offset
                  withInt:(jint)length;

- (jlong)skipWithLong:(jlong)byteCount;

- (jint)available;

- (void)close;

- (void)markWithInt:(jint)readLimit;

- (void)reset;

- (jboolean)markSupported;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream)

J2OBJC_FIELD_SETTER(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream, delegate_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream, thrownException_, JavaIoIOException *)

__attribute__((unused)) static void RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *self, JavaIoInputStream *delegate);

__attribute__((unused)) static RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *new_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(JavaIoInputStream *delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *create_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(JavaIoInputStream *delegate);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream)

@implementation RetrofitExceptionCatchingTypedInput

- (instancetype)initWithRetrofitMimeTypedInput:(id<RetrofitMimeTypedInput>)delegate {
  RetrofitExceptionCatchingTypedInput_initWithRetrofitMimeTypedInput_(self, delegate);
  return self;
}

- (NSString *)mimeType {
  return [((id<RetrofitMimeTypedInput>) nil_chk(delegate_)) mimeType];
}

- (jlong)length {
  return [((id<RetrofitMimeTypedInput>) nil_chk(delegate_)) length];
}

- (JavaIoInputStream *)in {
  return delegateStream_;
}

- (JavaIoIOException *)getThrownException {
  return ((RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *) nil_chk(delegateStream_))->thrownException_;
}

- (jboolean)threwException {
  return ((RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *) nil_chk(delegateStream_))->thrownException_ != nil;
}

- (void)dealloc {
  RELEASE_(delegate_);
  RELEASE_(delegateStream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofitMimeTypedInput:);
  methods[1].selector = @selector(mimeType);
  methods[2].selector = @selector(length);
  methods[3].selector = @selector(in);
  methods[4].selector = @selector(getThrownException);
  methods[5].selector = @selector(threwException);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LRetrofitMimeTypedInput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "delegateStream_", "LRetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRetrofitMimeTypedInput;", "LJavaIoIOException;", "LRetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream;" };
  static const J2ObjcClassInfo _RetrofitExceptionCatchingTypedInput = { "ExceptionCatchingTypedInput", "retrofit", ptrTable, methods, fields, 7, 0x0, 6, 2, -1, 2, -1, -1, -1 };
  return &_RetrofitExceptionCatchingTypedInput;
}

@end

void RetrofitExceptionCatchingTypedInput_initWithRetrofitMimeTypedInput_(RetrofitExceptionCatchingTypedInput *self, id<RetrofitMimeTypedInput> delegate) {
  NSObject_init(self);
  JreStrongAssign(&self->delegate_, delegate);
  JreStrongAssignAndConsume(&self->delegateStream_, new_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_([((id<RetrofitMimeTypedInput>) nil_chk(delegate)) in]));
}

RetrofitExceptionCatchingTypedInput *new_RetrofitExceptionCatchingTypedInput_initWithRetrofitMimeTypedInput_(id<RetrofitMimeTypedInput> delegate) {
  J2OBJC_NEW_IMPL(RetrofitExceptionCatchingTypedInput, initWithRetrofitMimeTypedInput_, delegate)
}

RetrofitExceptionCatchingTypedInput *create_RetrofitExceptionCatchingTypedInput_initWithRetrofitMimeTypedInput_(id<RetrofitMimeTypedInput> delegate) {
  J2OBJC_CREATE_IMPL(RetrofitExceptionCatchingTypedInput, initWithRetrofitMimeTypedInput_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitExceptionCatchingTypedInput)

@implementation RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)delegate {
  RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(self, delegate);
  return self;
}

- (jint)read {
  @try {
    return [((JavaIoInputStream *) nil_chk(delegate_)) read];
  }
  @catch (JavaIoIOException *e) {
    JreStrongAssign(&thrownException_, e);
    @throw e;
  }
}

- (jint)readWithByteArray:(IOSByteArray *)buffer {
  @try {
    return [((JavaIoInputStream *) nil_chk(delegate_)) readWithByteArray:buffer];
  }
  @catch (JavaIoIOException *e) {
    JreStrongAssign(&thrownException_, e);
    @throw e;
  }
}

- (jint)readWithByteArray:(IOSByteArray *)buffer
                  withInt:(jint)offset
                  withInt:(jint)length {
  @try {
    return [((JavaIoInputStream *) nil_chk(delegate_)) readWithByteArray:buffer withInt:offset withInt:length];
  }
  @catch (JavaIoIOException *e) {
    JreStrongAssign(&thrownException_, e);
    @throw e;
  }
}

- (jlong)skipWithLong:(jlong)byteCount {
  @try {
    return [((JavaIoInputStream *) nil_chk(delegate_)) skipWithLong:byteCount];
  }
  @catch (JavaIoIOException *e) {
    JreStrongAssign(&thrownException_, e);
    @throw e;
  }
}

- (jint)available {
  @try {
    return [((JavaIoInputStream *) nil_chk(delegate_)) available];
  }
  @catch (JavaIoIOException *e) {
    JreStrongAssign(&thrownException_, e);
    @throw e;
  }
}

- (void)close {
  @try {
    [((JavaIoInputStream *) nil_chk(delegate_)) close];
  }
  @catch (JavaIoIOException *e) {
    JreStrongAssign(&thrownException_, e);
    @throw e;
  }
}

- (void)markWithInt:(jint)readLimit {
  @synchronized(self) {
    [((JavaIoInputStream *) nil_chk(delegate_)) markWithInt:readLimit];
  }
}

- (void)reset {
  @synchronized(self) {
    @try {
      [((JavaIoInputStream *) nil_chk(delegate_)) reset];
    }
    @catch (JavaIoIOException *e) {
      JreStrongAssign(&thrownException_, e);
      @throw e;
    }
  }
}

- (jboolean)markSupported {
  return [((JavaIoInputStream *) nil_chk(delegate_)) markSupported];
}

- (void)dealloc {
  RELEASE_(delegate_);
  RELEASE_(thrownException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 4, 1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 6, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(readWithByteArray:);
  methods[3].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(skipWithLong:);
  methods[5].selector = @selector(available);
  methods[6].selector = @selector(close);
  methods[7].selector = @selector(markWithInt:);
  methods[8].selector = @selector(reset);
  methods[9].selector = @selector(markSupported);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "thrownException_", "LJavaIoIOException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoIOException;", "read", "[B", "[BII", "skip", "J", "mark", "I", "LRetrofitExceptionCatchingTypedInput;" };
  static const J2ObjcClassInfo _RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream = { "ExceptionCatchingInputStream", "retrofit", ptrTable, methods, fields, 7, 0xa, 10, 2, 9, -1, -1, -1, -1 };
  return &_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream;
}

@end

void RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *self, JavaIoInputStream *delegate) {
  JavaIoInputStream_init(self);
  JreStrongAssign(&self->delegate_, delegate);
}

RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *new_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(JavaIoInputStream *delegate) {
  J2OBJC_NEW_IMPL(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream, initWithJavaIoInputStream_, delegate)
}

RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream *create_RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream_initWithJavaIoInputStream_(JavaIoInputStream *delegate) {
  J2OBJC_CREATE_IMPL(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream, initWithJavaIoInputStream_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitExceptionCatchingTypedInput_ExceptionCatchingInputStream)
