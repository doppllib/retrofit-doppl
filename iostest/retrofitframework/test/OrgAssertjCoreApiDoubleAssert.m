//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractDoubleAssert.h"
#include "OrgAssertjCoreApiDoubleAssert.h"
#include "java/lang/Double.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiDoubleAssert

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)actual {
  OrgAssertjCoreApiDoubleAssert_initWithJavaLangDouble_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangDouble:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangDouble;", "Lorg/assertj/core/api/AbstractDoubleAssert<Lorg/assertj/core/api/DoubleAssert;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiDoubleAssert = { "DoubleAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, 1, -1 };
  return &_OrgAssertjCoreApiDoubleAssert;
}

@end

void OrgAssertjCoreApiDoubleAssert_initWithJavaLangDouble_(OrgAssertjCoreApiDoubleAssert *self, JavaLangDouble *actual) {
  OrgAssertjCoreApiAbstractDoubleAssert_initWithJavaLangDouble_withIOSClass_(self, actual, OrgAssertjCoreApiDoubleAssert_class_());
}

OrgAssertjCoreApiDoubleAssert *new_OrgAssertjCoreApiDoubleAssert_initWithJavaLangDouble_(JavaLangDouble *actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiDoubleAssert, initWithJavaLangDouble_, actual)
}

OrgAssertjCoreApiDoubleAssert *create_OrgAssertjCoreApiDoubleAssert_initWithJavaLangDouble_(JavaLangDouble *actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiDoubleAssert, initWithJavaLangDouble_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiDoubleAssert)
