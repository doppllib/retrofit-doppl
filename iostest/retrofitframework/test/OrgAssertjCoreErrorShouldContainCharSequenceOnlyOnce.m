//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"

@interface OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce ()

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)expected
                                     withInt:(jint)occurences
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)expected
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, jint occurences, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *new_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, jint occurences, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *create_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, jint occurences, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static void OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *new_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *create_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

@implementation OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainOnlyOnceWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                                   withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                                                                    withInt:(jint)occurences
                                               withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_shouldContainOnlyOnceWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, occurences, comparisonStrategy);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainOnlyOnceWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                                   withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                                                                    withInt:(jint)occurences {
  return OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_shouldContainOnlyOnceWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(actual, sequence, occurences);
}

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)expected
                                     withInt:(jint)occurences
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, expected, occurences, comparisonStrategy);
  return self;
}

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)expected
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, expected, comparisonStrategy);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldContainOnlyOnceWithJavaLangCharSequence:withJavaLangCharSequence:withInt:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[1].selector = @selector(shouldContainOnlyOnceWithJavaLangCharSequence:withJavaLangCharSequence:withInt:);
  methods[2].selector = @selector(initWithJavaLangCharSequence:withJavaLangCharSequence:withInt:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(initWithJavaLangCharSequence:withJavaLangCharSequence:withOrgAssertjCoreInternalComparisonStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldContainOnlyOnce", "LJavaLangCharSequence;LJavaLangCharSequence;ILOrgAssertjCoreInternalComparisonStrategy;", "LJavaLangCharSequence;LJavaLangCharSequence;I", "LJavaLangCharSequence;LJavaLangCharSequence;LOrgAssertjCoreInternalComparisonStrategy;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce = { "ShouldContainCharSequenceOnlyOnce", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_shouldContainOnlyOnceWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, jint occurences, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initialize();
  if (occurences == 0) return create_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, comparisonStrategy);
  return create_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, occurences, comparisonStrategy);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_shouldContainOnlyOnceWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, jint occurences) {
  OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initialize();
  if (occurences == 0) return create_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
  return create_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, occurences, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

void OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, jint occurences, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto appear only once in:\n <%s>\nbut it appeared %s times %s", [IOSObjectArray arrayWithObjects:(id[]){ expected, actual, JavaLangInteger_valueOfWithInt_(occurences), comparisonStrategy } count:4 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *new_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, jint occurences, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce, initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, occurences, comparisonStrategy)
}

OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *create_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, jint occurences, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce, initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, occurences, comparisonStrategy)
}

void OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto appear only once in:\n <%s>\nbut it did not appear %s", [IOSObjectArray arrayWithObjects:(id[]){ expected, actual, comparisonStrategy } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *new_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce, initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, comparisonStrategy)
}

OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce *create_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce, initWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce)
