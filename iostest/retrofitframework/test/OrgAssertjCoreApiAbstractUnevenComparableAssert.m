//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractComparableAssert.h"
#include "OrgAssertjCoreApiAbstractUnevenComparableAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalComparables.h"
#include "java/lang/Comparable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractUnevenComparableAssert

- (instancetype)initWithJavaLangComparable:(id<JavaLangComparable>)actual
                              withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractUnevenComparableAssert_initWithJavaLangComparable_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractUnevenComparableAssert *)isEqualByComparingToWithJavaLangComparable:(id<JavaLangComparable>)expected {
  [((OrgAssertjCoreInternalComparables *) nil_chk(comparables_)) assertEqualByComparisonWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:expected];
  return ((OrgAssertjCoreApiAbstractUnevenComparableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractUnevenComparableAssert *)isNotEqualByComparingToWithJavaLangComparable:(id<JavaLangComparable>)other {
  [((OrgAssertjCoreInternalComparables *) nil_chk(comparables_)) assertNotEqualByComparisonWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:other];
  return ((OrgAssertjCoreApiAbstractUnevenComparableAssert *) myself_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractUnevenComparableAssert;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractUnevenComparableAssert;", 0x1, 5, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangComparable:withIOSClass:);
  methods[1].selector = @selector(isEqualByComparingToWithJavaLangComparable:);
  methods[2].selector = @selector(isNotEqualByComparingToWithJavaLangComparable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangComparable;LIOSClass;", "(TA;Ljava/lang/Class<*>;)V", "isEqualByComparingTo", "LJavaLangComparable;", "(TA;)TS;", "isNotEqualByComparingTo", "<S:Lorg/assertj/core/api/AbstractUnevenComparableAssert<TS;TA;>;A::Ljava/lang/Comparable<-TA;>;>Lorg/assertj/core/api/AbstractComparableAssert<TS;TA;>;Lorg/assertj/core/api/UnevenComparableAssert<TS;TA;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractUnevenComparableAssert = { "AbstractUnevenComparableAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x401, 3, 0, -1, -1, -1, 6, -1 };
  return &_OrgAssertjCoreApiAbstractUnevenComparableAssert;
}

@end

void OrgAssertjCoreApiAbstractUnevenComparableAssert_initWithJavaLangComparable_withIOSClass_(OrgAssertjCoreApiAbstractUnevenComparableAssert *self, id<JavaLangComparable> actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractComparableAssert_initWithJavaLangComparable_withIOSClass_(self, actual, selfType);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractUnevenComparableAssert)
