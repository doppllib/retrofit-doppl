//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveNoCause.h"

@interface OrgAssertjCoreErrorShouldHaveNoCause ()

- (instancetype)initWithNSException:(NSException *)actual;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveNoCause_initWithNSException_(OrgAssertjCoreErrorShouldHaveNoCause *self, NSException *actual);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveNoCause *new_OrgAssertjCoreErrorShouldHaveNoCause_initWithNSException_(NSException *actual) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveNoCause *create_OrgAssertjCoreErrorShouldHaveNoCause_initWithNSException_(NSException *actual);

@implementation OrgAssertjCoreErrorShouldHaveNoCause

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveNoCauseWithNSException:(NSException *)actual {
  return OrgAssertjCoreErrorShouldHaveNoCause_shouldHaveNoCauseWithNSException_(actual);
}

- (instancetype)initWithNSException:(NSException *)actual {
  OrgAssertjCoreErrorShouldHaveNoCause_initWithNSException_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveNoCauseWithNSException:);
  methods[1].selector = @selector(initWithNSException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveNoCause", "LNSException;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveNoCause = { "ShouldHaveNoCause", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveNoCause;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldHaveNoCause_shouldHaveNoCauseWithNSException_(NSException *actual) {
  OrgAssertjCoreErrorShouldHaveNoCause_initialize();
  return create_OrgAssertjCoreErrorShouldHaveNoCause_initWithNSException_(actual);
}

void OrgAssertjCoreErrorShouldHaveNoCause_initWithNSException_(OrgAssertjCoreErrorShouldHaveNoCause *self, NSException *actual) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting exception without cause, but cause was:<%s>", [IOSObjectArray arrayWithObjects:(id[]){ [((NSException *) nil_chk(actual)) getCause] } count:1 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveNoCause *new_OrgAssertjCoreErrorShouldHaveNoCause_initWithNSException_(NSException *actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveNoCause, initWithNSException_, actual)
}

OrgAssertjCoreErrorShouldHaveNoCause *create_OrgAssertjCoreErrorShouldHaveNoCause_initWithNSException_(NSException *actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveNoCause, initWithNSException_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveNoCause)
