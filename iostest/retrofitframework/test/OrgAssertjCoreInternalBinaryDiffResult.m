//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreInternalBinaryDiffResult.h"
#include "java/lang/Integer.h"

@interface OrgAssertjCoreInternalBinaryDiffResult ()

- (NSString *)describeWithInt:(jint)b;

@end

inline jint OrgAssertjCoreInternalBinaryDiffResult_get_EOF();
#define OrgAssertjCoreInternalBinaryDiffResult_EOF -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgAssertjCoreInternalBinaryDiffResult, EOF, jint)

__attribute__((unused)) static NSString *OrgAssertjCoreInternalBinaryDiffResult_describeWithInt_(OrgAssertjCoreInternalBinaryDiffResult *self, jint b);

@implementation OrgAssertjCoreInternalBinaryDiffResult

- (instancetype)initWithInt:(jint)offset
                    withInt:(jint)expected
                    withInt:(jint)actual {
  OrgAssertjCoreInternalBinaryDiffResult_initWithInt_withInt_withInt_(self, offset, expected, actual);
  return self;
}

- (jboolean)hasNoDiff {
  return offset_ == OrgAssertjCoreInternalBinaryDiffResult_EOF;
}

+ (OrgAssertjCoreInternalBinaryDiffResult *)noDiff {
  return OrgAssertjCoreInternalBinaryDiffResult_noDiff();
}

- (NSString *)describeWithInt:(jint)b {
  return OrgAssertjCoreInternalBinaryDiffResult_describeWithInt_(self, b);
}

- (void)dealloc {
  RELEASE_(expected_);
  RELEASE_(actual_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreInternalBinaryDiffResult;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(hasNoDiff);
  methods[2].selector = @selector(noDiff);
  methods[3].selector = @selector(describeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EOF", "I", .constantValue.asInt = OrgAssertjCoreInternalBinaryDiffResult_EOF, 0x1a, -1, -1, -1, -1 },
    { "offset_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "expected_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "actual_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "describe", "I" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalBinaryDiffResult = { "BinaryDiffResult", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 4, 4, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalBinaryDiffResult;
}

@end

void OrgAssertjCoreInternalBinaryDiffResult_initWithInt_withInt_withInt_(OrgAssertjCoreInternalBinaryDiffResult *self, jint offset, jint expected, jint actual) {
  NSObject_init(self);
  self->offset_ = offset;
  JreStrongAssign(&self->expected_, OrgAssertjCoreInternalBinaryDiffResult_describeWithInt_(self, expected));
  JreStrongAssign(&self->actual_, OrgAssertjCoreInternalBinaryDiffResult_describeWithInt_(self, actual));
}

OrgAssertjCoreInternalBinaryDiffResult *new_OrgAssertjCoreInternalBinaryDiffResult_initWithInt_withInt_withInt_(jint offset, jint expected, jint actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalBinaryDiffResult, initWithInt_withInt_withInt_, offset, expected, actual)
}

OrgAssertjCoreInternalBinaryDiffResult *create_OrgAssertjCoreInternalBinaryDiffResult_initWithInt_withInt_withInt_(jint offset, jint expected, jint actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalBinaryDiffResult, initWithInt_withInt_withInt_, offset, expected, actual)
}

OrgAssertjCoreInternalBinaryDiffResult *OrgAssertjCoreInternalBinaryDiffResult_noDiff() {
  OrgAssertjCoreInternalBinaryDiffResult_initialize();
  return create_OrgAssertjCoreInternalBinaryDiffResult_initWithInt_withInt_withInt_(OrgAssertjCoreInternalBinaryDiffResult_EOF, 0, 0);
}

NSString *OrgAssertjCoreInternalBinaryDiffResult_describeWithInt_(OrgAssertjCoreInternalBinaryDiffResult *self, jint b) {
  return (b == OrgAssertjCoreInternalBinaryDiffResult_EOF) ? @"EOF" : JreStrcat("$$", @"0x", [((NSString *) nil_chk(JavaLangInteger_toHexStringWithInt_(b))) uppercaseString]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalBinaryDiffResult)
