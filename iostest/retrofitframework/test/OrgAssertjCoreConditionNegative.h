//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreConditionNegative")
#ifdef RESTRICT_OrgAssertjCoreConditionNegative
#define INCLUDE_ALL_OrgAssertjCoreConditionNegative 0
#else
#define INCLUDE_ALL_OrgAssertjCoreConditionNegative 1
#endif
#undef RESTRICT_OrgAssertjCoreConditionNegative

#if !defined (OrgAssertjCoreConditionNegative_) && (INCLUDE_ALL_OrgAssertjCoreConditionNegative || defined(INCLUDE_OrgAssertjCoreConditionNegative))
#define OrgAssertjCoreConditionNegative_

#define RESTRICT_OrgAssertjCoreApiCondition 1
#define INCLUDE_OrgAssertjCoreApiCondition 1
#include "OrgAssertjCoreApiCondition.h"

@interface OrgAssertjCoreConditionNegative : OrgAssertjCoreApiCondition {
 @public
  OrgAssertjCoreApiCondition *condition_;
}

#pragma mark Public

- (jboolean)matchesWithId:(id)value;

#pragma mark Protected

- (instancetype)initWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreConditionNegative)

J2OBJC_FIELD_SETTER(OrgAssertjCoreConditionNegative, condition_, OrgAssertjCoreApiCondition *)

FOUNDATION_EXPORT void OrgAssertjCoreConditionNegative_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreConditionNegative *self, OrgAssertjCoreApiCondition *condition);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreConditionNegative)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreConditionNegative")
