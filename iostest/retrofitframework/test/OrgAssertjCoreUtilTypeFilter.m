//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilTypeFilter.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@interface OrgAssertjCoreUtilTypeFilter () {
 @public
  IOSClass *type_;
}

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreUtilTypeFilter, type_, IOSClass *)

@implementation OrgAssertjCoreUtilTypeFilter

+ (OrgAssertjCoreUtilTypeFilter *)byTypeWithIOSClass:(IOSClass *)type {
  return OrgAssertjCoreUtilTypeFilter_byTypeWithIOSClass_(type);
}

- (instancetype)initWithIOSClass:(IOSClass *)type {
  OrgAssertjCoreUtilTypeFilter_initWithIOSClass_(self, type);
  return self;
}

- (id<JavaUtilList>)filterWithJavaUtilCollection:(id<JavaUtilCollection>)target {
  if (target == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The collection to filter should not be null");
  }
  id<JavaUtilList> filtered = create_JavaUtilArrayList_init();
  for (id __strong o in target) {
    if (o == nil) {
      continue;
    }
    if ([((IOSClass *) nil_chk(type_)) isAssignableFrom:[o java_getClass]]) {
      [filtered addWithId:o];
    }
  }
  return filtered;
}

- (void)dealloc {
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreUtilTypeFilter;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(byTypeWithIOSClass:);
  methods[1].selector = @selector(initWithIOSClass:);
  methods[2].selector = @selector(filterWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "byType", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lorg/assertj/core/util/TypeFilter<TT;>;", "(Ljava/lang/Class<TT;>;)V", "filter", "LJavaUtilCollection;", "(Ljava/util/Collection<*>;)Ljava/util/List<TT;>;", "Ljava/lang/Class<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/assertj/core/util/CollectionFilter<TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilTypeFilter = { "TypeFilter", "org.assertj.core.util", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, 8, -1 };
  return &_OrgAssertjCoreUtilTypeFilter;
}

@end

OrgAssertjCoreUtilTypeFilter *OrgAssertjCoreUtilTypeFilter_byTypeWithIOSClass_(IOSClass *type) {
  OrgAssertjCoreUtilTypeFilter_initialize();
  return create_OrgAssertjCoreUtilTypeFilter_initWithIOSClass_(type);
}

void OrgAssertjCoreUtilTypeFilter_initWithIOSClass_(OrgAssertjCoreUtilTypeFilter *self, IOSClass *type) {
  NSObject_init(self);
  JreStrongAssign(&self->type_, type);
}

OrgAssertjCoreUtilTypeFilter *new_OrgAssertjCoreUtilTypeFilter_initWithIOSClass_(IOSClass *type) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilTypeFilter, initWithIOSClass_, type)
}

OrgAssertjCoreUtilTypeFilter *create_OrgAssertjCoreUtilTypeFilter_initWithIOSClass_(IOSClass *type) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilTypeFilter, initWithIOSClass_, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilTypeFilter)
