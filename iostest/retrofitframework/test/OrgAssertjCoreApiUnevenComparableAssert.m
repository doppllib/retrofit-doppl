//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiUnevenComparableAssert.h"

@interface OrgAssertjCoreApiUnevenComparableAssert : NSObject

@end

@implementation OrgAssertjCoreApiUnevenComparableAssert

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreApiUnevenComparableAssert;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiUnevenComparableAssert;", 0x401, 3, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isEqualByComparingToWithJavaLangComparable:);
  methods[1].selector = @selector(isNotEqualByComparingToWithJavaLangComparable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isEqualByComparingTo", "LJavaLangComparable;", "(TT;)TS;", "isNotEqualByComparingTo", "<S::Lorg/assertj/core/api/UnevenComparableAssert<TS;TT;>;T::Ljava/lang/Comparable<-TT;>;>Ljava/lang/Object;Lorg/assertj/core/api/ComparableAssert<TS;TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiUnevenComparableAssert = { "UnevenComparableAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x609, 2, 0, -1, -1, -1, 4, -1 };
  return &_OrgAssertjCoreApiUnevenComparableAssert;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiUnevenComparableAssert)
