//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldNotBeInstanceOfAny.h"

@interface OrgAssertjCoreErrorShouldNotBeInstanceOfAny ()

- (instancetype)initWithId:(id)actual
         withIOSClassArray:(IOSObjectArray *)types;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldNotBeInstanceOfAny_initWithId_withIOSClassArray_(OrgAssertjCoreErrorShouldNotBeInstanceOfAny *self, id actual, IOSObjectArray *types);

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotBeInstanceOfAny *new_OrgAssertjCoreErrorShouldNotBeInstanceOfAny_initWithId_withIOSClassArray_(id actual, IOSObjectArray *types) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotBeInstanceOfAny *create_OrgAssertjCoreErrorShouldNotBeInstanceOfAny_initWithId_withIOSClassArray_(id actual, IOSObjectArray *types);

@implementation OrgAssertjCoreErrorShouldNotBeInstanceOfAny

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotBeInstanceOfAnyWithId:(id)actual
                                                           withIOSClassArray:(IOSObjectArray *)types {
  return OrgAssertjCoreErrorShouldNotBeInstanceOfAny_shouldNotBeInstanceOfAnyWithId_withIOSClassArray_(actual, types);
}

- (instancetype)initWithId:(id)actual
         withIOSClassArray:(IOSObjectArray *)types {
  OrgAssertjCoreErrorShouldNotBeInstanceOfAny_initWithId_withIOSClassArray_(self, actual, types);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldNotBeInstanceOfAnyWithId:withIOSClassArray:);
  methods[1].selector = @selector(initWithId:withIOSClassArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldNotBeInstanceOfAny", "LNSObject;[LIOSClass;", "(Ljava/lang/Object;[Ljava/lang/Class<*>;)Lorg/assertj/core/error/ErrorMessageFactory;", "(Ljava/lang/Object;[Ljava/lang/Class<*>;)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldNotBeInstanceOfAny = { "ShouldNotBeInstanceOfAny", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldNotBeInstanceOfAny;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotBeInstanceOfAny_shouldNotBeInstanceOfAnyWithId_withIOSClassArray_(id actual, IOSObjectArray *types) {
  OrgAssertjCoreErrorShouldNotBeInstanceOfAny_initialize();
  return create_OrgAssertjCoreErrorShouldNotBeInstanceOfAny_initWithId_withIOSClassArray_(actual, types);
}

void OrgAssertjCoreErrorShouldNotBeInstanceOfAny_initWithId_withIOSClassArray_(OrgAssertjCoreErrorShouldNotBeInstanceOfAny *self, id actual, IOSObjectArray *types) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nnot to be an instance of any of these types:\n <%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual, types } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldNotBeInstanceOfAny *new_OrgAssertjCoreErrorShouldNotBeInstanceOfAny_initWithId_withIOSClassArray_(id actual, IOSObjectArray *types) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldNotBeInstanceOfAny, initWithId_withIOSClassArray_, actual, types)
}

OrgAssertjCoreErrorShouldNotBeInstanceOfAny *create_OrgAssertjCoreErrorShouldNotBeInstanceOfAny_initWithId_withIOSClassArray_(id actual, IOSObjectArray *types) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldNotBeInstanceOfAny, initWithId_withIOSClassArray_, actual, types)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldNotBeInstanceOfAny)
