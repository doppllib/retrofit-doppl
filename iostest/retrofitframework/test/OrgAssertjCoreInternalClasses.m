//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeAnnotation.h"
#include "OrgAssertjCoreErrorShouldBeAssignableFrom.h"
#include "OrgAssertjCoreErrorShouldBeInterface.h"
#include "OrgAssertjCoreErrorShouldHaveAnnotations.h"
#include "OrgAssertjCoreErrorShouldHaveFields.h"
#include "OrgAssertjCoreInternalClasses.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreUtilSets.h"
#include "java/lang/AssertionError.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Field.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/Set.h"

@interface OrgAssertjCoreInternalClasses ()

+ (jboolean)noMissingFieldsWithJavaUtilSet:(id<JavaUtilSet>)actualFieldNames
                           withJavaUtilSet:(id<JavaUtilSet>)expectedFieldNames
                           withJavaUtilSet:(id<JavaUtilSet>)missingFieldNames;

+ (id<JavaUtilSet>)fieldsToNameWithJavaLangReflectFieldArray:(IOSObjectArray *)fields;

+ (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withIOSClass:(IOSClass *)actual;

+ (void)classParameterIsNotNullWithIOSClass:(IOSClass *)clazz;

@end

inline OrgAssertjCoreInternalClasses *OrgAssertjCoreInternalClasses_get_INSTANCE();
static OrgAssertjCoreInternalClasses *OrgAssertjCoreInternalClasses_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalClasses, INSTANCE, OrgAssertjCoreInternalClasses *)

__attribute__((unused)) static jboolean OrgAssertjCoreInternalClasses_noMissingFieldsWithJavaUtilSet_withJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> actualFieldNames, id<JavaUtilSet> expectedFieldNames, id<JavaUtilSet> missingFieldNames);

__attribute__((unused)) static id<JavaUtilSet> OrgAssertjCoreInternalClasses_fieldsToNameWithJavaLangReflectFieldArray_(IOSObjectArray *fields);

__attribute__((unused)) static void OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(id<OrgAssertjCoreApiAssertionInfo> info, IOSClass *actual);

__attribute__((unused)) static void OrgAssertjCoreInternalClasses_classParameterIsNotNullWithIOSClass_(IOSClass *clazz);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalClasses)

@implementation OrgAssertjCoreInternalClasses

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalClasses_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgAssertjCoreInternalClasses *)instance {
  return OrgAssertjCoreInternalClasses_instance();
}

- (void)assertIsAssignableFromWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withIOSClass:(IOSClass *)actual
                                               withIOSClassArray:(IOSObjectArray *)others {
  OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(info, actual);
  id<JavaUtilSet> expected = OrgAssertjCoreUtilSets_newLinkedHashSetWithNSObjectArray_(others);
  id<JavaUtilSet> missing = create_JavaUtilLinkedHashSet_init();
  for (IOSClass * __strong other in nil_chk(expected)) {
    OrgAssertjCoreInternalClasses_classParameterIsNotNullWithIOSClass_(other);
    if (![((IOSClass *) nil_chk(actual)) isAssignableFrom:other]) {
      [missing addWithId:other];
    }
  }
  if ([missing isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeAssignableFrom_shouldBeAssignableFromWithIOSClass_withJavaUtilSet_withJavaUtilSet_(actual, expected, missing)];
}

- (void)assertIsNotInterfaceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withIOSClass:(IOSClass *)actual {
  OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(info, actual);
  if (![((IOSClass *) nil_chk(actual)) isInterface]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInterface_shouldNotBeInterfaceWithIOSClass_(actual)];
}

- (void)assertIsInterfaceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                               withIOSClass:(IOSClass *)actual {
  OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(info, actual);
  if ([((IOSClass *) nil_chk(actual)) isInterface]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInterface_shouldBeInterfaceWithIOSClass_(actual)];
}

- (void)assertIsNotAnnotationWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                   withIOSClass:(IOSClass *)actual {
  OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(info, actual);
  if (![((IOSClass *) nil_chk(actual)) isAnnotation]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeAnnotation_shouldNotBeAnnotationWithIOSClass_(actual)];
}

- (void)assertIsAnnotationWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withIOSClass:(IOSClass *)actual {
  OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(info, actual);
  if ([((IOSClass *) nil_chk(actual)) isAnnotation]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeAnnotation_shouldBeAnnotationWithIOSClass_(actual)];
}

- (void)assertContainsAnnotationsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                       withIOSClass:(IOSClass *)actual
                                                  withIOSClassArray:(IOSObjectArray *)annotations {
  OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(info, actual);
  id<JavaUtilSet> expected = OrgAssertjCoreUtilSets_newLinkedHashSetWithNSObjectArray_(annotations);
  id<JavaUtilSet> missing = create_JavaUtilLinkedHashSet_init();
  for (IOSClass * __strong other in nil_chk(expected)) {
    OrgAssertjCoreInternalClasses_classParameterIsNotNullWithIOSClass_(other);
    if ([((IOSClass *) nil_chk(actual)) getAnnotationWithIOSClass:other] == nil) {
      [missing addWithId:other];
    }
  }
  if ([missing isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveAnnotations_shouldHaveAnnotationsWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(actual, expected, missing)];
}

- (void)assertHasFieldsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withIOSClass:(IOSClass *)actual
                                        withNSStringArray:(IOSObjectArray *)fields {
  OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(info, actual);
  id<JavaUtilSet> expectedFieldNames = OrgAssertjCoreUtilSets_newLinkedHashSetWithNSObjectArray_(fields);
  id<JavaUtilSet> missingFieldNames = OrgAssertjCoreUtilSets_newLinkedHashSet();
  id<JavaUtilSet> actualFieldNames = OrgAssertjCoreInternalClasses_fieldsToNameWithJavaLangReflectFieldArray_([((IOSClass *) nil_chk(actual)) getFields]);
  if (OrgAssertjCoreInternalClasses_noMissingFieldsWithJavaUtilSet_withJavaUtilSet_withJavaUtilSet_(actualFieldNames, expectedFieldNames, missingFieldNames)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveFields_shouldHaveFieldsWithIOSClass_withJavaUtilSet_withJavaUtilSet_(actual, expectedFieldNames, missingFieldNames)];
}

+ (jboolean)noMissingFieldsWithJavaUtilSet:(id<JavaUtilSet>)actualFieldNames
                           withJavaUtilSet:(id<JavaUtilSet>)expectedFieldNames
                           withJavaUtilSet:(id<JavaUtilSet>)missingFieldNames {
  return OrgAssertjCoreInternalClasses_noMissingFieldsWithJavaUtilSet_withJavaUtilSet_withJavaUtilSet_(actualFieldNames, expectedFieldNames, missingFieldNames);
}

- (void)assertHasDeclaredFieldsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                     withIOSClass:(IOSClass *)actual
                                                withNSStringArray:(IOSObjectArray *)fields {
  OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(info, actual);
  id<JavaUtilSet> expectedFieldNames = OrgAssertjCoreUtilSets_newLinkedHashSetWithNSObjectArray_(fields);
  id<JavaUtilSet> missingFieldNames = OrgAssertjCoreUtilSets_newLinkedHashSet();
  id<JavaUtilSet> actualFieldNames = OrgAssertjCoreInternalClasses_fieldsToNameWithJavaLangReflectFieldArray_([((IOSClass *) nil_chk(actual)) getDeclaredFields]);
  if (OrgAssertjCoreInternalClasses_noMissingFieldsWithJavaUtilSet_withJavaUtilSet_withJavaUtilSet_(actualFieldNames, expectedFieldNames, missingFieldNames)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveFields_shouldHaveDeclaredFieldsWithIOSClass_withJavaUtilSet_withJavaUtilSet_(actual, expectedFieldNames, missingFieldNames)];
}

+ (id<JavaUtilSet>)fieldsToNameWithJavaLangReflectFieldArray:(IOSObjectArray *)fields {
  return OrgAssertjCoreInternalClasses_fieldsToNameWithJavaLangReflectFieldArray_(fields);
}

+ (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withIOSClass:(IOSClass *)actual {
  OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(info, actual);
}

+ (void)classParameterIsNotNullWithIOSClass:(IOSClass *)clazz {
  OrgAssertjCoreInternalClasses_classParameterIsNotNullWithIOSClass_(clazz);
}

- (void)dealloc {
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreInternalClasses;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x81, 9, 1, -1, 10, -1, -1 },
    { NULL, "V", 0x81, 11, 12, -1, 13, -1, -1 },
    { NULL, "Z", 0xa, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x81, 17, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xa, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0xa, 21, 4, -1, 5, -1, -1 },
    { NULL, "V", 0xa, 22, 23, -1, 24, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(instance);
  methods[2].selector = @selector(assertIsAssignableFromWithOrgAssertjCoreApiAssertionInfo:withIOSClass:withIOSClassArray:);
  methods[3].selector = @selector(assertIsNotInterfaceWithOrgAssertjCoreApiAssertionInfo:withIOSClass:);
  methods[4].selector = @selector(assertIsInterfaceWithOrgAssertjCoreApiAssertionInfo:withIOSClass:);
  methods[5].selector = @selector(assertIsNotAnnotationWithOrgAssertjCoreApiAssertionInfo:withIOSClass:);
  methods[6].selector = @selector(assertIsAnnotationWithOrgAssertjCoreApiAssertionInfo:withIOSClass:);
  methods[7].selector = @selector(assertContainsAnnotationsWithOrgAssertjCoreApiAssertionInfo:withIOSClass:withIOSClassArray:);
  methods[8].selector = @selector(assertHasFieldsWithOrgAssertjCoreApiAssertionInfo:withIOSClass:withNSStringArray:);
  methods[9].selector = @selector(noMissingFieldsWithJavaUtilSet:withJavaUtilSet:withJavaUtilSet:);
  methods[10].selector = @selector(assertHasDeclaredFieldsWithOrgAssertjCoreApiAssertionInfo:withIOSClass:withNSStringArray:);
  methods[11].selector = @selector(fieldsToNameWithJavaLangReflectFieldArray:);
  methods[12].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withIOSClass:);
  methods[13].selector = @selector(classParameterIsNotNullWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalClasses;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "assertIsAssignableFrom", "LOrgAssertjCoreApiAssertionInfo;LIOSClass;[LIOSClass;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Class<*>;[Ljava/lang/Class<*>;)V", "assertIsNotInterface", "LOrgAssertjCoreApiAssertionInfo;LIOSClass;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Class<*>;)V", "assertIsInterface", "assertIsNotAnnotation", "assertIsAnnotation", "assertContainsAnnotations", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Class<*>;[Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)V", "assertHasFields", "LOrgAssertjCoreApiAssertionInfo;LIOSClass;[LNSString;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Class<*>;[Ljava/lang/String;)V", "noMissingFields", "LJavaUtilSet;LJavaUtilSet;LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;)Z", "assertHasDeclaredFields", "fieldsToName", "[LJavaLangReflectField;", "([Ljava/lang/reflect/Field;)Ljava/util/Set<Ljava/lang/String;>;", "assertNotNull", "classParameterIsNotNull", "LIOSClass;", "(Ljava/lang/Class<*>;)V", &OrgAssertjCoreInternalClasses_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalClasses = { "Classes", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 14, 2, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalClasses;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalClasses class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalClasses_INSTANCE, new_OrgAssertjCoreInternalClasses_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalClasses)
  }
}

@end

void OrgAssertjCoreInternalClasses_init(OrgAssertjCoreInternalClasses *self) {
  NSObject_init(self);
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
}

OrgAssertjCoreInternalClasses *new_OrgAssertjCoreInternalClasses_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalClasses, init)
}

OrgAssertjCoreInternalClasses *create_OrgAssertjCoreInternalClasses_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalClasses, init)
}

OrgAssertjCoreInternalClasses *OrgAssertjCoreInternalClasses_instance() {
  OrgAssertjCoreInternalClasses_initialize();
  return OrgAssertjCoreInternalClasses_INSTANCE;
}

jboolean OrgAssertjCoreInternalClasses_noMissingFieldsWithJavaUtilSet_withJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> actualFieldNames, id<JavaUtilSet> expectedFieldNames, id<JavaUtilSet> missingFieldNames) {
  OrgAssertjCoreInternalClasses_initialize();
  for (NSString * __strong field in nil_chk(expectedFieldNames)) {
    if (![((id<JavaUtilSet>) nil_chk(actualFieldNames)) containsWithId:field]) {
      [((id<JavaUtilSet>) nil_chk(missingFieldNames)) addWithId:field];
    }
  }
  return [((id<JavaUtilSet>) nil_chk(missingFieldNames)) isEmpty];
}

id<JavaUtilSet> OrgAssertjCoreInternalClasses_fieldsToNameWithJavaLangReflectFieldArray_(IOSObjectArray *fields) {
  OrgAssertjCoreInternalClasses_initialize();
  id<JavaUtilSet> fieldsName = create_JavaUtilLinkedHashSet_init();
  {
    IOSObjectArray *a__ = fields;
    JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectField * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectField *field = *b__++;
      [fieldsName addWithId:[((JavaLangReflectField *) nil_chk(field)) getName]];
    }
  }
  return fieldsName;
}

void OrgAssertjCoreInternalClasses_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withIOSClass_(id<OrgAssertjCoreApiAssertionInfo> info, IOSClass *actual) {
  OrgAssertjCoreInternalClasses_initialize();
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
}

void OrgAssertjCoreInternalClasses_classParameterIsNotNullWithIOSClass_(IOSClass *clazz) {
  OrgAssertjCoreInternalClasses_initialize();
  if (clazz == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The class to compare actual with should not be null");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalClasses)
