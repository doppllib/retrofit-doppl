//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractEnumerableAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalInternalArrays.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractEnumerableAssert

- (OrgAssertjCoreApiAbstractEnumerableAssert *)hasSameSizeAsWithId:(id)other {
  OrgAssertjCoreInternalInternalArrays_assertIsArrayWithOrgAssertjCoreApiAssertionInfo_withId_(info_, other);
  [create_OrgAssertjCoreInternalInternalArrays_init() assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:other];
  return ((OrgAssertjCoreApiAbstractEnumerableAssert *) myself_);
}

- (instancetype)initWithId:(id)actual
              withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractEnumerableAssert_initWithId_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractEnumerableAssert *)inHexadecimal {
  return ((OrgAssertjCoreApiAbstractEnumerableAssert *) [super inHexadecimal]);
}

- (OrgAssertjCoreApiAbstractEnumerableAssert *)inBinary {
  return ((OrgAssertjCoreApiAbstractEnumerableAssert *) [super inBinary]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreApiAbstractEnumerableAssert;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractEnumerableAssert;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractEnumerableAssert;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasSameSizeAsWithId:);
  methods[1].selector = @selector(initWithId:withIOSClass:);
  methods[2].selector = @selector(inHexadecimal);
  methods[3].selector = @selector(inBinary);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "hasSameSizeAs", "LNSObject;", "(Ljava/lang/Object;)TS;", "LNSObject;LIOSClass;", "(TA;Ljava/lang/Class<*>;)V", "()TS;", "<S:Lorg/assertj/core/api/AbstractEnumerableAssert<TS;TA;TE;>;A:Ljava/lang/Object;E:Ljava/lang/Object;>Lorg/assertj/core/api/AbstractAssert<TS;TA;>;Lorg/assertj/core/api/EnumerableAssert<Lorg/assertj/core/api/AbstractEnumerableAssert<TS;TA;TE;>;TE;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractEnumerableAssert = { "AbstractEnumerableAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x401, 4, 0, -1, -1, -1, 6, -1 };
  return &_OrgAssertjCoreApiAbstractEnumerableAssert;
}

@end

void OrgAssertjCoreApiAbstractEnumerableAssert_initWithId_withIOSClass_(OrgAssertjCoreApiAbstractEnumerableAssert *self, id actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractEnumerableAssert)
