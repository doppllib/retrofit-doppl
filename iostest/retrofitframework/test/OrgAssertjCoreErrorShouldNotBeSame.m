//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldNotBeSame.h"

@interface OrgAssertjCoreErrorShouldNotBeSame ()

- (instancetype)initWithId:(id)actual;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldNotBeSame_initWithId_(OrgAssertjCoreErrorShouldNotBeSame *self, id actual);

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotBeSame *new_OrgAssertjCoreErrorShouldNotBeSame_initWithId_(id actual) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotBeSame *create_OrgAssertjCoreErrorShouldNotBeSame_initWithId_(id actual);

@implementation OrgAssertjCoreErrorShouldNotBeSame

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotBeSameWithId:(id)actual {
  return OrgAssertjCoreErrorShouldNotBeSame_shouldNotBeSameWithId_(actual);
}

- (instancetype)initWithId:(id)actual {
  OrgAssertjCoreErrorShouldNotBeSame_initWithId_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldNotBeSameWithId:);
  methods[1].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldNotBeSame", "LNSObject;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldNotBeSame = { "ShouldNotBeSame", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldNotBeSame;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotBeSame_shouldNotBeSameWithId_(id actual) {
  OrgAssertjCoreErrorShouldNotBeSame_initialize();
  return create_OrgAssertjCoreErrorShouldNotBeSame_initWithId_(actual);
}

void OrgAssertjCoreErrorShouldNotBeSame_initWithId_(OrgAssertjCoreErrorShouldNotBeSame *self, id actual) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpected not same:<%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldNotBeSame *new_OrgAssertjCoreErrorShouldNotBeSame_initWithId_(id actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldNotBeSame, initWithId_, actual)
}

OrgAssertjCoreErrorShouldNotBeSame *create_OrgAssertjCoreErrorShouldNotBeSame_initWithId_(id actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldNotBeSame, initWithId_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldNotBeSame)
