//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeAfter.h"
#include "OrgAssertjCoreErrorShouldBeAfterOrEqualsTo.h"
#include "OrgAssertjCoreErrorShouldBeAfterYear.h"
#include "OrgAssertjCoreErrorShouldBeBefore.h"
#include "OrgAssertjCoreErrorShouldBeBeforeOrEqualsTo.h"
#include "OrgAssertjCoreErrorShouldBeBeforeYear.h"
#include "OrgAssertjCoreErrorShouldBeBetween.h"
#include "OrgAssertjCoreErrorShouldBeCloseTo.h"
#include "OrgAssertjCoreErrorShouldBeEqualWithTimePrecision.h"
#include "OrgAssertjCoreErrorShouldBeInSameDay.h"
#include "OrgAssertjCoreErrorShouldBeInSameHour.h"
#include "OrgAssertjCoreErrorShouldBeInSameHourWindow.h"
#include "OrgAssertjCoreErrorShouldBeInSameMinute.h"
#include "OrgAssertjCoreErrorShouldBeInSameMinuteWindow.h"
#include "OrgAssertjCoreErrorShouldBeInSameMonth.h"
#include "OrgAssertjCoreErrorShouldBeInSameSecond.h"
#include "OrgAssertjCoreErrorShouldBeInSameSecondWindow.h"
#include "OrgAssertjCoreErrorShouldBeInSameYear.h"
#include "OrgAssertjCoreErrorShouldBeInTheFuture.h"
#include "OrgAssertjCoreErrorShouldBeInThePast.h"
#include "OrgAssertjCoreErrorShouldBeToday.h"
#include "OrgAssertjCoreErrorShouldBeWithin.h"
#include "OrgAssertjCoreErrorShouldHaveTime.h"
#include "OrgAssertjCoreErrorShouldNotBeBetween.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalDates.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "OrgAssertjCoreUtilDates.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Calendar.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/concurrent/TimeUnit.h"

@interface OrgAssertjCoreInternalInternalDates () {
 @public
  id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy_;
}

- (jboolean)actualIsBetweenGivenPeriodWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                        withJavaUtilDate:(JavaUtilDate *)actual
                                                        withJavaUtilDate:(JavaUtilDate *)start
                                                        withJavaUtilDate:(JavaUtilDate *)end
                                                             withBoolean:(jboolean)inclusiveStart
                                                             withBoolean:(jboolean)inclusiveEnd;

+ (jboolean)areInSameYearWithJavaUtilDate:(JavaUtilDate *)actual
                         withJavaUtilDate:(JavaUtilDate *)other;

+ (jboolean)areInSameMonthWithJavaUtilDate:(JavaUtilDate *)actual
                          withJavaUtilDate:(JavaUtilDate *)other;

+ (jboolean)areInSameDayOfMonthWithJavaUtilDate:(JavaUtilDate *)actual
                               withJavaUtilDate:(JavaUtilDate *)other;

+ (jboolean)areInSameHourWindowWithJavaUtilDate:(JavaUtilDate *)actual
                               withJavaUtilDate:(JavaUtilDate *)other;

+ (jboolean)areInSameHourWithJavaUtilDate:(JavaUtilDate *)actual
                         withJavaUtilDate:(JavaUtilDate *)other;

+ (jboolean)areInSameMinuteWithJavaUtilDate:(JavaUtilDate *)actual
                           withJavaUtilDate:(JavaUtilDate *)other;

+ (jboolean)areInSameMinuteWindowWithJavaUtilDate:(JavaUtilDate *)actual
                                 withJavaUtilDate:(JavaUtilDate *)other;

+ (jboolean)areInSameSecondWindowWithJavaUtilDate:(JavaUtilDate *)actual
                                 withJavaUtilDate:(JavaUtilDate *)other;

+ (jboolean)areInSameSecondWithJavaUtilDate:(JavaUtilDate *)actual
                           withJavaUtilDate:(JavaUtilDate *)other;

+ (void)dateParameterIsNotNullWithJavaUtilDate:(JavaUtilDate *)date;

+ (void)startDateParameterIsNotNullWithJavaUtilDate:(JavaUtilDate *)start;

+ (void)endDateParameterIsNotNullWithJavaUtilDate:(JavaUtilDate *)end;

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaUtilDate:(JavaUtilDate *)actual;

- (jboolean)isBeforeOrEqualToWithJavaUtilDate:(JavaUtilDate *)actual
                             withJavaUtilDate:(JavaUtilDate *)other;

- (jboolean)areEqualWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)other;

- (jboolean)isAfterOrEqualToWithJavaUtilDate:(JavaUtilDate *)actual
                            withJavaUtilDate:(JavaUtilDate *)other;

- (jboolean)isBeforeWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)other;

- (jboolean)isAfterWithJavaUtilDate:(JavaUtilDate *)actual
                   withJavaUtilDate:(JavaUtilDate *)other;

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalDates, comparisonStrategy_, id<OrgAssertjCoreInternalComparisonStrategy>)

inline OrgAssertjCoreInternalInternalDates *OrgAssertjCoreInternalInternalDates_get_INSTANCE();
static OrgAssertjCoreInternalInternalDates *OrgAssertjCoreInternalInternalDates_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalInternalDates, INSTANCE, OrgAssertjCoreInternalInternalDates *)

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_actualIsBetweenGivenPeriodWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_(OrgAssertjCoreInternalInternalDates *self, id<OrgAssertjCoreApiAssertionInfo> info, JavaUtilDate *actual, JavaUtilDate *start, JavaUtilDate *end, jboolean inclusiveStart, jboolean inclusiveEnd);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_areInSameYearWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_areInSameMonthWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_areInSameDayOfMonthWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_areInSameHourWindowWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_areInSameHourWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_areInSameMinuteWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_areInSameMinuteWindowWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_areInSameSecondWindowWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_areInSameSecondWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(JavaUtilDate *date);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalDates_startDateParameterIsNotNullWithJavaUtilDate_(JavaUtilDate *start);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalDates_endDateParameterIsNotNullWithJavaUtilDate_(JavaUtilDate *end);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, id<OrgAssertjCoreApiAssertionInfo> info, JavaUtilDate *actual);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_isBeforeOrEqualToWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_areEqualWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_isAfterOrEqualToWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_isBeforeWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalDates_isAfterWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, JavaUtilDate *actual, JavaUtilDate *other);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalInternalDates)

@implementation OrgAssertjCoreInternalInternalDates

+ (OrgAssertjCoreInternalInternalDates *)instance {
  return OrgAssertjCoreInternalInternalDates_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInternalDates_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreInternalInternalDates_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
  return self;
}

- (id<JavaUtilComparator>)getComparator {
  if ([comparisonStrategy_ isKindOfClass:[OrgAssertjCoreInternalComparatorBasedComparisonStrategy class]]) {
    return [((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) nil_chk(((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) cast_chk(comparisonStrategy_, [OrgAssertjCoreInternalComparatorBasedComparisonStrategy class])))) getComparator];
  }
  return nil;
}

- (void)assertIsBeforeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaUtilDate:(JavaUtilDate *)actual
                                        withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_isBeforeWithJavaUtilDate_withJavaUtilDate_(self, actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeBefore_shouldBeBeforeWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, comparisonStrategy_)];
}

- (void)assertIsBeforeOrEqualsToWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withJavaUtilDate:(JavaUtilDate *)actual
                                                  withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_isBeforeOrEqualToWithJavaUtilDate_withJavaUtilDate_(self, actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeBeforeOrEqualsTo_shouldBeBeforeOrEqualsToWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, comparisonStrategy_)];
}

- (void)assertIsAfterWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaUtilDate:(JavaUtilDate *)actual
                                       withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_isAfterWithJavaUtilDate_withJavaUtilDate_(self, actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeAfter_shouldBeAfterWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, comparisonStrategy_)];
}

- (void)assertIsAfterOrEqualsToWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withJavaUtilDate:(JavaUtilDate *)actual
                                                 withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_isAfterOrEqualToWithJavaUtilDate_withJavaUtilDate_(self, actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeAfterOrEqualsTo_shouldBeAfterOrEqualsToWithJavaUtilDate_withJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, other, comparisonStrategy_)];
}

- (void)assertIsEqualWithPrecisionWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withJavaUtilDate:(JavaUtilDate *)actual
                                                    withJavaUtilDate:(JavaUtilDate *)other
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)precision {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  JavaUtilCalendar *calendarActual = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(calendarActual)) setTimeWithJavaUtilDate:actual];
  JavaUtilCalendar *calendarOther = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(calendarOther)) setTimeWithJavaUtilDate:other];
  switch ([precision ordinal]) {
    case JavaUtilConcurrentTimeUnit_Enum_DAYS:
    [calendarActual setWithInt:JavaUtilCalendar_DAY_OF_WEEK withInt:0];
    [calendarOther setWithInt:JavaUtilCalendar_DAY_OF_WEEK withInt:0];
    case JavaUtilConcurrentTimeUnit_Enum_HOURS:
    [calendarActual setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:0];
    [calendarOther setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:0];
    case JavaUtilConcurrentTimeUnit_Enum_MINUTES:
    [calendarActual setWithInt:JavaUtilCalendar_MINUTE withInt:0];
    [calendarOther setWithInt:JavaUtilCalendar_MINUTE withInt:0];
    case JavaUtilConcurrentTimeUnit_Enum_SECONDS:
    [calendarActual setWithInt:JavaUtilCalendar_SECOND withInt:0];
    [calendarOther setWithInt:JavaUtilCalendar_SECOND withInt:0];
    case JavaUtilConcurrentTimeUnit_Enum_MILLISECONDS:
    [calendarActual setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
    [calendarOther setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
    case JavaUtilConcurrentTimeUnit_Enum_MICROSECONDS:
    break;
    default:
    break;
  }
  if ([calendarActual compareToWithId:calendarOther] != 0) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeEqualWithTimePrecision_shouldBeEqualWithJavaUtilDate_withJavaUtilDate_withJavaUtilConcurrentTimeUnit_(actual, other, precision)];
}

- (void)assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaUtilDate:(JavaUtilDate *)actual
                                         withJavaUtilDate:(JavaUtilDate *)start
                                         withJavaUtilDate:(JavaUtilDate *)end
                                              withBoolean:(jboolean)inclusiveStart
                                              withBoolean:(jboolean)inclusiveEnd {
  if (OrgAssertjCoreInternalInternalDates_actualIsBetweenGivenPeriodWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_(self, info, actual, start, end, inclusiveStart, inclusiveEnd)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeBetween_shouldBeBetweenWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(actual, start, end, inclusiveStart, inclusiveEnd, comparisonStrategy_)];
}

- (jboolean)actualIsBetweenGivenPeriodWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                        withJavaUtilDate:(JavaUtilDate *)actual
                                                        withJavaUtilDate:(JavaUtilDate *)start
                                                        withJavaUtilDate:(JavaUtilDate *)end
                                                             withBoolean:(jboolean)inclusiveStart
                                                             withBoolean:(jboolean)inclusiveEnd {
  return OrgAssertjCoreInternalInternalDates_actualIsBetweenGivenPeriodWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_(self, info, actual, start, end, inclusiveStart, inclusiveEnd);
}

- (void)assertIsNotBetweenWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaUtilDate:(JavaUtilDate *)actual
                                            withJavaUtilDate:(JavaUtilDate *)start
                                            withJavaUtilDate:(JavaUtilDate *)end
                                                 withBoolean:(jboolean)inclusiveStart
                                                 withBoolean:(jboolean)inclusiveEnd {
  if (!OrgAssertjCoreInternalInternalDates_actualIsBetweenGivenPeriodWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_(self, info, actual, start, end, inclusiveStart, inclusiveEnd)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeBetween_shouldNotBeBetweenWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(actual, start, end, inclusiveStart, inclusiveEnd, comparisonStrategy_)];
}

- (void)assertIsInThePastWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withJavaUtilDate:(JavaUtilDate *)actual {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreInternalInternalDates_isBeforeWithJavaUtilDate_withJavaUtilDate_(self, actual, OrgAssertjCoreUtilDates_now())) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInThePast_shouldBeInThePastWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, comparisonStrategy_)];
}

- (void)assertIsTodayWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaUtilDate:(JavaUtilDate *)actual {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  JavaUtilDate *todayWithoutTime = OrgAssertjCoreUtilDates_truncateTimeWithJavaUtilDate_(OrgAssertjCoreUtilDates_now());
  JavaUtilDate *actualWithoutTime = OrgAssertjCoreUtilDates_truncateTimeWithJavaUtilDate_(actual);
  if (OrgAssertjCoreInternalInternalDates_areEqualWithJavaUtilDate_withJavaUtilDate_(self, actualWithoutTime, todayWithoutTime)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeToday_shouldBeTodayWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, comparisonStrategy_)];
}

- (void)assertIsInTheFutureWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withJavaUtilDate:(JavaUtilDate *)actual {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreInternalInternalDates_isAfterWithJavaUtilDate_withJavaUtilDate_(self, actual, OrgAssertjCoreUtilDates_now())) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInTheFuture_shouldBeInTheFutureWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, comparisonStrategy_)];
}

- (void)assertIsBeforeYearWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaUtilDate:(JavaUtilDate *)actual
                                                     withInt:(jint)year {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreUtilDates_yearOfWithJavaUtilDate_(actual) < year) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeBeforeYear_shouldBeBeforeYearWithJavaUtilDate_withInt_(actual, year)];
}

- (void)assertIsAfterYearWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withJavaUtilDate:(JavaUtilDate *)actual
                                                    withInt:(jint)year {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreUtilDates_yearOfWithJavaUtilDate_(actual) > year) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeAfterYear_shouldBeAfterYearWithJavaUtilDate_withInt_(actual, year)];
}

- (void)assertIsWithinYearWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaUtilDate:(JavaUtilDate *)actual
                                                     withInt:(jint)year {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreUtilDates_yearOfWithJavaUtilDate_(actual) == year) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeWithin_shouldBeWithinWithJavaUtilDate_withNSString_withInt_(actual, @"year", year)];
}

- (void)assertIsWithinMonthWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withJavaUtilDate:(JavaUtilDate *)actual
                                                      withInt:(jint)month {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreUtilDates_monthOfWithJavaUtilDate_(actual) == month) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeWithin_shouldBeWithinWithJavaUtilDate_withNSString_withInt_(actual, @"month", month)];
}

- (void)assertIsWithinDayOfMonthWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withJavaUtilDate:(JavaUtilDate *)actual
                                                           withInt:(jint)dayOfMonth {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreUtilDates_dayOfMonthOfWithJavaUtilDate_(actual) == dayOfMonth) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeWithin_shouldBeWithinWithJavaUtilDate_withNSString_withInt_(actual, @"day of month", dayOfMonth)];
}

- (void)assertIsWithinDayOfWeekWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withJavaUtilDate:(JavaUtilDate *)actual
                                                          withInt:(jint)dayOfWeek {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreUtilDates_dayOfWeekOfWithJavaUtilDate_(actual) == dayOfWeek) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeWithin_shouldBeWithinWithJavaUtilDate_withNSString_withInt_(actual, @"day of week", dayOfWeek)];
}

- (void)assertIsWithinHourOfDayWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withJavaUtilDate:(JavaUtilDate *)actual
                                                          withInt:(jint)hourOfDay {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreUtilDates_hourOfDayOfWithJavaUtilDate_(actual) == hourOfDay) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeWithin_shouldBeWithinWithJavaUtilDate_withNSString_withInt_(actual, @"hour", hourOfDay)];
}

- (void)assertIsWithinMinuteWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilDate:(JavaUtilDate *)actual
                                                       withInt:(jint)minute {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreUtilDates_minuteOfWithJavaUtilDate_(actual) == minute) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeWithin_shouldBeWithinWithJavaUtilDate_withNSString_withInt_(actual, @"minute", minute)];
}

- (void)assertIsWithinSecondWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilDate:(JavaUtilDate *)actual
                                                       withInt:(jint)second {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreUtilDates_secondOfWithJavaUtilDate_(actual) == second) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeWithin_shouldBeWithinWithJavaUtilDate_withNSString_withInt_(actual, @"second", second)];
}

- (void)assertIsWithinMillisecondWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                   withJavaUtilDate:(JavaUtilDate *)actual
                                                            withInt:(jint)millisecond {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if (OrgAssertjCoreUtilDates_millisecondOfWithJavaUtilDate_(actual) == millisecond) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeWithin_shouldBeWithinWithJavaUtilDate_withNSString_withInt_(actual, @"millisecond", millisecond)];
}

- (void)assertIsInSameYearAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilDate:(JavaUtilDate *)actual
                                              withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_areInSameYearWithJavaUtilDate_withJavaUtilDate_(actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInSameYear_shouldBeInSameYearWithJavaUtilDate_withJavaUtilDate_(actual, other)];
}

+ (jboolean)areInSameYearWithJavaUtilDate:(JavaUtilDate *)actual
                         withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_areInSameYearWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

- (void)assertIsInSameMonthAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                               withJavaUtilDate:(JavaUtilDate *)actual
                                               withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_areInSameMonthWithJavaUtilDate_withJavaUtilDate_(actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInSameMonth_shouldBeInSameMonthWithJavaUtilDate_withJavaUtilDate_(actual, other)];
}

+ (jboolean)areInSameMonthWithJavaUtilDate:(JavaUtilDate *)actual
                          withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_areInSameMonthWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

- (void)assertIsInSameDayAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withJavaUtilDate:(JavaUtilDate *)actual
                                             withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_areInSameDayOfMonthWithJavaUtilDate_withJavaUtilDate_(actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInSameDay_shouldBeInSameDayWithJavaUtilDate_withJavaUtilDate_(actual, other)];
}

+ (jboolean)areInSameDayOfMonthWithJavaUtilDate:(JavaUtilDate *)actual
                               withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_areInSameDayOfMonthWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

- (void)assertIsInSameHourAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilDate:(JavaUtilDate *)actual
                                              withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_areInSameHourWithJavaUtilDate_withJavaUtilDate_(actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInSameHour_shouldBeInSameHourWithJavaUtilDate_withJavaUtilDate_(actual, other)];
}

- (void)assertIsInSameHourWindowAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withJavaUtilDate:(JavaUtilDate *)actual
                                                    withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_areInSameHourWindowWithJavaUtilDate_withJavaUtilDate_(actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInSameHourWindow_shouldBeInSameHourWindowWithJavaUtilDate_withJavaUtilDate_(actual, other)];
}

+ (jboolean)areInSameHourWindowWithJavaUtilDate:(JavaUtilDate *)actual
                               withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_areInSameHourWindowWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

+ (jboolean)areInSameHourWithJavaUtilDate:(JavaUtilDate *)actual
                         withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_areInSameHourWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

- (void)assertIsInSameMinuteAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withJavaUtilDate:(JavaUtilDate *)actual
                                                withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_areInSameMinuteWithJavaUtilDate_withJavaUtilDate_(actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInSameMinute_shouldBeInSameMinuteWithJavaUtilDate_withJavaUtilDate_(actual, other)];
}

- (void)assertIsInSameMinuteWindowAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                      withJavaUtilDate:(JavaUtilDate *)actual
                                                      withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_areInSameMinuteWindowWithJavaUtilDate_withJavaUtilDate_(actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInSameMinuteWindow_shouldBeInSameMinuteWindowWithJavaUtilDate_withJavaUtilDate_(actual, other)];
}

+ (jboolean)areInSameMinuteWithJavaUtilDate:(JavaUtilDate *)actual
                           withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_areInSameMinuteWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

+ (jboolean)areInSameMinuteWindowWithJavaUtilDate:(JavaUtilDate *)actual
                                 withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_areInSameMinuteWindowWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

- (void)assertIsInSameSecondAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withJavaUtilDate:(JavaUtilDate *)actual
                                                withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_areInSameSecondWithJavaUtilDate_withJavaUtilDate_(actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInSameSecond_shouldBeInSameSecondWithJavaUtilDate_withJavaUtilDate_(actual, other)];
}

- (void)assertIsInSameSecondWindowAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                      withJavaUtilDate:(JavaUtilDate *)actual
                                                      withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  if (OrgAssertjCoreInternalInternalDates_areInSameSecondWindowWithJavaUtilDate_withJavaUtilDate_(actual, other)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeInSameSecondWindow_shouldBeInSameSecondWindowWithJavaUtilDate_withJavaUtilDate_(actual, other)];
}

+ (jboolean)areInSameSecondWindowWithJavaUtilDate:(JavaUtilDate *)actual
                                 withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_areInSameSecondWindowWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

+ (jboolean)areInSameSecondWithJavaUtilDate:(JavaUtilDate *)actual
                           withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_areInSameSecondWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

- (void)assertIsCloseToWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaUtilDate:(JavaUtilDate *)actual
                                         withJavaUtilDate:(JavaUtilDate *)other
                                                 withLong:(jlong)deltaInMilliseconds {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(other);
  jlong difference = JavaLangMath_absWithLong_([((JavaUtilDate *) nil_chk(actual)) getTime] - [((JavaUtilDate *) nil_chk(other)) getTime]);
  if (difference <= deltaInMilliseconds) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeCloseTo_shouldBeCloseToWithJavaUtilDate_withJavaUtilDate_withLong_withLong_(actual, other, deltaInMilliseconds, difference)];
}

- (void)assertHasTimeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaUtilDate:(JavaUtilDate *)actual
                                               withLong:(jlong)timestamp {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  if ([((JavaUtilDate *) nil_chk(actual)) getTime] == timestamp) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveTime_shouldHaveTimeWithJavaUtilDate_withLong_(actual, timestamp)];
}

+ (void)dateParameterIsNotNullWithJavaUtilDate:(JavaUtilDate *)date {
  OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(date);
}

+ (void)startDateParameterIsNotNullWithJavaUtilDate:(JavaUtilDate *)start {
  OrgAssertjCoreInternalInternalDates_startDateParameterIsNotNullWithJavaUtilDate_(start);
}

+ (void)endDateParameterIsNotNullWithJavaUtilDate:(JavaUtilDate *)end {
  OrgAssertjCoreInternalInternalDates_endDateParameterIsNotNullWithJavaUtilDate_(end);
}

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaUtilDate:(JavaUtilDate *)actual {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
}

- (jboolean)isBeforeOrEqualToWithJavaUtilDate:(JavaUtilDate *)actual
                             withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_isBeforeOrEqualToWithJavaUtilDate_withJavaUtilDate_(self, actual, other);
}

- (jboolean)areEqualWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_areEqualWithJavaUtilDate_withJavaUtilDate_(self, actual, other);
}

- (jboolean)isAfterOrEqualToWithJavaUtilDate:(JavaUtilDate *)actual
                            withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_isAfterOrEqualToWithJavaUtilDate_withJavaUtilDate_(self, actual, other);
}

- (jboolean)isBeforeWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_isBeforeWithJavaUtilDate_withJavaUtilDate_(self, actual, other);
}

- (jboolean)isAfterWithJavaUtilDate:(JavaUtilDate *)actual
                   withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreInternalInternalDates_isAfterWithJavaUtilDate_withJavaUtilDate_(self, actual, other);
}

- (void)dealloc {
  RELEASE_(failures_);
  RELEASE_(comparisonStrategy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalInternalDates;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 37, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 38, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 41, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 42, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 45, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 46, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 53, 52, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 54, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 56, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 57, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 58, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 59, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 60, 30, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(getComparator);
  methods[4].selector = @selector(assertIsBeforeWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[5].selector = @selector(assertIsBeforeOrEqualsToWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[6].selector = @selector(assertIsAfterWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[7].selector = @selector(assertIsAfterOrEqualsToWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[8].selector = @selector(assertIsEqualWithPrecisionWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:withJavaUtilConcurrentTimeUnit:);
  methods[9].selector = @selector(assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:withJavaUtilDate:withBoolean:withBoolean:);
  methods[10].selector = @selector(actualIsBetweenGivenPeriodWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:withJavaUtilDate:withBoolean:withBoolean:);
  methods[11].selector = @selector(assertIsNotBetweenWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:withJavaUtilDate:withBoolean:withBoolean:);
  methods[12].selector = @selector(assertIsInThePastWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:);
  methods[13].selector = @selector(assertIsTodayWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:);
  methods[14].selector = @selector(assertIsInTheFutureWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:);
  methods[15].selector = @selector(assertIsBeforeYearWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withInt:);
  methods[16].selector = @selector(assertIsAfterYearWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withInt:);
  methods[17].selector = @selector(assertIsWithinYearWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withInt:);
  methods[18].selector = @selector(assertIsWithinMonthWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withInt:);
  methods[19].selector = @selector(assertIsWithinDayOfMonthWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withInt:);
  methods[20].selector = @selector(assertIsWithinDayOfWeekWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withInt:);
  methods[21].selector = @selector(assertIsWithinHourOfDayWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withInt:);
  methods[22].selector = @selector(assertIsWithinMinuteWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withInt:);
  methods[23].selector = @selector(assertIsWithinSecondWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withInt:);
  methods[24].selector = @selector(assertIsWithinMillisecondWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withInt:);
  methods[25].selector = @selector(assertIsInSameYearAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[26].selector = @selector(areInSameYearWithJavaUtilDate:withJavaUtilDate:);
  methods[27].selector = @selector(assertIsInSameMonthAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[28].selector = @selector(areInSameMonthWithJavaUtilDate:withJavaUtilDate:);
  methods[29].selector = @selector(assertIsInSameDayAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[30].selector = @selector(areInSameDayOfMonthWithJavaUtilDate:withJavaUtilDate:);
  methods[31].selector = @selector(assertIsInSameHourAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[32].selector = @selector(assertIsInSameHourWindowAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[33].selector = @selector(areInSameHourWindowWithJavaUtilDate:withJavaUtilDate:);
  methods[34].selector = @selector(areInSameHourWithJavaUtilDate:withJavaUtilDate:);
  methods[35].selector = @selector(assertIsInSameMinuteAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[36].selector = @selector(assertIsInSameMinuteWindowAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[37].selector = @selector(areInSameMinuteWithJavaUtilDate:withJavaUtilDate:);
  methods[38].selector = @selector(areInSameMinuteWindowWithJavaUtilDate:withJavaUtilDate:);
  methods[39].selector = @selector(assertIsInSameSecondAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[40].selector = @selector(assertIsInSameSecondWindowAsWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:);
  methods[41].selector = @selector(areInSameSecondWindowWithJavaUtilDate:withJavaUtilDate:);
  methods[42].selector = @selector(areInSameSecondWithJavaUtilDate:withJavaUtilDate:);
  methods[43].selector = @selector(assertIsCloseToWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withJavaUtilDate:withLong:);
  methods[44].selector = @selector(assertHasTimeWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:withLong:);
  methods[45].selector = @selector(dateParameterIsNotNullWithJavaUtilDate:);
  methods[46].selector = @selector(startDateParameterIsNotNullWithJavaUtilDate:);
  methods[47].selector = @selector(endDateParameterIsNotNullWithJavaUtilDate:);
  methods[48].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withJavaUtilDate:);
  methods[49].selector = @selector(isBeforeOrEqualToWithJavaUtilDate:withJavaUtilDate:);
  methods[50].selector = @selector(areEqualWithJavaUtilDate:withJavaUtilDate:);
  methods[51].selector = @selector(isAfterOrEqualToWithJavaUtilDate:withJavaUtilDate:);
  methods[52].selector = @selector(isBeforeWithJavaUtilDate:withJavaUtilDate:);
  methods[53].selector = @selector(isAfterWithJavaUtilDate:withJavaUtilDate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalInternalDates;", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "comparisonStrategy_", "LOrgAssertjCoreInternalComparisonStrategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgAssertjCoreInternalComparisonStrategy;", "()Ljava/util/Comparator<*>;", "assertIsBefore", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilDate;LJavaUtilDate;", "assertIsBeforeOrEqualsTo", "assertIsAfter", "assertIsAfterOrEqualsTo", "assertIsEqualWithPrecision", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilDate;LJavaUtilDate;LJavaUtilConcurrentTimeUnit;", "assertIsBetween", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilDate;LJavaUtilDate;LJavaUtilDate;ZZ", "actualIsBetweenGivenPeriod", "assertIsNotBetween", "assertIsInThePast", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilDate;", "assertIsToday", "assertIsInTheFuture", "assertIsBeforeYear", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilDate;I", "assertIsAfterYear", "assertIsWithinYear", "assertIsWithinMonth", "assertIsWithinDayOfMonth", "assertIsWithinDayOfWeek", "assertIsWithinHourOfDay", "assertIsWithinMinute", "assertIsWithinSecond", "assertIsWithinMillisecond", "assertIsInSameYearAs", "areInSameYear", "LJavaUtilDate;LJavaUtilDate;", "assertIsInSameMonthAs", "areInSameMonth", "assertIsInSameDayAs", "areInSameDayOfMonth", "assertIsInSameHourAs", "assertIsInSameHourWindowAs", "areInSameHourWindow", "areInSameHour", "assertIsInSameMinuteAs", "assertIsInSameMinuteWindowAs", "areInSameMinute", "areInSameMinuteWindow", "assertIsInSameSecondAs", "assertIsInSameSecondWindowAs", "areInSameSecondWindow", "areInSameSecond", "assertIsCloseTo", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilDate;LJavaUtilDate;J", "assertHasTime", "LOrgAssertjCoreApiAssertionInfo;LJavaUtilDate;J", "dateParameterIsNotNull", "LJavaUtilDate;", "startDateParameterIsNotNull", "endDateParameterIsNotNull", "assertNotNull", "isBeforeOrEqualTo", "areEqual", "isAfterOrEqualTo", "isBefore", "isAfter", &OrgAssertjCoreInternalInternalDates_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInternalDates = { "InternalDates", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 54, 3, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInternalDates;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalInternalDates class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalInternalDates_INSTANCE, new_OrgAssertjCoreInternalInternalDates_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalInternalDates)
  }
}

@end

OrgAssertjCoreInternalInternalDates *OrgAssertjCoreInternalInternalDates_instance() {
  OrgAssertjCoreInternalInternalDates_initialize();
  return OrgAssertjCoreInternalInternalDates_INSTANCE;
}

void OrgAssertjCoreInternalInternalDates_init(OrgAssertjCoreInternalInternalDates *self) {
  OrgAssertjCoreInternalInternalDates_initWithOrgAssertjCoreInternalComparisonStrategy_(self, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

OrgAssertjCoreInternalInternalDates *new_OrgAssertjCoreInternalInternalDates_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalDates, init)
}

OrgAssertjCoreInternalInternalDates *create_OrgAssertjCoreInternalInternalDates_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalDates, init)
}

void OrgAssertjCoreInternalInternalDates_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalInternalDates *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  NSObject_init(self);
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
  JreStrongAssign(&self->comparisonStrategy_, comparisonStrategy);
}

OrgAssertjCoreInternalInternalDates *new_OrgAssertjCoreInternalInternalDates_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalDates, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

OrgAssertjCoreInternalInternalDates *create_OrgAssertjCoreInternalInternalDates_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalDates, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

jboolean OrgAssertjCoreInternalInternalDates_actualIsBetweenGivenPeriodWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_(OrgAssertjCoreInternalInternalDates *self, id<OrgAssertjCoreApiAssertionInfo> info, JavaUtilDate *actual, JavaUtilDate *start, JavaUtilDate *end, jboolean inclusiveStart, jboolean inclusiveEnd) {
  OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(self, info, actual);
  OrgAssertjCoreInternalInternalDates_startDateParameterIsNotNullWithJavaUtilDate_(start);
  OrgAssertjCoreInternalInternalDates_endDateParameterIsNotNullWithJavaUtilDate_(end);
  jboolean checkLowerBoundaryPeriod = inclusiveStart ? OrgAssertjCoreInternalInternalDates_isAfterOrEqualToWithJavaUtilDate_withJavaUtilDate_(self, actual, start) : OrgAssertjCoreInternalInternalDates_isAfterWithJavaUtilDate_withJavaUtilDate_(self, actual, start);
  jboolean checkUpperBoundaryPeriod = inclusiveEnd ? OrgAssertjCoreInternalInternalDates_isBeforeOrEqualToWithJavaUtilDate_withJavaUtilDate_(self, actual, end) : OrgAssertjCoreInternalInternalDates_isBeforeWithJavaUtilDate_withJavaUtilDate_(self, actual, end);
  jboolean isBetweenGivenPeriod = checkLowerBoundaryPeriod && checkUpperBoundaryPeriod;
  return isBetweenGivenPeriod;
}

jboolean OrgAssertjCoreInternalInternalDates_areInSameYearWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreInternalInternalDates_initialize();
  return OrgAssertjCoreUtilDates_yearOfWithJavaUtilDate_(actual) == OrgAssertjCoreUtilDates_yearOfWithJavaUtilDate_(other);
}

jboolean OrgAssertjCoreInternalInternalDates_areInSameMonthWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreInternalInternalDates_initialize();
  return OrgAssertjCoreInternalInternalDates_areInSameYearWithJavaUtilDate_withJavaUtilDate_(actual, other) && OrgAssertjCoreUtilDates_monthOfWithJavaUtilDate_(actual) == OrgAssertjCoreUtilDates_monthOfWithJavaUtilDate_(other);
}

jboolean OrgAssertjCoreInternalInternalDates_areInSameDayOfMonthWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreInternalInternalDates_initialize();
  return OrgAssertjCoreInternalInternalDates_areInSameMonthWithJavaUtilDate_withJavaUtilDate_(actual, other) && OrgAssertjCoreUtilDates_dayOfMonthOfWithJavaUtilDate_(actual) == OrgAssertjCoreUtilDates_dayOfMonthOfWithJavaUtilDate_(other);
}

jboolean OrgAssertjCoreInternalInternalDates_areInSameHourWindowWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreInternalInternalDates_initialize();
  return OrgAssertjCoreUtilDates_timeDifferenceWithJavaUtilDate_withJavaUtilDate_(actual, other) < [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, HOURS))) toMillisWithLong:1];
}

jboolean OrgAssertjCoreInternalInternalDates_areInSameHourWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreInternalInternalDates_initialize();
  return OrgAssertjCoreInternalInternalDates_areInSameDayOfMonthWithJavaUtilDate_withJavaUtilDate_(actual, other) && OrgAssertjCoreUtilDates_hourOfDayOfWithJavaUtilDate_(actual) == OrgAssertjCoreUtilDates_hourOfDayOfWithJavaUtilDate_(other);
}

jboolean OrgAssertjCoreInternalInternalDates_areInSameMinuteWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreInternalInternalDates_initialize();
  return OrgAssertjCoreInternalInternalDates_areInSameHourWithJavaUtilDate_withJavaUtilDate_(actual, other) && OrgAssertjCoreUtilDates_minuteOfWithJavaUtilDate_(actual) == OrgAssertjCoreUtilDates_minuteOfWithJavaUtilDate_(other);
}

jboolean OrgAssertjCoreInternalInternalDates_areInSameMinuteWindowWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreInternalInternalDates_initialize();
  return OrgAssertjCoreUtilDates_timeDifferenceWithJavaUtilDate_withJavaUtilDate_(actual, other) < [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES))) toMillisWithLong:1];
}

jboolean OrgAssertjCoreInternalInternalDates_areInSameSecondWindowWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreInternalInternalDates_initialize();
  return OrgAssertjCoreUtilDates_timeDifferenceWithJavaUtilDate_withJavaUtilDate_(actual, other) < [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS))) toMillisWithLong:1];
}

jboolean OrgAssertjCoreInternalInternalDates_areInSameSecondWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreInternalInternalDates_initialize();
  return OrgAssertjCoreInternalInternalDates_areInSameMinuteWithJavaUtilDate_withJavaUtilDate_(actual, other) && OrgAssertjCoreUtilDates_secondOfWithJavaUtilDate_(actual) == OrgAssertjCoreUtilDates_secondOfWithJavaUtilDate_(other);
}

void OrgAssertjCoreInternalInternalDates_dateParameterIsNotNullWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreInternalInternalDates_initialize();
  if (date == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The date to compare actual with should not be null");
}

void OrgAssertjCoreInternalInternalDates_startDateParameterIsNotNullWithJavaUtilDate_(JavaUtilDate *start) {
  OrgAssertjCoreInternalInternalDates_initialize();
  if (start == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The start date of period to compare actual with should not be null");
}

void OrgAssertjCoreInternalInternalDates_endDateParameterIsNotNullWithJavaUtilDate_(JavaUtilDate *end) {
  OrgAssertjCoreInternalInternalDates_initialize();
  if (end == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The end date of period to compare actual with should not be null");
}

void OrgAssertjCoreInternalInternalDates_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, id<OrgAssertjCoreApiAssertionInfo> info, JavaUtilDate *actual) {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
}

jboolean OrgAssertjCoreInternalInternalDates_isBeforeOrEqualToWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, JavaUtilDate *actual, JavaUtilDate *other) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) isLessThanOrEqualToWithId:actual withId:other];
}

jboolean OrgAssertjCoreInternalInternalDates_areEqualWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, JavaUtilDate *actual, JavaUtilDate *other) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) areEqualWithId:other withId:actual];
}

jboolean OrgAssertjCoreInternalInternalDates_isAfterOrEqualToWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, JavaUtilDate *actual, JavaUtilDate *other) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) isGreaterThanOrEqualToWithId:actual withId:other];
}

jboolean OrgAssertjCoreInternalInternalDates_isBeforeWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, JavaUtilDate *actual, JavaUtilDate *other) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) isLessThanWithId:actual withId:other];
}

jboolean OrgAssertjCoreInternalInternalDates_isAfterWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreInternalInternalDates *self, JavaUtilDate *actual, JavaUtilDate *other) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) isGreaterThanWithId:actual withId:other];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInternalDates)
