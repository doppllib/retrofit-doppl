//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreGroupsProperties.h"
#include "OrgAssertjCoreInternalPropertySupport.h"
#include "OrgAssertjCoreUtilArrayWrapperList.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"

@interface OrgAssertjCoreGroupsProperties ()

+ (void)checkIsNotNullOrEmptyWithNSString:(NSString *)propertyName;

@end

__attribute__((unused)) static void OrgAssertjCoreGroupsProperties_checkIsNotNullOrEmptyWithNSString_(NSString *propertyName);

@implementation OrgAssertjCoreGroupsProperties

+ (OrgAssertjCoreGroupsProperties *)extractPropertyWithNSString:(NSString *)propertyName
                                                   withIOSClass:(IOSClass *)propertyType {
  return OrgAssertjCoreGroupsProperties_extractPropertyWithNSString_withIOSClass_(propertyName, propertyType);
}

+ (OrgAssertjCoreGroupsProperties *)extractPropertyWithNSString:(NSString *)propertyName {
  return OrgAssertjCoreGroupsProperties_extractPropertyWithNSString_(propertyName);
}

+ (void)checkIsNotNullOrEmptyWithNSString:(NSString *)propertyName {
  OrgAssertjCoreGroupsProperties_checkIsNotNullOrEmptyWithNSString_(propertyName);
}

- (instancetype)initWithNSString:(NSString *)propertyName
                    withIOSClass:(IOSClass *)propertyType {
  OrgAssertjCoreGroupsProperties_initWithNSString_withIOSClass_(self, propertyName, propertyType);
  return self;
}

- (OrgAssertjCoreGroupsProperties *)ofTypeWithIOSClass:(IOSClass *)propertyType {
  return OrgAssertjCoreGroupsProperties_extractPropertyWithNSString_withIOSClass_(self->propertyName_, propertyType);
}

- (id<JavaUtilList>)fromWithJavaLangIterable:(id<JavaLangIterable>)c {
  return [((OrgAssertjCoreInternalPropertySupport *) nil_chk(propertySupport_)) propertyValuesWithNSString:propertyName_ withIOSClass:propertyType_ withJavaLangIterable:c];
}

- (id<JavaUtilList>)fromWithNSObjectArray:(IOSObjectArray *)array {
  return [((OrgAssertjCoreInternalPropertySupport *) nil_chk(propertySupport_)) propertyValuesWithNSString:propertyName_ withIOSClass:propertyType_ withJavaLangIterable:OrgAssertjCoreUtilArrayWrapperList_wrapWithId_(array)];
}

- (void)dealloc {
  RELEASE_(propertyName_);
  RELEASE_(propertyType_);
  RELEASE_(propertySupport_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreGroupsProperties;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreGroupsProperties;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "V", 0xa, 5, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreGroupsProperties;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 10, 13, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(extractPropertyWithNSString:withIOSClass:);
  methods[1].selector = @selector(extractPropertyWithNSString:);
  methods[2].selector = @selector(checkIsNotNullOrEmptyWithNSString:);
  methods[3].selector = @selector(initWithNSString:withIOSClass:);
  methods[4].selector = @selector(ofTypeWithIOSClass:);
  methods[5].selector = @selector(fromWithJavaLangIterable:);
  methods[6].selector = @selector(fromWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "propertyName_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "propertyType_", "LIOSClass;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "propertySupport_", "LOrgAssertjCoreInternalPropertySupport;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "extractProperty", "LNSString;LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT;>;)Lorg/assertj/core/groups/Properties<TT;>;", "LNSString;", "(Ljava/lang/String;)Lorg/assertj/core/groups/Properties<Ljava/lang/Object;>;", "checkIsNotNullOrEmpty", "(Ljava/lang/String;Ljava/lang/Class<TT;>;)V", "ofType", "LIOSClass;", "<U:Ljava/lang/Object;>(Ljava/lang/Class<TU;>;)Lorg/assertj/core/groups/Properties<TU;>;", "from", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)Ljava/util/List<TT;>;", "[LNSObject;", "([Ljava/lang/Object;)Ljava/util/List<TT;>;", "Ljava/lang/Class<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgAssertjCoreGroupsProperties = { "Properties", "org.assertj.core.groups", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, 16, -1 };
  return &_OrgAssertjCoreGroupsProperties;
}

@end

OrgAssertjCoreGroupsProperties *OrgAssertjCoreGroupsProperties_extractPropertyWithNSString_withIOSClass_(NSString *propertyName, IOSClass *propertyType) {
  OrgAssertjCoreGroupsProperties_initialize();
  OrgAssertjCoreGroupsProperties_checkIsNotNullOrEmptyWithNSString_(propertyName);
  return create_OrgAssertjCoreGroupsProperties_initWithNSString_withIOSClass_(propertyName, propertyType);
}

OrgAssertjCoreGroupsProperties *OrgAssertjCoreGroupsProperties_extractPropertyWithNSString_(NSString *propertyName) {
  OrgAssertjCoreGroupsProperties_initialize();
  return OrgAssertjCoreGroupsProperties_extractPropertyWithNSString_withIOSClass_(propertyName, NSObject_class_());
}

void OrgAssertjCoreGroupsProperties_checkIsNotNullOrEmptyWithNSString_(NSString *propertyName) {
  OrgAssertjCoreGroupsProperties_initialize();
  if (propertyName == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The name of the property to read should not be null");
  if (((jint) [propertyName length]) == 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The name of the property to read should not be empty");
}

void OrgAssertjCoreGroupsProperties_initWithNSString_withIOSClass_(OrgAssertjCoreGroupsProperties *self, NSString *propertyName, IOSClass *propertyType) {
  NSObject_init(self);
  JreStrongAssign(&self->propertySupport_, OrgAssertjCoreInternalPropertySupport_instance());
  JreStrongAssign(&self->propertyName_, propertyName);
  JreStrongAssign(&self->propertyType_, propertyType);
}

OrgAssertjCoreGroupsProperties *new_OrgAssertjCoreGroupsProperties_initWithNSString_withIOSClass_(NSString *propertyName, IOSClass *propertyType) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreGroupsProperties, initWithNSString_withIOSClass_, propertyName, propertyType)
}

OrgAssertjCoreGroupsProperties *create_OrgAssertjCoreGroupsProperties_initWithNSString_withIOSClass_(NSString *propertyName, IOSClass *propertyType) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreGroupsProperties, initWithNSString_withIOSClass_, propertyName, propertyType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreGroupsProperties)
