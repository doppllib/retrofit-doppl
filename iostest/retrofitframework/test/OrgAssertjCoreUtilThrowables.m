//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilLists.h"
#include "OrgAssertjCoreUtilThrowables.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface OrgAssertjCoreUtilThrowables ()

+ (id<JavaUtilList>)stackTraceInCurrentThreadWithNSString:(NSString *)methodToStartFrom;

+ (id<JavaUtilList>)stackTraceInCurrentThread;

- (instancetype)init;

@end

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreUtilThrowables_stackTraceInCurrentThreadWithNSString_(NSString *methodToStartFrom);

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreUtilThrowables_stackTraceInCurrentThread();

__attribute__((unused)) static void OrgAssertjCoreUtilThrowables_init(OrgAssertjCoreUtilThrowables *self);

__attribute__((unused)) static OrgAssertjCoreUtilThrowables *new_OrgAssertjCoreUtilThrowables_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreUtilThrowables *create_OrgAssertjCoreUtilThrowables_init();

@implementation OrgAssertjCoreUtilThrowables

+ (void)appendStackTraceInCurentThreadToThrowableWithNSException:(NSException *)t
                                                    withNSString:(NSString *)methodToStartFrom {
  OrgAssertjCoreUtilThrowables_appendStackTraceInCurentThreadToThrowableWithNSException_withNSString_(t, methodToStartFrom);
}

+ (id<JavaUtilList>)stackTraceInCurrentThreadWithNSString:(NSString *)methodToStartFrom {
  return OrgAssertjCoreUtilThrowables_stackTraceInCurrentThreadWithNSString_(methodToStartFrom);
}

+ (id<JavaUtilList>)stackTraceInCurrentThread {
  return OrgAssertjCoreUtilThrowables_stackTraceInCurrentThread();
}

+ (void)removeAssertJRelatedElementsFromStackTraceWithNSException:(NSException *)throwable {
  OrgAssertjCoreUtilThrowables_removeAssertJRelatedElementsFromStackTraceWithNSException_(throwable);
}

+ (NSException *)getRootCauseWithNSException:(NSException *)throwable {
  return OrgAssertjCoreUtilThrowables_getRootCauseWithNSException_(throwable);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilThrowables_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x9, 8, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(appendStackTraceInCurentThreadToThrowableWithNSException:withNSString:);
  methods[1].selector = @selector(stackTraceInCurrentThreadWithNSString:);
  methods[2].selector = @selector(stackTraceInCurrentThread);
  methods[3].selector = @selector(removeAssertJRelatedElementsFromStackTraceWithNSException:);
  methods[4].selector = @selector(getRootCauseWithNSException:);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "appendStackTraceInCurentThreadToThrowable", "LNSException;LNSString;", "stackTraceInCurrentThread", "LNSString;", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/StackTraceElement;>;", "()Ljava/util/List<Ljava/lang/StackTraceElement;>;", "removeAssertJRelatedElementsFromStackTrace", "LNSException;", "getRootCause" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilThrowables = { "Throwables", "org.assertj.core.util", ptrTable, methods, NULL, 7, 0x11, 6, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilThrowables;
}

@end

void OrgAssertjCoreUtilThrowables_appendStackTraceInCurentThreadToThrowableWithNSException_withNSString_(NSException *t, NSString *methodToStartFrom) {
  OrgAssertjCoreUtilThrowables_initialize();
  id<JavaUtilList> stackTrace = OrgAssertjCoreUtilLists_newArrayListWithNSObjectArray_([((NSException *) nil_chk(t)) getStackTrace]);
  [((id<JavaUtilList>) nil_chk(stackTrace)) addAllWithJavaUtilCollection:OrgAssertjCoreUtilThrowables_stackTraceInCurrentThreadWithNSString_(methodToStartFrom)];
  [t setStackTraceWithJavaLangStackTraceElementArray:[stackTrace toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[stackTrace size] type:JavaLangStackTraceElement_class_()]]];
}

id<JavaUtilList> OrgAssertjCoreUtilThrowables_stackTraceInCurrentThreadWithNSString_(NSString *methodToStartFrom) {
  OrgAssertjCoreUtilThrowables_initialize();
  id<JavaUtilList> filtered = OrgAssertjCoreUtilThrowables_stackTraceInCurrentThread();
  id<JavaUtilList> toRemove = create_JavaUtilArrayList_init();
  for (JavaLangStackTraceElement * __strong e in nil_chk(filtered)) {
    if ([((NSString *) nil_chk(methodToStartFrom)) isEqual:[((JavaLangStackTraceElement *) nil_chk(e)) getMethodName]]) {
      break;
    }
    [toRemove addWithId:e];
  }
  [filtered removeAllWithJavaUtilCollection:toRemove];
  return filtered;
}

id<JavaUtilList> OrgAssertjCoreUtilThrowables_stackTraceInCurrentThread() {
  OrgAssertjCoreUtilThrowables_initialize();
  return OrgAssertjCoreUtilLists_newArrayListWithNSObjectArray_([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getStackTrace]);
}

void OrgAssertjCoreUtilThrowables_removeAssertJRelatedElementsFromStackTraceWithNSException_(NSException *throwable) {
  OrgAssertjCoreUtilThrowables_initialize();
  id<JavaUtilList> filtered = OrgAssertjCoreUtilLists_newArrayListWithNSObjectArray_([((NSException *) nil_chk(throwable)) getStackTrace]);
  JavaLangStackTraceElement *previous = nil;
  {
    IOSObjectArray *a__ = [throwable getStackTrace];
    JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangStackTraceElement *element = *b__++;
      if ([((NSString *) nil_chk([((JavaLangStackTraceElement *) nil_chk(element)) getClassName])) java_contains:@"org.assert"]) {
        [((id<JavaUtilList>) nil_chk(filtered)) removeWithId:element];
        if (previous != nil && [((NSString *) nil_chk([previous getClassName])) isEqual:@"java.lang.reflect.Constructor"] && [((NSString *) nil_chk([element getClassName])) java_contains:@"org.assertj.core.error.ConstructorInvoker"]) {
          [filtered removeWithId:previous];
        }
      }
      previous = element;
    }
  }
  IOSObjectArray *newStackTrace = [((id<JavaUtilList>) nil_chk(filtered)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[filtered size] type:JavaLangStackTraceElement_class_()]];
  [throwable setStackTraceWithJavaLangStackTraceElementArray:newStackTrace];
}

NSException *OrgAssertjCoreUtilThrowables_getRootCauseWithNSException_(NSException *throwable) {
  OrgAssertjCoreUtilThrowables_initialize();
  if ([((NSException *) nil_chk(throwable)) getCause] == nil) return nil;
  NSException *cause;
  while ((cause = [((NSException *) nil_chk(throwable)) getCause]) != nil) throwable = cause;
  return throwable;
}

void OrgAssertjCoreUtilThrowables_init(OrgAssertjCoreUtilThrowables *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilThrowables *new_OrgAssertjCoreUtilThrowables_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilThrowables, init)
}

OrgAssertjCoreUtilThrowables *create_OrgAssertjCoreUtilThrowables_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilThrowables, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilThrowables)
