//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractComparableAssert.h"
#include "OrgAssertjCoreApiAbstractLongAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalLongs.h"
#include "java/lang/Long.h"
#include "java/util/Comparator.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractLongAssert

- (instancetype)initWithJavaLangLong:(JavaLangLong *)actual
                        withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractLongAssert_initWithJavaLangLong_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractLongAssert *)isEqualToWithLong:(jlong)expected {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertEqualWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:JavaLangLong_valueOfWithLong_(expected)];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isNotEqualToWithLong:(jlong)other {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertNotEqualWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:JavaLangLong_valueOfWithLong_(other)];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isZero {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertIsZeroWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isNotZero {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertIsNotZeroWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isPositive {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertIsPositiveWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isNegative {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertIsNegativeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isNotNegative {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertIsNotNegativeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isNotPositive {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertIsNotPositiveWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isLessThanWithLong:(jlong)other {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertLessThanWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangLong_valueOfWithLong_(other)];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isLessThanOrEqualToWithLong:(jlong)other {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertLessThanOrEqualToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangLong_valueOfWithLong_(other)];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isGreaterThanWithLong:(jlong)other {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertGreaterThanWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangLong_valueOfWithLong_(other)];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isGreaterThanOrEqualToWithLong:(jlong)other {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertGreaterThanOrEqualToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangLong_valueOfWithLong_(other)];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isBetweenWithNSNumber:(JavaLangLong *)start
                                                  withNSNumber:(JavaLangLong *)end {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:start withJavaLangComparable:end];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)isStrictlyBetweenWithNSNumber:(JavaLangLong *)start
                                                          withNSNumber:(JavaLangLong *)end {
  [((OrgAssertjCoreInternalLongs *) nil_chk(longs_)) assertIsStrictlyBetweenWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:start withJavaLangComparable:end];
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)usingComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)customComparator {
  [super usingComparatorWithJavaUtilComparator:customComparator];
  JreStrongAssignAndConsume(&longs_, new_OrgAssertjCoreInternalLongs_initWithOrgAssertjCoreInternalComparisonStrategy_(create_OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(customComparator)));
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractLongAssert *)usingDefaultComparator {
  [super usingDefaultComparator];
  JreStrongAssign(&longs_, OrgAssertjCoreInternalLongs_instance());
  return ((OrgAssertjCoreApiAbstractLongAssert *) myself_);
}

- (void)dealloc {
  RELEASE_(longs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, 7, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, 8, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, 9, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, 10, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, 14, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangLong:withIOSClass:);
  methods[1].selector = @selector(isEqualToWithLong:);
  methods[2].selector = @selector(isNotEqualToWithLong:);
  methods[3].selector = @selector(isZero);
  methods[4].selector = @selector(isNotZero);
  methods[5].selector = @selector(isPositive);
  methods[6].selector = @selector(isNegative);
  methods[7].selector = @selector(isNotNegative);
  methods[8].selector = @selector(isNotPositive);
  methods[9].selector = @selector(isLessThanWithLong:);
  methods[10].selector = @selector(isLessThanOrEqualToWithLong:);
  methods[11].selector = @selector(isGreaterThanWithLong:);
  methods[12].selector = @selector(isGreaterThanOrEqualToWithLong:);
  methods[13].selector = @selector(isBetweenWithNSNumber:withNSNumber:);
  methods[14].selector = @selector(isStrictlyBetweenWithNSNumber:withNSNumber:);
  methods[15].selector = @selector(usingComparatorWithJavaUtilComparator:);
  methods[16].selector = @selector(usingDefaultComparator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "longs_", "LOrgAssertjCoreInternalLongs;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangLong;LIOSClass;", "(Ljava/lang/Long;Ljava/lang/Class<*>;)V", "isEqualTo", "J", "(J)TS;", "isNotEqualTo", "()TS;", "isLessThan", "isLessThanOrEqualTo", "isGreaterThan", "isGreaterThanOrEqualTo", "isBetween", "LJavaLangLong;LJavaLangLong;", "(Ljava/lang/Long;Ljava/lang/Long;)TS;", "isStrictlyBetween", "usingComparator", "LJavaUtilComparator;", "(Ljava/util/Comparator<-Ljava/lang/Long;>;)TS;", "<S:Lorg/assertj/core/api/AbstractLongAssert<TS;>;>Lorg/assertj/core/api/AbstractComparableAssert<TS;Ljava/lang/Long;>;Lorg/assertj/core/api/NumberAssert<TS;Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractLongAssert = { "AbstractLongAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 17, 1, -1, -1, -1, 18, -1 };
  return &_OrgAssertjCoreApiAbstractLongAssert;
}

@end

void OrgAssertjCoreApiAbstractLongAssert_initWithJavaLangLong_withIOSClass_(OrgAssertjCoreApiAbstractLongAssert *self, JavaLangLong *actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractComparableAssert_initWithJavaLangComparable_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->longs_, OrgAssertjCoreInternalLongs_instance());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractLongAssert)
