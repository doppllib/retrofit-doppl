//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeExecutable.h"
#include "java/io/File.h"

@interface OrgAssertjCoreErrorShouldBeExecutable ()

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeExecutable_initWithJavaIoFile_(OrgAssertjCoreErrorShouldBeExecutable *self, JavaIoFile *actual);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeExecutable *new_OrgAssertjCoreErrorShouldBeExecutable_initWithJavaIoFile_(JavaIoFile *actual) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeExecutable *create_OrgAssertjCoreErrorShouldBeExecutable_initWithJavaIoFile_(JavaIoFile *actual);

@implementation OrgAssertjCoreErrorShouldBeExecutable

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreErrorShouldBeExecutable_initWithJavaIoFile_(self, actual);
  return self;
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeExecutableWithJavaIoFile:(JavaIoFile *)actual {
  return OrgAssertjCoreErrorShouldBeExecutable_shouldBeExecutableWithJavaIoFile_(actual);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoFile:);
  methods[1].selector = @selector(shouldBeExecutableWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoFile;", "shouldBeExecutable" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeExecutable = { "ShouldBeExecutable", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeExecutable;
}

@end

void OrgAssertjCoreErrorShouldBeExecutable_initWithJavaIoFile_(OrgAssertjCoreErrorShouldBeExecutable *self, JavaIoFile *actual) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto be executable", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeExecutable *new_OrgAssertjCoreErrorShouldBeExecutable_initWithJavaIoFile_(JavaIoFile *actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeExecutable, initWithJavaIoFile_, actual)
}

OrgAssertjCoreErrorShouldBeExecutable *create_OrgAssertjCoreErrorShouldBeExecutable_initWithJavaIoFile_(JavaIoFile *actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeExecutable, initWithJavaIoFile_, actual)
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeExecutable_shouldBeExecutableWithJavaIoFile_(JavaIoFile *actual) {
  OrgAssertjCoreErrorShouldBeExecutable_initialize();
  return create_OrgAssertjCoreErrorShouldBeExecutable_initWithJavaIoFile_(actual);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeExecutable)
