//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeInTheFuture.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/util/Date.h"

@interface OrgAssertjCoreErrorShouldBeInTheFuture ()

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeInTheFuture_initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldBeInTheFuture *self, JavaUtilDate *actual, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeInTheFuture *new_OrgAssertjCoreErrorShouldBeInTheFuture_initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeInTheFuture *create_OrgAssertjCoreErrorShouldBeInTheFuture_initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

@implementation OrgAssertjCoreErrorShouldBeInTheFuture

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeInTheFutureWithJavaUtilDate:(JavaUtilDate *)actual
                                     withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldBeInTheFuture_shouldBeInTheFutureWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, comparisonStrategy);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeInTheFutureWithJavaUtilDate:(JavaUtilDate *)actual {
  return OrgAssertjCoreErrorShouldBeInTheFuture_shouldBeInTheFutureWithJavaUtilDate_(actual);
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldBeInTheFuture_initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, comparisonStrategy);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeInTheFutureWithJavaUtilDate:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[1].selector = @selector(shouldBeInTheFutureWithJavaUtilDate:);
  methods[2].selector = @selector(initWithJavaUtilDate:withOrgAssertjCoreInternalComparisonStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeInTheFuture", "LJavaUtilDate;LOrgAssertjCoreInternalComparisonStrategy;", "LJavaUtilDate;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeInTheFuture = { "ShouldBeInTheFuture", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeInTheFuture;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeInTheFuture_shouldBeInTheFutureWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldBeInTheFuture_initialize();
  return create_OrgAssertjCoreErrorShouldBeInTheFuture_initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, comparisonStrategy);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeInTheFuture_shouldBeInTheFutureWithJavaUtilDate_(JavaUtilDate *actual) {
  OrgAssertjCoreErrorShouldBeInTheFuture_initialize();
  return create_OrgAssertjCoreErrorShouldBeInTheFuture_initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(actual, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

void OrgAssertjCoreErrorShouldBeInTheFuture_initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldBeInTheFuture *self, JavaUtilDate *actual, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto be in the future%s but was not.", [IOSObjectArray arrayWithObjects:(id[]){ actual, comparisonStrategy } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeInTheFuture *new_OrgAssertjCoreErrorShouldBeInTheFuture_initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeInTheFuture, initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_, actual, comparisonStrategy)
}

OrgAssertjCoreErrorShouldBeInTheFuture *create_OrgAssertjCoreErrorShouldBeInTheFuture_initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeInTheFuture, initWithJavaUtilDate_withOrgAssertjCoreInternalComparisonStrategy_, actual, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeInTheFuture)
