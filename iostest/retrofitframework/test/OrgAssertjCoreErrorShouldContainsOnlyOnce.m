//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldContainsOnlyOnce.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "OrgAssertjCoreUtilIterables.h"
#include "java/util/Set.h"

@interface OrgAssertjCoreErrorShouldContainsOnlyOnce ()

- (instancetype)initWithId:(id)actual
                    withId:(id)expected
           withJavaUtilSet:(id<JavaUtilSet>)notFound
           withJavaUtilSet:(id<JavaUtilSet>)notOnlyOnce
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

- (instancetype)initWithId:(id)actual
                    withId:(id)expected
           withJavaUtilSet:(id<JavaUtilSet>)notFound
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)notOnlyOnce
                             withId:(id)actual
                             withId:(id)expected
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainsOnlyOnce *self, id actual, id expected, id<JavaUtilSet> notFound, id<JavaUtilSet> notOnlyOnce, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainsOnlyOnce *new_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id<JavaUtilSet> notFound, id<JavaUtilSet> notOnlyOnce, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainsOnlyOnce *create_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id<JavaUtilSet> notFound, id<JavaUtilSet> notOnlyOnce, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static void OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainsOnlyOnce *self, id actual, id expected, id<JavaUtilSet> notFound, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainsOnlyOnce *new_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id<JavaUtilSet> notFound, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainsOnlyOnce *create_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id<JavaUtilSet> notFound, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static void OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithJavaUtilSet_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainsOnlyOnce *self, id<JavaUtilSet> notOnlyOnce, id actual, id expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainsOnlyOnce *new_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithJavaUtilSet_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaUtilSet> notOnlyOnce, id actual, id expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainsOnlyOnce *create_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithJavaUtilSet_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaUtilSet> notOnlyOnce, id actual, id expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

@implementation OrgAssertjCoreErrorShouldContainsOnlyOnce

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainsOnlyOnceWithId:(id)actual
                                                                    withId:(id)expected
                                                           withJavaUtilSet:(id<JavaUtilSet>)notFound
                                                           withJavaUtilSet:(id<JavaUtilSet>)notOnlyOnce
                              withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldContainsOnlyOnce_shouldContainsOnlyOnceWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(actual, expected, notFound, notOnlyOnce, comparisonStrategy);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainsOnlyOnceWithId:(id)actual
                                                                    withId:(id)expected
                                                           withJavaUtilSet:(id<JavaUtilSet>)notFound
                                                           withJavaUtilSet:(id<JavaUtilSet>)notOnlyOnce {
  return OrgAssertjCoreErrorShouldContainsOnlyOnce_shouldContainsOnlyOnceWithId_withId_withJavaUtilSet_withJavaUtilSet_(actual, expected, notFound, notOnlyOnce);
}

- (instancetype)initWithId:(id)actual
                    withId:(id)expected
           withJavaUtilSet:(id<JavaUtilSet>)notFound
           withJavaUtilSet:(id<JavaUtilSet>)notOnlyOnce
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, expected, notFound, notOnlyOnce, comparisonStrategy);
  return self;
}

- (instancetype)initWithId:(id)actual
                    withId:(id)expected
           withJavaUtilSet:(id<JavaUtilSet>)notFound
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, expected, notFound, comparisonStrategy);
  return self;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)notOnlyOnce
                             withId:(id)actual
                             withId:(id)expected
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithJavaUtilSet_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(self, notOnlyOnce, actual, expected, comparisonStrategy);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 5, -1, -1 },
    { NULL, NULL, 0x2, -1, 6, -1, 7, -1, -1 },
    { NULL, NULL, 0x2, -1, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldContainsOnlyOnceWithId:withId:withJavaUtilSet:withJavaUtilSet:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[1].selector = @selector(shouldContainsOnlyOnceWithId:withId:withJavaUtilSet:withJavaUtilSet:);
  methods[2].selector = @selector(initWithId:withId:withJavaUtilSet:withJavaUtilSet:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(initWithId:withId:withJavaUtilSet:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[4].selector = @selector(initWithJavaUtilSet:withId:withId:withOrgAssertjCoreInternalComparisonStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldContainsOnlyOnce", "LNSObject;LNSObject;LJavaUtilSet;LJavaUtilSet;LOrgAssertjCoreInternalComparisonStrategy;", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Set<*>;Ljava/util/Set<*>;Lorg/assertj/core/internal/ComparisonStrategy;)Lorg/assertj/core/error/ErrorMessageFactory;", "LNSObject;LNSObject;LJavaUtilSet;LJavaUtilSet;", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Set<*>;Ljava/util/Set<*>;)Lorg/assertj/core/error/ErrorMessageFactory;", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Set<*>;Ljava/util/Set<*>;Lorg/assertj/core/internal/ComparisonStrategy;)V", "LNSObject;LNSObject;LJavaUtilSet;LOrgAssertjCoreInternalComparisonStrategy;", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Set<*>;Lorg/assertj/core/internal/ComparisonStrategy;)V", "LJavaUtilSet;LNSObject;LNSObject;LOrgAssertjCoreInternalComparisonStrategy;", "(Ljava/util/Set<*>;Ljava/lang/Object;Ljava/lang/Object;Lorg/assertj/core/internal/ComparisonStrategy;)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldContainsOnlyOnce = { "ShouldContainsOnlyOnce", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldContainsOnlyOnce;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainsOnlyOnce_shouldContainsOnlyOnceWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id<JavaUtilSet> notFound, id<JavaUtilSet> notOnlyOnce, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldContainsOnlyOnce_initialize();
  if (!OrgAssertjCoreUtilIterables_isNullOrEmptyWithJavaLangIterable_(notFound) && !OrgAssertjCoreUtilIterables_isNullOrEmptyWithJavaLangIterable_(notOnlyOnce)) return create_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(actual, expected, notFound, notOnlyOnce, comparisonStrategy);
  if (!OrgAssertjCoreUtilIterables_isNullOrEmptyWithJavaLangIterable_(notFound)) return create_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(actual, expected, notFound, comparisonStrategy);
  return create_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithJavaUtilSet_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(notOnlyOnce, actual, expected, comparisonStrategy);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainsOnlyOnce_shouldContainsOnlyOnceWithId_withId_withJavaUtilSet_withJavaUtilSet_(id actual, id expected, id<JavaUtilSet> notFound, id<JavaUtilSet> notOnlyOnce) {
  OrgAssertjCoreErrorShouldContainsOnlyOnce_initialize();
  return OrgAssertjCoreErrorShouldContainsOnlyOnce_shouldContainsOnlyOnceWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(actual, expected, notFound, notOnlyOnce, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

void OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainsOnlyOnce *self, id actual, id expected, id<JavaUtilSet> notFound, id<JavaUtilSet> notOnlyOnce, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto contain only once:\n <%s>\nbut some elements were not found:\n <%s>\nand others were found more than once:\n <%s>\n%s", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected, notFound, notOnlyOnce, comparisonStrategy } count:5 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldContainsOnlyOnce *new_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id<JavaUtilSet> notFound, id<JavaUtilSet> notOnlyOnce, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldContainsOnlyOnce, initWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, notFound, notOnlyOnce, comparisonStrategy)
}

OrgAssertjCoreErrorShouldContainsOnlyOnce *create_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id<JavaUtilSet> notFound, id<JavaUtilSet> notOnlyOnce, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldContainsOnlyOnce, initWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, notFound, notOnlyOnce, comparisonStrategy)
}

void OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainsOnlyOnce *self, id actual, id expected, id<JavaUtilSet> notFound, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto contain only once:\n <%s>\nbut some elements were not found:\n <%s>\n%s", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected, notFound, comparisonStrategy } count:4 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldContainsOnlyOnce *new_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id<JavaUtilSet> notFound, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldContainsOnlyOnce, initWithId_withId_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, notFound, comparisonStrategy)
}

OrgAssertjCoreErrorShouldContainsOnlyOnce *create_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithId_withId_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id expected, id<JavaUtilSet> notFound, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldContainsOnlyOnce, initWithId_withId_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_, actual, expected, notFound, comparisonStrategy)
}

void OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithJavaUtilSet_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainsOnlyOnce *self, id<JavaUtilSet> notOnlyOnce, id actual, id expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto contain only once:\n <%s>\nbut some elements were found more than once:\n <%s>\n%s", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected, notOnlyOnce, comparisonStrategy } count:4 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldContainsOnlyOnce *new_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithJavaUtilSet_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaUtilSet> notOnlyOnce, id actual, id expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldContainsOnlyOnce, initWithJavaUtilSet_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_, notOnlyOnce, actual, expected, comparisonStrategy)
}

OrgAssertjCoreErrorShouldContainsOnlyOnce *create_OrgAssertjCoreErrorShouldContainsOnlyOnce_initWithJavaUtilSet_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaUtilSet> notOnlyOnce, id actual, id expected, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldContainsOnlyOnce, initWithJavaUtilSet_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_, notOnlyOnce, actual, expected, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldContainsOnlyOnce)
