//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgAssertjCorePresentationNumberGrouping.h"
#include "java/lang/StringBuilder.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface OrgAssertjCorePresentationNumberGrouping ()

+ (NSString *)toHexLiteralWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                      withNSString:(NSString *)value;

+ (jboolean)notEmptyWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (instancetype)init;

@end

inline NSString *OrgAssertjCorePresentationNumberGrouping_get_UNDERSCORE_SEPARATOR();
static NSString *OrgAssertjCorePresentationNumberGrouping_UNDERSCORE_SEPARATOR = @"_";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCorePresentationNumberGrouping, UNDERSCORE_SEPARATOR, NSString *)

inline JavaUtilRegexPattern *OrgAssertjCorePresentationNumberGrouping_get_hexGroupPattern();
inline JavaUtilRegexPattern *OrgAssertjCorePresentationNumberGrouping_set_hexGroupPattern(JavaUtilRegexPattern *value);
static JavaUtilRegexPattern *OrgAssertjCorePresentationNumberGrouping_hexGroupPattern;
J2OBJC_STATIC_FIELD_OBJ(OrgAssertjCorePresentationNumberGrouping, hexGroupPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *OrgAssertjCorePresentationNumberGrouping_get_binaryGroupPattern();
inline JavaUtilRegexPattern *OrgAssertjCorePresentationNumberGrouping_set_binaryGroupPattern(JavaUtilRegexPattern *value);
static JavaUtilRegexPattern *OrgAssertjCorePresentationNumberGrouping_binaryGroupPattern;
J2OBJC_STATIC_FIELD_OBJ(OrgAssertjCorePresentationNumberGrouping, binaryGroupPattern, JavaUtilRegexPattern *)

__attribute__((unused)) static NSString *OrgAssertjCorePresentationNumberGrouping_toHexLiteralWithJavaUtilRegexPattern_withNSString_(JavaUtilRegexPattern *pattern, NSString *value);

__attribute__((unused)) static jboolean OrgAssertjCorePresentationNumberGrouping_notEmptyWithJavaLangStringBuilder_(JavaLangStringBuilder *sb);

__attribute__((unused)) static void OrgAssertjCorePresentationNumberGrouping_init(OrgAssertjCorePresentationNumberGrouping *self);

__attribute__((unused)) static OrgAssertjCorePresentationNumberGrouping *new_OrgAssertjCorePresentationNumberGrouping_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCorePresentationNumberGrouping *create_OrgAssertjCorePresentationNumberGrouping_init();

J2OBJC_INITIALIZED_DEFN(OrgAssertjCorePresentationNumberGrouping)

@implementation OrgAssertjCorePresentationNumberGrouping

+ (NSString *)toHexLiteralWithNSString:(NSString *)value {
  return OrgAssertjCorePresentationNumberGrouping_toHexLiteralWithNSString_(value);
}

+ (NSString *)toBinaryLiteralWithNSString:(NSString *)value {
  return OrgAssertjCorePresentationNumberGrouping_toBinaryLiteralWithNSString_(value);
}

+ (NSString *)toHexLiteralWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                      withNSString:(NSString *)value {
  return OrgAssertjCorePresentationNumberGrouping_toHexLiteralWithJavaUtilRegexPattern_withNSString_(pattern, value);
}

+ (jboolean)notEmptyWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  return OrgAssertjCorePresentationNumberGrouping_notEmptyWithJavaLangStringBuilder_(sb);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCorePresentationNumberGrouping_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 0, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(toHexLiteralWithNSString:);
  methods[1].selector = @selector(toBinaryLiteralWithNSString:);
  methods[2].selector = @selector(toHexLiteralWithJavaUtilRegexPattern:withNSString:);
  methods[3].selector = @selector(notEmptyWithJavaLangStringBuilder:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNDERSCORE_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "hexGroupPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "binaryGroupPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "toHexLiteral", "LNSString;", "toBinaryLiteral", "LJavaUtilRegexPattern;LNSString;", "notEmpty", "LJavaLangStringBuilder;", &OrgAssertjCorePresentationNumberGrouping_UNDERSCORE_SEPARATOR, &OrgAssertjCorePresentationNumberGrouping_hexGroupPattern, &OrgAssertjCorePresentationNumberGrouping_binaryGroupPattern };
  static const J2ObjcClassInfo _OrgAssertjCorePresentationNumberGrouping = { "NumberGrouping", "org.assertj.core.presentation", ptrTable, methods, fields, 7, 0x10, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCorePresentationNumberGrouping;
}

+ (void)initialize {
  if (self == [OrgAssertjCorePresentationNumberGrouping class]) {
    JreStrongAssign(&OrgAssertjCorePresentationNumberGrouping_hexGroupPattern, JavaUtilRegexPattern_compileWithNSString_(@"([0-9|A-Z]{4})"));
    JreStrongAssign(&OrgAssertjCorePresentationNumberGrouping_binaryGroupPattern, JavaUtilRegexPattern_compileWithNSString_(@"([0-1]{8})"));
    J2OBJC_SET_INITIALIZED(OrgAssertjCorePresentationNumberGrouping)
  }
}

@end

NSString *OrgAssertjCorePresentationNumberGrouping_toHexLiteralWithNSString_(NSString *value) {
  OrgAssertjCorePresentationNumberGrouping_initialize();
  if (((jint) [((NSString *) nil_chk(value)) length]) > 4) {
    return OrgAssertjCorePresentationNumberGrouping_toHexLiteralWithJavaUtilRegexPattern_withNSString_(OrgAssertjCorePresentationNumberGrouping_hexGroupPattern, value);
  }
  else {
    return value;
  }
}

NSString *OrgAssertjCorePresentationNumberGrouping_toBinaryLiteralWithNSString_(NSString *value) {
  OrgAssertjCorePresentationNumberGrouping_initialize();
  return OrgAssertjCorePresentationNumberGrouping_toHexLiteralWithJavaUtilRegexPattern_withNSString_(OrgAssertjCorePresentationNumberGrouping_binaryGroupPattern, value);
}

NSString *OrgAssertjCorePresentationNumberGrouping_toHexLiteralWithJavaUtilRegexPattern_withNSString_(JavaUtilRegexPattern *pattern, NSString *value) {
  OrgAssertjCorePresentationNumberGrouping_initialize();
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:value];
  JavaLangStringBuilder *literalBuilder = create_JavaLangStringBuilder_init();
  while ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
    NSString *byteGroup = [matcher groupWithInt:1];
    if (OrgAssertjCorePresentationNumberGrouping_notEmptyWithJavaLangStringBuilder_(literalBuilder)) {
      [literalBuilder appendWithNSString:OrgAssertjCorePresentationNumberGrouping_UNDERSCORE_SEPARATOR];
    }
    [literalBuilder appendWithNSString:byteGroup];
  }
  return [literalBuilder description];
}

jboolean OrgAssertjCorePresentationNumberGrouping_notEmptyWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  OrgAssertjCorePresentationNumberGrouping_initialize();
  return [((JavaLangStringBuilder *) nil_chk(sb)) length] != 0;
}

void OrgAssertjCorePresentationNumberGrouping_init(OrgAssertjCorePresentationNumberGrouping *self) {
  NSObject_init(self);
}

OrgAssertjCorePresentationNumberGrouping *new_OrgAssertjCorePresentationNumberGrouping_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCorePresentationNumberGrouping, init)
}

OrgAssertjCorePresentationNumberGrouping *create_OrgAssertjCorePresentationNumberGrouping_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCorePresentationNumberGrouping, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCorePresentationNumberGrouping)
