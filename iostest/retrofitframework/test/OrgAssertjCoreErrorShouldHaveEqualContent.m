//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorAbstractShouldHaveTextContent.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveEqualContent.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/util/List.h"

@interface OrgAssertjCoreErrorShouldHaveEqualContent ()

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                    withJavaIoFile:(JavaIoFile *)expected
                      withNSString:(NSString *)diffs;

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)actual
                    withJavaIoInputStream:(JavaIoInputStream *)expected
                             withNSString:(NSString *)diffs;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoFile_withJavaIoFile_withNSString_(OrgAssertjCoreErrorShouldHaveEqualContent *self, JavaIoFile *actual, JavaIoFile *expected, NSString *diffs);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveEqualContent *new_OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoFile_withJavaIoFile_withNSString_(JavaIoFile *actual, JavaIoFile *expected, NSString *diffs) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveEqualContent *create_OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoFile_withJavaIoFile_withNSString_(JavaIoFile *actual, JavaIoFile *expected, NSString *diffs);

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoInputStream_withJavaIoInputStream_withNSString_(OrgAssertjCoreErrorShouldHaveEqualContent *self, JavaIoInputStream *actual, JavaIoInputStream *expected, NSString *diffs);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveEqualContent *new_OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoInputStream_withJavaIoInputStream_withNSString_(JavaIoInputStream *actual, JavaIoInputStream *expected, NSString *diffs) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveEqualContent *create_OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoInputStream_withJavaIoInputStream_withNSString_(JavaIoInputStream *actual, JavaIoInputStream *expected, NSString *diffs);

@implementation OrgAssertjCoreErrorShouldHaveEqualContent

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveEqualContentWithJavaIoFile:(JavaIoFile *)actual
                                                                    withJavaIoFile:(JavaIoFile *)expected
                                                                  withJavaUtilList:(id<JavaUtilList>)diffs {
  return OrgAssertjCoreErrorShouldHaveEqualContent_shouldHaveEqualContentWithJavaIoFile_withJavaIoFile_withJavaUtilList_(actual, expected, diffs);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveEqualContentWithJavaIoInputStream:(JavaIoInputStream *)actual
                                                                    withJavaIoInputStream:(JavaIoInputStream *)expected
                                                                         withJavaUtilList:(id<JavaUtilList>)diffs {
  return OrgAssertjCoreErrorShouldHaveEqualContent_shouldHaveEqualContentWithJavaIoInputStream_withJavaIoInputStream_withJavaUtilList_(actual, expected, diffs);
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                    withJavaIoFile:(JavaIoFile *)expected
                      withNSString:(NSString *)diffs {
  OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoFile_withJavaIoFile_withNSString_(self, actual, expected, diffs);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)actual
                    withJavaIoInputStream:(JavaIoInputStream *)expected
                             withNSString:(NSString *)diffs {
  OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoInputStream_withJavaIoInputStream_withNSString_(self, actual, expected, diffs);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x2, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveEqualContentWithJavaIoFile:withJavaIoFile:withJavaUtilList:);
  methods[1].selector = @selector(shouldHaveEqualContentWithJavaIoInputStream:withJavaIoInputStream:withJavaUtilList:);
  methods[2].selector = @selector(initWithJavaIoFile:withJavaIoFile:withNSString:);
  methods[3].selector = @selector(initWithJavaIoInputStream:withJavaIoInputStream:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveEqualContent", "LJavaIoFile;LJavaIoFile;LJavaUtilList;", "(Ljava/io/File;Ljava/io/File;Ljava/util/List<Ljava/lang/String;>;)Lorg/assertj/core/error/ErrorMessageFactory;", "LJavaIoInputStream;LJavaIoInputStream;LJavaUtilList;", "(Ljava/io/InputStream;Ljava/io/InputStream;Ljava/util/List<Ljava/lang/String;>;)Lorg/assertj/core/error/ErrorMessageFactory;", "LJavaIoFile;LJavaIoFile;LNSString;", "LJavaIoInputStream;LJavaIoInputStream;LNSString;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveEqualContent = { "ShouldHaveEqualContent", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveEqualContent;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldHaveEqualContent_shouldHaveEqualContentWithJavaIoFile_withJavaIoFile_withJavaUtilList_(JavaIoFile *actual, JavaIoFile *expected, id<JavaUtilList> diffs) {
  OrgAssertjCoreErrorShouldHaveEqualContent_initialize();
  return create_OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoFile_withJavaIoFile_withNSString_(actual, expected, OrgAssertjCoreErrorAbstractShouldHaveTextContent_diffsAsStringWithJavaUtilList_(diffs));
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldHaveEqualContent_shouldHaveEqualContentWithJavaIoInputStream_withJavaIoInputStream_withJavaUtilList_(JavaIoInputStream *actual, JavaIoInputStream *expected, id<JavaUtilList> diffs) {
  OrgAssertjCoreErrorShouldHaveEqualContent_initialize();
  return create_OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoInputStream_withJavaIoInputStream_withNSString_(actual, expected, OrgAssertjCoreErrorAbstractShouldHaveTextContent_diffsAsStringWithJavaUtilList_(diffs));
}

void OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoFile_withJavaIoFile_withNSString_(OrgAssertjCoreErrorShouldHaveEqualContent *self, JavaIoFile *actual, JavaIoFile *expected, NSString *diffs) {
  OrgAssertjCoreErrorAbstractShouldHaveTextContent_initWithNSString_withNSObjectArray_(self, @"\nFile:\n <%s>\nand file:\n <%s>\ndo not have equal content:", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected } count:2 type:NSObject_class_()]);
  JreStrongAssign(&self->diffs_, diffs);
}

OrgAssertjCoreErrorShouldHaveEqualContent *new_OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoFile_withJavaIoFile_withNSString_(JavaIoFile *actual, JavaIoFile *expected, NSString *diffs) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveEqualContent, initWithJavaIoFile_withJavaIoFile_withNSString_, actual, expected, diffs)
}

OrgAssertjCoreErrorShouldHaveEqualContent *create_OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoFile_withJavaIoFile_withNSString_(JavaIoFile *actual, JavaIoFile *expected, NSString *diffs) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveEqualContent, initWithJavaIoFile_withJavaIoFile_withNSString_, actual, expected, diffs)
}

void OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoInputStream_withJavaIoInputStream_withNSString_(OrgAssertjCoreErrorShouldHaveEqualContent *self, JavaIoInputStream *actual, JavaIoInputStream *expected, NSString *diffs) {
  OrgAssertjCoreErrorAbstractShouldHaveTextContent_initWithNSString_withNSObjectArray_(self, @"\nInputStreams do not have equal content:", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected } count:2 type:NSObject_class_()]);
  JreStrongAssign(&self->diffs_, diffs);
}

OrgAssertjCoreErrorShouldHaveEqualContent *new_OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoInputStream_withJavaIoInputStream_withNSString_(JavaIoInputStream *actual, JavaIoInputStream *expected, NSString *diffs) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveEqualContent, initWithJavaIoInputStream_withJavaIoInputStream_withNSString_, actual, expected, diffs)
}

OrgAssertjCoreErrorShouldHaveEqualContent *create_OrgAssertjCoreErrorShouldHaveEqualContent_initWithJavaIoInputStream_withJavaIoInputStream_withNSString_(JavaIoInputStream *actual, JavaIoInputStream *expected, NSString *diffs) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveEqualContent, initWithJavaIoInputStream_withJavaIoInputStream_withNSString_, actual, expected, diffs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveEqualContent)
