//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveExtension.h"
#include "java/io/File.h"

@interface OrgAssertjCoreErrorShouldHaveExtension ()

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                      withNSString:(NSString *)actualExtension
                      withNSString:(NSString *)expectedExtension;

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                      withNSString:(NSString *)expectedExtension;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_withNSString_(OrgAssertjCoreErrorShouldHaveExtension *self, JavaIoFile *actual, NSString *actualExtension, NSString *expectedExtension);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveExtension *new_OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_withNSString_(JavaIoFile *actual, NSString *actualExtension, NSString *expectedExtension) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveExtension *create_OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_withNSString_(JavaIoFile *actual, NSString *actualExtension, NSString *expectedExtension);

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_(OrgAssertjCoreErrorShouldHaveExtension *self, JavaIoFile *actual, NSString *expectedExtension);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveExtension *new_OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_(JavaIoFile *actual, NSString *expectedExtension) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveExtension *create_OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_(JavaIoFile *actual, NSString *expectedExtension);

@implementation OrgAssertjCoreErrorShouldHaveExtension

+ (OrgAssertjCoreErrorShouldHaveExtension *)shouldHaveExtensionWithJavaIoFile:(JavaIoFile *)actual
                                                                 withNSString:(NSString *)actualExtension
                                                                 withNSString:(NSString *)expectedExtension {
  return OrgAssertjCoreErrorShouldHaveExtension_shouldHaveExtensionWithJavaIoFile_withNSString_withNSString_(actual, actualExtension, expectedExtension);
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                      withNSString:(NSString *)actualExtension
                      withNSString:(NSString *)expectedExtension {
  OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_withNSString_(self, actual, actualExtension, expectedExtension);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                      withNSString:(NSString *)expectedExtension {
  OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_(self, actual, expectedExtension);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorShouldHaveExtension;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveExtensionWithJavaIoFile:withNSString:withNSString:);
  methods[1].selector = @selector(initWithJavaIoFile:withNSString:withNSString:);
  methods[2].selector = @selector(initWithJavaIoFile:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveExtension", "LJavaIoFile;LNSString;LNSString;", "LJavaIoFile;LNSString;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveExtension = { "ShouldHaveExtension", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveExtension;
}

@end

OrgAssertjCoreErrorShouldHaveExtension *OrgAssertjCoreErrorShouldHaveExtension_shouldHaveExtensionWithJavaIoFile_withNSString_withNSString_(JavaIoFile *actual, NSString *actualExtension, NSString *expectedExtension) {
  OrgAssertjCoreErrorShouldHaveExtension_initialize();
  return actualExtension == nil ? create_OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_(actual, expectedExtension) : create_OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_withNSString_(actual, actualExtension, expectedExtension);
}

void OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_withNSString_(OrgAssertjCoreErrorShouldHaveExtension *self, JavaIoFile *actual, NSString *actualExtension, NSString *expectedExtension) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"%nExpecting%n  <%s>%nto have extension:%n  <%s>%nbut had:%n  <%s>.", [IOSObjectArray arrayWithObjects:(id[]){ actual, expectedExtension, actualExtension } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveExtension *new_OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_withNSString_(JavaIoFile *actual, NSString *actualExtension, NSString *expectedExtension) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveExtension, initWithJavaIoFile_withNSString_withNSString_, actual, actualExtension, expectedExtension)
}

OrgAssertjCoreErrorShouldHaveExtension *create_OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_withNSString_(JavaIoFile *actual, NSString *actualExtension, NSString *expectedExtension) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveExtension, initWithJavaIoFile_withNSString_withNSString_, actual, actualExtension, expectedExtension)
}

void OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_(OrgAssertjCoreErrorShouldHaveExtension *self, JavaIoFile *actual, NSString *expectedExtension) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"%nExpecting%n  <%s>%nto have extension:%n  <%s>%nbut had no extension.", [IOSObjectArray arrayWithObjects:(id[]){ actual, expectedExtension } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveExtension *new_OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_(JavaIoFile *actual, NSString *expectedExtension) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveExtension, initWithJavaIoFile_withNSString_, actual, expectedExtension)
}

OrgAssertjCoreErrorShouldHaveExtension *create_OrgAssertjCoreErrorShouldHaveExtension_initWithJavaIoFile_withNSString_(JavaIoFile *actual, NSString *expectedExtension) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveExtension, initWithJavaIoFile_withNSString_, actual, expectedExtension)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveExtension)
