//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JavaIoInputStream$Moxy.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/InvocationHandler.h"
#include "java/lang/reflect/Method.h"

@implementation JavaIoInputStream_Moxy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaIoInputStream_Moxy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaLangReflectInvocationHandler>)getHandler {
  return $__handler_;
}

- (void)setHandlerWithJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)handler {
  JreStrongAssign(&$__handler_, handler);
}

- (jint)readWithByteArray:(IOSByteArray *)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super readWithByteArray:arg0];
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"read" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ IOSClass_byteArray(1) } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaIoIOException class]]) {
      @throw (JavaIoIOException *) cast_chk(__ttlive, [JavaIoIOException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$readWithByteArray:(IOSByteArray *)arg0 {
  return [super readWithByteArray:arg0];
}

- (jint)available {
  @try {
    if ($__handler_ == nil) {
      return [super available];
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"available" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaIoIOException class]]) {
      @throw (JavaIoIOException *) cast_chk(__ttlive, [JavaIoIOException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$available {
  return [super available];
}

- (id)java_clone {
  @try {
    if ($__handler_ == nil) {
      return [super java_clone];
    }
    else {
      return [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"clone" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaLangCloneNotSupportedException class]]) {
      @throw (JavaLangCloneNotSupportedException *) cast_chk(__ttlive, [JavaLangCloneNotSupportedException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (id)super$clone {
  return [super java_clone];
}

- (jboolean)markSupported {
  @try {
    if ($__handler_ == nil) {
      return [super markSupported];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"markSupported" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$markSupported {
  return [super markSupported];
}

- (void)markWithInt:(jint)arg0 {
  @try {
    if ($__handler_ == nil) {
      [super markWithInt:arg0];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"mark" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass intClass] } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(arg0) } count:1 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$markWithInt:(jint)arg0 {
  [super markWithInt:arg0];
}

- (NSUInteger)hash {
  @try {
    if ($__handler_ == nil) {
      return ((jint) [super hash]);
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"hashCode" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$hashCode {
  return ((jint) [super hash]);
}

- (void)reset {
  @try {
    if ($__handler_ == nil) {
      [super reset];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"reset" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaIoIOException class]]) {
      @throw (JavaIoIOException *) cast_chk(__ttlive, [JavaIoIOException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$reset {
  [super reset];
}

- (jboolean)isEqual:(id)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super isEqual:arg0];
    }
    else {
      return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"equals" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ NSObject_class_() } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jboolean)super$equalsWithId:(id)arg0 {
  return [super isEqual:arg0];
}

- (jint)readWithByteArray:(IOSByteArray *)arg0
                  withInt:(jint)arg1
                  withInt:(jint)arg2 {
  @try {
    if ($__handler_ == nil) {
      return [super readWithByteArray:arg0 withInt:arg1 withInt:arg2];
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"read" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ IOSClass_byteArray(1), [IOSClass intClass], [IOSClass intClass] } count:3 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, JavaLangInteger_valueOfWithInt_(arg1), JavaLangInteger_valueOfWithInt_(arg2) } count:3 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaIoIOException class]]) {
      @throw (JavaIoIOException *) cast_chk(__ttlive, [JavaIoIOException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$readWithByteArray:(IOSByteArray *)arg0
                        withInt:(jint)arg1
                        withInt:(jint)arg2 {
  return [super readWithByteArray:arg0 withInt:arg1 withInt:arg2];
}

- (jlong)skipWithLong:(jlong)arg0 {
  @try {
    if ($__handler_ == nil) {
      return [super skipWithLong:arg0];
    }
    else {
      return [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"skip" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass longClass] } count:1 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(arg0) } count:1 type:NSObject_class_()]], [JavaLangLong class]))) longLongValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaIoIOException class]]) {
      @throw (JavaIoIOException *) cast_chk(__ttlive, [JavaIoIOException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jlong)super$skipWithLong:(jlong)arg0 {
  return [super skipWithLong:arg0];
}

- (NSString *)description {
  @try {
    if ($__handler_ == nil) {
      return [super description];
    }
    else {
      return (NSString *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"toString" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [NSString class]);
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (NSString *)super$toString {
  return [super description];
}

- (void)close {
  @try {
    if ($__handler_ == nil) {
      [super close];
    }
    else {
      [$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"close" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaIoIOException class]]) {
      @throw (JavaIoIOException *) cast_chk(__ttlive, [JavaIoIOException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (void)super$close {
  [super close];
}

- (jint)read {
  @try {
    if ($__handler_ == nil) {
      @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"read is abstract");
    }
    else {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([$__handler_ invokeWithId:self withJavaLangReflectMethod:[[self java_getClass] getMethod:@"read" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:IOSClass_class_()]] withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (NSException *__ttlive) {
    if ([__ttlive isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk(__ttlive, [JavaLangRuntimeException class]);
    }
    else if ([__ttlive isKindOfClass:[JavaIoIOException class]]) {
      @throw (JavaIoIOException *) cast_chk(__ttlive, [JavaIoIOException class]);
    }
    else {
      @throw create_JavaLangRuntimeException_initWithNSException_(__ttlive);
    }
  }
}

- (jint)super$read {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"read is abstract");
}

- (void)dealloc {
  RELEASE_($__handler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectInvocationHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 6, -1, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 15, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 15, 4, -1, -1, -1 },
    { NULL, "J", 0x1, 16, 17, 4, -1, -1, -1 },
    { NULL, "J", 0x1, 18, 17, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getHandler);
  methods[2].selector = @selector(setHandlerWithJavaLangReflectInvocationHandler:);
  methods[3].selector = @selector(readWithByteArray:);
  methods[4].selector = @selector(super$readWithByteArray:);
  methods[5].selector = @selector(available);
  methods[6].selector = @selector(super$available);
  methods[7].selector = @selector(java_clone);
  methods[8].selector = @selector(super$clone);
  methods[9].selector = @selector(markSupported);
  methods[10].selector = @selector(super$markSupported);
  methods[11].selector = @selector(markWithInt:);
  methods[12].selector = @selector(super$markWithInt:);
  methods[13].selector = @selector(hash);
  methods[14].selector = @selector(super$hashCode);
  methods[15].selector = @selector(reset);
  methods[16].selector = @selector(super$reset);
  methods[17].selector = @selector(isEqual:);
  methods[18].selector = @selector(super$equalsWithId:);
  methods[19].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[20].selector = @selector(super$readWithByteArray:withInt:withInt:);
  methods[21].selector = @selector(skipWithLong:);
  methods[22].selector = @selector(super$skipWithLong:);
  methods[23].selector = @selector(description);
  methods[24].selector = @selector(super$toString);
  methods[25].selector = @selector(close);
  methods[26].selector = @selector(super$close);
  methods[27].selector = @selector(read);
  methods[28].selector = @selector(super$read);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "$__handler_", "LJavaLangReflectInvocationHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setHandler", "LJavaLangReflectInvocationHandler;", "read", "[B", "LJavaIoIOException;", "super$read", "clone", "LJavaLangCloneNotSupportedException;", "mark", "I", "super$mark", "hashCode", "equals", "LNSObject;", "super$equals", "[BII", "skip", "J", "super$skip", "toString" };
  static const J2ObjcClassInfo _JavaIoInputStream_Moxy = { "InputStream$Moxy", "java.io", ptrTable, methods, fields, 7, 0x1, 29, 1, -1, -1, -1, -1, -1 };
  return &_JavaIoInputStream_Moxy;
}

@end

void JavaIoInputStream_Moxy_init(JavaIoInputStream_Moxy *self) {
  JavaIoInputStream_init(self);
}

JavaIoInputStream_Moxy *new_JavaIoInputStream_Moxy_init() {
  J2OBJC_NEW_IMPL(JavaIoInputStream_Moxy, init)
}

JavaIoInputStream_Moxy *create_JavaIoInputStream_Moxy_init() {
  J2OBJC_CREATE_IMPL(JavaIoInputStream_Moxy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaIoInputStream_Moxy)
