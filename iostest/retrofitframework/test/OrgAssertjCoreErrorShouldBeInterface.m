//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeInterface.h"

@interface OrgAssertjCoreErrorShouldBeInterface ()

- (instancetype)initWithIOSClass:(IOSClass *)actual
                     withBoolean:(jboolean)toBeOrNotToBe;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeInterface_initWithIOSClass_withBoolean_(OrgAssertjCoreErrorShouldBeInterface *self, IOSClass *actual, jboolean toBeOrNotToBe);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeInterface *new_OrgAssertjCoreErrorShouldBeInterface_initWithIOSClass_withBoolean_(IOSClass *actual, jboolean toBeOrNotToBe) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeInterface *create_OrgAssertjCoreErrorShouldBeInterface_initWithIOSClass_withBoolean_(IOSClass *actual, jboolean toBeOrNotToBe);

@implementation OrgAssertjCoreErrorShouldBeInterface

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeInterfaceWithIOSClass:(IOSClass *)actual {
  return OrgAssertjCoreErrorShouldBeInterface_shouldBeInterfaceWithIOSClass_(actual);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotBeInterfaceWithIOSClass:(IOSClass *)actual {
  return OrgAssertjCoreErrorShouldBeInterface_shouldNotBeInterfaceWithIOSClass_(actual);
}

- (instancetype)initWithIOSClass:(IOSClass *)actual
                     withBoolean:(jboolean)toBeOrNotToBe {
  OrgAssertjCoreErrorShouldBeInterface_initWithIOSClass_withBoolean_(self, actual, toBeOrNotToBe);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 3, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeInterfaceWithIOSClass:);
  methods[1].selector = @selector(shouldNotBeInterfaceWithIOSClass:);
  methods[2].selector = @selector(initWithIOSClass:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeInterface", "LIOSClass;", "(Ljava/lang/Class<*>;)Lorg/assertj/core/error/ErrorMessageFactory;", "shouldNotBeInterface", "LIOSClass;Z", "(Ljava/lang/Class<*>;Z)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeInterface = { "ShouldBeInterface", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeInterface;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeInterface_shouldBeInterfaceWithIOSClass_(IOSClass *actual) {
  OrgAssertjCoreErrorShouldBeInterface_initialize();
  return create_OrgAssertjCoreErrorShouldBeInterface_initWithIOSClass_withBoolean_(actual, true);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeInterface_shouldNotBeInterfaceWithIOSClass_(IOSClass *actual) {
  OrgAssertjCoreErrorShouldBeInterface_initialize();
  return create_OrgAssertjCoreErrorShouldBeInterface_initWithIOSClass_withBoolean_(actual, false);
}

void OrgAssertjCoreErrorShouldBeInterface_initWithIOSClass_withBoolean_(OrgAssertjCoreErrorShouldBeInterface *self, IOSClass *actual, jboolean toBeOrNotToBe) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, JreStrcat("$$$", @"\nExpecting\n  <%s>\n", (toBeOrNotToBe ? @"" : @" not "), @"to be an interface"), [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeInterface *new_OrgAssertjCoreErrorShouldBeInterface_initWithIOSClass_withBoolean_(IOSClass *actual, jboolean toBeOrNotToBe) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeInterface, initWithIOSClass_withBoolean_, actual, toBeOrNotToBe)
}

OrgAssertjCoreErrorShouldBeInterface *create_OrgAssertjCoreErrorShouldBeInterface_initWithIOSClass_withBoolean_(IOSClass *actual, jboolean toBeOrNotToBe) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeInterface, initWithIOSClass_withBoolean_, actual, toBeOrNotToBe)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeInterface)
