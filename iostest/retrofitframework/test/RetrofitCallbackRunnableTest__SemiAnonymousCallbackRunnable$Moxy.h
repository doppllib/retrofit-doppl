//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable$Moxy")
#ifdef RESTRICT_RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable$Moxy
#define INCLUDE_ALL_RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable$Moxy 0
#else
#define INCLUDE_ALL_RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable$Moxy 1
#endif
#undef RESTRICT_RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable$Moxy

#if !defined (RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy_) && (INCLUDE_ALL_RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable$Moxy || defined(INCLUDE_RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy))
#define RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy_

#define RESTRICT_RetrofitCallbackRunnableTest 1
#define INCLUDE_RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable 1
#include "RetrofitCallbackRunnableTest.h"

@class RetrofitResponseWrapper;
@protocol JavaLangReflectInvocationHandler;
@protocol JavaUtilConcurrentExecutor;
@protocol RetrofitCallback;
@protocol RetrofitErrorHandler;

@interface RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy : RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable {
 @public
  id<JavaLangReflectInvocationHandler> $__handler_;
}

#pragma mark Public

- (jboolean)isEqual:(id)arg0;

- (id<JavaLangReflectInvocationHandler>)getHandler;

- (NSUInteger)hash;

- (RetrofitResponseWrapper *)obtainResponse;

- (void)setHandlerWithJavaLangReflectInvocationHandler:(id<JavaLangReflectInvocationHandler>)handler;

- (jboolean)super$equalsWithId:(id)arg0;

- (jint)super$hashCode;

- (RetrofitResponseWrapper *)super$obtainResponse;

- (NSString *)super$toString;

- (NSString *)description;

#pragma mark Protected

- (id)java_clone;

- (id)super$clone;

#pragma mark Package-Private

- (instancetype)initWithRetrofitCallback:(id<RetrofitCallback>)a0
          withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)a1
                withRetrofitErrorHandler:(id<RetrofitErrorHandler>)a2;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy)

J2OBJC_FIELD_SETTER(RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy, $__handler_, id<JavaLangReflectInvocationHandler>)

FOUNDATION_EXPORT void RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy *self, id<RetrofitCallback> a0, id<JavaUtilConcurrentExecutor> a1, id<RetrofitErrorHandler> a2);

FOUNDATION_EXPORT RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy *new_RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(id<RetrofitCallback> a0, id<JavaUtilConcurrentExecutor> a1, id<RetrofitErrorHandler> a2) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy *create_RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(id<RetrofitCallback> a0, id<JavaUtilConcurrentExecutor> a1, id<RetrofitErrorHandler> a2);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy)

@compatibility_alias RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable$Moxy RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable_Moxy;

#endif

#pragma pop_macro("INCLUDE_ALL_RetrofitCallbackRunnableTest__SemiAnonymousCallbackRunnable$Moxy")
