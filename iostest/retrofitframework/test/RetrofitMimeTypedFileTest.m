//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractCharSequenceAssert.h"
#include "OrgAssertjCoreApiAbstractIntegerAssert.h"
#include "OrgAssertjCoreApiAbstractLongAssert.h"
#include "OrgAssertjCoreApiAbstractObjectAssert.h"
#include "OrgAssertjCoreApiAssertions.h"
#include "RetrofitMimeTypedFile.h"
#include "RetrofitMimeTypedFileTest.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Test.h"

@interface RetrofitMimeTypedFileTest ()

+ (void)writeToFileWithJavaIoFile:(JavaIoFile *)file
                    withByteArray:(IOSByteArray *)data;

@end

inline NSString *RetrofitMimeTypedFileTest_get_PNG();
static NSString *RetrofitMimeTypedFileTest_PNG = @"image/png";
J2OBJC_STATIC_FIELD_OBJ_FINAL(RetrofitMimeTypedFileTest, PNG, NSString *)

__attribute__((unused)) static void RetrofitMimeTypedFileTest_writeToFileWithJavaIoFile_withByteArray_(JavaIoFile *file, IOSByteArray *data);

__attribute__((unused)) static IOSObjectArray *RetrofitMimeTypedFileTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RetrofitMimeTypedFileTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RetrofitMimeTypedFileTest__Annotations$2();

@implementation RetrofitMimeTypedFileTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitMimeTypedFileTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)objectEquals {
  RetrofitMimeTypedFile *a1 = create_RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(RetrofitMimeTypedFileTest_PNG, create_JavaIoFile_initWithNSString_(@"a.png"));
  RetrofitMimeTypedFile *a2 = create_RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(RetrofitMimeTypedFileTest_PNG, create_JavaIoFile_initWithNSString_(@"a.png"));
  RetrofitMimeTypedFile *b = create_RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(RetrofitMimeTypedFileTest_PNG, create_JavaIoFile_initWithNSString_(@"b.png"));
  [((OrgAssertjCoreApiAbstractObjectAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithId_(a1))) isNotEqualToWithId:b];
  [((OrgAssertjCoreApiAbstractIntegerAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithInt_(((jint) [a1 hash])))) isNotEqualToWithInt:((jint) [b hash])];
  [((OrgAssertjCoreApiAbstractObjectAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithId_(a1))) isEqualToWithId:a2];
  [((OrgAssertjCoreApiAbstractIntegerAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithInt_(((jint) [a1 hash])))) isEqualToWithInt:((jint) [a2 hash])];
}

- (void)objectToString {
  JavaIoFile *file = create_JavaIoFile_initWithNSString_(@"/path/to/file.png");
  [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([create_RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(RetrofitMimeTypedFileTest_PNG, file) description]))) isEqualToWithId:JreStrcat("$$", [file getAbsolutePath], @" (image/png)")];
}

- (void)length {
  JavaIoFile *tempFile = JavaIoFile_createTempFileWithNSString_withNSString_(@"foo", @".tmp");
  @try {
    RetrofitMimeTypedFile *typedFile = create_RetrofitMimeTypedFile_initWithNSString_withJavaIoFile_(RetrofitMimeTypedFileTest_PNG, tempFile);
    [((OrgAssertjCoreApiAbstractLongAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithLong_([typedFile length]))) isZero];
    RetrofitMimeTypedFileTest_writeToFileWithJavaIoFile_withByteArray_(tempFile, [IOSByteArray arrayWithBytes:(jbyte[]){ 0, 1, 2, 3, 4 } count:5]);
    [((OrgAssertjCoreApiAbstractLongAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithLong_([((JavaIoFile *) nil_chk(tempFile)) length]))) isEqualToWithLong:5];
    [((OrgAssertjCoreApiAbstractLongAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithLong_([typedFile length]))) isEqualToWithLong:5];
  }
  @finally {
    [((JavaIoFile *) nil_chk(tempFile)) delete__];
  }
}

+ (void)writeToFileWithJavaIoFile:(JavaIoFile *)file
                    withByteArray:(IOSByteArray *)data {
  RetrofitMimeTypedFileTest_writeToFileWithJavaIoFile_withByteArray_(file, data);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 3, -1 },
    { NULL, "V", 0xa, 4, 5, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(objectEquals);
  methods[2].selector = @selector(objectToString);
  methods[3].selector = @selector(length);
  methods[4].selector = @selector(writeToFileWithJavaIoFile:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PNG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RetrofitMimeTypedFileTest__Annotations$0, (void *)&RetrofitMimeTypedFileTest__Annotations$1, "LJavaIoIOException;", (void *)&RetrofitMimeTypedFileTest__Annotations$2, "writeToFile", "LJavaIoFile;[B", &RetrofitMimeTypedFileTest_PNG };
  static const J2ObjcClassInfo _RetrofitMimeTypedFileTest = { "TypedFileTest", "retrofit.mime", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_RetrofitMimeTypedFileTest;
}

@end

void RetrofitMimeTypedFileTest_init(RetrofitMimeTypedFileTest *self) {
  NSObject_init(self);
}

RetrofitMimeTypedFileTest *new_RetrofitMimeTypedFileTest_init() {
  J2OBJC_NEW_IMPL(RetrofitMimeTypedFileTest, init)
}

RetrofitMimeTypedFileTest *create_RetrofitMimeTypedFileTest_init() {
  J2OBJC_CREATE_IMPL(RetrofitMimeTypedFileTest, init)
}

void RetrofitMimeTypedFileTest_writeToFileWithJavaIoFile_withByteArray_(JavaIoFile *file, IOSByteArray *data) {
  RetrofitMimeTypedFileTest_initialize();
  JavaIoFileOutputStream *fos = create_JavaIoFileOutputStream_initWithJavaIoFile_(file);
  @try {
    [fos writeWithByteArray:data];
  }
  @finally {
    [fos close];
  }
}

IOSObjectArray *RetrofitMimeTypedFileTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitMimeTypedFileTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitMimeTypedFileTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitMimeTypedFileTest)
