//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreInternalBooleanArrays.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalArrays.h"
#include "java/lang/Boolean.h"
#include "java/lang/Iterable.h"
#include "java/util/Comparator.h"

@interface OrgAssertjCoreInternalBooleanArrays () {
 @public
  OrgAssertjCoreInternalInternalArrays *arrays_;
}

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalBooleanArrays, arrays_, OrgAssertjCoreInternalInternalArrays *)

inline OrgAssertjCoreInternalBooleanArrays *OrgAssertjCoreInternalBooleanArrays_get_INSTANCE();
static OrgAssertjCoreInternalBooleanArrays *OrgAssertjCoreInternalBooleanArrays_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalBooleanArrays, INSTANCE, OrgAssertjCoreInternalBooleanArrays *)

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalBooleanArrays)

@implementation OrgAssertjCoreInternalBooleanArrays

+ (OrgAssertjCoreInternalBooleanArrays *)instance {
  return OrgAssertjCoreInternalBooleanArrays_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalBooleanArrays_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withBooleanArray:(IOSBooleanArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                     withBooleanArray:(IOSBooleanArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertEmptyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withBooleanArray:(IOSBooleanArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertHasSizeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withBooleanArray:(IOSBooleanArray *)actual
                                                withInt:(jint)expectedSize {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHasSizeWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withInt:expectedSize];
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withBooleanArray:(IOSBooleanArray *)actual
                                         withJavaLangIterable:(id<JavaLangIterable>)other {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info withId:actual withJavaLangIterable:other];
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withBooleanArray:(IOSBooleanArray *)actual
                                            withNSObjectArray:(IOSObjectArray *)other {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info withId:actual withId:other];
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withBooleanArray:(IOSBooleanArray *)actual
                                        withBooleanArray:(IOSBooleanArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withBooleanArray:(IOSBooleanArray *)actual
                                             withBoolean:(jboolean)value
                             withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:JavaLangBoolean_valueOfWithBoolean_(value) withOrgAssertjCoreDataIndex:index];
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withBooleanArray:(IOSBooleanArray *)actual
                                                   withBoolean:(jboolean)value
                                   withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:JavaLangBoolean_valueOfWithBoolean_(value) withOrgAssertjCoreDataIndex:index];
}

- (void)assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withBooleanArray:(IOSBooleanArray *)actual
                                            withBooleanArray:(IOSBooleanArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withBooleanArray:(IOSBooleanArray *)actual
                                                withBooleanArray:(IOSBooleanArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withBooleanArray:(IOSBooleanArray *)actual
                                                withBooleanArray:(IOSBooleanArray *)sequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:sequence];
}

- (void)assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                   withBooleanArray:(IOSBooleanArray *)actual
                                                   withBooleanArray:(IOSBooleanArray *)subsequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:subsequence];
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withBooleanArray:(IOSBooleanArray *)actual
                                              withBooleanArray:(IOSBooleanArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                     withBooleanArray:(IOSBooleanArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertStartsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                          withBooleanArray:(IOSBooleanArray *)actual
                                          withBooleanArray:(IOSBooleanArray *)sequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertStartsWithWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:sequence];
}

- (void)assertEndsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withBooleanArray:(IOSBooleanArray *)actual
                                        withBooleanArray:(IOSBooleanArray *)sequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertEndsWithWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:sequence];
}

- (void)assertIsSortedWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withBooleanArray:(IOSBooleanArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertIsSortedWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                             withBooleanArray:(IOSBooleanArray *)actual
                                                       withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  OrgAssertjCoreInternalInternalArrays_assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withJavaUtilComparator_(info, failures_, actual, comparator);
}

- (void)dealloc {
  RELEASE_(arrays_);
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalBooleanArrays;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 6, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, 24, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:);
  methods[3].selector = @selector(assertEmptyWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:);
  methods[4].selector = @selector(assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:);
  methods[5].selector = @selector(assertHasSizeWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withInt:);
  methods[6].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withJavaLangIterable:);
  methods[7].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withNSObjectArray:);
  methods[8].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withBooleanArray:);
  methods[9].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withBoolean:withOrgAssertjCoreDataIndex:);
  methods[10].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withBoolean:withOrgAssertjCoreDataIndex:);
  methods[11].selector = @selector(assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withBooleanArray:);
  methods[12].selector = @selector(assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withBooleanArray:);
  methods[13].selector = @selector(assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withBooleanArray:);
  methods[14].selector = @selector(assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withBooleanArray:);
  methods[15].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withBooleanArray:);
  methods[16].selector = @selector(assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:);
  methods[17].selector = @selector(assertStartsWithWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withBooleanArray:);
  methods[18].selector = @selector(assertEndsWithWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withBooleanArray:);
  methods[19].selector = @selector(assertIsSortedWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:);
  methods[20].selector = @selector(assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:withBooleanArray:withJavaUtilComparator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalBooleanArrays;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "arrays_", "LOrgAssertjCoreInternalInternalArrays;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "assertNullOrEmpty", "LOrgAssertjCoreApiAssertionInfo;[Z", "assertEmpty", "assertNotEmpty", "assertHasSize", "LOrgAssertjCoreApiAssertionInfo;[ZI", "assertHasSameSizeAs", "LOrgAssertjCoreApiAssertionInfo;[ZLJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;[ZLjava/lang/Iterable<*>;)V", "LOrgAssertjCoreApiAssertionInfo;[Z[LNSObject;", "assertContains", "LOrgAssertjCoreApiAssertionInfo;[Z[Z", "LOrgAssertjCoreApiAssertionInfo;[ZZLOrgAssertjCoreDataIndex;", "assertDoesNotContain", "assertContainsOnly", "assertContainsOnlyOnce", "assertContainsSequence", "assertContainsSubsequence", "assertDoesNotHaveDuplicates", "assertStartsWith", "assertEndsWith", "assertIsSorted", "assertIsSortedAccordingToComparator", "LOrgAssertjCoreApiAssertionInfo;[ZLJavaUtilComparator;", "(Lorg/assertj/core/api/AssertionInfo;[ZLjava/util/Comparator<-Ljava/lang/Boolean;>;)V", &OrgAssertjCoreInternalBooleanArrays_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalBooleanArrays = { "BooleanArrays", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 21, 3, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalBooleanArrays;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalBooleanArrays class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalBooleanArrays_INSTANCE, new_OrgAssertjCoreInternalBooleanArrays_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalBooleanArrays)
  }
}

@end

OrgAssertjCoreInternalBooleanArrays *OrgAssertjCoreInternalBooleanArrays_instance() {
  OrgAssertjCoreInternalBooleanArrays_initialize();
  return OrgAssertjCoreInternalBooleanArrays_INSTANCE;
}

void OrgAssertjCoreInternalBooleanArrays_init(OrgAssertjCoreInternalBooleanArrays *self) {
  NSObject_init(self);
  JreStrongAssign(&self->arrays_, OrgAssertjCoreInternalInternalArrays_instance());
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
}

OrgAssertjCoreInternalBooleanArrays *new_OrgAssertjCoreInternalBooleanArrays_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalBooleanArrays, init)
}

OrgAssertjCoreInternalBooleanArrays *create_OrgAssertjCoreInternalBooleanArrays_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalBooleanArrays, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalBooleanArrays)
