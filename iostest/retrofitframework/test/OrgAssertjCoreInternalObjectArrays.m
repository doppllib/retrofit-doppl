//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType.h"
#include "OrgAssertjCoreErrorShouldHaveOnlyElementsOfType.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalConditions.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalArrays.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalObjectArrays.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Iterable.h"
#include "java/util/Comparator.h"

@interface OrgAssertjCoreInternalObjectArrays () {
 @public
  OrgAssertjCoreInternalInternalArrays *arrays_;
}

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalObjectArrays, arrays_, OrgAssertjCoreInternalInternalArrays *)

inline OrgAssertjCoreInternalObjectArrays *OrgAssertjCoreInternalObjectArrays_get_INSTANCE();
static OrgAssertjCoreInternalObjectArrays *OrgAssertjCoreInternalObjectArrays_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalObjectArrays, INSTANCE, OrgAssertjCoreInternalObjectArrays *)

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalObjectArrays)

@implementation OrgAssertjCoreInternalObjectArrays

+ (OrgAssertjCoreInternalObjectArrays *)instance {
  return OrgAssertjCoreInternalObjectArrays_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalObjectArrays_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreInternalObjectArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
  return self;
}

- (id<JavaUtilComparator>)getComparator {
  return [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) getComparator];
}

- (void)assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                          withNSObjectArray:(IOSObjectArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withNSObjectArray:(IOSObjectArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertEmptyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withNSObjectArray:(IOSObjectArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertHasSizeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                      withNSObjectArray:(IOSObjectArray *)actual
                                                withInt:(jint)expectedSize {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHasSizeWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withInt:expectedSize];
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withNSObjectArray:(IOSObjectArray *)actual
                                         withJavaLangIterable:(id<JavaLangIterable>)other {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info withId:actual withJavaLangIterable:other];
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withNSObjectArray:(IOSObjectArray *)actual
                                                       withId:(id)other {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info withId:actual withId:other];
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withNSObjectArray:(IOSObjectArray *)actual
                                       withNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withNSObjectArray:(IOSObjectArray *)actual
                                                  withId:(id)value
                             withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:value withOrgAssertjCoreDataIndex:index];
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withNSObjectArray:(IOSObjectArray *)actual
                                                        withId:(id)value
                                   withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:value withOrgAssertjCoreDataIndex:index];
}

- (void)assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withNSObjectArray:(IOSObjectArray *)actual
                                           withNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                               withNSObjectArray:(IOSObjectArray *)actual
                                               withNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                               withNSObjectArray:(IOSObjectArray *)actual
                                               withNSObjectArray:(IOSObjectArray *)sequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:sequence];
}

- (void)assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withNSObjectArray:(IOSObjectArray *)actual
                                                  withNSObjectArray:(IOSObjectArray *)subsequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:subsequence];
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withNSObjectArray:(IOSObjectArray *)actual
                                             withNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withNSObjectArray:(IOSObjectArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertStartsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withNSObjectArray:(IOSObjectArray *)actual
                                         withNSObjectArray:(IOSObjectArray *)sequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertStartsWithWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:sequence];
}

- (void)assertEndsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withNSObjectArray:(IOSObjectArray *)actual
                                       withNSObjectArray:(IOSObjectArray *)sequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertEndsWithWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:sequence];
}

- (void)assertContainsNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withNSObjectArray:(IOSObjectArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsNullWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertDoesNotContainNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withNSObjectArray:(IOSObjectArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertDoesNotContainNullWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertAreWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                  withNSObjectArray:(IOSObjectArray *)actual
                     withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertAreWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withOrgAssertjCoreInternalConditions:conditions_ withId:actual withOrgAssertjCoreApiCondition:condition];
}

- (void)assertAreNotWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                     withNSObjectArray:(IOSObjectArray *)actual
                        withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertAreNotWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withOrgAssertjCoreInternalConditions:conditions_ withId:actual withOrgAssertjCoreApiCondition:condition];
}

- (void)assertHaveWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withNSObjectArray:(IOSObjectArray *)actual
                      withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHaveWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withOrgAssertjCoreInternalConditions:conditions_ withId:actual withOrgAssertjCoreApiCondition:condition];
}

- (void)assertDoNotHaveWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withNSObjectArray:(IOSObjectArray *)actual
                           withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHaveNotWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withOrgAssertjCoreInternalConditions:conditions_ withId:actual withOrgAssertjCoreApiCondition:condition];
}

- (void)assertAreAtLeastWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withNSObjectArray:(IOSObjectArray *)actual
                                                   withInt:(jint)n
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertAreAtLeastWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withOrgAssertjCoreInternalConditions:conditions_ withId:actual withInt:n withOrgAssertjCoreApiCondition:condition];
}

- (void)assertAreAtMostWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withNSObjectArray:(IOSObjectArray *)actual
                                                  withInt:(jint)n
                           withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertAreAtMostWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withOrgAssertjCoreInternalConditions:conditions_ withId:actual withInt:n withOrgAssertjCoreApiCondition:condition];
}

- (void)assertAreExactlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withNSObjectArray:(IOSObjectArray *)actual
                                                   withInt:(jint)n
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertAreExactlyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withOrgAssertjCoreInternalConditions:conditions_ withId:actual withInt:n withOrgAssertjCoreApiCondition:condition];
}

- (void)assertHaveAtLeastWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                          withNSObjectArray:(IOSObjectArray *)actual
                                                    withInt:(jint)times
                             withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHaveAtLeastWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withOrgAssertjCoreInternalConditions:conditions_ withId:actual withInt:times withOrgAssertjCoreApiCondition:condition];
}

- (void)assertHaveAtMostWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withNSObjectArray:(IOSObjectArray *)actual
                                                   withInt:(jint)times
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHaveAtMostWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withOrgAssertjCoreInternalConditions:conditions_ withId:actual withInt:times withOrgAssertjCoreApiCondition:condition];
}

- (void)assertHaveExactlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                          withNSObjectArray:(IOSObjectArray *)actual
                                                    withInt:(jint)times
                             withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHaveExactlyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withOrgAssertjCoreInternalConditions:conditions_ withId:actual withInt:times withOrgAssertjCoreApiCondition:condition];
}

- (void)assertHasAtLeastOneElementOfTypeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                         withNSObjectArray:(IOSObjectArray *)actual
                                                              withIOSClass:(IOSClass *)type {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  jboolean found = false;
  {
    IOSObjectArray *a__ = actual;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id o = *b__++;
      if (![((IOSClass *) nil_chk(type)) isInstance:o]) continue;
      found = true;
      break;
    }
  }
  if (!found) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveAtLeastOneElementOfType_shouldHaveAtLeastOneElementOfTypeWithId_withIOSClass_(actual, type)];
}

- (void)assertHasOnlyElementsOfTypeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withNSObjectArray:(IOSObjectArray *)actual
                                                         withIOSClass:(IOSClass *)type {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  {
    IOSObjectArray *a__ = actual;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id o = *b__++;
      if (![((IOSClass *) nil_chk(type)) isInstance:o]) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_shouldHaveOnlyElementsOfTypeWithId_withIOSClass_withIOSClass_(actual, type, [nil_chk(o) java_getClass])];
    }
  }
}

- (void)assertIsSortedWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withNSObjectArray:(IOSObjectArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertIsSortedWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                            withNSObjectArray:(IOSObjectArray *)actual
                                                       withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  OrgAssertjCoreInternalInternalArrays_assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withJavaUtilComparator_(info, failures_, actual, comparator);
}

- (void)assertContainsAllWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                          withNSObjectArray:(IOSObjectArray *)actual
                                       withJavaLangIterable:(id<JavaLangIterable>)other {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertcontainsAllWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withJavaLangIterable:other];
}

- (void)dealloc {
  RELEASE_(arrays_);
  RELEASE_(failures_);
  RELEASE_(conditions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalObjectArrays;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 8, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, 28, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, 29, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, 30, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 34, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 35, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 36, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 37, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 38, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 39, 40, -1, 41, -1, -1 },
    { NULL, "V", 0x1, 42, 40, -1, 41, -1, -1 },
    { NULL, "V", 0x1, 43, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 45, -1, 46, -1, -1 },
    { NULL, "V", 0x1, 47, 9, -1, 48, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(getComparator);
  methods[4].selector = @selector(assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:);
  methods[5].selector = @selector(assertEmptyWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:);
  methods[6].selector = @selector(assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:);
  methods[7].selector = @selector(assertHasSizeWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withInt:);
  methods[8].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withJavaLangIterable:);
  methods[9].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withId:);
  methods[10].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withNSObjectArray:);
  methods[11].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withId:withOrgAssertjCoreDataIndex:);
  methods[12].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withId:withOrgAssertjCoreDataIndex:);
  methods[13].selector = @selector(assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withNSObjectArray:);
  methods[14].selector = @selector(assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withNSObjectArray:);
  methods[15].selector = @selector(assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withNSObjectArray:);
  methods[16].selector = @selector(assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withNSObjectArray:);
  methods[17].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withNSObjectArray:);
  methods[18].selector = @selector(assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:);
  methods[19].selector = @selector(assertStartsWithWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withNSObjectArray:);
  methods[20].selector = @selector(assertEndsWithWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withNSObjectArray:);
  methods[21].selector = @selector(assertContainsNullWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:);
  methods[22].selector = @selector(assertDoesNotContainNullWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:);
  methods[23].selector = @selector(assertAreWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withOrgAssertjCoreApiCondition:);
  methods[24].selector = @selector(assertAreNotWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withOrgAssertjCoreApiCondition:);
  methods[25].selector = @selector(assertHaveWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withOrgAssertjCoreApiCondition:);
  methods[26].selector = @selector(assertDoNotHaveWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withOrgAssertjCoreApiCondition:);
  methods[27].selector = @selector(assertAreAtLeastWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withInt:withOrgAssertjCoreApiCondition:);
  methods[28].selector = @selector(assertAreAtMostWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withInt:withOrgAssertjCoreApiCondition:);
  methods[29].selector = @selector(assertAreExactlyWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withInt:withOrgAssertjCoreApiCondition:);
  methods[30].selector = @selector(assertHaveAtLeastWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withInt:withOrgAssertjCoreApiCondition:);
  methods[31].selector = @selector(assertHaveAtMostWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withInt:withOrgAssertjCoreApiCondition:);
  methods[32].selector = @selector(assertHaveExactlyWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withInt:withOrgAssertjCoreApiCondition:);
  methods[33].selector = @selector(assertHasAtLeastOneElementOfTypeWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withIOSClass:);
  methods[34].selector = @selector(assertHasOnlyElementsOfTypeWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withIOSClass:);
  methods[35].selector = @selector(assertIsSortedWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:);
  methods[36].selector = @selector(assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withJavaUtilComparator:);
  methods[37].selector = @selector(assertContainsAllWithOrgAssertjCoreApiAssertionInfo:withNSObjectArray:withJavaLangIterable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalObjectArrays;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "arrays_", "LOrgAssertjCoreInternalInternalArrays;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "conditions_", "LOrgAssertjCoreInternalConditions;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgAssertjCoreInternalComparisonStrategy;", "()Ljava/util/Comparator<*>;", "assertNullOrEmpty", "LOrgAssertjCoreApiAssertionInfo;[LNSObject;", "assertEmpty", "assertNotEmpty", "assertHasSize", "LOrgAssertjCoreApiAssertionInfo;[LNSObject;I", "assertHasSameSizeAs", "LOrgAssertjCoreApiAssertionInfo;[LNSObject;LJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;[Ljava/lang/Object;Ljava/lang/Iterable<*>;)V", "LOrgAssertjCoreApiAssertionInfo;[LNSObject;LNSObject;", "assertContains", "LOrgAssertjCoreApiAssertionInfo;[LNSObject;[LNSObject;", "LOrgAssertjCoreApiAssertionInfo;[LNSObject;LNSObject;LOrgAssertjCoreDataIndex;", "assertDoesNotContain", "assertContainsOnly", "assertContainsOnlyOnce", "assertContainsSequence", "assertContainsSubsequence", "assertDoesNotHaveDuplicates", "assertStartsWith", "assertEndsWith", "assertContainsNull", "assertDoesNotContainNull", "assertAre", "LOrgAssertjCoreApiAssertionInfo;[LNSObject;LOrgAssertjCoreApiCondition;", "<E:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;[TE;Lorg/assertj/core/api/Condition<-TE;>;)V", "assertAreNot", "assertHave", "assertDoNotHave", "assertAreAtLeast", "LOrgAssertjCoreApiAssertionInfo;[LNSObject;ILOrgAssertjCoreApiCondition;", "<E:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;[TE;ILorg/assertj/core/api/Condition<-TE;>;)V", "assertAreAtMost", "assertAreExactly", "assertHaveAtLeast", "assertHaveAtMost", "assertHaveExactly", "assertHasAtLeastOneElementOfType", "LOrgAssertjCoreApiAssertionInfo;[LNSObject;LIOSClass;", "<E:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;[TE;Ljava/lang/Class<*>;)V", "assertHasOnlyElementsOfType", "assertIsSorted", "assertIsSortedAccordingToComparator", "LOrgAssertjCoreApiAssertionInfo;[LNSObject;LJavaUtilComparator;", "<E:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;[TE;Ljava/util/Comparator<-TE;>;)V", "assertContainsAll", "<E:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;[TE;Ljava/lang/Iterable<+TE;>;)V", &OrgAssertjCoreInternalObjectArrays_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalObjectArrays = { "ObjectArrays", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 38, 4, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalObjectArrays;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalObjectArrays class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalObjectArrays_INSTANCE, new_OrgAssertjCoreInternalObjectArrays_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalObjectArrays)
  }
}

@end

OrgAssertjCoreInternalObjectArrays *OrgAssertjCoreInternalObjectArrays_instance() {
  OrgAssertjCoreInternalObjectArrays_initialize();
  return OrgAssertjCoreInternalObjectArrays_INSTANCE;
}

void OrgAssertjCoreInternalObjectArrays_init(OrgAssertjCoreInternalObjectArrays *self) {
  OrgAssertjCoreInternalObjectArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(self, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

OrgAssertjCoreInternalObjectArrays *new_OrgAssertjCoreInternalObjectArrays_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalObjectArrays, init)
}

OrgAssertjCoreInternalObjectArrays *create_OrgAssertjCoreInternalObjectArrays_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalObjectArrays, init)
}

void OrgAssertjCoreInternalObjectArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalObjectArrays *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  NSObject_init(self);
  JreStrongAssign(&self->arrays_, OrgAssertjCoreInternalInternalArrays_instance());
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
  JreStrongAssign(&self->conditions_, OrgAssertjCoreInternalConditions_instance());
  JreStrongAssignAndConsume(&self->arrays_, new_OrgAssertjCoreInternalInternalArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(comparisonStrategy));
}

OrgAssertjCoreInternalObjectArrays *new_OrgAssertjCoreInternalObjectArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalObjectArrays, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

OrgAssertjCoreInternalObjectArrays *create_OrgAssertjCoreInternalObjectArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalObjectArrays, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalObjectArrays)
