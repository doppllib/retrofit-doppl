//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RetrofitClientDummyHttpUrlConnection.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/AssertionError.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface RetrofitClientDummyHttpUrlConnection () {
 @public
  id<JavaUtilMap> responseHeaders_;
  id<JavaUtilMap> requestHeaders_;
  JavaIoByteArrayOutputStream *outputStream_;
  jint responseCode_DummyHttpUrlConnection_;
  NSString *responseMessage_DummyHttpUrlConnection_;
  JavaIoInputStream *inputStream_;
  JavaIoInputStream *errorStream_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitClientDummyHttpUrlConnection, responseHeaders_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(RetrofitClientDummyHttpUrlConnection, requestHeaders_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(RetrofitClientDummyHttpUrlConnection, outputStream_, JavaIoByteArrayOutputStream *)
J2OBJC_FIELD_SETTER(RetrofitClientDummyHttpUrlConnection, responseMessage_DummyHttpUrlConnection_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitClientDummyHttpUrlConnection, inputStream_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(RetrofitClientDummyHttpUrlConnection, errorStream_, JavaIoInputStream *)

@implementation RetrofitClientDummyHttpUrlConnection

- (instancetype)initWithNSString:(NSString *)url {
  RetrofitClientDummyHttpUrlConnection_initWithNSString_(self, url);
  return self;
}

- (void)setResponseCodeWithInt:(jint)responseCode {
  self->responseCode_DummyHttpUrlConnection_ = responseCode;
}

- (jint)getResponseCode {
  return responseCode_DummyHttpUrlConnection_;
}

- (void)setResponseMessageWithNSString:(NSString *)responseMessage {
  JreStrongAssign(&self->responseMessage_DummyHttpUrlConnection_, responseMessage);
}

- (NSString *)getResponseMessage {
  return responseMessage_DummyHttpUrlConnection_;
}

- (JavaIoByteArrayOutputStream *)getOutputStream {
  return outputStream_;
}

- (void)setInputStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  JreStrongAssign(&self->inputStream_, inputStream);
}

- (JavaIoInputStream *)getInputStream {
  return inputStream_;
}

- (void)setErrorStreamWithJavaIoInputStream:(JavaIoInputStream *)errorStream {
  JreStrongAssign(&self->errorStream_, errorStream);
}

- (JavaIoInputStream *)getErrorStream {
  return errorStream_;
}

- (void)addResponseHeaderWithNSString:(NSString *)name
                         withNSString:(NSString *)value {
  id<JavaUtilList> values = [((id<JavaUtilMap>) nil_chk(responseHeaders_)) getWithId:name];
  if (values == nil) {
    values = create_JavaUtilArrayList_init();
    [responseHeaders_ putWithId:name withId:values];
  }
  [values addWithId:value];
}

- (id<JavaUtilMap>)getHeaderFields {
  return responseHeaders_;
}

- (void)addRequestPropertyWithNSString:(NSString *)name
                          withNSString:(NSString *)value {
  id<JavaUtilList> values = [((id<JavaUtilMap>) nil_chk(requestHeaders_)) getWithId:name];
  if (values == nil) {
    values = create_JavaUtilArrayList_init();
    [requestHeaders_ putWithId:name withId:values];
  }
  [values addWithId:value];
}

- (id<JavaUtilMap>)getRequestProperties {
  return requestHeaders_;
}

- (NSString *)getRequestPropertyWithNSString:(NSString *)name {
  id<JavaUtilList> values = [((id<JavaUtilMap>) nil_chk(requestHeaders_)) getWithId:name];
  if (values == nil || [values isEmpty]) {
    return nil;
  }
  return [values getWithInt:0];
}

- (void)disconnect {
  @throw create_JavaLangAssertionError_initWithId_(@"Not implemented.");
}

- (jboolean)usingProxy {
  return false;
}

- (void)connect {
  @throw create_JavaLangAssertionError_initWithId_(@"Not implemented.");
}

- (void)dealloc {
  RELEASE_(responseHeaders_);
  RELEASE_(requestHeaders_);
  RELEASE_(outputStream_);
  RELEASE_(responseMessage_DummyHttpUrlConnection_);
  RELEASE_(inputStream_);
  RELEASE_(errorStream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LJavaIoByteArrayOutputStream;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(setResponseCodeWithInt:);
  methods[2].selector = @selector(getResponseCode);
  methods[3].selector = @selector(setResponseMessageWithNSString:);
  methods[4].selector = @selector(getResponseMessage);
  methods[5].selector = @selector(getOutputStream);
  methods[6].selector = @selector(setInputStreamWithJavaIoInputStream:);
  methods[7].selector = @selector(getInputStream);
  methods[8].selector = @selector(setErrorStreamWithJavaIoInputStream:);
  methods[9].selector = @selector(getErrorStream);
  methods[10].selector = @selector(addResponseHeaderWithNSString:withNSString:);
  methods[11].selector = @selector(getHeaderFields);
  methods[12].selector = @selector(addRequestPropertyWithNSString:withNSString:);
  methods[13].selector = @selector(getRequestProperties);
  methods[14].selector = @selector(getRequestPropertyWithNSString:);
  methods[15].selector = @selector(disconnect);
  methods[16].selector = @selector(usingProxy);
  methods[17].selector = @selector(connect);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "responseHeaders_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
    { "requestHeaders_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
    { "outputStream_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "responseCode_DummyHttpUrlConnection_", "I", .constantValue.asLong = 0, 0x2, 15, -1, -1, -1 },
    { "responseMessage_DummyHttpUrlConnection_", "LNSString;", .constantValue.asLong = 0, 0x2, 16, -1, -1, -1 },
    { "inputStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaNetMalformedURLException;", "setResponseCode", "I", "LJavaIoIOException;", "setResponseMessage", "setInputStream", "LJavaIoInputStream;", "setErrorStream", "addResponseHeader", "LNSString;LNSString;", "()Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;", "addRequestProperty", "getRequestProperty", "Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;", "responseCode", "responseMessage" };
  static const J2ObjcClassInfo _RetrofitClientDummyHttpUrlConnection = { "DummyHttpUrlConnection", "retrofit.client", ptrTable, methods, fields, 7, 0x1, 18, 7, -1, -1, -1, -1, -1 };
  return &_RetrofitClientDummyHttpUrlConnection;
}

@end

void RetrofitClientDummyHttpUrlConnection_initWithNSString_(RetrofitClientDummyHttpUrlConnection *self, NSString *url) {
  JavaNetHttpURLConnection_initWithJavaNetURL_(self, create_JavaNetURL_initWithNSString_(url));
  JreStrongAssignAndConsume(&self->responseHeaders_, new_JavaUtilLinkedHashMap_init());
  JreStrongAssignAndConsume(&self->requestHeaders_, new_JavaUtilLinkedHashMap_init());
  JreStrongAssignAndConsume(&self->outputStream_, new_JavaIoByteArrayOutputStream_init());
}

RetrofitClientDummyHttpUrlConnection *new_RetrofitClientDummyHttpUrlConnection_initWithNSString_(NSString *url) {
  J2OBJC_NEW_IMPL(RetrofitClientDummyHttpUrlConnection, initWithNSString_, url)
}

RetrofitClientDummyHttpUrlConnection *create_RetrofitClientDummyHttpUrlConnection_initWithNSString_(NSString *url) {
  J2OBJC_CREATE_IMPL(RetrofitClientDummyHttpUrlConnection, initWithNSString_, url)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitClientDummyHttpUrlConnection)
