//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveSameClass.h"

@interface OrgAssertjCoreErrorShouldHaveSameClass ()

- (instancetype)initWithId:(id)actual
                    withId:(id)other;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveSameClass_initWithId_withId_(OrgAssertjCoreErrorShouldHaveSameClass *self, id actual, id other);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveSameClass *new_OrgAssertjCoreErrorShouldHaveSameClass_initWithId_withId_(id actual, id other) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveSameClass *create_OrgAssertjCoreErrorShouldHaveSameClass_initWithId_withId_(id actual, id other);

@implementation OrgAssertjCoreErrorShouldHaveSameClass

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveSameClassWithId:(id)actual
                                                                 withId:(id)other {
  return OrgAssertjCoreErrorShouldHaveSameClass_shouldHaveSameClassWithId_withId_(actual, other);
}

- (instancetype)initWithId:(id)actual
                    withId:(id)other {
  OrgAssertjCoreErrorShouldHaveSameClass_initWithId_withId_(self, actual, other);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveSameClassWithId:withId:);
  methods[1].selector = @selector(initWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveSameClass", "LNSObject;LNSObject;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveSameClass = { "ShouldHaveSameClass", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveSameClass;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldHaveSameClass_shouldHaveSameClassWithId_withId_(id actual, id other) {
  OrgAssertjCoreErrorShouldHaveSameClass_initialize();
  return create_OrgAssertjCoreErrorShouldHaveSameClass_initWithId_withId_(actual, other);
}

void OrgAssertjCoreErrorShouldHaveSameClass_initWithId_withId_(OrgAssertjCoreErrorShouldHaveSameClass *self, id actual, id other) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting\n <%s>\nto have the same class as:\n <%s>(<%s>) \nbut its class was:<%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual, other, [nil_chk(other) java_getClass], [nil_chk(actual) java_getClass] } count:4 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveSameClass *new_OrgAssertjCoreErrorShouldHaveSameClass_initWithId_withId_(id actual, id other) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveSameClass, initWithId_withId_, actual, other)
}

OrgAssertjCoreErrorShouldHaveSameClass *create_OrgAssertjCoreErrorShouldHaveSameClass_initWithId_withId_(id actual, id other) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveSameClass, initWithId_withId_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveSameClass)
