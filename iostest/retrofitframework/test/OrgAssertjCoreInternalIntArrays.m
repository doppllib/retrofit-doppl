//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalIntArrays.h"
#include "OrgAssertjCoreInternalInternalArrays.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/util/Comparator.h"

@interface OrgAssertjCoreInternalIntArrays () {
 @public
  OrgAssertjCoreInternalInternalArrays *arrays_;
}

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalIntArrays, arrays_, OrgAssertjCoreInternalInternalArrays *)

inline OrgAssertjCoreInternalIntArrays *OrgAssertjCoreInternalIntArrays_get_INSTANCE();
static OrgAssertjCoreInternalIntArrays *OrgAssertjCoreInternalIntArrays_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalIntArrays, INSTANCE, OrgAssertjCoreInternalIntArrays *)

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalIntArrays)

@implementation OrgAssertjCoreInternalIntArrays

+ (OrgAssertjCoreInternalIntArrays *)instance {
  return OrgAssertjCoreInternalIntArrays_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalIntArrays_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreInternalIntArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
  return self;
}

- (id<JavaUtilComparator>)getComparator {
  return [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) getComparator];
}

- (void)assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                               withIntArray:(IOSIntArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withIntArray:(IOSIntArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertEmptyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withIntArray:(IOSIntArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertHasSizeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withIntArray:(IOSIntArray *)actual
                                                withInt:(jint)expectedSize {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHasSizeWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withInt:expectedSize];
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withIntArray:(IOSIntArray *)actual
                                         withJavaLangIterable:(id<JavaLangIterable>)other {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info withId:actual withJavaLangIterable:other];
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withIntArray:(IOSIntArray *)actual
                                            withNSObjectArray:(IOSObjectArray *)other {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info withId:actual withId:other];
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withIntArray:(IOSIntArray *)actual
                                            withIntArray:(IOSIntArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withIntArray:(IOSIntArray *)actual
                                                 withInt:(jint)value
                             withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:JavaLangInteger_valueOfWithInt_(value) withOrgAssertjCoreDataIndex:index];
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withIntArray:(IOSIntArray *)actual
                                                       withInt:(jint)value
                                   withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:JavaLangInteger_valueOfWithInt_(value) withOrgAssertjCoreDataIndex:index];
}

- (void)assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withIntArray:(IOSIntArray *)actual
                                                withIntArray:(IOSIntArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withIntArray:(IOSIntArray *)actual
                                                    withIntArray:(IOSIntArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withIntArray:(IOSIntArray *)actual
                                                    withIntArray:(IOSIntArray *)sequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:sequence];
}

- (void)assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                       withIntArray:(IOSIntArray *)actual
                                                       withIntArray:(IOSIntArray *)subsequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:subsequence];
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withIntArray:(IOSIntArray *)actual
                                                  withIntArray:(IOSIntArray *)values {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:values];
}

- (void)assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                         withIntArray:(IOSIntArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertStartsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withIntArray:(IOSIntArray *)actual
                                              withIntArray:(IOSIntArray *)sequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertStartsWithWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:sequence];
}

- (void)assertEndsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withIntArray:(IOSIntArray *)actual
                                            withIntArray:(IOSIntArray *)sequence {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertEndsWithWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual withId:sequence];
}

- (void)assertIsSortedWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withIntArray:(IOSIntArray *)actual {
  [((OrgAssertjCoreInternalInternalArrays *) nil_chk(arrays_)) assertIsSortedWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures_ withId:actual];
}

- (void)assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                                 withIntArray:(IOSIntArray *)actual
                                                       withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  OrgAssertjCoreInternalInternalArrays_assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withJavaUtilComparator_(info, failures_, actual, comparator);
}

- (void)dealloc {
  RELEASE_(arrays_);
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalIntArrays;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 8, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, 26, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(getComparator);
  methods[4].selector = @selector(assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:withIntArray:);
  methods[5].selector = @selector(assertEmptyWithOrgAssertjCoreApiAssertionInfo:withIntArray:);
  methods[6].selector = @selector(assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:withIntArray:);
  methods[7].selector = @selector(assertHasSizeWithOrgAssertjCoreApiAssertionInfo:withIntArray:withInt:);
  methods[8].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withIntArray:withJavaLangIterable:);
  methods[9].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withIntArray:withNSObjectArray:);
  methods[10].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withIntArray:withIntArray:);
  methods[11].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withIntArray:withInt:withOrgAssertjCoreDataIndex:);
  methods[12].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withIntArray:withInt:withOrgAssertjCoreDataIndex:);
  methods[13].selector = @selector(assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:withIntArray:withIntArray:);
  methods[14].selector = @selector(assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:withIntArray:withIntArray:);
  methods[15].selector = @selector(assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:withIntArray:withIntArray:);
  methods[16].selector = @selector(assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:withIntArray:withIntArray:);
  methods[17].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withIntArray:withIntArray:);
  methods[18].selector = @selector(assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:withIntArray:);
  methods[19].selector = @selector(assertStartsWithWithOrgAssertjCoreApiAssertionInfo:withIntArray:withIntArray:);
  methods[20].selector = @selector(assertEndsWithWithOrgAssertjCoreApiAssertionInfo:withIntArray:withIntArray:);
  methods[21].selector = @selector(assertIsSortedWithOrgAssertjCoreApiAssertionInfo:withIntArray:);
  methods[22].selector = @selector(assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:withIntArray:withJavaUtilComparator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalIntArrays;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "arrays_", "LOrgAssertjCoreInternalInternalArrays;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgAssertjCoreInternalComparisonStrategy;", "()Ljava/util/Comparator<*>;", "assertNullOrEmpty", "LOrgAssertjCoreApiAssertionInfo;[I", "assertEmpty", "assertNotEmpty", "assertHasSize", "LOrgAssertjCoreApiAssertionInfo;[II", "assertHasSameSizeAs", "LOrgAssertjCoreApiAssertionInfo;[ILJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;[ILjava/lang/Iterable<*>;)V", "LOrgAssertjCoreApiAssertionInfo;[I[LNSObject;", "assertContains", "LOrgAssertjCoreApiAssertionInfo;[I[I", "LOrgAssertjCoreApiAssertionInfo;[IILOrgAssertjCoreDataIndex;", "assertDoesNotContain", "assertContainsOnly", "assertContainsOnlyOnce", "assertContainsSequence", "assertContainsSubsequence", "assertDoesNotHaveDuplicates", "assertStartsWith", "assertEndsWith", "assertIsSorted", "assertIsSortedAccordingToComparator", "LOrgAssertjCoreApiAssertionInfo;[ILJavaUtilComparator;", "(Lorg/assertj/core/api/AssertionInfo;[ILjava/util/Comparator<-Ljava/lang/Integer;>;)V", &OrgAssertjCoreInternalIntArrays_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalIntArrays = { "IntArrays", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 23, 3, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalIntArrays;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalIntArrays class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalIntArrays_INSTANCE, new_OrgAssertjCoreInternalIntArrays_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalIntArrays)
  }
}

@end

OrgAssertjCoreInternalIntArrays *OrgAssertjCoreInternalIntArrays_instance() {
  OrgAssertjCoreInternalIntArrays_initialize();
  return OrgAssertjCoreInternalIntArrays_INSTANCE;
}

void OrgAssertjCoreInternalIntArrays_init(OrgAssertjCoreInternalIntArrays *self) {
  OrgAssertjCoreInternalIntArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(self, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

OrgAssertjCoreInternalIntArrays *new_OrgAssertjCoreInternalIntArrays_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalIntArrays, init)
}

OrgAssertjCoreInternalIntArrays *create_OrgAssertjCoreInternalIntArrays_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalIntArrays, init)
}

void OrgAssertjCoreInternalIntArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalIntArrays *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  NSObject_init(self);
  JreStrongAssign(&self->arrays_, OrgAssertjCoreInternalInternalArrays_instance());
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
  JreStrongAssignAndConsume(&self->arrays_, new_OrgAssertjCoreInternalInternalArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(comparisonStrategy));
}

OrgAssertjCoreInternalIntArrays *new_OrgAssertjCoreInternalIntArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalIntArrays, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

OrgAssertjCoreInternalIntArrays *create_OrgAssertjCoreInternalIntArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalIntArrays, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalIntArrays)
