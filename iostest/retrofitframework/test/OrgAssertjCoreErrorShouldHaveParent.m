//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveParent.h"
#include "java/io/File.h"

@interface OrgAssertjCoreErrorShouldHaveParent ()

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                    withJavaIoFile:(JavaIoFile *)expected;

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                    withJavaIoFile:(JavaIoFile *)actualParent
                    withJavaIoFile:(JavaIoFile *)expected;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_(OrgAssertjCoreErrorShouldHaveParent *self, JavaIoFile *actual, JavaIoFile *expected);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveParent *new_OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_(JavaIoFile *actual, JavaIoFile *expected) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveParent *create_OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_(JavaIoFile *actual, JavaIoFile *expected);

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_withJavaIoFile_(OrgAssertjCoreErrorShouldHaveParent *self, JavaIoFile *actual, JavaIoFile *actualParent, JavaIoFile *expected);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveParent *new_OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_withJavaIoFile_(JavaIoFile *actual, JavaIoFile *actualParent, JavaIoFile *expected) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveParent *create_OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_withJavaIoFile_(JavaIoFile *actual, JavaIoFile *actualParent, JavaIoFile *expected);

@implementation OrgAssertjCoreErrorShouldHaveParent

+ (OrgAssertjCoreErrorShouldHaveParent *)shouldHaveParentWithJavaIoFile:(JavaIoFile *)actual
                                                         withJavaIoFile:(JavaIoFile *)expected {
  return OrgAssertjCoreErrorShouldHaveParent_shouldHaveParentWithJavaIoFile_withJavaIoFile_(actual, expected);
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                    withJavaIoFile:(JavaIoFile *)expected {
  OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_(self, actual, expected);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                    withJavaIoFile:(JavaIoFile *)actualParent
                    withJavaIoFile:(JavaIoFile *)expected {
  OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_withJavaIoFile_(self, actual, actualParent, expected);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorShouldHaveParent;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveParentWithJavaIoFile:withJavaIoFile:);
  methods[1].selector = @selector(initWithJavaIoFile:withJavaIoFile:);
  methods[2].selector = @selector(initWithJavaIoFile:withJavaIoFile:withJavaIoFile:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveParent", "LJavaIoFile;LJavaIoFile;", "LJavaIoFile;LJavaIoFile;LJavaIoFile;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveParent = { "ShouldHaveParent", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveParent;
}

@end

OrgAssertjCoreErrorShouldHaveParent *OrgAssertjCoreErrorShouldHaveParent_shouldHaveParentWithJavaIoFile_withJavaIoFile_(JavaIoFile *actual, JavaIoFile *expected) {
  OrgAssertjCoreErrorShouldHaveParent_initialize();
  return [((JavaIoFile *) nil_chk(actual)) getParentFile] == nil ? create_OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_(actual, expected) : create_OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_withJavaIoFile_(actual, [actual getParentFile], expected);
}

void OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_(OrgAssertjCoreErrorShouldHaveParent *self, JavaIoFile *actual, JavaIoFile *expected) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"%nExpecting file%n  <%s>%nto have parent:%n  <%s>%nbut did not have one.", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveParent *new_OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_(JavaIoFile *actual, JavaIoFile *expected) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveParent, initWithJavaIoFile_withJavaIoFile_, actual, expected)
}

OrgAssertjCoreErrorShouldHaveParent *create_OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_(JavaIoFile *actual, JavaIoFile *expected) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveParent, initWithJavaIoFile_withJavaIoFile_, actual, expected)
}

void OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_withJavaIoFile_(OrgAssertjCoreErrorShouldHaveParent *self, JavaIoFile *actual, JavaIoFile *actualParent, JavaIoFile *expected) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"%nExpecting file%n  <%s>%nto have parent:%n  <%s>%nbut had:%n  <%s>.", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected, actualParent } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveParent *new_OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_withJavaIoFile_(JavaIoFile *actual, JavaIoFile *actualParent, JavaIoFile *expected) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveParent, initWithJavaIoFile_withJavaIoFile_withJavaIoFile_, actual, actualParent, expected)
}

OrgAssertjCoreErrorShouldHaveParent *create_OrgAssertjCoreErrorShouldHaveParent_initWithJavaIoFile_withJavaIoFile_withJavaIoFile_(JavaIoFile *actual, JavaIoFile *actualParent, JavaIoFile *expected) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveParent, initWithJavaIoFile_withJavaIoFile_withJavaIoFile_, actual, actualParent, expected)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveParent)
