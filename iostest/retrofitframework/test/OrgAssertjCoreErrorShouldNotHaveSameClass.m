//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldNotHaveSameClass.h"

@interface OrgAssertjCoreErrorShouldNotHaveSameClass ()

- (instancetype)initWithId:(id)actual
                    withId:(id)other;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldNotHaveSameClass_initWithId_withId_(OrgAssertjCoreErrorShouldNotHaveSameClass *self, id actual, id other);

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotHaveSameClass *new_OrgAssertjCoreErrorShouldNotHaveSameClass_initWithId_withId_(id actual, id other) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotHaveSameClass *create_OrgAssertjCoreErrorShouldNotHaveSameClass_initWithId_withId_(id actual, id other);

@implementation OrgAssertjCoreErrorShouldNotHaveSameClass

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotHaveSameClassWithId:(id)actual
                                                                    withId:(id)other {
  return OrgAssertjCoreErrorShouldNotHaveSameClass_shouldNotHaveSameClassWithId_withId_(actual, other);
}

- (instancetype)initWithId:(id)actual
                    withId:(id)other {
  OrgAssertjCoreErrorShouldNotHaveSameClass_initWithId_withId_(self, actual, other);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldNotHaveSameClassWithId:withId:);
  methods[1].selector = @selector(initWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldNotHaveSameClass", "LNSObject;LNSObject;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldNotHaveSameClass = { "ShouldNotHaveSameClass", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldNotHaveSameClass;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotHaveSameClass_shouldNotHaveSameClassWithId_withId_(id actual, id other) {
  OrgAssertjCoreErrorShouldNotHaveSameClass_initialize();
  return create_OrgAssertjCoreErrorShouldNotHaveSameClass_initWithId_withId_(actual, other);
}

void OrgAssertjCoreErrorShouldNotHaveSameClass_initWithId_withId_(OrgAssertjCoreErrorShouldNotHaveSameClass *self, id actual, id other) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nnot to have not the same class as:\n <%s> (%s)", [IOSObjectArray arrayWithObjects:(id[]){ actual, other, [nil_chk(actual) java_getClass] } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldNotHaveSameClass *new_OrgAssertjCoreErrorShouldNotHaveSameClass_initWithId_withId_(id actual, id other) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldNotHaveSameClass, initWithId_withId_, actual, other)
}

OrgAssertjCoreErrorShouldNotHaveSameClass *create_OrgAssertjCoreErrorShouldNotHaveSameClass_initWithId_withId_(id actual, id other) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldNotHaveSameClass, initWithId_withId_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldNotHaveSameClass)
