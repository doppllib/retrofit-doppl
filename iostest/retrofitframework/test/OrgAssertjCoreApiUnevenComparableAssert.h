//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreApiUnevenComparableAssert")
#ifdef RESTRICT_OrgAssertjCoreApiUnevenComparableAssert
#define INCLUDE_ALL_OrgAssertjCoreApiUnevenComparableAssert 0
#else
#define INCLUDE_ALL_OrgAssertjCoreApiUnevenComparableAssert 1
#endif
#undef RESTRICT_OrgAssertjCoreApiUnevenComparableAssert

#if !defined (OrgAssertjCoreApiUnevenComparableAssert_) && (INCLUDE_ALL_OrgAssertjCoreApiUnevenComparableAssert || defined(INCLUDE_OrgAssertjCoreApiUnevenComparableAssert))
#define OrgAssertjCoreApiUnevenComparableAssert_

#define RESTRICT_OrgAssertjCoreApiComparableAssert 1
#define INCLUDE_OrgAssertjCoreApiComparableAssert 1
#include "OrgAssertjCoreApiComparableAssert.h"

@protocol JavaLangComparable;

@protocol OrgAssertjCoreApiUnevenComparableAssert < OrgAssertjCoreApiComparableAssert, JavaObject >

- (id<OrgAssertjCoreApiUnevenComparableAssert>)isEqualByComparingToWithJavaLangComparable:(id<JavaLangComparable>)expected;

- (id<OrgAssertjCoreApiUnevenComparableAssert>)isNotEqualByComparingToWithJavaLangComparable:(id<JavaLangComparable>)other;

- (id<OrgAssertjCoreApiUnevenComparableAssert>)isLessThanOrEqualToWithJavaLangComparable:(id<JavaLangComparable>)arg0;

- (id<OrgAssertjCoreApiUnevenComparableAssert>)isGreaterThanWithJavaLangComparable:(id<JavaLangComparable>)arg0;

- (id<OrgAssertjCoreApiUnevenComparableAssert>)isLessThanWithJavaLangComparable:(id<JavaLangComparable>)arg0;

- (id<OrgAssertjCoreApiUnevenComparableAssert>)isGreaterThanOrEqualToWithJavaLangComparable:(id<JavaLangComparable>)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreApiUnevenComparableAssert)

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreApiUnevenComparableAssert)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreApiUnevenComparableAssert")
