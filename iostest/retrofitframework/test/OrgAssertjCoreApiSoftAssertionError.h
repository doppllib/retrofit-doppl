//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreApiSoftAssertionError")
#ifdef RESTRICT_OrgAssertjCoreApiSoftAssertionError
#define INCLUDE_ALL_OrgAssertjCoreApiSoftAssertionError 0
#else
#define INCLUDE_ALL_OrgAssertjCoreApiSoftAssertionError 1
#endif
#undef RESTRICT_OrgAssertjCoreApiSoftAssertionError

#if !defined (OrgAssertjCoreApiSoftAssertionError_) && (INCLUDE_ALL_OrgAssertjCoreApiSoftAssertionError || defined(INCLUDE_OrgAssertjCoreApiSoftAssertionError))
#define OrgAssertjCoreApiSoftAssertionError_

#define RESTRICT_JavaLangAssertionError 1
#define INCLUDE_JavaLangAssertionError 1
#include "java/lang/AssertionError.h"

@protocol JavaUtilList;

@interface OrgAssertjCoreApiSoftAssertionError : JavaLangAssertionError

#pragma mark Public

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)errors;

- (id<JavaUtilList>)getErrors;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreApiSoftAssertionError)

FOUNDATION_EXPORT void OrgAssertjCoreApiSoftAssertionError_initWithJavaUtilList_(OrgAssertjCoreApiSoftAssertionError *self, id<JavaUtilList> errors);

FOUNDATION_EXPORT OrgAssertjCoreApiSoftAssertionError *new_OrgAssertjCoreApiSoftAssertionError_initWithJavaUtilList_(id<JavaUtilList> errors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgAssertjCoreApiSoftAssertionError *create_OrgAssertjCoreApiSoftAssertionError_initWithJavaUtilList_(id<JavaUtilList> errors);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreApiSoftAssertionError)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreApiSoftAssertionError")
