//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldNotBeBetween.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/util/Date.h"

@interface OrgAssertjCoreErrorShouldNotBeBetween ()

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)start
                    withJavaUtilDate:(JavaUtilDate *)end
                         withBoolean:(jboolean)inclusiveStart
                         withBoolean:(jboolean)inclusiveEnd
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldNotBeBetween_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldNotBeBetween *self, JavaUtilDate *actual, JavaUtilDate *start, JavaUtilDate *end, jboolean inclusiveStart, jboolean inclusiveEnd, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotBeBetween *new_OrgAssertjCoreErrorShouldNotBeBetween_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, JavaUtilDate *start, JavaUtilDate *end, jboolean inclusiveStart, jboolean inclusiveEnd, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotBeBetween *create_OrgAssertjCoreErrorShouldNotBeBetween_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, JavaUtilDate *start, JavaUtilDate *end, jboolean inclusiveStart, jboolean inclusiveEnd, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

@implementation OrgAssertjCoreErrorShouldNotBeBetween

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotBeBetweenWithJavaUtilDate:(JavaUtilDate *)actual
                                                                withJavaUtilDate:(JavaUtilDate *)start
                                                                withJavaUtilDate:(JavaUtilDate *)end
                                                                     withBoolean:(jboolean)inclusiveStart
                                                                     withBoolean:(jboolean)inclusiveEnd
                                    withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldNotBeBetween_shouldNotBeBetweenWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(actual, start, end, inclusiveStart, inclusiveEnd, comparisonStrategy);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotBeBetweenWithJavaUtilDate:(JavaUtilDate *)actual
                                                                withJavaUtilDate:(JavaUtilDate *)start
                                                                withJavaUtilDate:(JavaUtilDate *)end
                                                                     withBoolean:(jboolean)inclusiveStart
                                                                     withBoolean:(jboolean)inclusiveEnd {
  return OrgAssertjCoreErrorShouldNotBeBetween_shouldNotBeBetweenWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_(actual, start, end, inclusiveStart, inclusiveEnd);
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)start
                    withJavaUtilDate:(JavaUtilDate *)end
                         withBoolean:(jboolean)inclusiveStart
                         withBoolean:(jboolean)inclusiveEnd
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldNotBeBetween_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(self, actual, start, end, inclusiveStart, inclusiveEnd, comparisonStrategy);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldNotBeBetweenWithJavaUtilDate:withJavaUtilDate:withJavaUtilDate:withBoolean:withBoolean:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[1].selector = @selector(shouldNotBeBetweenWithJavaUtilDate:withJavaUtilDate:withJavaUtilDate:withBoolean:withBoolean:);
  methods[2].selector = @selector(initWithJavaUtilDate:withJavaUtilDate:withJavaUtilDate:withBoolean:withBoolean:withOrgAssertjCoreInternalComparisonStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldNotBeBetween", "LJavaUtilDate;LJavaUtilDate;LJavaUtilDate;ZZLOrgAssertjCoreInternalComparisonStrategy;", "LJavaUtilDate;LJavaUtilDate;LJavaUtilDate;ZZ" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldNotBeBetween = { "ShouldNotBeBetween", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldNotBeBetween;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotBeBetween_shouldNotBeBetweenWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, JavaUtilDate *start, JavaUtilDate *end, jboolean inclusiveStart, jboolean inclusiveEnd, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldNotBeBetween_initialize();
  return create_OrgAssertjCoreErrorShouldNotBeBetween_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(actual, start, end, inclusiveStart, inclusiveEnd, comparisonStrategy);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotBeBetween_shouldNotBeBetweenWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_(JavaUtilDate *actual, JavaUtilDate *start, JavaUtilDate *end, jboolean inclusiveStart, jboolean inclusiveEnd) {
  OrgAssertjCoreErrorShouldNotBeBetween_initialize();
  return create_OrgAssertjCoreErrorShouldNotBeBetween_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(actual, start, end, inclusiveStart, inclusiveEnd, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

void OrgAssertjCoreErrorShouldNotBeBetween_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldNotBeBetween *self, JavaUtilDate *actual, JavaUtilDate *start, JavaUtilDate *end, jboolean inclusiveStart, jboolean inclusiveEnd, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, JreStrcat("$C$C", @"\nExpecting:\n <%s>\nnot to be in period:\n ", (inclusiveStart ? '[' : ']'), @"%s, %s%s", (inclusiveEnd ? ']' : '[')), [IOSObjectArray arrayWithObjects:(id[]){ actual, start, end, comparisonStrategy } count:4 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldNotBeBetween *new_OrgAssertjCoreErrorShouldNotBeBetween_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, JavaUtilDate *start, JavaUtilDate *end, jboolean inclusiveStart, jboolean inclusiveEnd, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldNotBeBetween, initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_, actual, start, end, inclusiveStart, inclusiveEnd, comparisonStrategy)
}

OrgAssertjCoreErrorShouldNotBeBetween *create_OrgAssertjCoreErrorShouldNotBeBetween_initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_(JavaUtilDate *actual, JavaUtilDate *start, JavaUtilDate *end, jboolean inclusiveStart, jboolean inclusiveEnd, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldNotBeBetween, initWithJavaUtilDate_withJavaUtilDate_withJavaUtilDate_withBoolean_withBoolean_withOrgAssertjCoreInternalComparisonStrategy_, actual, start, end, inclusiveStart, inclusiveEnd, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldNotBeBetween)
