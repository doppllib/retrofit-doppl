//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeEmpty.h"

@interface OrgAssertjCoreErrorShouldBeEmpty ()

- (instancetype)initWithId:(id)actual;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeEmpty_initWithId_(OrgAssertjCoreErrorShouldBeEmpty *self, id actual);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeEmpty *new_OrgAssertjCoreErrorShouldBeEmpty_initWithId_(id actual) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeEmpty *create_OrgAssertjCoreErrorShouldBeEmpty_initWithId_(id actual);

@implementation OrgAssertjCoreErrorShouldBeEmpty

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeEmptyWithId:(id)actual {
  return OrgAssertjCoreErrorShouldBeEmpty_shouldBeEmptyWithId_(actual);
}

- (instancetype)initWithId:(id)actual {
  OrgAssertjCoreErrorShouldBeEmpty_initWithId_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeEmptyWithId:);
  methods[1].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeEmpty", "LNSObject;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeEmpty = { "ShouldBeEmpty", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeEmpty;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeEmpty_shouldBeEmptyWithId_(id actual) {
  OrgAssertjCoreErrorShouldBeEmpty_initialize();
  return create_OrgAssertjCoreErrorShouldBeEmpty_initWithId_(actual);
}

void OrgAssertjCoreErrorShouldBeEmpty_initWithId_(OrgAssertjCoreErrorShouldBeEmpty *self, id actual) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting empty but was:<%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeEmpty *new_OrgAssertjCoreErrorShouldBeEmpty_initWithId_(id actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeEmpty, initWithId_, actual)
}

OrgAssertjCoreErrorShouldBeEmpty *create_OrgAssertjCoreErrorShouldBeEmpty_initWithId_(id actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeEmpty, initWithId_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeEmpty)
