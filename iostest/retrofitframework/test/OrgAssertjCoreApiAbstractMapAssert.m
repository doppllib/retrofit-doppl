//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractMapAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreDataMapEntry.h"
#include "OrgAssertjCoreInternalInternalMaps.h"
#include "OrgAssertjCoreUtilArrays.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Iterable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Comparator.h"
#include "java/util/Map.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAbstractMapAssert__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAbstractMapAssert__Annotations$1();

@implementation OrgAssertjCoreApiAbstractMapAssert

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)actual
                       withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractMapAssert_initWithJavaUtilMap_withIOSClass_(self, actual, selfType);
  return self;
}

- (void)isNullOrEmpty {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_];
}

- (void)isEmpty {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_];
}

- (OrgAssertjCoreApiAbstractMapAssert *)isNotEmpty {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)hasSizeWithInt:(jint)expected {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertHasSizeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withInt:expected];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)hasSameSizeAsWithId:(id)other {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withId:other];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)hasSameSizeAsWithJavaLangIterable:(id<JavaLangIterable>)other {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withJavaLangIterable:other];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)hasSameSizeAsWithJavaUtilMap:(id<JavaUtilMap>)other {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withJavaUtilMap:other];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)containsWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withOrgAssertjCoreDataMapEntryArray:entries];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)containsEntryWithId:(id)key
                                                     withId:(id)value {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withOrgAssertjCoreDataMapEntryArray:OrgAssertjCoreUtilArrays_arrayWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ OrgAssertjCoreDataMapEntry_entry__WithId_withId_(key, value) } count:1 type:OrgAssertjCoreDataMapEntry_class_()])];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)doesNotContainWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withOrgAssertjCoreDataMapEntryArray:entries];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)doesNotContainEntryWithId:(id)key
                                                           withId:(id)value {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withOrgAssertjCoreDataMapEntryArray:OrgAssertjCoreUtilArrays_arrayWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ OrgAssertjCoreDataMapEntry_entry__WithId_withId_(key, value) } count:1 type:OrgAssertjCoreDataMapEntry_class_()])];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)containsKeyWithId:(id)key {
  return [self containsKeysWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ key } count:1 type:NSObject_class_()]];
}

- (OrgAssertjCoreApiAbstractMapAssert *)containsKeysWithNSObjectArray:(IOSObjectArray *)keys {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertContainsKeysWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withNSObjectArray:keys];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)doesNotContainKeyWithId:(id)key {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertDoesNotContainKeyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withId:key];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)containsOnlyKeysWithNSObjectArray:(IOSObjectArray *)keys {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertContainsOnlyKeysWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withNSObjectArray:keys];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)containsValueWithId:(id)value {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertContainsValueWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withId:value];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)doesNotContainValueWithId:(id)value {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertDoesNotContainValueWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withId:value];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)containsOnlyWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withOrgAssertjCoreDataMapEntryArray:entries];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)containsExactlyWithOrgAssertjCoreDataMapEntryArray:(IOSObjectArray *)entries {
  [((OrgAssertjCoreInternalInternalMaps *) nil_chk(maps_)) assertContainsExactlyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaUtilMap:actual_ withOrgAssertjCoreDataMapEntryArray:entries];
  return ((OrgAssertjCoreApiAbstractMapAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractMapAssert *)usingElementComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)customComparator {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"custom element Comparator is not supported for MapEntry comparison");
}

- (OrgAssertjCoreApiAbstractMapAssert *)usingDefaultElementComparator {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"custom element Comparator is not supported for MapEntry comparison");
}

- (void)dealloc {
  RELEASE_(maps_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, 6, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, 6, 11, -1, 12, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x81, 13, 14, -1, 15, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x81, 19, 14, -1, 15, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, 20, 17, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, 21, 7, -1, 22, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x81, 23, 24, -1, 25, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, 26, 7, -1, 22, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x81, 27, 24, -1, 25, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, 28, 7, -1, 29, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x1, 30, 7, -1, 29, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x81, 31, 14, -1, 15, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x81, 32, 14, -1, 15, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x11, 33, 34, -1, 35, 36, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x11, -1, -1, -1, 2, 37, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilMap:withIOSClass:);
  methods[1].selector = @selector(isNullOrEmpty);
  methods[2].selector = @selector(isEmpty);
  methods[3].selector = @selector(isNotEmpty);
  methods[4].selector = @selector(hasSizeWithInt:);
  methods[5].selector = @selector(hasSameSizeAsWithId:);
  methods[6].selector = @selector(hasSameSizeAsWithJavaLangIterable:);
  methods[7].selector = @selector(hasSameSizeAsWithJavaUtilMap:);
  methods[8].selector = @selector(containsWithOrgAssertjCoreDataMapEntryArray:);
  methods[9].selector = @selector(containsEntryWithId:withId:);
  methods[10].selector = @selector(doesNotContainWithOrgAssertjCoreDataMapEntryArray:);
  methods[11].selector = @selector(doesNotContainEntryWithId:withId:);
  methods[12].selector = @selector(containsKeyWithId:);
  methods[13].selector = @selector(containsKeysWithNSObjectArray:);
  methods[14].selector = @selector(doesNotContainKeyWithId:);
  methods[15].selector = @selector(containsOnlyKeysWithNSObjectArray:);
  methods[16].selector = @selector(containsValueWithId:);
  methods[17].selector = @selector(doesNotContainValueWithId:);
  methods[18].selector = @selector(containsOnlyWithOrgAssertjCoreDataMapEntryArray:);
  methods[19].selector = @selector(containsExactlyWithOrgAssertjCoreDataMapEntryArray:);
  methods[20].selector = @selector(usingElementComparatorWithJavaUtilComparator:);
  methods[21].selector = @selector(usingDefaultElementComparator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maps_", "LOrgAssertjCoreInternalInternalMaps;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;LIOSClass;", "(TA;Ljava/lang/Class<*>;)V", "()TS;", "hasSize", "I", "(I)TS;", "hasSameSizeAs", "LNSObject;", "(Ljava/lang/Object;)TS;", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)TS;", "LJavaUtilMap;", "(Ljava/util/Map<**>;)TS;", "contains", "[LOrgAssertjCoreDataMapEntry;", "([Lorg/assertj/core/data/MapEntry;)TS;", "containsEntry", "LNSObject;LNSObject;", "(TK;TV;)TS;", "doesNotContain", "doesNotContainEntry", "containsKey", "(TK;)TS;", "containsKeys", "[LNSObject;", "([TK;)TS;", "doesNotContainKey", "containsOnlyKeys", "containsValue", "(TV;)TS;", "doesNotContainValue", "containsOnly", "containsExactly", "usingElementComparator", "LJavaUtilComparator;", "(Ljava/util/Comparator<-Lorg/assertj/core/data/MapEntry;>;)TS;", (void *)&OrgAssertjCoreApiAbstractMapAssert__Annotations$0, (void *)&OrgAssertjCoreApiAbstractMapAssert__Annotations$1, "<S:Lorg/assertj/core/api/AbstractMapAssert<TS;TA;TK;TV;>;A::Ljava/util/Map<TK;TV;>;K:Ljava/lang/Object;V:Ljava/lang/Object;>Lorg/assertj/core/api/AbstractAssert<TS;TA;>;Lorg/assertj/core/api/EnumerableAssert<TS;Lorg/assertj/core/data/MapEntry;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractMapAssert = { "AbstractMapAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 22, 1, -1, -1, -1, 38, -1 };
  return &_OrgAssertjCoreApiAbstractMapAssert;
}

@end

void OrgAssertjCoreApiAbstractMapAssert_initWithJavaUtilMap_withIOSClass_(OrgAssertjCoreApiAbstractMapAssert *self, id<JavaUtilMap> actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->maps_, OrgAssertjCoreInternalInternalMaps_instance());
}

IOSObjectArray *OrgAssertjCoreApiAbstractMapAssert__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAbstractMapAssert__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractMapAssert)
