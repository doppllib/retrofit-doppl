//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractObjectArrayAssert.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreApiIterableExtractor.h"
#include "OrgAssertjCoreApiObjectArrayAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreExtractorExtractors.h"
#include "OrgAssertjCoreGroupsFieldsOrPropertiesExtractor.h"
#include "OrgAssertjCoreGroupsTuple.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalObjectArrays.h"
#include "OrgAssertjCoreUtilIterables.h"
#include "OrgAssertjCoreUtilLists.h"
#include "java/lang/Iterable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractObjectArrayAssert

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)actual
                         withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractObjectArrayAssert_initWithNSObjectArray_withIOSClass_(self, actual, selfType);
  return self;
}

- (void)isNullOrEmpty {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_];
}

- (void)isEmpty {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_];
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)isNotEmpty {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)hasSizeWithInt:(jint)expected {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertHasSizeWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withInt:expected];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)hasSameSizeAsWithId:(id)other {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withId:other];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)hasSameSizeAsWithJavaLangIterable:(id<JavaLangIterable>)other {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withJavaLangIterable:other];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)containsWithNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withNSObjectArray:values];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)containsOnlyWithNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withNSObjectArray:values];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)containsOnlyOnceWithNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withNSObjectArray:values];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)containsExactlyWithNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(objects_)) assertEqualWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:values];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)containsSequenceWithNSObjectArray:(IOSObjectArray *)sequence {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withNSObjectArray:sequence];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)containsSubsequenceWithNSObjectArray:(IOSObjectArray *)subsequence {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withNSObjectArray:subsequence];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)containsWithId:(id)value
                                   withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withId:value withOrgAssertjCoreDataIndex:index];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)doesNotContainWithId:(id)value
                                         withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withId:value withOrgAssertjCoreDataIndex:index];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)doesNotContainWithNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withNSObjectArray:values];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)doesNotHaveDuplicates {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)startsWithWithNSObjectArray:(IOSObjectArray *)sequence {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertStartsWithWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withNSObjectArray:sequence];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)endsWithWithNSObjectArray:(IOSObjectArray *)sequence {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertEndsWithWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withNSObjectArray:sequence];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)containsNull {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertContainsNullWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)doesNotContainNull {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertDoesNotContainNullWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)areWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertAreWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)areNotWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertAreNotWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)haveWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertHaveWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)doNotHaveWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertDoNotHaveWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)areAtLeastWithInt:(jint)times
                                   withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertAreAtLeastWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)areAtLeastOneWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [self areAtLeastWithInt:1 withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)areAtMostWithInt:(jint)times
                                  withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertAreAtMostWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)areExactlyWithInt:(jint)times
                                   withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertAreExactlyWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)haveAtLeastOneWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return [self haveAtLeastWithInt:1 withOrgAssertjCoreApiCondition:condition];
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)haveAtLeastWithInt:(jint)times
                                    withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertHaveAtLeastWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)haveAtMostWithInt:(jint)times
                                   withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertHaveAtMostWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)haveExactlyWithInt:(jint)times
                                    withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertHaveExactlyWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)hasAtLeastOneElementOfTypeWithIOSClass:(IOSClass *)type {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertHasAtLeastOneElementOfTypeWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withIOSClass:type];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)hasOnlyElementsOfTypeWithIOSClass:(IOSClass *)type {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertHasOnlyElementsOfTypeWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withIOSClass:type];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)isSorted {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertIsSortedWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)isSortedAccordingToWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withJavaUtilComparator:comparator];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)containsAllWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(arrays_)) assertContainsAllWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:actual_ withJavaLangIterable:iterable];
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)usingElementComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)customComparator {
  JreStrongAssignAndConsume(&self->arrays_, new_OrgAssertjCoreInternalObjectArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(create_OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(customComparator)));
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)usingDefaultElementComparator {
  JreStrongAssign(&self->arrays_, OrgAssertjCoreInternalObjectArrays_instance());
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) myself_);
}

- (OrgAssertjCoreApiObjectArrayAssert *)extractingWithNSString:(NSString *)fieldOrProperty {
  IOSObjectArray *values = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithNSObjectArray_withOrgAssertjCoreApiIterableExtractor_(actual_, OrgAssertjCoreExtractorExtractors_byNameWithNSString_(fieldOrProperty));
  return create_OrgAssertjCoreApiObjectArrayAssert_initWithNSObjectArray_(values);
}

- (OrgAssertjCoreApiObjectArrayAssert *)extractingWithNSString:(NSString *)fieldOrProperty
                                                  withIOSClass:(IOSClass *)extractingType {
  IOSObjectArray *values = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithNSObjectArray_withOrgAssertjCoreApiIterableExtractor_(actual_, OrgAssertjCoreExtractorExtractors_byNameWithNSString_(fieldOrProperty));
  return create_OrgAssertjCoreApiObjectArrayAssert_initWithNSObjectArray_(values);
}

- (OrgAssertjCoreApiObjectArrayAssert *)extractingWithNSStringArray:(IOSObjectArray *)propertiesOrFields {
  IOSObjectArray *values = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithNSObjectArray_withOrgAssertjCoreApiIterableExtractor_(actual_, OrgAssertjCoreExtractorExtractors_byNameWithNSStringArray_(propertiesOrFields));
  IOSObjectArray *result = JavaUtilArrays_copyOfWithNSObjectArray_withInt_withIOSClass_(values, ((IOSObjectArray *) nil_chk(values))->size_, IOSClass_arrayType(OrgAssertjCoreGroupsTuple_class_(), 1));
  return create_OrgAssertjCoreApiObjectArrayAssert_initWithNSObjectArray_(result);
}

- (OrgAssertjCoreApiObjectArrayAssert *)extractingWithOrgAssertjCoreApiIterableExtractor:(id<OrgAssertjCoreApiIterableExtractor>)extractor {
  IOSObjectArray *extracted = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithNSObjectArray_withOrgAssertjCoreApiIterableExtractor_(actual_, extractor);
  return create_OrgAssertjCoreApiObjectArrayAssert_initWithNSObjectArray_(extracted);
}

- (OrgAssertjCoreApiObjectArrayAssert *)flatExtractingWithOrgAssertjCoreApiIterableExtractor:(id<OrgAssertjCoreApiIterableExtractor>)extractor {
  id<JavaUtilList> extractedValues = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithJavaLangIterable_withOrgAssertjCoreApiIterableExtractor_(JavaUtilArrays_asListWithNSObjectArray_(actual_), extractor);
  id<JavaUtilList> result = OrgAssertjCoreUtilLists_newArrayList();
  for (id<JavaUtilCollection> __strong e in nil_chk(extractedValues)) {
    [((id<JavaUtilList>) nil_chk(result)) addAllWithJavaUtilCollection:e];
  }
  return create_OrgAssertjCoreApiObjectArrayAssert_initWithNSObjectArray_(OrgAssertjCoreUtilIterables_toArrayWithJavaLangIterable_(result));
}

- (OrgAssertjCoreApiObjectArrayAssert *)extractingResultOfWithNSString:(NSString *)method {
  IOSObjectArray *values = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithNSObjectArray_withOrgAssertjCoreApiIterableExtractor_(actual_, OrgAssertjCoreExtractorExtractors_resultOfWithNSString_(method));
  return create_OrgAssertjCoreApiObjectArrayAssert_initWithNSObjectArray_(values);
}

- (OrgAssertjCoreApiObjectArrayAssert *)extractingResultOfWithNSString:(NSString *)method
                                                          withIOSClass:(IOSClass *)extractingType {
  IOSObjectArray *values = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithNSObjectArray_withOrgAssertjCoreApiIterableExtractor_(actual_, OrgAssertjCoreExtractorExtractors_resultOfWithNSString_(method));
  return create_OrgAssertjCoreApiObjectArrayAssert_initWithNSObjectArray_(values);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)inHexadecimal {
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) [super inHexadecimal]);
}

- (OrgAssertjCoreApiAbstractObjectArrayAssert *)inBinary {
  return ((OrgAssertjCoreApiAbstractObjectArrayAssert *) [super inBinary]);
}

- (void)dealloc {
  RELEASE_(arrays_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 6, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x81, 11, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x81, 14, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x81, 15, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x81, 16, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x81, 17, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x81, 18, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 11, 19, -1, 20, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 21, 19, -1, 20, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x81, 21, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x81, 22, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x81, 23, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 24, 25, -1, 26, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 27, 25, -1, 26, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 28, 25, -1, 26, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 29, 25, -1, 26, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 30, 31, -1, 32, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 33, 25, -1, 26, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 34, 31, -1, 32, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 35, 31, -1, 32, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 36, 25, -1, 26, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 37, 31, -1, 32, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 38, 31, -1, 32, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 39, 31, -1, 32, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 40, 41, -1, 42, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 43, 41, -1, 42, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 44, 45, -1, 46, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 47, 9, -1, 48, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, 49, 45, -1, 46, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectArrayAssert;", 0x1, 50, 51, -1, 52, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectArrayAssert;", 0x1, 50, 53, -1, 54, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectArrayAssert;", 0x81, 50, 55, -1, 56, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectArrayAssert;", 0x1, 50, 57, -1, 58, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectArrayAssert;", 0x1, 59, 57, -1, 60, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectArrayAssert;", 0x1, 61, 51, -1, 52, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectArrayAssert;", 0x1, 61, 53, -1, 54, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSObjectArray:withIOSClass:);
  methods[1].selector = @selector(isNullOrEmpty);
  methods[2].selector = @selector(isEmpty);
  methods[3].selector = @selector(isNotEmpty);
  methods[4].selector = @selector(hasSizeWithInt:);
  methods[5].selector = @selector(hasSameSizeAsWithId:);
  methods[6].selector = @selector(hasSameSizeAsWithJavaLangIterable:);
  methods[7].selector = @selector(containsWithNSObjectArray:);
  methods[8].selector = @selector(containsOnlyWithNSObjectArray:);
  methods[9].selector = @selector(containsOnlyOnceWithNSObjectArray:);
  methods[10].selector = @selector(containsExactlyWithNSObjectArray:);
  methods[11].selector = @selector(containsSequenceWithNSObjectArray:);
  methods[12].selector = @selector(containsSubsequenceWithNSObjectArray:);
  methods[13].selector = @selector(containsWithId:withOrgAssertjCoreDataIndex:);
  methods[14].selector = @selector(doesNotContainWithId:withOrgAssertjCoreDataIndex:);
  methods[15].selector = @selector(doesNotContainWithNSObjectArray:);
  methods[16].selector = @selector(doesNotHaveDuplicates);
  methods[17].selector = @selector(startsWithWithNSObjectArray:);
  methods[18].selector = @selector(endsWithWithNSObjectArray:);
  methods[19].selector = @selector(containsNull);
  methods[20].selector = @selector(doesNotContainNull);
  methods[21].selector = @selector(areWithOrgAssertjCoreApiCondition:);
  methods[22].selector = @selector(areNotWithOrgAssertjCoreApiCondition:);
  methods[23].selector = @selector(haveWithOrgAssertjCoreApiCondition:);
  methods[24].selector = @selector(doNotHaveWithOrgAssertjCoreApiCondition:);
  methods[25].selector = @selector(areAtLeastWithInt:withOrgAssertjCoreApiCondition:);
  methods[26].selector = @selector(areAtLeastOneWithOrgAssertjCoreApiCondition:);
  methods[27].selector = @selector(areAtMostWithInt:withOrgAssertjCoreApiCondition:);
  methods[28].selector = @selector(areExactlyWithInt:withOrgAssertjCoreApiCondition:);
  methods[29].selector = @selector(haveAtLeastOneWithOrgAssertjCoreApiCondition:);
  methods[30].selector = @selector(haveAtLeastWithInt:withOrgAssertjCoreApiCondition:);
  methods[31].selector = @selector(haveAtMostWithInt:withOrgAssertjCoreApiCondition:);
  methods[32].selector = @selector(haveExactlyWithInt:withOrgAssertjCoreApiCondition:);
  methods[33].selector = @selector(hasAtLeastOneElementOfTypeWithIOSClass:);
  methods[34].selector = @selector(hasOnlyElementsOfTypeWithIOSClass:);
  methods[35].selector = @selector(isSorted);
  methods[36].selector = @selector(isSortedAccordingToWithJavaUtilComparator:);
  methods[37].selector = @selector(containsAllWithJavaLangIterable:);
  methods[38].selector = @selector(usingElementComparatorWithJavaUtilComparator:);
  methods[39].selector = @selector(usingDefaultElementComparator);
  methods[40].selector = @selector(extractingWithNSString:);
  methods[41].selector = @selector(extractingWithNSString:withIOSClass:);
  methods[42].selector = @selector(extractingWithNSStringArray:);
  methods[43].selector = @selector(extractingWithOrgAssertjCoreApiIterableExtractor:);
  methods[44].selector = @selector(flatExtractingWithOrgAssertjCoreApiIterableExtractor:);
  methods[45].selector = @selector(extractingResultOfWithNSString:);
  methods[46].selector = @selector(extractingResultOfWithNSString:withIOSClass:);
  methods[47].selector = @selector(inHexadecimal);
  methods[48].selector = @selector(inBinary);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "arrays_", "LOrgAssertjCoreInternalObjectArrays;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSObject;LIOSClass;", "([TT;Ljava/lang/Class<*>;)V", "()TS;", "hasSize", "I", "(I)TS;", "hasSameSizeAs", "LNSObject;", "(Ljava/lang/Object;)TS;", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)TS;", "contains", "[LNSObject;", "([TT;)TS;", "containsOnly", "containsOnlyOnce", "containsExactly", "containsSequence", "containsSubsequence", "LNSObject;LOrgAssertjCoreDataIndex;", "(TT;Lorg/assertj/core/data/Index;)TS;", "doesNotContain", "startsWith", "endsWith", "are", "LOrgAssertjCoreApiCondition;", "(Lorg/assertj/core/api/Condition<-TT;>;)TS;", "areNot", "have", "doNotHave", "areAtLeast", "ILOrgAssertjCoreApiCondition;", "(ILorg/assertj/core/api/Condition<-TT;>;)TS;", "areAtLeastOne", "areAtMost", "areExactly", "haveAtLeastOne", "haveAtLeast", "haveAtMost", "haveExactly", "hasAtLeastOneElementOfType", "LIOSClass;", "(Ljava/lang/Class<*>;)TS;", "hasOnlyElementsOfType", "isSortedAccordingTo", "LJavaUtilComparator;", "(Ljava/util/Comparator<-TT;>;)TS;", "containsAll", "(Ljava/lang/Iterable<+TT;>;)TS;", "usingElementComparator", "extracting", "LNSString;", "(Ljava/lang/String;)Lorg/assertj/core/api/ObjectArrayAssert<Ljava/lang/Object;>;", "LNSString;LIOSClass;", "<P:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TP;>;)Lorg/assertj/core/api/ObjectArrayAssert<TP;>;", "[LNSString;", "([Ljava/lang/String;)Lorg/assertj/core/api/ObjectArrayAssert<Lorg/assertj/core/groups/Tuple;>;", "LOrgAssertjCoreApiIterableExtractor;", "<U:Ljava/lang/Object;>(Lorg/assertj/core/api/iterable/Extractor<-TT;TU;>;)Lorg/assertj/core/api/ObjectArrayAssert<TU;>;", "flatExtracting", "<U:Ljava/lang/Object;C::Ljava/util/Collection<TU;>;>(Lorg/assertj/core/api/iterable/Extractor<-TT;TC;>;)Lorg/assertj/core/api/ObjectArrayAssert<TU;>;", "extractingResultOf", "<S:Lorg/assertj/core/api/AbstractObjectArrayAssert<TS;TT;>;T:Ljava/lang/Object;>Lorg/assertj/core/api/AbstractAssert<TS;[TT;>;Lorg/assertj/core/api/IndexedObjectEnumerableAssert<Lorg/assertj/core/api/AbstractObjectArrayAssert<TS;TT;>;TT;>;Lorg/assertj/core/api/ArraySortedAssert<Lorg/assertj/core/api/AbstractObjectArrayAssert<TS;TT;>;TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractObjectArrayAssert = { "AbstractObjectArrayAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 49, 1, -1, -1, -1, 62, -1 };
  return &_OrgAssertjCoreApiAbstractObjectArrayAssert;
}

@end

void OrgAssertjCoreApiAbstractObjectArrayAssert_initWithNSObjectArray_withIOSClass_(OrgAssertjCoreApiAbstractObjectArrayAssert *self, IOSObjectArray *actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->arrays_, OrgAssertjCoreInternalObjectArrays_instance());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractObjectArrayAssert)
