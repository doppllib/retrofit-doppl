//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce")
#ifdef RESTRICT_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce 0
#else
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce 1
#endif
#undef RESTRICT_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce

#if !defined (OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_) && (INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce || defined(INCLUDE_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce))
#define OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_

#define RESTRICT_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#define INCLUDE_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"

@protocol JavaLangCharSequence;
@protocol OrgAssertjCoreErrorErrorMessageFactory;
@protocol OrgAssertjCoreInternalComparisonStrategy;

@interface OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce : OrgAssertjCoreErrorBasicErrorMessageFactory

#pragma mark Public

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainOnlyOnceWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                                   withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                                                                    withInt:(jint)occurences;

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainOnlyOnceWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                                   withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                                                                    withInt:(jint)occurences
                                               withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce)

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_shouldContainOnlyOnceWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, jint occurences, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_shouldContainOnlyOnceWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, jint occurences);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce")
