//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreInternalAbstractComparisonStrategy.h"
#include "OrgAssertjCoreUtilIterables.h"
#include "java/lang/Iterable.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Collections.h"
#include "java/util/Set.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation OrgAssertjCoreInternalAbstractComparisonStrategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalAbstractComparisonStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaLangIterable>)duplicatesFromWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  if (OrgAssertjCoreUtilIterables_isNullOrEmptyWithJavaLangIterable_(iterable)) return JreLoadStatic(JavaUtilCollections, EMPTY_SET);
  id<JavaUtilSet> duplicates = [self newSetUsingComparisonStrategy];
  id<JavaUtilSet> noDuplicates = [self newSetUsingComparisonStrategy];
  for (id __strong element in nil_chk(iterable)) {
    if ([((id<JavaUtilSet>) nil_chk(noDuplicates)) containsWithId:element]) {
      [((id<JavaUtilSet>) nil_chk(duplicates)) addWithId:element];
    }
    else {
      [noDuplicates addWithId:element];
    }
  }
  return duplicates;
}

- (id<JavaUtilSet>)newSetUsingComparisonStrategy {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)arrayContainsWithId:(id)array
                         withId:(id)value {
  for (jint i = 0; i < JavaLangReflectArray_getLengthWithId_(array); i++) {
    id element = JavaLangReflectArray_getWithId_withInt_(array, i);
    if ([self areEqualWithId:element withId:value]) {
      return true;
    }
  }
  return false;
}

- (jboolean)isLessThanWithId:(id)actual
                      withId:(id)other {
  if ([self areEqualWithId:actual withId:other]) {
    return false;
  }
  return ![self isGreaterThanWithId:actual withId:other];
}

- (jboolean)isLessThanOrEqualToWithId:(id)actual
                               withId:(id)other {
  if ([self areEqualWithId:actual withId:other]) {
    return true;
  }
  return [self isLessThanWithId:actual withId:other];
}

- (jboolean)isGreaterThanOrEqualToWithId:(id)actual
                                  withId:(id)other {
  if ([self areEqualWithId:actual withId:other]) {
    return true;
  }
  return [self isGreaterThanWithId:actual withId:other];
}

- (NSString *)asText {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isStandard {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x404, -1, -1, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(duplicatesFromWithJavaLangIterable:);
  methods[2].selector = @selector(newSetUsingComparisonStrategy);
  methods[3].selector = @selector(arrayContainsWithId:withId:);
  methods[4].selector = @selector(isLessThanWithId:withId:);
  methods[5].selector = @selector(isLessThanOrEqualToWithId:withId:);
  methods[6].selector = @selector(isGreaterThanOrEqualToWithId:withId:);
  methods[7].selector = @selector(asText);
  methods[8].selector = @selector(isStandard);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "duplicatesFrom", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)Ljava/lang/Iterable<*>;", "()Ljava/util/Set<Ljava/lang/Object;>;", "arrayContains", "LNSObject;LNSObject;", "isLessThan", "isLessThanOrEqualTo", "isGreaterThanOrEqualTo" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalAbstractComparisonStrategy = { "AbstractComparisonStrategy", "org.assertj.core.internal", ptrTable, methods, NULL, 7, 0x401, 9, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalAbstractComparisonStrategy;
}

@end

void OrgAssertjCoreInternalAbstractComparisonStrategy_init(OrgAssertjCoreInternalAbstractComparisonStrategy *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalAbstractComparisonStrategy)
