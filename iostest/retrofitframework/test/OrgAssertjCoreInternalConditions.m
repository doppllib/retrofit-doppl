//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBe.h"
#include "OrgAssertjCoreErrorShouldHave.h"
#include "OrgAssertjCoreErrorShouldNotBe.h"
#include "OrgAssertjCoreErrorShouldNotHave.h"
#include "OrgAssertjCoreInternalConditions.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "java/lang/AssertionError.h"
#include "java/lang/NullPointerException.h"

inline OrgAssertjCoreInternalConditions *OrgAssertjCoreInternalConditions_get_INSTANCE();
static OrgAssertjCoreInternalConditions *OrgAssertjCoreInternalConditions_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalConditions, INSTANCE, OrgAssertjCoreInternalConditions *)

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalConditions)

@implementation OrgAssertjCoreInternalConditions

+ (OrgAssertjCoreInternalConditions *)instance {
  return OrgAssertjCoreInternalConditions_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalConditions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)assertIsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withId:(id)actual
                    withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [self assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  if ([((OrgAssertjCoreApiCondition *) nil_chk(condition)) matchesWithId:actual]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBe_shouldBeWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
}

- (void)assertIsNotWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                               withId:(id)actual
                       withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [self assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  if (![((OrgAssertjCoreApiCondition *) nil_chk(condition)) matchesWithId:actual]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBe_shouldNotBeWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
}

- (void)assertHasWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withId:(id)actual
                     withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [self assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  if ([((OrgAssertjCoreApiCondition *) nil_chk(condition)) matchesWithId:actual]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHave_shouldHaveWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
}

- (void)assertDoesNotHaveWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                     withId:(id)actual
                             withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [self assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  if (![((OrgAssertjCoreApiCondition *) nil_chk(condition)) matchesWithId:actual]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotHave_shouldNotHaveWithId_withOrgAssertjCoreApiCondition_(actual, condition)];
}

- (void)assertIsNotNullWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  if (condition == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The condition to evaluate should not be null");
}

- (void)dealloc {
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalConditions;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(assertIsWithOrgAssertjCoreApiAssertionInfo:withId:withOrgAssertjCoreApiCondition:);
  methods[3].selector = @selector(assertIsNotWithOrgAssertjCoreApiAssertionInfo:withId:withOrgAssertjCoreApiCondition:);
  methods[4].selector = @selector(assertHasWithOrgAssertjCoreApiAssertionInfo:withId:withOrgAssertjCoreApiCondition:);
  methods[5].selector = @selector(assertDoesNotHaveWithOrgAssertjCoreApiAssertionInfo:withId:withOrgAssertjCoreApiCondition:);
  methods[6].selector = @selector(assertIsNotNullWithOrgAssertjCoreApiCondition:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalConditions;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "assertIs", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LOrgAssertjCoreApiCondition;", "<T:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;TT;Lorg/assertj/core/api/Condition<-TT;>;)V", "assertIsNot", "assertHas", "assertDoesNotHave", "assertIsNotNull", "LOrgAssertjCoreApiCondition;", "(Lorg/assertj/core/api/Condition<*>;)V", &OrgAssertjCoreInternalConditions_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalConditions = { "Conditions", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalConditions;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalConditions class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalConditions_INSTANCE, new_OrgAssertjCoreInternalConditions_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalConditions)
  }
}

@end

OrgAssertjCoreInternalConditions *OrgAssertjCoreInternalConditions_instance() {
  OrgAssertjCoreInternalConditions_initialize();
  return OrgAssertjCoreInternalConditions_INSTANCE;
}

void OrgAssertjCoreInternalConditions_init(OrgAssertjCoreInternalConditions *self) {
  NSObject_init(self);
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
}

OrgAssertjCoreInternalConditions *new_OrgAssertjCoreInternalConditions_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalConditions, init)
}

OrgAssertjCoreInternalConditions *create_OrgAssertjCoreInternalConditions_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalConditions, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalConditions)
