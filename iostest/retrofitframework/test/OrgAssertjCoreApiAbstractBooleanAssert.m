//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractBooleanAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalBooleans.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Comparator.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAbstractBooleanAssert__Annotations$0();

@implementation OrgAssertjCoreApiAbstractBooleanAssert

- (instancetype)initWithJavaLangBoolean:(JavaLangBoolean *)actual
                           withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractBooleanAssert_initWithJavaLangBoolean_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractBooleanAssert *)isTrue {
  return [self isEqualToWithBoolean:true];
}

- (OrgAssertjCoreApiAbstractBooleanAssert *)isFalse {
  return [self isEqualToWithBoolean:false];
}

- (OrgAssertjCoreApiAbstractBooleanAssert *)isEqualToWithBoolean:(jboolean)expected {
  [((OrgAssertjCoreInternalBooleans *) nil_chk(booleans_)) assertEqualWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangBoolean:actual_ withBoolean:expected];
  return ((OrgAssertjCoreApiAbstractBooleanAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractBooleanAssert *)isNotEqualToWithBoolean:(jboolean)other {
  [((OrgAssertjCoreInternalBooleans *) nil_chk(booleans_)) assertNotEqualWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangBoolean:actual_ withBoolean:other];
  return ((OrgAssertjCoreApiAbstractBooleanAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractBooleanAssert *)usingComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)customComparator {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"custom Comparator is not supported for Boolean comparison");
}

- (void)dealloc {
  RELEASE_(booleans_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractBooleanAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractBooleanAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractBooleanAssert;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractBooleanAssert;", 0x1, 6, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractBooleanAssert;", 0x11, 7, 8, -1, 9, 10, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangBoolean:withIOSClass:);
  methods[1].selector = @selector(isTrue);
  methods[2].selector = @selector(isFalse);
  methods[3].selector = @selector(isEqualToWithBoolean:);
  methods[4].selector = @selector(isNotEqualToWithBoolean:);
  methods[5].selector = @selector(usingComparatorWithJavaUtilComparator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "booleans_", "LOrgAssertjCoreInternalBooleans;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangBoolean;LIOSClass;", "(Ljava/lang/Boolean;Ljava/lang/Class<*>;)V", "()TS;", "isEqualTo", "Z", "(Z)TS;", "isNotEqualTo", "usingComparator", "LJavaUtilComparator;", "(Ljava/util/Comparator<-Ljava/lang/Boolean;>;)TS;", (void *)&OrgAssertjCoreApiAbstractBooleanAssert__Annotations$0, "<S:Lorg/assertj/core/api/AbstractBooleanAssert<TS;>;>Lorg/assertj/core/api/AbstractAssert<TS;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractBooleanAssert = { "AbstractBooleanAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 6, 1, -1, -1, -1, 11, -1 };
  return &_OrgAssertjCoreApiAbstractBooleanAssert;
}

@end

void OrgAssertjCoreApiAbstractBooleanAssert_initWithJavaLangBoolean_withIOSClass_(OrgAssertjCoreApiAbstractBooleanAssert *self, JavaLangBoolean *actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->booleans_, OrgAssertjCoreInternalBooleans_instance());
}

IOSObjectArray *OrgAssertjCoreApiAbstractBooleanAssert__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractBooleanAssert)
