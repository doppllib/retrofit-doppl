//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveCauseExactlyInstance.h"

@interface OrgAssertjCoreErrorShouldHaveCauseExactlyInstance ()

- (instancetype)initWithNSException:(NSException *)actual
                       withIOSClass:(IOSClass *)expectedCauseType;

- (instancetype)initWithIOSClass:(IOSClass *)expectedCauseType;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithNSException_withIOSClass_(OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *self, NSException *actual, IOSClass *expectedCauseType);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *new_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithNSException_withIOSClass_(NSException *actual, IOSClass *expectedCauseType) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *create_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithNSException_withIOSClass_(NSException *actual, IOSClass *expectedCauseType);

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithIOSClass_(OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *self, IOSClass *expectedCauseType);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *new_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithIOSClass_(IOSClass *expectedCauseType) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *create_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithIOSClass_(IOSClass *expectedCauseType);

@implementation OrgAssertjCoreErrorShouldHaveCauseExactlyInstance

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveCauseExactlyInstanceWithNSException:(NSException *)actual
                                                                               withIOSClass:(IOSClass *)expectedCauseType {
  return OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_shouldHaveCauseExactlyInstanceWithNSException_withIOSClass_(actual, expectedCauseType);
}

- (instancetype)initWithNSException:(NSException *)actual
                       withIOSClass:(IOSClass *)expectedCauseType {
  OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithNSException_withIOSClass_(self, actual, expectedCauseType);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)expectedCauseType {
  OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithIOSClass_(self, expectedCauseType);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 3, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveCauseExactlyInstanceWithNSException:withIOSClass:);
  methods[1].selector = @selector(initWithNSException:withIOSClass:);
  methods[2].selector = @selector(initWithIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveCauseExactlyInstance", "LNSException;LIOSClass;", "(Ljava/lang/Throwable;Ljava/lang/Class<+Ljava/lang/Throwable;>;)Lorg/assertj/core/error/ErrorMessageFactory;", "(Ljava/lang/Throwable;Ljava/lang/Class<+Ljava/lang/Throwable;>;)V", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveCauseExactlyInstance = { "ShouldHaveCauseExactlyInstance", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_shouldHaveCauseExactlyInstanceWithNSException_withIOSClass_(NSException *actual, IOSClass *expectedCauseType) {
  OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initialize();
  return [((NSException *) nil_chk(actual)) getCause] == nil ? create_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithIOSClass_(expectedCauseType) : create_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithNSException_withIOSClass_(actual, expectedCauseType);
}

void OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithNSException_withIOSClass_(OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *self, NSException *actual, IOSClass *expectedCauseType) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"%nExpecting a throwable with cause being exactly an instance of:%n <%s>%nbut was an instance of:%n <%s>", [IOSObjectArray arrayWithObjects:(id[]){ expectedCauseType, [((NSException *) nil_chk(actual)) getCause] } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *new_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithNSException_withIOSClass_(NSException *actual, IOSClass *expectedCauseType) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveCauseExactlyInstance, initWithNSException_withIOSClass_, actual, expectedCauseType)
}

OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *create_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithNSException_withIOSClass_(NSException *actual, IOSClass *expectedCauseType) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveCauseExactlyInstance, initWithNSException_withIOSClass_, actual, expectedCauseType)
}

void OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithIOSClass_(OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *self, IOSClass *expectedCauseType) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"%nExpecting a throwable with cause being exactly an instance of:%n <%s>%nbut current throwable has no cause.", [IOSObjectArray arrayWithObjects:(id[]){ expectedCauseType } count:1 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *new_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithIOSClass_(IOSClass *expectedCauseType) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveCauseExactlyInstance, initWithIOSClass_, expectedCauseType)
}

OrgAssertjCoreErrorShouldHaveCauseExactlyInstance *create_OrgAssertjCoreErrorShouldHaveCauseExactlyInstance_initWithIOSClass_(IOSClass *expectedCauseType) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveCauseExactlyInstance, initWithIOSClass_, expectedCauseType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveCauseExactlyInstance)
