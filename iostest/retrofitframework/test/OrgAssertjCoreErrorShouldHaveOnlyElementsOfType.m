//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveOnlyElementsOfType.h"

@interface OrgAssertjCoreErrorShouldHaveOnlyElementsOfType ()

- (instancetype)initWithId:(id)actual
              withIOSClass:(IOSClass *)expectedType
              withIOSClass:(IOSClass *)unexpectedType;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_initWithId_withIOSClass_withIOSClass_(OrgAssertjCoreErrorShouldHaveOnlyElementsOfType *self, id actual, IOSClass *expectedType, IOSClass *unexpectedType);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveOnlyElementsOfType *new_OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_initWithId_withIOSClass_withIOSClass_(id actual, IOSClass *expectedType, IOSClass *unexpectedType) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveOnlyElementsOfType *create_OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_initWithId_withIOSClass_withIOSClass_(id actual, IOSClass *expectedType, IOSClass *unexpectedType);

@implementation OrgAssertjCoreErrorShouldHaveOnlyElementsOfType

+ (OrgAssertjCoreErrorShouldHaveOnlyElementsOfType *)shouldHaveOnlyElementsOfTypeWithId:(id)actual
                                                                           withIOSClass:(IOSClass *)expectedType
                                                                           withIOSClass:(IOSClass *)unexpectedType {
  return OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_shouldHaveOnlyElementsOfTypeWithId_withIOSClass_withIOSClass_(actual, expectedType, unexpectedType);
}

- (instancetype)initWithId:(id)actual
              withIOSClass:(IOSClass *)expectedType
              withIOSClass:(IOSClass *)unexpectedType {
  OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_initWithId_withIOSClass_withIOSClass_(self, actual, expectedType, unexpectedType);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorShouldHaveOnlyElementsOfType;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveOnlyElementsOfTypeWithId:withIOSClass:withIOSClass:);
  methods[1].selector = @selector(initWithId:withIOSClass:withIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveOnlyElementsOfType", "LNSObject;LIOSClass;LIOSClass;", "(Ljava/lang/Object;Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Lorg/assertj/core/error/ShouldHaveOnlyElementsOfType;", "(Ljava/lang/Object;Ljava/lang/Class<*>;Ljava/lang/Class<*>;)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveOnlyElementsOfType = { "ShouldHaveOnlyElementsOfType", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveOnlyElementsOfType;
}

@end

OrgAssertjCoreErrorShouldHaveOnlyElementsOfType *OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_shouldHaveOnlyElementsOfTypeWithId_withIOSClass_withIOSClass_(id actual, IOSClass *expectedType, IOSClass *unexpectedType) {
  OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_initialize();
  return create_OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_initWithId_withIOSClass_withIOSClass_(actual, expectedType, unexpectedType);
}

void OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_initWithId_withIOSClass_withIOSClass_(OrgAssertjCoreErrorShouldHaveOnlyElementsOfType *self, id actual, IOSClass *expectedType, IOSClass *unexpectedType) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"%nExpecting:%n  <%s>%nto only have elements of type:%n  <%s>%nbut found:%n  <%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual, expectedType, unexpectedType } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveOnlyElementsOfType *new_OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_initWithId_withIOSClass_withIOSClass_(id actual, IOSClass *expectedType, IOSClass *unexpectedType) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveOnlyElementsOfType, initWithId_withIOSClass_withIOSClass_, actual, expectedType, unexpectedType)
}

OrgAssertjCoreErrorShouldHaveOnlyElementsOfType *create_OrgAssertjCoreErrorShouldHaveOnlyElementsOfType_initWithId_withIOSClass_withIOSClass_(id actual, IOSClass *expectedType, IOSClass *unexpectedType) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveOnlyElementsOfType, initWithId_withIOSClass_withIOSClass_, actual, expectedType, unexpectedType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveOnlyElementsOfType)
