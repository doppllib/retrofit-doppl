//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeAbsolutePath.h"
#include "OrgAssertjCoreErrorShouldBeDirectory.h"
#include "OrgAssertjCoreErrorShouldBeFile.h"
#include "OrgAssertjCoreErrorShouldBeReadable.h"
#include "OrgAssertjCoreErrorShouldBeRelativePath.h"
#include "OrgAssertjCoreErrorShouldBeWritable.h"
#include "OrgAssertjCoreErrorShouldExist.h"
#include "OrgAssertjCoreErrorShouldHaveBinaryContent.h"
#include "OrgAssertjCoreErrorShouldHaveContent.h"
#include "OrgAssertjCoreErrorShouldHaveEqualContent.h"
#include "OrgAssertjCoreErrorShouldHaveExtension.h"
#include "OrgAssertjCoreErrorShouldHaveName.h"
#include "OrgAssertjCoreErrorShouldHaveNoParent.h"
#include "OrgAssertjCoreErrorShouldHaveParent.h"
#include "OrgAssertjCoreErrorShouldNotExist.h"
#include "OrgAssertjCoreInternalBinaryDiff.h"
#include "OrgAssertjCoreInternalBinaryDiffResult.h"
#include "OrgAssertjCoreInternalDiff.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalFiles.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreUtilFilesException.h"
#include "OrgAssertjCoreUtilObjects.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/nio/charset/Charset.h"
#include "java/util/List.h"

@interface OrgAssertjCoreInternalInternalFiles ()

- (void)verifyIsFileWithJavaIoFile:(JavaIoFile *)expected;

- (jboolean)isAbsolutePathWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaIoFile:(JavaIoFile *)actual;

- (NSString *)getFileExtensionWithJavaIoFile:(JavaIoFile *)file;

+ (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaIoFile:(JavaIoFile *)actual;

@end

inline OrgAssertjCoreInternalInternalFiles *OrgAssertjCoreInternalInternalFiles_get_INSTANCE();
static OrgAssertjCoreInternalInternalFiles *OrgAssertjCoreInternalInternalFiles_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalInternalFiles, INSTANCE, OrgAssertjCoreInternalInternalFiles *)

__attribute__((unused)) static void OrgAssertjCoreInternalInternalFiles_verifyIsFileWithJavaIoFile_(OrgAssertjCoreInternalInternalFiles *self, JavaIoFile *expected);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalFiles_isAbsolutePathWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(OrgAssertjCoreInternalInternalFiles *self, id<OrgAssertjCoreApiAssertionInfo> info, JavaIoFile *actual);

__attribute__((unused)) static NSString *OrgAssertjCoreInternalInternalFiles_getFileExtensionWithJavaIoFile_(OrgAssertjCoreInternalInternalFiles *self, JavaIoFile *file);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(id<OrgAssertjCoreApiAssertionInfo> info, JavaIoFile *actual);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalInternalFiles)

@implementation OrgAssertjCoreInternalInternalFiles

+ (OrgAssertjCoreInternalInternalFiles *)instance {
  return OrgAssertjCoreInternalInternalFiles_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInternalFiles_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)assertEqualContentWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaIoFile:(JavaIoFile *)actual
                                              withJavaIoFile:(JavaIoFile *)expected {
  OrgAssertjCoreInternalInternalFiles_verifyIsFileWithJavaIoFile_(self, expected);
  [self assertIsFileWithOrgAssertjCoreApiAssertionInfo:info withJavaIoFile:actual];
  @try {
    id<JavaUtilList> diffs = [((OrgAssertjCoreInternalDiff *) nil_chk(diff_)) diffWithJavaIoFile:actual withJavaIoFile:expected];
    if ([((id<JavaUtilList>) nil_chk(diffs)) isEmpty]) return;
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveEqualContent_shouldHaveEqualContentWithJavaIoFile_withJavaIoFile_withJavaUtilList_(actual, expected, diffs)];
  }
  @catch (JavaIoIOException *e) {
    NSString *msg = NSString_java_formatWithNSString_withNSObjectArray_(@"Unable to compare contents of files:<%s> and:<%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected } count:2 type:NSObject_class_()]);
    @throw create_OrgAssertjCoreUtilFilesException_initWithNSString_withNSException_(msg, e);
  }
}

- (void)assertHasBinaryContentWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withJavaIoFile:(JavaIoFile *)actual
                                                   withByteArray:(IOSByteArray *)expected {
  if (expected == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The binary content to compare to should not be null");
  [self assertIsFileWithOrgAssertjCoreApiAssertionInfo:info withJavaIoFile:actual];
  @try {
    OrgAssertjCoreInternalBinaryDiffResult *result = [((OrgAssertjCoreInternalBinaryDiff *) nil_chk(binaryDiff_)) diffWithJavaIoFile:actual withByteArray:expected];
    if ([((OrgAssertjCoreInternalBinaryDiffResult *) nil_chk(result)) hasNoDiff]) return;
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveBinaryContent_shouldHaveBinaryContentWithJavaIoFile_withOrgAssertjCoreInternalBinaryDiffResult_(actual, result)];
  }
  @catch (JavaIoIOException *e) {
    NSString *msg = NSString_java_formatWithNSString_withNSObjectArray_(@"Unable to verify binary contents of file:<%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
    @throw create_OrgAssertjCoreUtilFilesException_initWithNSString_withNSException_(msg, e);
  }
}

- (void)assertHasContentWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaIoFile:(JavaIoFile *)actual
                                              withNSString:(NSString *)expected
                                 withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  if (expected == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The text to compare to should not be null");
  [self assertIsFileWithOrgAssertjCoreApiAssertionInfo:info withJavaIoFile:actual];
  @try {
    id<JavaUtilList> diffs = [((OrgAssertjCoreInternalDiff *) nil_chk(diff_)) diffWithJavaIoFile:actual withNSString:expected withJavaNioCharsetCharset:charset];
    if ([((id<JavaUtilList>) nil_chk(diffs)) isEmpty]) return;
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveContent_shouldHaveContentWithJavaIoFile_withJavaNioCharsetCharset_withJavaUtilList_(actual, charset, diffs)];
  }
  @catch (JavaIoIOException *e) {
    NSString *msg = NSString_java_formatWithNSString_withNSObjectArray_(@"Unable to verify text contents of file:<%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
    @throw create_OrgAssertjCoreUtilFilesException_initWithNSString_withNSException_(msg, e);
  }
}

- (void)verifyIsFileWithJavaIoFile:(JavaIoFile *)expected {
  OrgAssertjCoreInternalInternalFiles_verifyIsFileWithJavaIoFile_(self, expected);
}

- (void)assertIsFileWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
  if ([((JavaIoFile *) nil_chk(actual)) isFile]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeFile_shouldBeFileWithJavaIoFile_(actual)];
}

- (void)assertIsDirectoryWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
  if ([((JavaIoFile *) nil_chk(actual)) isDirectory]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeDirectory_shouldBeDirectoryWithJavaIoFile_(actual)];
}

- (void)assertIsAbsoluteWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaIoFile:(JavaIoFile *)actual {
  if (OrgAssertjCoreInternalInternalFiles_isAbsolutePathWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(self, info, actual)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeAbsolutePath_shouldBeAbsolutePathWithJavaIoFile_(actual)];
}

- (void)assertIsRelativeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaIoFile:(JavaIoFile *)actual {
  if (!OrgAssertjCoreInternalInternalFiles_isAbsolutePathWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(self, info, actual)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeRelativePath_shouldBeRelativePathWithJavaIoFile_(actual)];
}

- (jboolean)isAbsolutePathWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaIoFile:(JavaIoFile *)actual {
  return OrgAssertjCoreInternalInternalFiles_isAbsolutePathWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(self, info, actual);
}

- (void)assertExistsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
  if ([((JavaIoFile *) nil_chk(actual)) exists]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldExist_shouldExistWithJavaIoFile_(actual)];
}

- (void)assertDoesNotExistWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
  if (![((JavaIoFile *) nil_chk(actual)) exists]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotExist_shouldNotExistWithJavaIoFile_(actual)];
}

- (void)assertCanWriteWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                          withJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
  if ([((JavaIoFile *) nil_chk(actual)) canWrite]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeWritable_shouldBeWritableWithJavaIoFile_(actual)];
}

- (void)assertCanReadWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
  if ([((JavaIoFile *) nil_chk(actual)) canRead]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeReadable_shouldBeReadableWithJavaIoFile_(actual)];
}

- (void)assertHasParentWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withJavaIoFile:(JavaIoFile *)actual
                                           withJavaIoFile:(JavaIoFile *)expected {
  if (expected == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The expected parent file should not be null.");
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
  @try {
    if ([((JavaIoFile *) nil_chk(actual)) getParentFile] != nil && OrgAssertjCoreUtilObjects_areEqualWithId_withId_([expected getCanonicalFile], [((JavaIoFile *) nil_chk([actual getParentFile])) getCanonicalFile])) return;
  }
  @catch (JavaIoIOException *e) {
    @throw create_OrgAssertjCoreUtilFilesException_initWithNSString_withNSException_(NSString_java_formatWithNSString_withNSObjectArray_(@"Unable to get canonical form of [%s] or [%s].", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected } count:2 type:NSObject_class_()]), e);
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveParent_shouldHaveParentWithJavaIoFile_withJavaIoFile_(actual, expected)];
}

- (void)assertHasExtensionWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaIoFile:(JavaIoFile *)actual
                                                withNSString:(NSString *)expected {
  if (expected == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The expected extension should not be null.");
  [self assertIsFileWithOrgAssertjCoreApiAssertionInfo:info withJavaIoFile:actual];
  NSString *actualExtension = OrgAssertjCoreInternalInternalFiles_getFileExtensionWithJavaIoFile_(self, actual);
  if ([expected isEqual:actualExtension]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveExtension_shouldHaveExtensionWithJavaIoFile_withNSString_withNSString_(actual, actualExtension, expected)];
}

- (NSString *)getFileExtensionWithJavaIoFile:(JavaIoFile *)file {
  return OrgAssertjCoreInternalInternalFiles_getFileExtensionWithJavaIoFile_(self, file);
}

- (void)assertHasNameWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaIoFile:(JavaIoFile *)actual
                                           withNSString:(NSString *)expected {
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
  if (expected == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The expected name should not be null.");
  if ([expected isEqual:[((JavaIoFile *) nil_chk(actual)) getName]]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveName_shouldHaveNameWithJavaIoFile_withNSString_(actual, expected)];
}

+ (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
}

- (void)assertHasNoParentWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
  if ([((JavaIoFile *) nil_chk(actual)) getParentFile] == nil) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveNoParent_shouldHaveNoParentWithJavaIoFile_(actual)];
}

- (void)dealloc {
  RELEASE_(diff_);
  RELEASE_(binaryDiff_);
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalInternalFiles;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 13, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 21, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 20, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 23, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(assertEqualContentWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:withJavaIoFile:);
  methods[3].selector = @selector(assertHasBinaryContentWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:withByteArray:);
  methods[4].selector = @selector(assertHasContentWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:withNSString:withJavaNioCharsetCharset:);
  methods[5].selector = @selector(verifyIsFileWithJavaIoFile:);
  methods[6].selector = @selector(assertIsFileWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  methods[7].selector = @selector(assertIsDirectoryWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  methods[8].selector = @selector(assertIsAbsoluteWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  methods[9].selector = @selector(assertIsRelativeWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  methods[10].selector = @selector(isAbsolutePathWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  methods[11].selector = @selector(assertExistsWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  methods[12].selector = @selector(assertDoesNotExistWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  methods[13].selector = @selector(assertCanWriteWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  methods[14].selector = @selector(assertCanReadWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  methods[15].selector = @selector(assertHasParentWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:withJavaIoFile:);
  methods[16].selector = @selector(assertHasExtensionWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:withNSString:);
  methods[17].selector = @selector(getFileExtensionWithJavaIoFile:);
  methods[18].selector = @selector(assertHasNameWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:withNSString:);
  methods[19].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  methods[20].selector = @selector(assertHasNoParentWithOrgAssertjCoreApiAssertionInfo:withJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalInternalFiles;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "diff_", "LOrgAssertjCoreInternalDiff;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "binaryDiff_", "LOrgAssertjCoreInternalBinaryDiff;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "assertEqualContent", "LOrgAssertjCoreApiAssertionInfo;LJavaIoFile;LJavaIoFile;", "assertHasBinaryContent", "LOrgAssertjCoreApiAssertionInfo;LJavaIoFile;[B", "assertHasContent", "LOrgAssertjCoreApiAssertionInfo;LJavaIoFile;LNSString;LJavaNioCharsetCharset;", "verifyIsFile", "LJavaIoFile;", "assertIsFile", "LOrgAssertjCoreApiAssertionInfo;LJavaIoFile;", "assertIsDirectory", "assertIsAbsolute", "assertIsRelative", "isAbsolutePath", "assertExists", "assertDoesNotExist", "assertCanWrite", "assertCanRead", "assertHasParent", "assertHasExtension", "LOrgAssertjCoreApiAssertionInfo;LJavaIoFile;LNSString;", "getFileExtension", "assertHasName", "assertNotNull", "assertHasNoParent", &OrgAssertjCoreInternalInternalFiles_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInternalFiles = { "InternalFiles", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 21, 4, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInternalFiles;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalInternalFiles class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalInternalFiles_INSTANCE, new_OrgAssertjCoreInternalInternalFiles_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalInternalFiles)
  }
}

@end

OrgAssertjCoreInternalInternalFiles *OrgAssertjCoreInternalInternalFiles_instance() {
  OrgAssertjCoreInternalInternalFiles_initialize();
  return OrgAssertjCoreInternalInternalFiles_INSTANCE;
}

void OrgAssertjCoreInternalInternalFiles_init(OrgAssertjCoreInternalInternalFiles *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->diff_, new_OrgAssertjCoreInternalDiff_init());
  JreStrongAssignAndConsume(&self->binaryDiff_, new_OrgAssertjCoreInternalBinaryDiff_init());
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
}

OrgAssertjCoreInternalInternalFiles *new_OrgAssertjCoreInternalInternalFiles_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalFiles, init)
}

OrgAssertjCoreInternalInternalFiles *create_OrgAssertjCoreInternalInternalFiles_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalFiles, init)
}

void OrgAssertjCoreInternalInternalFiles_verifyIsFileWithJavaIoFile_(OrgAssertjCoreInternalInternalFiles *self, JavaIoFile *expected) {
  if (expected == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The file to compare to should not be null");
  if ([expected isFile]) return;
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Expected file:<'%s'> should be an existing file", [IOSObjectArray arrayWithObjects:(id[]){ expected } count:1 type:NSObject_class_()]));
}

jboolean OrgAssertjCoreInternalInternalFiles_isAbsolutePathWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(OrgAssertjCoreInternalInternalFiles *self, id<OrgAssertjCoreApiAssertionInfo> info, JavaIoFile *actual) {
  OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(info, actual);
  return [((JavaIoFile *) nil_chk(actual)) isAbsolute];
}

NSString *OrgAssertjCoreInternalInternalFiles_getFileExtensionWithJavaIoFile_(OrgAssertjCoreInternalInternalFiles *self, JavaIoFile *file) {
  NSString *name = [((JavaIoFile *) nil_chk(file)) getName];
  jint dotAt = [((NSString *) nil_chk(name)) java_lastIndexOf:'.'];
  return (dotAt == -1) ? nil : [name java_substring:dotAt + 1];
}

void OrgAssertjCoreInternalInternalFiles_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaIoFile_(id<OrgAssertjCoreApiAssertionInfo> info, JavaIoFile *actual) {
  OrgAssertjCoreInternalInternalFiles_initialize();
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInternalFiles)
