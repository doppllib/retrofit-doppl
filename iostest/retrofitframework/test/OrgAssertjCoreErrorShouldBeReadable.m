//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeReadable.h"
#include "java/io/File.h"

@interface OrgAssertjCoreErrorShouldBeReadable ()

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeReadable_initWithJavaIoFile_(OrgAssertjCoreErrorShouldBeReadable *self, JavaIoFile *actual);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeReadable *new_OrgAssertjCoreErrorShouldBeReadable_initWithJavaIoFile_(JavaIoFile *actual) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeReadable *create_OrgAssertjCoreErrorShouldBeReadable_initWithJavaIoFile_(JavaIoFile *actual);

@implementation OrgAssertjCoreErrorShouldBeReadable

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual {
  OrgAssertjCoreErrorShouldBeReadable_initWithJavaIoFile_(self, actual);
  return self;
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeReadableWithJavaIoFile:(JavaIoFile *)actual {
  return OrgAssertjCoreErrorShouldBeReadable_shouldBeReadableWithJavaIoFile_(actual);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoFile:);
  methods[1].selector = @selector(shouldBeReadableWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoFile;", "shouldBeReadable" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeReadable = { "ShouldBeReadable", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeReadable;
}

@end

void OrgAssertjCoreErrorShouldBeReadable_initWithJavaIoFile_(OrgAssertjCoreErrorShouldBeReadable *self, JavaIoFile *actual) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting file:\n <%s>\nto be readable", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeReadable *new_OrgAssertjCoreErrorShouldBeReadable_initWithJavaIoFile_(JavaIoFile *actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeReadable, initWithJavaIoFile_, actual)
}

OrgAssertjCoreErrorShouldBeReadable *create_OrgAssertjCoreErrorShouldBeReadable_initWithJavaIoFile_(JavaIoFile *actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeReadable, initWithJavaIoFile_, actual)
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeReadable_shouldBeReadableWithJavaIoFile_(JavaIoFile *actual) {
  OrgAssertjCoreErrorShouldBeReadable_initialize();
  return create_OrgAssertjCoreErrorShouldBeReadable_initWithJavaIoFile_(actual);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeReadable)
