//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeSorted.h"
#include "OrgAssertjCoreUtilArrayWrapperList.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"

@interface OrgAssertjCoreErrorShouldBeSorted ()

- (instancetype)initWithNSString:(NSString *)format
               withNSObjectArray:(IOSObjectArray *)arguments;

+ (id<JavaUtilList>)groupAsListWithId:(id)group;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(OrgAssertjCoreErrorShouldBeSorted *self, NSString *format, IOSObjectArray *arguments);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeSorted *new_OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *arguments) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeSorted *create_OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *arguments);

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreErrorShouldBeSorted_groupAsListWithId_(id group);

@implementation OrgAssertjCoreErrorShouldBeSorted

- (instancetype)initWithNSString:(NSString *)format
               withNSObjectArray:(IOSObjectArray *)arguments {
  OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(self, format, arguments);
  return self;
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeSortedWithInt:(jint)i
                                                             withId:(id)group {
  return OrgAssertjCoreErrorShouldBeSorted_shouldBeSortedWithInt_withId_(i, group);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeSortedAccordingToGivenComparatorWithInt:(jint)i
                                                                                       withId:(id)group
                                                                       withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return OrgAssertjCoreErrorShouldBeSorted_shouldBeSortedAccordingToGivenComparatorWithInt_withId_withJavaUtilComparator_(i, group, comparator);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveMutuallyComparableElementsWithId:(id)actual {
  return OrgAssertjCoreErrorShouldBeSorted_shouldHaveMutuallyComparableElementsWithId_(actual);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveComparableElementsAccordingToGivenComparatorWithId:(id)actual
                                                                                    withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return OrgAssertjCoreErrorShouldBeSorted_shouldHaveComparableElementsAccordingToGivenComparatorWithId_withJavaUtilComparator_(actual, comparator);
}

+ (id<JavaUtilList>)groupAsListWithId:(id)group {
  return OrgAssertjCoreErrorShouldBeSorted_groupAsListWithId_(group);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x82, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 8, 9, -1, 10, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 11, 7, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSObjectArray:);
  methods[1].selector = @selector(shouldBeSortedWithInt:withId:);
  methods[2].selector = @selector(shouldBeSortedAccordingToGivenComparatorWithInt:withId:withJavaUtilComparator:);
  methods[3].selector = @selector(shouldHaveMutuallyComparableElementsWithId:);
  methods[4].selector = @selector(shouldHaveComparableElementsAccordingToGivenComparatorWithId:withJavaUtilComparator:);
  methods[5].selector = @selector(groupAsListWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "shouldBeSorted", "ILNSObject;", "shouldBeSortedAccordingToGivenComparator", "ILNSObject;LJavaUtilComparator;", "(ILjava/lang/Object;Ljava/util/Comparator<*>;)Lorg/assertj/core/error/ErrorMessageFactory;", "shouldHaveMutuallyComparableElements", "LNSObject;", "shouldHaveComparableElementsAccordingToGivenComparator", "LNSObject;LJavaUtilComparator;", "(Ljava/lang/Object;Ljava/util/Comparator<*>;)Lorg/assertj/core/error/ErrorMessageFactory;", "groupAsList", "(Ljava/lang/Object;)Ljava/util/List<*>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeSorted = { "ShouldBeSorted", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeSorted;
}

@end

void OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(OrgAssertjCoreErrorShouldBeSorted *self, NSString *format, IOSObjectArray *arguments) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, format, arguments);
}

OrgAssertjCoreErrorShouldBeSorted *new_OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *arguments) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeSorted, initWithNSString_withNSObjectArray_, format, arguments)
}

OrgAssertjCoreErrorShouldBeSorted *create_OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *arguments) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeSorted, initWithNSString_withNSObjectArray_, format, arguments)
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeSorted_shouldBeSortedWithInt_withId_(jint i, id group) {
  OrgAssertjCoreErrorShouldBeSorted_initialize();
  id<JavaUtilList> groupAsList = OrgAssertjCoreErrorShouldBeSorted_groupAsListWithId_(group);
  return create_OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(@"\ngroup is not sorted because element %s:\n <%s>\nis not less or equal than element %s:\n <%s>\ngroup was:\n <%s>", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i), [((id<JavaUtilList>) nil_chk(groupAsList)) getWithInt:i], JavaLangInteger_valueOfWithInt_(i + 1), [groupAsList getWithInt:i + 1], groupAsList } count:5 type:NSObject_class_()]);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeSorted_shouldBeSortedAccordingToGivenComparatorWithInt_withId_withJavaUtilComparator_(jint i, id group, id<JavaUtilComparator> comparator) {
  OrgAssertjCoreErrorShouldBeSorted_initialize();
  id<JavaUtilList> arrayWrapper = OrgAssertjCoreErrorShouldBeSorted_groupAsListWithId_(group);
  return create_OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(@"\ngroup is not sorted according to %s comparator because element %s:\n <%s>\nis not less or equal than element %s:\n <%s>\ngroup was:\n <%s>", [IOSObjectArray arrayWithObjects:(id[]){ comparator, JavaLangInteger_valueOfWithInt_(i), [((id<JavaUtilList>) nil_chk(arrayWrapper)) getWithInt:i], JavaLangInteger_valueOfWithInt_(i + 1), [arrayWrapper getWithInt:i + 1], arrayWrapper } count:6 type:NSObject_class_()]);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeSorted_shouldHaveMutuallyComparableElementsWithId_(id actual) {
  OrgAssertjCoreErrorShouldBeSorted_initialize();
  return create_OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(@"\nsome elements are not mutually comparable in group:\n<%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeSorted_shouldHaveComparableElementsAccordingToGivenComparatorWithId_withJavaUtilComparator_(id actual, id<JavaUtilComparator> comparator) {
  OrgAssertjCoreErrorShouldBeSorted_initialize();
  return create_OrgAssertjCoreErrorShouldBeSorted_initWithNSString_withNSObjectArray_(@"\nsome elements are not mutually comparable according to %s comparator in group:\n<%s>", [IOSObjectArray arrayWithObjects:(id[]){ comparator, actual } count:2 type:NSObject_class_()]);
}

id<JavaUtilList> OrgAssertjCoreErrorShouldBeSorted_groupAsListWithId_(id group) {
  OrgAssertjCoreErrorShouldBeSorted_initialize();
  if ([[nil_chk(group) java_getClass] isArray]) {
    return OrgAssertjCoreUtilArrayWrapperList_wrapWithId_(group);
  }
  else if ([JavaUtilCollection_class_() isInstance:group]) {
    id<JavaUtilList> asList = create_JavaUtilArrayList_init();
    [asList addAllWithJavaUtilCollection:((id<JavaUtilCollection>) cast_check(group, JavaUtilCollection_class_()))];
    return asList;
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Parameter should be an array or a collection but was ", group));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeSorted)
