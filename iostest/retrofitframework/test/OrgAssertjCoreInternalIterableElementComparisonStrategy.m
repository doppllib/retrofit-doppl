//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreInternalIterableElementComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "OrgAssertjCorePresentationStandardRepresentation.h"
#include "OrgAssertjCoreUtilIterables.h"
#include "java/lang/Iterable.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"

@interface OrgAssertjCoreInternalIterableElementComparisonStrategy () {
 @public
  id<JavaUtilComparator> elementComparator_;
}

- (jboolean)compareElementsOfWithJavaLangIterable:(id<JavaLangIterable>)actual
                             withJavaLangIterable:(id<JavaLangIterable>)other;

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalIterableElementComparisonStrategy, elementComparator_, id<JavaUtilComparator>)

inline OrgAssertjCorePresentationStandardRepresentation *OrgAssertjCoreInternalIterableElementComparisonStrategy_get_STANDARD_REPRESENTATION();
static OrgAssertjCorePresentationStandardRepresentation *OrgAssertjCoreInternalIterableElementComparisonStrategy_STANDARD_REPRESENTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalIterableElementComparisonStrategy, STANDARD_REPRESENTATION, OrgAssertjCorePresentationStandardRepresentation *)

__attribute__((unused)) static jboolean OrgAssertjCoreInternalIterableElementComparisonStrategy_compareElementsOfWithJavaLangIterable_withJavaLangIterable_(OrgAssertjCoreInternalIterableElementComparisonStrategy *self, id<JavaLangIterable> actual, id<JavaLangIterable> other);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalIterableElementComparisonStrategy)

@implementation OrgAssertjCoreInternalIterableElementComparisonStrategy

- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)elementComparator {
  OrgAssertjCoreInternalIterableElementComparisonStrategy_initWithJavaUtilComparator_(self, elementComparator);
  return self;
}

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other {
  if (actual == nil && other == nil) return true;
  if (actual == nil || other == nil) return false;
  return [JavaLangIterable_class_() isInstance:actual] && [JavaLangIterable_class_() isInstance:other] && OrgAssertjCoreInternalIterableElementComparisonStrategy_compareElementsOfWithJavaLangIterable_withJavaLangIterable_(self, (id<JavaLangIterable>) cast_check(actual, JavaLangIterable_class_()), (id<JavaLangIterable>) cast_check(other, JavaLangIterable_class_()));
}

- (jboolean)compareElementsOfWithJavaLangIterable:(id<JavaLangIterable>)actual
                             withJavaLangIterable:(id<JavaLangIterable>)other {
  return OrgAssertjCoreInternalIterableElementComparisonStrategy_compareElementsOfWithJavaLangIterable_withJavaLangIterable_(self, actual, other);
}

- (NSString *)description {
  return JreStrcat("$$", @"IterableElementComparisonStrategy using ", [((OrgAssertjCorePresentationStandardRepresentation *) nil_chk(OrgAssertjCoreInternalIterableElementComparisonStrategy_STANDARD_REPRESENTATION)) toStringOfWithId:elementComparator_]);
}

- (NSString *)asText {
  return JreStrcat("$$", @"when comparing elements using ", [((OrgAssertjCorePresentationStandardRepresentation *) nil_chk(OrgAssertjCoreInternalIterableElementComparisonStrategy_STANDARD_REPRESENTATION)) toStringOfWithId:elementComparator_]);
}

- (jboolean)isStandard {
  return false;
}

- (void)dealloc {
  RELEASE_(elementComparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilComparator:);
  methods[1].selector = @selector(areEqualWithId:withId:);
  methods[2].selector = @selector(compareElementsOfWithJavaLangIterable:withJavaLangIterable:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(asText);
  methods[5].selector = @selector(isStandard);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STANDARD_REPRESENTATION", "LOrgAssertjCorePresentationStandardRepresentation;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "elementComparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilComparator;", "(Ljava/util/Comparator<-TT;>;)V", "areEqual", "LNSObject;LNSObject;", "compareElementsOf", "LJavaLangIterable;LJavaLangIterable;", "(Ljava/lang/Iterable<TT;>;Ljava/lang/Iterable<TT;>;)Z", "toString", &OrgAssertjCoreInternalIterableElementComparisonStrategy_STANDARD_REPRESENTATION, "Ljava/util/Comparator<-TT;>;", "<T:Ljava/lang/Object;>Lorg/assertj/core/internal/StandardComparisonStrategy;" };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalIterableElementComparisonStrategy = { "IterableElementComparisonStrategy", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, 10, -1 };
  return &_OrgAssertjCoreInternalIterableElementComparisonStrategy;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalIterableElementComparisonStrategy class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalIterableElementComparisonStrategy_STANDARD_REPRESENTATION, new_OrgAssertjCorePresentationStandardRepresentation_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalIterableElementComparisonStrategy)
  }
}

@end

void OrgAssertjCoreInternalIterableElementComparisonStrategy_initWithJavaUtilComparator_(OrgAssertjCoreInternalIterableElementComparisonStrategy *self, id<JavaUtilComparator> elementComparator) {
  OrgAssertjCoreInternalStandardComparisonStrategy_init(self);
  JreStrongAssign(&self->elementComparator_, elementComparator);
}

OrgAssertjCoreInternalIterableElementComparisonStrategy *new_OrgAssertjCoreInternalIterableElementComparisonStrategy_initWithJavaUtilComparator_(id<JavaUtilComparator> elementComparator) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalIterableElementComparisonStrategy, initWithJavaUtilComparator_, elementComparator)
}

OrgAssertjCoreInternalIterableElementComparisonStrategy *create_OrgAssertjCoreInternalIterableElementComparisonStrategy_initWithJavaUtilComparator_(id<JavaUtilComparator> elementComparator) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalIterableElementComparisonStrategy, initWithJavaUtilComparator_, elementComparator)
}

jboolean OrgAssertjCoreInternalIterableElementComparisonStrategy_compareElementsOfWithJavaLangIterable_withJavaLangIterable_(OrgAssertjCoreInternalIterableElementComparisonStrategy *self, id<JavaLangIterable> actual, id<JavaLangIterable> other) {
  if (OrgAssertjCoreUtilIterables_sizeOfWithJavaLangIterable_(actual) != OrgAssertjCoreUtilIterables_sizeOfWithJavaLangIterable_(other)) return false;
  id<JavaUtilIterator> iterator = [((id<JavaLangIterable>) nil_chk(other)) iterator];
  for (id __strong actualElement in nil_chk(actual)) {
    id otherElement = [((id<JavaUtilIterator>) nil_chk(iterator)) next];
    if ([((id<JavaUtilComparator>) nil_chk(self->elementComparator_)) compareWithId:actualElement withId:otherElement] != 0) return false;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalIterableElementComparisonStrategy)
