//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractComparableAssert.h"
#include "OrgAssertjCoreApiAbstractIntegerAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalIntegers.h"
#include "java/lang/Integer.h"
#include "java/util/Comparator.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractIntegerAssert

- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)actual
                           withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractIntegerAssert_initWithJavaLangInteger_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isEqualToWithInt:(jint)expected {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertEqualWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:JavaLangInteger_valueOfWithInt_(expected)];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isNotEqualToWithInt:(jint)other {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertNotEqualWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:JavaLangInteger_valueOfWithInt_(other)];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isZero {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertIsZeroWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isNotZero {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertIsNotZeroWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isPositive {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertIsPositiveWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isNegative {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertIsNegativeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isNotNegative {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertIsNotNegativeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isNotPositive {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertIsNotPositiveWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isLessThanWithInt:(jint)other {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertLessThanWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangInteger_valueOfWithInt_(other)];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isLessThanOrEqualToWithInt:(jint)other {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertLessThanOrEqualToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangInteger_valueOfWithInt_(other)];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isGreaterThanWithInt:(jint)other {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertGreaterThanWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangInteger_valueOfWithInt_(other)];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isGreaterThanOrEqualToWithInt:(jint)other {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertGreaterThanOrEqualToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangInteger_valueOfWithInt_(other)];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isBetweenWithNSNumber:(JavaLangInteger *)start
                                                     withNSNumber:(JavaLangInteger *)end {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:start withJavaLangComparable:end];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)isStrictlyBetweenWithNSNumber:(JavaLangInteger *)start
                                                             withNSNumber:(JavaLangInteger *)end {
  [((OrgAssertjCoreInternalIntegers *) nil_chk(integers_)) assertIsStrictlyBetweenWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:start withJavaLangComparable:end];
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)usingComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)customComparator {
  [super usingComparatorWithJavaUtilComparator:customComparator];
  JreStrongAssignAndConsume(&integers_, new_OrgAssertjCoreInternalIntegers_initWithOrgAssertjCoreInternalComparisonStrategy_(create_OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(customComparator)));
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIntegerAssert *)usingDefaultComparator {
  [super usingDefaultComparator];
  JreStrongAssign(&integers_, OrgAssertjCoreInternalIntegers_instance());
  return ((OrgAssertjCoreApiAbstractIntegerAssert *) myself_);
}

- (void)dealloc {
  RELEASE_(integers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, 5, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, 7, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, 8, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, 9, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, 10, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, 14, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x1, -1, -1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangInteger:withIOSClass:);
  methods[1].selector = @selector(isEqualToWithInt:);
  methods[2].selector = @selector(isNotEqualToWithInt:);
  methods[3].selector = @selector(isZero);
  methods[4].selector = @selector(isNotZero);
  methods[5].selector = @selector(isPositive);
  methods[6].selector = @selector(isNegative);
  methods[7].selector = @selector(isNotNegative);
  methods[8].selector = @selector(isNotPositive);
  methods[9].selector = @selector(isLessThanWithInt:);
  methods[10].selector = @selector(isLessThanOrEqualToWithInt:);
  methods[11].selector = @selector(isGreaterThanWithInt:);
  methods[12].selector = @selector(isGreaterThanOrEqualToWithInt:);
  methods[13].selector = @selector(isBetweenWithNSNumber:withNSNumber:);
  methods[14].selector = @selector(isStrictlyBetweenWithNSNumber:withNSNumber:);
  methods[15].selector = @selector(usingComparatorWithJavaUtilComparator:);
  methods[16].selector = @selector(usingDefaultComparator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "integers_", "LOrgAssertjCoreInternalIntegers;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangInteger;LIOSClass;", "(Ljava/lang/Integer;Ljava/lang/Class<*>;)V", "isEqualTo", "I", "(I)TS;", "isNotEqualTo", "()TS;", "isLessThan", "isLessThanOrEqualTo", "isGreaterThan", "isGreaterThanOrEqualTo", "isBetween", "LJavaLangInteger;LJavaLangInteger;", "(Ljava/lang/Integer;Ljava/lang/Integer;)TS;", "isStrictlyBetween", "usingComparator", "LJavaUtilComparator;", "(Ljava/util/Comparator<-Ljava/lang/Integer;>;)TS;", "<S:Lorg/assertj/core/api/AbstractIntegerAssert<TS;>;>Lorg/assertj/core/api/AbstractComparableAssert<TS;Ljava/lang/Integer;>;Lorg/assertj/core/api/NumberAssert<TS;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractIntegerAssert = { "AbstractIntegerAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 17, 1, -1, -1, -1, 18, -1 };
  return &_OrgAssertjCoreApiAbstractIntegerAssert;
}

@end

void OrgAssertjCoreApiAbstractIntegerAssert_initWithJavaLangInteger_withIOSClass_(OrgAssertjCoreApiAbstractIntegerAssert *self, JavaLangInteger *actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractComparableAssert_initWithJavaLangComparable_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->integers_, OrgAssertjCoreInternalIntegers_instance());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractIntegerAssert)
