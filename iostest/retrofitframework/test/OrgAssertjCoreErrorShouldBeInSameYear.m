//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeInSameYear.h"
#include "java/util/Date.h"

@interface OrgAssertjCoreErrorShouldBeInSameYear ()

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)other;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeInSameYear_initWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreErrorShouldBeInSameYear *self, JavaUtilDate *actual, JavaUtilDate *other);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeInSameYear *new_OrgAssertjCoreErrorShouldBeInSameYear_initWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeInSameYear *create_OrgAssertjCoreErrorShouldBeInSameYear_initWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other);

@implementation OrgAssertjCoreErrorShouldBeInSameYear

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeInSameYearWithJavaUtilDate:(JavaUtilDate *)actual
                                                                withJavaUtilDate:(JavaUtilDate *)other {
  return OrgAssertjCoreErrorShouldBeInSameYear_shouldBeInSameYearWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)actual
                    withJavaUtilDate:(JavaUtilDate *)other {
  OrgAssertjCoreErrorShouldBeInSameYear_initWithJavaUtilDate_withJavaUtilDate_(self, actual, other);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeInSameYearWithJavaUtilDate:withJavaUtilDate:);
  methods[1].selector = @selector(initWithJavaUtilDate:withJavaUtilDate:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeInSameYear", "LJavaUtilDate;LJavaUtilDate;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeInSameYear = { "ShouldBeInSameYear", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeInSameYear;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeInSameYear_shouldBeInSameYearWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreErrorShouldBeInSameYear_initialize();
  return create_OrgAssertjCoreErrorShouldBeInSameYear_initWithJavaUtilDate_withJavaUtilDate_(actual, other);
}

void OrgAssertjCoreErrorShouldBeInSameYear_initWithJavaUtilDate_withJavaUtilDate_(OrgAssertjCoreErrorShouldBeInSameYear *self, JavaUtilDate *actual, JavaUtilDate *other) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto be on same year as:\n <%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual, other } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeInSameYear *new_OrgAssertjCoreErrorShouldBeInSameYear_initWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeInSameYear, initWithJavaUtilDate_withJavaUtilDate_, actual, other)
}

OrgAssertjCoreErrorShouldBeInSameYear *create_OrgAssertjCoreErrorShouldBeInSameYear_initWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *actual, JavaUtilDate *other) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeInSameYear, initWithJavaUtilDate_withJavaUtilDate_, actual, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeInSameYear)
