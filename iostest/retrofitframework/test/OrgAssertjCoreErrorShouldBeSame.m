//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeSame.h"

@interface OrgAssertjCoreErrorShouldBeSame ()

- (instancetype)initWithId:(id)actual
                    withId:(id)expected;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeSame_initWithId_withId_(OrgAssertjCoreErrorShouldBeSame *self, id actual, id expected);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeSame *new_OrgAssertjCoreErrorShouldBeSame_initWithId_withId_(id actual, id expected) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeSame *create_OrgAssertjCoreErrorShouldBeSame_initWithId_withId_(id actual, id expected);

@implementation OrgAssertjCoreErrorShouldBeSame

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeSameWithId:(id)actual
                                                          withId:(id)expected {
  return OrgAssertjCoreErrorShouldBeSame_shouldBeSameWithId_withId_(actual, expected);
}

- (instancetype)initWithId:(id)actual
                    withId:(id)expected {
  OrgAssertjCoreErrorShouldBeSame_initWithId_withId_(self, actual, expected);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeSameWithId:withId:);
  methods[1].selector = @selector(initWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeSame", "LNSObject;LNSObject;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeSame = { "ShouldBeSame", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeSame;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeSame_shouldBeSameWithId_withId_(id actual, id expected) {
  OrgAssertjCoreErrorShouldBeSame_initialize();
  return create_OrgAssertjCoreErrorShouldBeSame_initWithId_withId_(actual, expected);
}

void OrgAssertjCoreErrorShouldBeSame_initWithId_withId_(OrgAssertjCoreErrorShouldBeSame *self, id actual, id expected) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nand actual:\n <%s>\nto refer to the same object", [IOSObjectArray arrayWithObjects:(id[]){ expected, actual } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeSame *new_OrgAssertjCoreErrorShouldBeSame_initWithId_withId_(id actual, id expected) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeSame, initWithId_withId_, actual, expected)
}

OrgAssertjCoreErrorShouldBeSame *create_OrgAssertjCoreErrorShouldBeSame_initWithId_withId_(id actual, id expected) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeSame, initWithId_withId_, actual, expected)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeSame)
