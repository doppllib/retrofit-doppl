//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractClassAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalClasses.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractClassAssert

- (instancetype)initWithIOSClass:(IOSClass *)actual
                    withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractClassAssert_initWithIOSClass_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractClassAssert *)isAssignableFromWithIOSClassArray:(IOSObjectArray *)others {
  [((OrgAssertjCoreInternalClasses *) nil_chk(classes_)) assertIsAssignableFromWithOrgAssertjCoreApiAssertionInfo:info_ withIOSClass:actual_ withIOSClassArray:others];
  return ((OrgAssertjCoreApiAbstractClassAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractClassAssert *)isNotInterface {
  [((OrgAssertjCoreInternalClasses *) nil_chk(classes_)) assertIsNotInterfaceWithOrgAssertjCoreApiAssertionInfo:info_ withIOSClass:actual_];
  return ((OrgAssertjCoreApiAbstractClassAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractClassAssert *)isInterface {
  [((OrgAssertjCoreInternalClasses *) nil_chk(classes_)) assertIsInterfaceWithOrgAssertjCoreApiAssertionInfo:info_ withIOSClass:actual_];
  return ((OrgAssertjCoreApiAbstractClassAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractClassAssert *)isAnnotation {
  [((OrgAssertjCoreInternalClasses *) nil_chk(classes_)) assertIsAnnotationWithOrgAssertjCoreApiAssertionInfo:info_ withIOSClass:actual_];
  return ((OrgAssertjCoreApiAbstractClassAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractClassAssert *)isNotAnnotation {
  [((OrgAssertjCoreInternalClasses *) nil_chk(classes_)) assertIsNotAnnotationWithOrgAssertjCoreApiAssertionInfo:info_ withIOSClass:actual_];
  return ((OrgAssertjCoreApiAbstractClassAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractClassAssert *)hasAnnotationsWithIOSClassArray:(IOSObjectArray *)annotations {
  [((OrgAssertjCoreInternalClasses *) nil_chk(classes_)) assertContainsAnnotationsWithOrgAssertjCoreApiAssertionInfo:info_ withIOSClass:actual_ withIOSClassArray:annotations];
  return ((OrgAssertjCoreApiAbstractClassAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractClassAssert *)hasAnnotationWithIOSClass:(IOSClass *)annotation {
  [((OrgAssertjCoreInternalClasses *) nil_chk(classes_)) assertContainsAnnotationsWithOrgAssertjCoreApiAssertionInfo:info_ withIOSClass:actual_ withIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ annotation } count:1 type:IOSClass_class_()]];
  return ((OrgAssertjCoreApiAbstractClassAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractClassAssert *)hasFieldsWithNSStringArray:(IOSObjectArray *)fields {
  [((OrgAssertjCoreInternalClasses *) nil_chk(classes_)) assertHasFieldsWithOrgAssertjCoreApiAssertionInfo:info_ withIOSClass:actual_ withNSStringArray:fields];
  return ((OrgAssertjCoreApiAbstractClassAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractClassAssert *)hasDeclaredFieldsWithNSStringArray:(IOSObjectArray *)fields {
  [((OrgAssertjCoreInternalClasses *) nil_chk(classes_)) assertHasDeclaredFieldsWithOrgAssertjCoreApiAssertionInfo:info_ withIOSClass:actual_ withNSStringArray:fields];
  return ((OrgAssertjCoreApiAbstractClassAssert *) myself_);
}

- (void)dealloc {
  RELEASE_(classes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractClassAssert;", 0x81, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractClassAssert;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractClassAssert;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractClassAssert;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractClassAssert;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractClassAssert;", 0x81, 6, 3, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractClassAssert;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractClassAssert;", 0x81, 11, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractClassAssert;", 0x81, 14, 12, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:withIOSClass:);
  methods[1].selector = @selector(isAssignableFromWithIOSClassArray:);
  methods[2].selector = @selector(isNotInterface);
  methods[3].selector = @selector(isInterface);
  methods[4].selector = @selector(isAnnotation);
  methods[5].selector = @selector(isNotAnnotation);
  methods[6].selector = @selector(hasAnnotationsWithIOSClassArray:);
  methods[7].selector = @selector(hasAnnotationWithIOSClass:);
  methods[8].selector = @selector(hasFieldsWithNSStringArray:);
  methods[9].selector = @selector(hasDeclaredFieldsWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "classes_", "LOrgAssertjCoreInternalClasses;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LIOSClass;", "(Ljava/lang/Class<*>;Ljava/lang/Class<*>;)V", "isAssignableFrom", "[LIOSClass;", "([Ljava/lang/Class<*>;)TS;", "()TS;", "hasAnnotations", "([Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)TS;", "hasAnnotation", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)TS;", "hasFields", "[LNSString;", "([Ljava/lang/String;)TS;", "hasDeclaredFields", "<S:Lorg/assertj/core/api/AbstractClassAssert<TS;>;>Lorg/assertj/core/api/AbstractAssert<TS;Ljava/lang/Class<*>;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractClassAssert = { "AbstractClassAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 10, 1, -1, -1, -1, 15, -1 };
  return &_OrgAssertjCoreApiAbstractClassAssert;
}

@end

void OrgAssertjCoreApiAbstractClassAssert_initWithIOSClass_withIOSClass_(OrgAssertjCoreApiAbstractClassAssert *self, IOSClass *actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->classes_, OrgAssertjCoreInternalClasses_instance());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractClassAssert)
