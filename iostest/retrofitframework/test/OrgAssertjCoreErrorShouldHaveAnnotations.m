//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveAnnotations.h"
#include "java/util/Collection.h"

@interface OrgAssertjCoreErrorShouldHaveAnnotations ()

- (instancetype)initWithIOSClass:(IOSClass *)actual
          withJavaUtilCollection:(id<JavaUtilCollection>)expected
          withJavaUtilCollection:(id<JavaUtilCollection>)missing;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveAnnotations_initWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(OrgAssertjCoreErrorShouldHaveAnnotations *self, IOSClass *actual, id<JavaUtilCollection> expected, id<JavaUtilCollection> missing);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveAnnotations *new_OrgAssertjCoreErrorShouldHaveAnnotations_initWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(IOSClass *actual, id<JavaUtilCollection> expected, id<JavaUtilCollection> missing) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveAnnotations *create_OrgAssertjCoreErrorShouldHaveAnnotations_initWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(IOSClass *actual, id<JavaUtilCollection> expected, id<JavaUtilCollection> missing);

@implementation OrgAssertjCoreErrorShouldHaveAnnotations

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveAnnotationsWithIOSClass:(IOSClass *)actual
                                                         withJavaUtilCollection:(id<JavaUtilCollection>)expected
                                                         withJavaUtilCollection:(id<JavaUtilCollection>)missing {
  return OrgAssertjCoreErrorShouldHaveAnnotations_shouldHaveAnnotationsWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(actual, expected, missing);
}

- (instancetype)initWithIOSClass:(IOSClass *)actual
          withJavaUtilCollection:(id<JavaUtilCollection>)expected
          withJavaUtilCollection:(id<JavaUtilCollection>)missing {
  OrgAssertjCoreErrorShouldHaveAnnotations_initWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(self, actual, expected, missing);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveAnnotationsWithIOSClass:withJavaUtilCollection:withJavaUtilCollection:);
  methods[1].selector = @selector(initWithIOSClass:withJavaUtilCollection:withJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveAnnotations", "LIOSClass;LJavaUtilCollection;LJavaUtilCollection;", "(Ljava/lang/Class<*>;Ljava/util/Collection<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;>;Ljava/util/Collection<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;>;)Lorg/assertj/core/error/ErrorMessageFactory;", "(Ljava/lang/Class<*>;Ljava/util/Collection<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;>;Ljava/util/Collection<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;>;)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveAnnotations = { "ShouldHaveAnnotations", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveAnnotations;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldHaveAnnotations_shouldHaveAnnotationsWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(IOSClass *actual, id<JavaUtilCollection> expected, id<JavaUtilCollection> missing) {
  OrgAssertjCoreErrorShouldHaveAnnotations_initialize();
  return create_OrgAssertjCoreErrorShouldHaveAnnotations_initWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(actual, expected, missing);
}

void OrgAssertjCoreErrorShouldHaveAnnotations_initWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(OrgAssertjCoreErrorShouldHaveAnnotations *self, IOSClass *actual, id<JavaUtilCollection> expected, id<JavaUtilCollection> missing) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting\n  <%s>\nto have annotations:\n  <%s>\nbut the following annotations were not found:\n  <%s>", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected, missing } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveAnnotations *new_OrgAssertjCoreErrorShouldHaveAnnotations_initWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(IOSClass *actual, id<JavaUtilCollection> expected, id<JavaUtilCollection> missing) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveAnnotations, initWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_, actual, expected, missing)
}

OrgAssertjCoreErrorShouldHaveAnnotations *create_OrgAssertjCoreErrorShouldHaveAnnotations_initWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_(IOSClass *actual, id<JavaUtilCollection> expected, id<JavaUtilCollection> missing) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveAnnotations, initWithIOSClass_withJavaUtilCollection_withJavaUtilCollection_, actual, expected, missing)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveAnnotations)
