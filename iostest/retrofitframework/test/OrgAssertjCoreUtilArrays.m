//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCorePresentationRepresentation.h"
#include "OrgAssertjCorePresentationStandardRepresentation.h"
#include "OrgAssertjCoreUtilArrayFormatter.h"
#include "OrgAssertjCoreUtilArrays.h"
#include "OrgAssertjCoreUtilPreconditions.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface OrgAssertjCoreUtilArrays ()

+ (jboolean)hasElementsWithNSObjectArray:(IOSObjectArray *)array;

- (instancetype)init;

@end

inline OrgAssertjCoreUtilArrayFormatter *OrgAssertjCoreUtilArrays_get_FORMATTER();
static OrgAssertjCoreUtilArrayFormatter *OrgAssertjCoreUtilArrays_FORMATTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreUtilArrays, FORMATTER, OrgAssertjCoreUtilArrayFormatter *)

inline OrgAssertjCorePresentationStandardRepresentation *OrgAssertjCoreUtilArrays_get_STANDARD_REPRESENTATION();
static OrgAssertjCorePresentationStandardRepresentation *OrgAssertjCoreUtilArrays_STANDARD_REPRESENTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreUtilArrays, STANDARD_REPRESENTATION, OrgAssertjCorePresentationStandardRepresentation *)

__attribute__((unused)) static jboolean OrgAssertjCoreUtilArrays_hasElementsWithNSObjectArray_(IOSObjectArray *array);

__attribute__((unused)) static void OrgAssertjCoreUtilArrays_init(OrgAssertjCoreUtilArrays *self);

__attribute__((unused)) static OrgAssertjCoreUtilArrays *new_OrgAssertjCoreUtilArrays_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreUtilArrays *create_OrgAssertjCoreUtilArrays_init();

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreUtilArrays)

@implementation OrgAssertjCoreUtilArrays

+ (jboolean)isArrayWithId:(id)o {
  return OrgAssertjCoreUtilArrays_isArrayWithId_(o);
}

+ (jboolean)isNullOrEmptyWithNSObjectArray:(IOSObjectArray *)array {
  return OrgAssertjCoreUtilArrays_isNullOrEmptyWithNSObjectArray_(array);
}

+ (IOSObjectArray *)arrayWithNSObjectArray:(IOSObjectArray *)values {
  return OrgAssertjCoreUtilArrays_arrayWithNSObjectArray_(values);
}

+ (NSString *)formatWithOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)representation
                                                          withId:(id)array {
  return OrgAssertjCoreUtilArrays_formatWithOrgAssertjCorePresentationRepresentation_withId_(representation, array);
}

+ (id)formatWithId:(id)array {
  return OrgAssertjCoreUtilArrays_formatWithId_(array);
}

+ (id<JavaUtilList>)nonNullElementsInWithNSObjectArray:(IOSObjectArray *)array {
  return OrgAssertjCoreUtilArrays_nonNullElementsInWithNSObjectArray_(array);
}

+ (jboolean)hasOnlyNullElementsWithNSObjectArray:(IOSObjectArray *)array {
  return OrgAssertjCoreUtilArrays_hasOnlyNullElementsWithNSObjectArray_(array);
}

+ (jboolean)hasElementsWithNSObjectArray:(IOSObjectArray *)array {
  return OrgAssertjCoreUtilArrays_hasElementsWithNSObjectArray_(array);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilArrays_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "[LNSObject;", 0x89, 5, 3, -1, 6, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 9, 3, -1, 10, -1, -1 },
    { NULL, "Z", 0x9, 11, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0xa, 12, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isArrayWithId:);
  methods[1].selector = @selector(isNullOrEmptyWithNSObjectArray:);
  methods[2].selector = @selector(arrayWithNSObjectArray:);
  methods[3].selector = @selector(formatWithOrgAssertjCorePresentationRepresentation:withId:);
  methods[4].selector = @selector(formatWithId:);
  methods[5].selector = @selector(nonNullElementsInWithNSObjectArray:);
  methods[6].selector = @selector(hasOnlyNullElementsWithNSObjectArray:);
  methods[7].selector = @selector(hasElementsWithNSObjectArray:);
  methods[8].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FORMATTER", "LOrgAssertjCoreUtilArrayFormatter;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "STANDARD_REPRESENTATION", "LOrgAssertjCorePresentationStandardRepresentation;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "isArray", "LNSObject;", "isNullOrEmpty", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)Z", "array", "<T:Ljava/lang/Object;>([TT;)[TT;", "format", "LOrgAssertjCorePresentationRepresentation;LNSObject;", "nonNullElementsIn", "<T:Ljava/lang/Object;>([TT;)Ljava/util/List<TT;>;", "hasOnlyNullElements", "hasElements", &OrgAssertjCoreUtilArrays_FORMATTER, &OrgAssertjCoreUtilArrays_STANDARD_REPRESENTATION };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilArrays = { "Arrays", "org.assertj.core.util", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilArrays;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreUtilArrays class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreUtilArrays_FORMATTER, new_OrgAssertjCoreUtilArrayFormatter_init());
    JreStrongAssignAndConsume(&OrgAssertjCoreUtilArrays_STANDARD_REPRESENTATION, new_OrgAssertjCorePresentationStandardRepresentation_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreUtilArrays)
  }
}

@end

jboolean OrgAssertjCoreUtilArrays_isArrayWithId_(id o) {
  OrgAssertjCoreUtilArrays_initialize();
  return o != nil && [[o java_getClass] isArray];
}

jboolean OrgAssertjCoreUtilArrays_isNullOrEmptyWithNSObjectArray_(IOSObjectArray *array) {
  OrgAssertjCoreUtilArrays_initialize();
  return array == nil || !OrgAssertjCoreUtilArrays_hasElementsWithNSObjectArray_(array);
}

IOSObjectArray *OrgAssertjCoreUtilArrays_arrayWithNSObjectArray_(IOSObjectArray *values) {
  OrgAssertjCoreUtilArrays_initialize();
  return values;
}

NSString *OrgAssertjCoreUtilArrays_formatWithOrgAssertjCorePresentationRepresentation_withId_(id<OrgAssertjCorePresentationRepresentation> representation, id array) {
  OrgAssertjCoreUtilArrays_initialize();
  return [((OrgAssertjCoreUtilArrayFormatter *) nil_chk(OrgAssertjCoreUtilArrays_FORMATTER)) formatWithOrgAssertjCorePresentationRepresentation:representation withId:array];
}

id OrgAssertjCoreUtilArrays_formatWithId_(id array) {
  OrgAssertjCoreUtilArrays_initialize();
  return OrgAssertjCoreUtilArrays_formatWithOrgAssertjCorePresentationRepresentation_withId_(OrgAssertjCoreUtilArrays_STANDARD_REPRESENTATION, array);
}

id<JavaUtilList> OrgAssertjCoreUtilArrays_nonNullElementsInWithNSObjectArray_(IOSObjectArray *array) {
  OrgAssertjCoreUtilArrays_initialize();
  if (array == nil) {
    return JavaUtilCollections_emptyList();
  }
  id<JavaUtilList> nonNullElements = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = array;
    id const *b__ = a__->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id o = *b__++;
      if (o != nil) {
        [nonNullElements addWithId:o];
      }
    }
  }
  return nonNullElements;
}

jboolean OrgAssertjCoreUtilArrays_hasOnlyNullElementsWithNSObjectArray_(IOSObjectArray *array) {
  OrgAssertjCoreUtilArrays_initialize();
  OrgAssertjCoreUtilPreconditions_checkNotNullWithId_(array);
  if (!OrgAssertjCoreUtilArrays_hasElementsWithNSObjectArray_(array)) {
    return false;
  }
  {
    IOSObjectArray *a__ = array;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id o = *b__++;
      if (o != nil) {
        return false;
      }
    }
  }
  return true;
}

jboolean OrgAssertjCoreUtilArrays_hasElementsWithNSObjectArray_(IOSObjectArray *array) {
  OrgAssertjCoreUtilArrays_initialize();
  return ((IOSObjectArray *) nil_chk(array))->size_ > 0;
}

void OrgAssertjCoreUtilArrays_init(OrgAssertjCoreUtilArrays *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilArrays *new_OrgAssertjCoreUtilArrays_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilArrays, init)
}

OrgAssertjCoreUtilArrays *create_OrgAssertjCoreUtilArrays_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilArrays, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilArrays)
