//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveMessage.h"

@interface OrgAssertjCoreErrorShouldHaveMessage ()

- (instancetype)initWithNSException:(NSException *)actual
                       withNSString:(NSString *)expectedMessage;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveMessage_initWithNSException_withNSString_(OrgAssertjCoreErrorShouldHaveMessage *self, NSException *actual, NSString *expectedMessage);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveMessage *new_OrgAssertjCoreErrorShouldHaveMessage_initWithNSException_withNSString_(NSException *actual, NSString *expectedMessage) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveMessage *create_OrgAssertjCoreErrorShouldHaveMessage_initWithNSException_withNSString_(NSException *actual, NSString *expectedMessage);

@implementation OrgAssertjCoreErrorShouldHaveMessage

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveMessageWithNSException:(NSException *)actual
                                                                  withNSString:(NSString *)expectedMessage {
  return OrgAssertjCoreErrorShouldHaveMessage_shouldHaveMessageWithNSException_withNSString_(actual, expectedMessage);
}

- (instancetype)initWithNSException:(NSException *)actual
                       withNSString:(NSString *)expectedMessage {
  OrgAssertjCoreErrorShouldHaveMessage_initWithNSException_withNSString_(self, actual, expectedMessage);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveMessageWithNSException:withNSString:);
  methods[1].selector = @selector(initWithNSException:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveMessage", "LNSException;LNSString;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveMessage = { "ShouldHaveMessage", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveMessage;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldHaveMessage_shouldHaveMessageWithNSException_withNSString_(NSException *actual, NSString *expectedMessage) {
  OrgAssertjCoreErrorShouldHaveMessage_initialize();
  return create_OrgAssertjCoreErrorShouldHaveMessage_initWithNSException_withNSString_(actual, expectedMessage);
}

void OrgAssertjCoreErrorShouldHaveMessage_initWithNSException_withNSString_(OrgAssertjCoreErrorShouldHaveMessage *self, NSException *actual, NSString *expectedMessage) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting message:\n <%s>\nbut was:\n <%s>", [IOSObjectArray arrayWithObjects:(id[]){ expectedMessage, [((NSException *) nil_chk(actual)) getMessage] } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveMessage *new_OrgAssertjCoreErrorShouldHaveMessage_initWithNSException_withNSString_(NSException *actual, NSString *expectedMessage) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveMessage, initWithNSException_withNSString_, actual, expectedMessage)
}

OrgAssertjCoreErrorShouldHaveMessage *create_OrgAssertjCoreErrorShouldHaveMessage_initWithNSException_withNSString_(NSException *actual, NSString *expectedMessage) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveMessage, initWithNSException_withNSString_, actual, expectedMessage)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveMessage)
