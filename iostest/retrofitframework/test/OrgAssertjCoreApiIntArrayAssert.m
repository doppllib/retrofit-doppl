//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractIntArrayAssert.h"
#include "OrgAssertjCoreApiIntArrayAssert.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiIntArrayAssert

- (instancetype)initWithIntArray:(IOSIntArray *)actual {
  OrgAssertjCoreApiIntArrayAssert_initWithIntArray_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIntArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "[I", "Lorg/assertj/core/api/AbstractIntArrayAssert<Lorg/assertj/core/api/IntArrayAssert;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiIntArrayAssert = { "IntArrayAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, 1, -1 };
  return &_OrgAssertjCoreApiIntArrayAssert;
}

@end

void OrgAssertjCoreApiIntArrayAssert_initWithIntArray_(OrgAssertjCoreApiIntArrayAssert *self, IOSIntArray *actual) {
  OrgAssertjCoreApiAbstractIntArrayAssert_initWithIntArray_withIOSClass_(self, actual, OrgAssertjCoreApiIntArrayAssert_class_());
}

OrgAssertjCoreApiIntArrayAssert *new_OrgAssertjCoreApiIntArrayAssert_initWithIntArray_(IOSIntArray *actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiIntArrayAssert, initWithIntArray_, actual)
}

OrgAssertjCoreApiIntArrayAssert *create_OrgAssertjCoreApiIntArrayAssert_initWithIntArray_(IOSIntArray *actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiIntArrayAssert, initWithIntArray_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiIntArrayAssert)
