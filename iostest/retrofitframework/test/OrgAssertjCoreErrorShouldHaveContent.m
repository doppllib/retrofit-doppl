//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorAbstractShouldHaveTextContent.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveContent.h"
#include "java/io/File.h"
#include "java/nio/charset/Charset.h"
#include "java/util/List.h"

@interface OrgAssertjCoreErrorShouldHaveContent ()

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
         withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                      withNSString:(NSString *)diffs;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveContent_initWithJavaIoFile_withJavaNioCharsetCharset_withNSString_(OrgAssertjCoreErrorShouldHaveContent *self, JavaIoFile *actual, JavaNioCharsetCharset *charset, NSString *diffs);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveContent *new_OrgAssertjCoreErrorShouldHaveContent_initWithJavaIoFile_withJavaNioCharsetCharset_withNSString_(JavaIoFile *actual, JavaNioCharsetCharset *charset, NSString *diffs) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveContent *create_OrgAssertjCoreErrorShouldHaveContent_initWithJavaIoFile_withJavaNioCharsetCharset_withNSString_(JavaIoFile *actual, JavaNioCharsetCharset *charset, NSString *diffs);

@implementation OrgAssertjCoreErrorShouldHaveContent

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldHaveContentWithJavaIoFile:(JavaIoFile *)actual
                                                    withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                                                             withJavaUtilList:(id<JavaUtilList>)diffs {
  return OrgAssertjCoreErrorShouldHaveContent_shouldHaveContentWithJavaIoFile_withJavaNioCharsetCharset_withJavaUtilList_(actual, charset, diffs);
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
         withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                      withNSString:(NSString *)diffs {
  OrgAssertjCoreErrorShouldHaveContent_initWithJavaIoFile_withJavaNioCharsetCharset_withNSString_(self, actual, charset, diffs);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveContentWithJavaIoFile:withJavaNioCharsetCharset:withJavaUtilList:);
  methods[1].selector = @selector(initWithJavaIoFile:withJavaNioCharsetCharset:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveContent", "LJavaIoFile;LJavaNioCharsetCharset;LJavaUtilList;", "(Ljava/io/File;Ljava/nio/charset/Charset;Ljava/util/List<Ljava/lang/String;>;)Lorg/assertj/core/error/ErrorMessageFactory;", "LJavaIoFile;LJavaNioCharsetCharset;LNSString;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveContent = { "ShouldHaveContent", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveContent;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldHaveContent_shouldHaveContentWithJavaIoFile_withJavaNioCharsetCharset_withJavaUtilList_(JavaIoFile *actual, JavaNioCharsetCharset *charset, id<JavaUtilList> diffs) {
  OrgAssertjCoreErrorShouldHaveContent_initialize();
  return create_OrgAssertjCoreErrorShouldHaveContent_initWithJavaIoFile_withJavaNioCharsetCharset_withNSString_(actual, charset, OrgAssertjCoreErrorAbstractShouldHaveTextContent_diffsAsStringWithJavaUtilList_(diffs));
}

void OrgAssertjCoreErrorShouldHaveContent_initWithJavaIoFile_withJavaNioCharsetCharset_withNSString_(OrgAssertjCoreErrorShouldHaveContent *self, JavaIoFile *actual, JavaNioCharsetCharset *charset, NSString *diffs) {
  OrgAssertjCoreErrorAbstractShouldHaveTextContent_initWithNSString_withNSObjectArray_(self, @"\nFile:\n <%s>\nread with charset <%s> does not have the expected content:", [IOSObjectArray arrayWithObjects:(id[]){ actual, charset } count:2 type:NSObject_class_()]);
  JreStrongAssign(&self->diffs_, diffs);
}

OrgAssertjCoreErrorShouldHaveContent *new_OrgAssertjCoreErrorShouldHaveContent_initWithJavaIoFile_withJavaNioCharsetCharset_withNSString_(JavaIoFile *actual, JavaNioCharsetCharset *charset, NSString *diffs) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveContent, initWithJavaIoFile_withJavaNioCharsetCharset_withNSString_, actual, charset, diffs)
}

OrgAssertjCoreErrorShouldHaveContent *create_OrgAssertjCoreErrorShouldHaveContent_initWithJavaIoFile_withJavaNioCharsetCharset_withNSString_(JavaIoFile *actual, JavaNioCharsetCharset *charset, NSString *diffs) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveContent, initWithJavaIoFile_withJavaNioCharsetCharset_withNSString_, actual, charset, diffs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveContent)
