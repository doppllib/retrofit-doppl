//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequence")
#ifdef RESTRICT_OrgAssertjCoreErrorShouldContainCharSequence
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequence 0
#else
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequence 1
#endif
#undef RESTRICT_OrgAssertjCoreErrorShouldContainCharSequence

#if !defined (OrgAssertjCoreErrorShouldContainCharSequence_) && (INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequence || defined(INCLUDE_OrgAssertjCoreErrorShouldContainCharSequence))
#define OrgAssertjCoreErrorShouldContainCharSequence_

#define RESTRICT_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#define INCLUDE_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"

@class IOSObjectArray;
@protocol JavaLangCharSequence;
@protocol JavaUtilSet;
@protocol OrgAssertjCoreErrorErrorMessageFactory;
@protocol OrgAssertjCoreInternalComparisonStrategy;

@interface OrgAssertjCoreErrorShouldContainCharSequence : OrgAssertjCoreErrorBasicErrorMessageFactory

#pragma mark Public

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                           withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                           withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                       withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                      withJavaLangCharSequenceArray:(IOSObjectArray *)strings
                                                                    withJavaUtilSet:(id<JavaUtilSet>)notFound;

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                      withJavaLangCharSequenceArray:(IOSObjectArray *)strings
                                                                    withJavaUtilSet:(id<JavaUtilSet>)notFound
                                       withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainIgnoringCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                                       withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreErrorShouldContainCharSequence)

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequence_shouldContainWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence);

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequence_shouldContainWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequence_shouldContainWithJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, IOSObjectArray *strings, id<JavaUtilSet> notFound, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequence_shouldContainWithJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaUtilSet_(id<JavaLangCharSequence> actual, IOSObjectArray *strings, id<JavaUtilSet> notFound);

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequence_shouldContainIgnoringCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreErrorShouldContainCharSequence)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldContainCharSequence")
