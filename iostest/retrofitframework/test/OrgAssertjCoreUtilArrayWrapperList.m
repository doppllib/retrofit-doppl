//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilArrayWrapperList.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/reflect/Array.h"
#include "java/util/AbstractList.h"

@interface OrgAssertjCoreUtilArrayWrapperList ()

- (void)checkIsInRangeWithInt:(jint)index;

@end

__attribute__((unused)) static void OrgAssertjCoreUtilArrayWrapperList_checkIsInRangeWithInt_(OrgAssertjCoreUtilArrayWrapperList *self, jint index);

@implementation OrgAssertjCoreUtilArrayWrapperList

+ (OrgAssertjCoreUtilArrayWrapperList *)wrapWithId:(id)array {
  return OrgAssertjCoreUtilArrayWrapperList_wrapWithId_(array);
}

- (instancetype)initWithId:(id)array {
  OrgAssertjCoreUtilArrayWrapperList_initWithId_(self, array);
  return self;
}

- (id)getWithInt:(jint)index {
  OrgAssertjCoreUtilArrayWrapperList_checkIsInRangeWithInt_(self, index);
  return JavaLangReflectArray_getWithId_withInt_(array_, index);
}

- (void)checkIsInRangeWithInt:(jint)index {
  OrgAssertjCoreUtilArrayWrapperList_checkIsInRangeWithInt_(self, index);
}

- (jint)size {
  return JavaLangReflectArray_getLengthWithId_(array_);
}

- (IOSClass *)getComponentType {
  return [[nil_chk(array_) java_getClass] getComponentType];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(array_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreUtilArrayWrapperList;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(wrapWithId:);
  methods[1].selector = @selector(initWithId:);
  methods[2].selector = @selector(getWithInt:);
  methods[3].selector = @selector(checkIsInRangeWithInt:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(getComponentType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "array_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "wrap", "LNSObject;", "get", "I", "checkIsInRange", "()Ljava/lang/Class<*>;", "Ljava/util/AbstractList<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilArrayWrapperList = { "ArrayWrapperList", "org.assertj.core.util", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, 6, -1 };
  return &_OrgAssertjCoreUtilArrayWrapperList;
}

@end

OrgAssertjCoreUtilArrayWrapperList *OrgAssertjCoreUtilArrayWrapperList_wrapWithId_(id array) {
  OrgAssertjCoreUtilArrayWrapperList_initialize();
  if (array == nil) {
    return nil;
  }
  if (![[array java_getClass] isArray]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The object to wrap should be an array");
  }
  return create_OrgAssertjCoreUtilArrayWrapperList_initWithId_(array);
}

void OrgAssertjCoreUtilArrayWrapperList_initWithId_(OrgAssertjCoreUtilArrayWrapperList *self, id array) {
  JavaUtilAbstractList_init(self);
  JreStrongAssign(&self->array_, array);
}

OrgAssertjCoreUtilArrayWrapperList *new_OrgAssertjCoreUtilArrayWrapperList_initWithId_(id array) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilArrayWrapperList, initWithId_, array)
}

OrgAssertjCoreUtilArrayWrapperList *create_OrgAssertjCoreUtilArrayWrapperList_initWithId_(id array) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilArrayWrapperList, initWithId_, array)
}

void OrgAssertjCoreUtilArrayWrapperList_checkIsInRangeWithInt_(OrgAssertjCoreUtilArrayWrapperList *self, jint index) {
  jint size = [self size];
  if (index >= 0 && index < [self size]) {
    return;
  }
  NSString *message = NSString_java_formatWithNSString_withNSObjectArray_(@"Index should be between 0 and %d (inclusive,) but was %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(size - 1), JavaLangInteger_valueOfWithInt_(index) } count:2 type:NSObject_class_()]);
  @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(message);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilArrayWrapperList)
