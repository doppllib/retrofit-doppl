//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreApiAbstractFileAssert")
#ifdef RESTRICT_OrgAssertjCoreApiAbstractFileAssert
#define INCLUDE_ALL_OrgAssertjCoreApiAbstractFileAssert 0
#else
#define INCLUDE_ALL_OrgAssertjCoreApiAbstractFileAssert 1
#endif
#undef RESTRICT_OrgAssertjCoreApiAbstractFileAssert

#if !defined (OrgAssertjCoreApiAbstractFileAssert_) && (INCLUDE_ALL_OrgAssertjCoreApiAbstractFileAssert || defined(INCLUDE_OrgAssertjCoreApiAbstractFileAssert))
#define OrgAssertjCoreApiAbstractFileAssert_

#define RESTRICT_OrgAssertjCoreApiAbstractAssert 1
#define INCLUDE_OrgAssertjCoreApiAbstractAssert 1
#include "OrgAssertjCoreApiAbstractAssert.h"

@class IOSByteArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaNioCharsetCharset;
@class OrgAssertjCoreApiCondition;
@class OrgAssertjCoreDescriptionDescription;
@class OrgAssertjCoreInternalInternalFiles;
@protocol JavaLangIterable;
@protocol JavaUtilComparator;

@interface OrgAssertjCoreApiAbstractFileAssert : OrgAssertjCoreApiAbstractAssert {
 @public
  OrgAssertjCoreInternalInternalFiles *files_;
  JavaNioCharsetCharset *charset_;
}

#pragma mark Public

- (OrgAssertjCoreApiAbstractFileAssert *)asWithNSString:(NSString *)arg0
                                      withNSObjectArray:(IOSObjectArray *)arg1;

- (OrgAssertjCoreApiAbstractFileAssert *)asWithOrgAssertjCoreDescriptionDescription:(OrgAssertjCoreDescriptionDescription *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)canRead;

- (OrgAssertjCoreApiAbstractFileAssert *)canWrite;

- (OrgAssertjCoreApiAbstractFileAssert *)describedAsWithNSString:(NSString *)arg0
                                               withNSObjectArray:(IOSObjectArray *)arg1;

- (OrgAssertjCoreApiAbstractFileAssert *)describedAsWithOrgAssertjCoreDescriptionDescription:(OrgAssertjCoreDescriptionDescription *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)doesNotExist;

- (OrgAssertjCoreApiAbstractFileAssert *)doesNotHaveSameClassAsWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)doesNotHaveWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)exists;

- (OrgAssertjCoreApiAbstractFileAssert *)hasBinaryContentWithByteArray:(IOSByteArray *)expected;

- (OrgAssertjCoreApiAbstractFileAssert *)hasContentWithNSString:(NSString *)expected;

- (OrgAssertjCoreApiAbstractFileAssert *)hasContentEqualToWithJavaIoFile:(JavaIoFile *)expected;

- (OrgAssertjCoreApiAbstractFileAssert *)hasExtensionWithNSString:(NSString *)expected;

- (OrgAssertjCoreApiAbstractFileAssert *)hasNameWithNSString:(NSString *)expected;

- (OrgAssertjCoreApiAbstractFileAssert *)hasNoParent;

- (OrgAssertjCoreApiAbstractFileAssert *)hasParentWithJavaIoFile:(JavaIoFile *)expected;

- (OrgAssertjCoreApiAbstractFileAssert *)hasParentWithNSString:(NSString *)expected;

- (OrgAssertjCoreApiAbstractFileAssert *)hasSameClassAsWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)hasWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isAbsolute;

- (OrgAssertjCoreApiAbstractFileAssert *)isDirectory;

- (OrgAssertjCoreApiAbstractFileAssert *)isEqualToWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isExactlyInstanceOfWithIOSClass:(IOSClass *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isFile;

- (OrgAssertjCoreApiAbstractFileAssert *)isInstanceOfAnyWithIOSClassArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isInstanceOfWithIOSClass:(IOSClass *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isInWithJavaLangIterable:(id<JavaLangIterable>)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isInWithNSObjectArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isNotEqualToWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isNotExactlyInstanceOfWithIOSClass:(IOSClass *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isNotInstanceOfAnyWithIOSClassArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isNotInstanceOfWithIOSClass:(IOSClass *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isNotInWithJavaLangIterable:(id<JavaLangIterable>)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isNotInWithNSObjectArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isNotNull;

- (OrgAssertjCoreApiAbstractFileAssert *)isNotOfAnyClassInWithIOSClassArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isNotSameAsWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isNotWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isOfAnyClassInWithIOSClassArray:(IOSObjectArray *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isRelative;

- (OrgAssertjCoreApiAbstractFileAssert *)isSameAsWithId:(id)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)isWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)overridingErrorMessageWithNSString:(NSString *)arg0
                                                          withNSObjectArray:(IOSObjectArray *)arg1;

- (OrgAssertjCoreApiAbstractFileAssert *)usingCharsetWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (OrgAssertjCoreApiAbstractFileAssert *)usingCharsetWithNSString:(NSString *)charsetName;

- (OrgAssertjCoreApiAbstractFileAssert *)usingComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)arg0;

- (OrgAssertjCoreApiAbstractFileAssert *)usingDefaultComparator;

#pragma mark Protected

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                      withIOSClass:(IOSClass *)selfType;

- (OrgAssertjCoreApiAbstractFileAssert *)inBinary;

- (OrgAssertjCoreApiAbstractFileAssert *)inHexadecimal;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreApiAbstractFileAssert)

J2OBJC_FIELD_SETTER(OrgAssertjCoreApiAbstractFileAssert, files_, OrgAssertjCoreInternalInternalFiles *)
J2OBJC_FIELD_SETTER(OrgAssertjCoreApiAbstractFileAssert, charset_, JavaNioCharsetCharset *)

FOUNDATION_EXPORT void OrgAssertjCoreApiAbstractFileAssert_initWithJavaIoFile_withIOSClass_(OrgAssertjCoreApiAbstractFileAssert *self, JavaIoFile *actual, IOSClass *selfType);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreApiAbstractFileAssert)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreApiAbstractFileAssert")
