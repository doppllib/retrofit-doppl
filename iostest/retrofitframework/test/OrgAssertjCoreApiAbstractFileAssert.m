//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractFileAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreInternalInternalFiles.h"
#include "java/io/File.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/nio/charset/Charset.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractFileAssert

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                      withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractFileAssert_initWithJavaIoFile_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractFileAssert *)exists {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertExistsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)doesNotExist {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertDoesNotExistWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)isFile {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertIsFileWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)isDirectory {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertIsDirectoryWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)isAbsolute {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertIsAbsoluteWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)isRelative {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertIsRelativeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)hasContentEqualToWithJavaIoFile:(JavaIoFile *)expected {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertEqualContentWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_ withJavaIoFile:expected];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)hasBinaryContentWithByteArray:(IOSByteArray *)expected {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertHasBinaryContentWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_ withByteArray:expected];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)usingCharsetWithNSString:(NSString *)charsetName {
  if (!JavaNioCharsetCharset_isSupportedWithNSString_(charsetName)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Charset:<'%s'> is not supported on this system", [IOSObjectArray arrayWithObjects:(id[]){ charsetName } count:1 type:NSObject_class_()]));
  return [self usingCharsetWithJavaNioCharsetCharset:JavaNioCharsetCharset_forNameWithNSString_(charsetName)];
}

- (OrgAssertjCoreApiAbstractFileAssert *)usingCharsetWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  if (charset == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The charset should not be null");
  JreStrongAssign(&self->charset_, charset);
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)hasContentWithNSString:(NSString *)expected {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertHasContentWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_ withNSString:expected withJavaNioCharsetCharset:charset_];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)canWrite {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertCanWriteWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)canRead {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertCanReadWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)hasParentWithJavaIoFile:(JavaIoFile *)expected {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertHasParentWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_ withJavaIoFile:expected];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)hasParentWithNSString:(NSString *)expected {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertHasParentWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_ withJavaIoFile:expected != nil ? create_JavaIoFile_initWithNSString_(expected) : nil];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)hasExtensionWithNSString:(NSString *)expected {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertHasExtensionWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_ withNSString:expected];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)hasNameWithNSString:(NSString *)expected {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertHasNameWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_ withNSString:expected];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractFileAssert *)hasNoParent {
  [((OrgAssertjCoreInternalInternalFiles *) nil_chk(files_)) assertHasNoParentWithOrgAssertjCoreApiAssertionInfo:info_ withJavaIoFile:actual_];
  return ((OrgAssertjCoreApiAbstractFileAssert *) myself_);
}

- (void)dealloc {
  RELEASE_(files_);
  RELEASE_(charset_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, 9, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, 14, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, 15, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, 15, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, 16, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, 17, 10, -1, 11, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoFile:withIOSClass:);
  methods[1].selector = @selector(exists);
  methods[2].selector = @selector(doesNotExist);
  methods[3].selector = @selector(isFile);
  methods[4].selector = @selector(isDirectory);
  methods[5].selector = @selector(isAbsolute);
  methods[6].selector = @selector(isRelative);
  methods[7].selector = @selector(hasContentEqualToWithJavaIoFile:);
  methods[8].selector = @selector(hasBinaryContentWithByteArray:);
  methods[9].selector = @selector(usingCharsetWithNSString:);
  methods[10].selector = @selector(usingCharsetWithJavaNioCharsetCharset:);
  methods[11].selector = @selector(hasContentWithNSString:);
  methods[12].selector = @selector(canWrite);
  methods[13].selector = @selector(canRead);
  methods[14].selector = @selector(hasParentWithJavaIoFile:);
  methods[15].selector = @selector(hasParentWithNSString:);
  methods[16].selector = @selector(hasExtensionWithNSString:);
  methods[17].selector = @selector(hasNameWithNSString:);
  methods[18].selector = @selector(hasNoParent);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "files_", "LOrgAssertjCoreInternalInternalFiles;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "charset_", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;LIOSClass;", "(Ljava/io/File;Ljava/lang/Class<*>;)V", "()TS;", "hasContentEqualTo", "LJavaIoFile;", "(Ljava/io/File;)TS;", "hasBinaryContent", "[B", "([B)TS;", "usingCharset", "LNSString;", "(Ljava/lang/String;)TS;", "LJavaNioCharsetCharset;", "(Ljava/nio/charset/Charset;)TS;", "hasContent", "hasParent", "hasExtension", "hasName", "<S:Lorg/assertj/core/api/AbstractFileAssert<TS;>;>Lorg/assertj/core/api/AbstractAssert<TS;Ljava/io/File;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractFileAssert = { "AbstractFileAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 19, 2, -1, -1, -1, 18, -1 };
  return &_OrgAssertjCoreApiAbstractFileAssert;
}

@end

void OrgAssertjCoreApiAbstractFileAssert_initWithJavaIoFile_withIOSClass_(OrgAssertjCoreApiAbstractFileAssert *self, JavaIoFile *actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->files_, OrgAssertjCoreInternalInternalFiles_instance());
  JreStrongAssign(&self->charset_, JavaNioCharsetCharset_defaultCharset());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractFileAssert)
