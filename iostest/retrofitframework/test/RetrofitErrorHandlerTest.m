//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractCharSequenceAssert.h"
#include "OrgAssertjCoreApiAbstractThrowableAssert.h"
#include "OrgAssertjCoreApiAssertions.h"
#include "RetrofitCallback.h"
#include "RetrofitClientRequest.h"
#include "RetrofitClientResponse.h"
#include "RetrofitErrorHandler.h"
#include "RetrofitErrorHandlerTest.h"
#include "RetrofitHttpGET.h"
#include "RetrofitRestAdapter.h"
#include "RetrofitRetrofitError.h"
#include "RetrofitUtils.h"
#include "RxObservable.h"
#include "RxObserver.h"
#include "RxSubscription.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/stubbing/Stubber.h"

__attribute__((unused)) static IOSObjectArray *RetrofitErrorHandlerTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RetrofitErrorHandlerTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RetrofitErrorHandlerTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *RetrofitErrorHandlerTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *RetrofitErrorHandlerTest__Annotations$4();

@interface RetrofitErrorHandlerTest_ExampleClient : NSObject

@end

__attribute__((unused)) static IOSObjectArray *RetrofitErrorHandlerTest_ExampleClient__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RetrofitErrorHandlerTest_ExampleClient__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RetrofitErrorHandlerTest_ExampleClient__Annotations$2();

@interface RetrofitErrorHandlerTest_1 : NSObject < RetrofitCallback > {
 @public
  RetrofitErrorHandlerTest_TestException *val$exception_;
}

- (instancetype)initWithRetrofitErrorHandlerTest_TestException:(RetrofitErrorHandlerTest_TestException *)capture$0;

- (void)successWithId:(RetrofitClientResponse *)response
withRetrofitClientResponse:(RetrofitClientResponse *)response2;

- (void)failureWithRetrofitRetrofitError:(RetrofitRetrofitError *)error;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitErrorHandlerTest_1)

__attribute__((unused)) static void RetrofitErrorHandlerTest_1_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_1 *self, RetrofitErrorHandlerTest_TestException *capture$0);

__attribute__((unused)) static RetrofitErrorHandlerTest_1 *new_RetrofitErrorHandlerTest_1_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_TestException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitErrorHandlerTest_1 *create_RetrofitErrorHandlerTest_1_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_TestException *capture$0);

@interface RetrofitErrorHandlerTest_2 : NSObject < RxObserver > {
 @public
  RetrofitErrorHandlerTest_TestException *val$exception_;
}

- (instancetype)initWithRetrofitErrorHandlerTest_TestException:(RetrofitErrorHandlerTest_TestException *)capture$0;

- (void)onCompleted;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(RetrofitClientResponse *)response;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitErrorHandlerTest_2)

__attribute__((unused)) static void RetrofitErrorHandlerTest_2_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_2 *self, RetrofitErrorHandlerTest_TestException *capture$0);

__attribute__((unused)) static RetrofitErrorHandlerTest_2 *new_RetrofitErrorHandlerTest_2_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_TestException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitErrorHandlerTest_2 *create_RetrofitErrorHandlerTest_2_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_TestException *capture$0);

@implementation RetrofitErrorHandlerTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitErrorHandlerTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setup {
  JreStrongAssign(&errorHandler_, OrgMockitoMockito_mockWithIOSClass_(RetrofitErrorHandler_class_()));
  JreStrongAssign(&client_, [((RetrofitRestAdapter *) nil_chk([((RetrofitRestAdapter_Builder *) nil_chk([((RetrofitRestAdapter_Builder *) nil_chk([((RetrofitRestAdapter_Builder *) nil_chk([((RetrofitRestAdapter_Builder *) nil_chk([create_RetrofitRestAdapter_Builder_init() setEndpointWithNSString:@"http://example.com"])) setClientWithRetrofitClientClient:create_RetrofitErrorHandlerTest_MockInvalidResponseClient_init()])) setErrorHandlerWithRetrofitErrorHandler:errorHandler_])) setExecutorsWithJavaUtilConcurrentExecutor:create_RetrofitUtils_SynchronousExecutor_init() withJavaUtilConcurrentExecutor:create_RetrofitUtils_SynchronousExecutor_init()])) build])) createWithIOSClass:RetrofitErrorHandlerTest_ExampleClient_class_()]);
}

- (void)customizedExceptionUsed {
  RetrofitErrorHandlerTest_TestException *exception = create_RetrofitErrorHandlerTest_TestException_init();
  [((id<RetrofitErrorHandler>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doReturnWithId_(exception))) whenWithId:errorHandler_])) handleErrorWithRetrofitRetrofitError:OrgMockitoMatchers_anyWithIOSClass_(RetrofitRetrofitError_class_())];
  @try {
    [((id<RetrofitErrorHandlerTest_ExampleClient>) nil_chk(client_)) throwsCustomException];
    OrgAssertjCoreApiAssertions_failBecauseExceptionWasNotThrownWithIOSClass_(RetrofitErrorHandlerTest_TestException_class_());
  }
  @catch (RetrofitErrorHandlerTest_TestException *e) {
    [((OrgAssertjCoreApiAbstractThrowableAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSException_(e))) isSameAsWithId:exception];
  }
}

- (void)onErrorWrappedCustomException {
  RetrofitErrorHandlerTest_TestException *exception = create_RetrofitErrorHandlerTest_TestException_init();
  [((id<RetrofitErrorHandler>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doReturnWithId_(exception))) whenWithId:errorHandler_])) handleErrorWithRetrofitRetrofitError:OrgMockitoMatchers_anyWithIOSClass_(RetrofitRetrofitError_class_())];
  [((id<RetrofitErrorHandlerTest_ExampleClient>) nil_chk(client_)) onErrorWrappedCustomExceptionWithRetrofitCallback:create_RetrofitErrorHandlerTest_1_initWithRetrofitErrorHandlerTest_TestException_(exception)];
}

- (void)onErrorCustomException {
  RetrofitErrorHandlerTest_TestException *exception = create_RetrofitErrorHandlerTest_TestException_init();
  [((id<RetrofitErrorHandler>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doReturnWithId_(exception))) whenWithId:errorHandler_])) handleErrorWithRetrofitRetrofitError:OrgMockitoMatchers_anyWithIOSClass_(RetrofitRetrofitError_class_())];
  [((RxObservable *) nil_chk([((id<RetrofitErrorHandlerTest_ExampleClient>) nil_chk(client_)) onErrorCustomException])) subscribeWithRxObserver:create_RetrofitErrorHandlerTest_2_initWithRetrofitErrorHandlerTest_TestException_(exception)];
}

- (void)returningNullThrowsException {
  [((id<RetrofitErrorHandler>) nil_chk([((id<OrgMockitoStubbingStubber>) nil_chk(OrgMockitoMockito_doReturnWithId_(nil))) whenWithId:errorHandler_])) handleErrorWithRetrofitRetrofitError:OrgMockitoMatchers_anyWithIOSClass_(RetrofitRetrofitError_class_())];
  @try {
    [((id<RetrofitErrorHandlerTest_ExampleClient>) nil_chk(client_)) throwsCustomException];
    OrgJunitAssert_fail();
  }
  @catch (JavaLangIllegalStateException *e) {
    [((OrgAssertjCoreApiAbstractCharSequenceAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSString_([((JavaLangIllegalStateException *) nil_chk(e)) getMessage]))) isEqualToWithId:@"Error handler returned null for wrapped exception."];
  }
}

- (void)dealloc {
  RELEASE_(client_);
  RELEASE_(errorHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 2, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, 6, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setup);
  methods[2].selector = @selector(customizedExceptionUsed);
  methods[3].selector = @selector(onErrorWrappedCustomException);
  methods[4].selector = @selector(onErrorCustomException);
  methods[5].selector = @selector(returningNullThrowsException);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "client_", "LRetrofitErrorHandlerTest_ExampleClient;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "errorHandler_", "LRetrofitErrorHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RetrofitErrorHandlerTest__Annotations$0, "LNSException;", (void *)&RetrofitErrorHandlerTest__Annotations$1, (void *)&RetrofitErrorHandlerTest__Annotations$2, (void *)&RetrofitErrorHandlerTest__Annotations$3, "LJavaLangException;", (void *)&RetrofitErrorHandlerTest__Annotations$4, "LRetrofitErrorHandlerTest_ExampleClient;LRetrofitErrorHandlerTest_TestException;LRetrofitErrorHandlerTest_MockInvalidResponseClient;" };
  static const J2ObjcClassInfo _RetrofitErrorHandlerTest = { "ErrorHandlerTest", "retrofit", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, 7, -1, -1, -1 };
  return &_RetrofitErrorHandlerTest;
}

@end

void RetrofitErrorHandlerTest_init(RetrofitErrorHandlerTest *self) {
  NSObject_init(self);
}

RetrofitErrorHandlerTest *new_RetrofitErrorHandlerTest_init() {
  J2OBJC_NEW_IMPL(RetrofitErrorHandlerTest, init)
}

RetrofitErrorHandlerTest *create_RetrofitErrorHandlerTest_init() {
  J2OBJC_CREATE_IMPL(RetrofitErrorHandlerTest, init)
}

IOSObjectArray *RetrofitErrorHandlerTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitErrorHandlerTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitErrorHandlerTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitErrorHandlerTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitErrorHandlerTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitErrorHandlerTest)

@implementation RetrofitErrorHandlerTest_ExampleClient

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LRetrofitClientResponse;", 0x401, -1, -1, 0, -1, 1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, 4, 5, -1 },
    { NULL, "LRxObservable;", 0x401, -1, -1, -1, 6, 7, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(throwsCustomException);
  methods[1].selector = @selector(onErrorWrappedCustomExceptionWithRetrofitCallback:);
  methods[2].selector = @selector(onErrorCustomException);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRetrofitErrorHandlerTest_TestException;", (void *)&RetrofitErrorHandlerTest_ExampleClient__Annotations$0, "onErrorWrappedCustomException", "LRetrofitCallback;", "(Lretrofit/Callback<Lretrofit/client/Response;>;)V", (void *)&RetrofitErrorHandlerTest_ExampleClient__Annotations$1, "()Lrx/Observable<Lretrofit/client/Response;>;", (void *)&RetrofitErrorHandlerTest_ExampleClient__Annotations$2, "LRetrofitErrorHandlerTest;" };
  static const J2ObjcClassInfo _RetrofitErrorHandlerTest_ExampleClient = { "ExampleClient", "retrofit", ptrTable, methods, NULL, 7, 0x608, 3, 0, 8, -1, -1, -1, -1 };
  return &_RetrofitErrorHandlerTest_ExampleClient;
}

@end

IOSObjectArray *RetrofitErrorHandlerTest_ExampleClient__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_RetrofitHttpGET(@"/") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitErrorHandlerTest_ExampleClient__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_RetrofitHttpGET(@"/") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitErrorHandlerTest_ExampleClient__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_RetrofitHttpGET(@"/") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(RetrofitErrorHandlerTest_ExampleClient)

@implementation RetrofitErrorHandlerTest_TestException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitErrorHandlerTest_TestException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRetrofitErrorHandlerTest;" };
  static const J2ObjcClassInfo _RetrofitErrorHandlerTest_TestException = { "TestException", "retrofit", ptrTable, methods, NULL, 7, 0x8, 1, 0, 0, -1, -1, -1, -1 };
  return &_RetrofitErrorHandlerTest_TestException;
}

@end

void RetrofitErrorHandlerTest_TestException_init(RetrofitErrorHandlerTest_TestException *self) {
  JavaLangException_init(self);
}

RetrofitErrorHandlerTest_TestException *new_RetrofitErrorHandlerTest_TestException_init() {
  J2OBJC_NEW_IMPL(RetrofitErrorHandlerTest_TestException, init)
}

RetrofitErrorHandlerTest_TestException *create_RetrofitErrorHandlerTest_TestException_init() {
  J2OBJC_CREATE_IMPL(RetrofitErrorHandlerTest_TestException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitErrorHandlerTest_TestException)

@implementation RetrofitErrorHandlerTest_MockInvalidResponseClient

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitErrorHandlerTest_MockInvalidResponseClient_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (RetrofitClientResponse *)executeWithRetrofitClientRequest:(RetrofitClientRequest *)request {
  return create_RetrofitClientResponse_initWithNSString_withInt_withNSString_withJavaUtilList_withRetrofitMimeTypedInput_(@"", 400, @"invalid request", JavaUtilCollections_emptyList(), nil);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofitClientResponse;", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeWithRetrofitClientRequest:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "execute", "LRetrofitClientRequest;", "LJavaIoIOException;", "LRetrofitErrorHandlerTest;" };
  static const J2ObjcClassInfo _RetrofitErrorHandlerTest_MockInvalidResponseClient = { "MockInvalidResponseClient", "retrofit", ptrTable, methods, NULL, 7, 0x8, 2, 0, 3, -1, -1, -1, -1 };
  return &_RetrofitErrorHandlerTest_MockInvalidResponseClient;
}

@end

void RetrofitErrorHandlerTest_MockInvalidResponseClient_init(RetrofitErrorHandlerTest_MockInvalidResponseClient *self) {
  NSObject_init(self);
}

RetrofitErrorHandlerTest_MockInvalidResponseClient *new_RetrofitErrorHandlerTest_MockInvalidResponseClient_init() {
  J2OBJC_NEW_IMPL(RetrofitErrorHandlerTest_MockInvalidResponseClient, init)
}

RetrofitErrorHandlerTest_MockInvalidResponseClient *create_RetrofitErrorHandlerTest_MockInvalidResponseClient_init() {
  J2OBJC_CREATE_IMPL(RetrofitErrorHandlerTest_MockInvalidResponseClient, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitErrorHandlerTest_MockInvalidResponseClient)

@implementation RetrofitErrorHandlerTest_1

- (instancetype)initWithRetrofitErrorHandlerTest_TestException:(RetrofitErrorHandlerTest_TestException *)capture$0 {
  RetrofitErrorHandlerTest_1_initWithRetrofitErrorHandlerTest_TestException_(self, capture$0);
  return self;
}

- (void)successWithId:(RetrofitClientResponse *)response
withRetrofitClientResponse:(RetrofitClientResponse *)response2 {
  OrgAssertjCoreApiAssertions_failBecauseExceptionWasNotThrownWithIOSClass_(RetrofitErrorHandlerTest_TestException_class_());
}

- (void)failureWithRetrofitRetrofitError:(RetrofitRetrofitError *)error {
  [((OrgAssertjCoreApiAbstractThrowableAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSException_([((RetrofitRetrofitError *) nil_chk(error)) getCause]))) isSameAsWithId:val$exception_];
}

- (void)dealloc {
  RELEASE_(val$exception_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofitErrorHandlerTest_TestException:);
  methods[1].selector = @selector(successWithId:withRetrofitClientResponse:);
  methods[2].selector = @selector(failureWithRetrofitRetrofitError:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$exception_", "LRetrofitErrorHandlerTest_TestException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "success", "LRetrofitClientResponse;LRetrofitClientResponse;", "failure", "LRetrofitRetrofitError;", "LRetrofitErrorHandlerTest;", "onErrorWrappedCustomException", "Ljava/lang/Object;Lretrofit/Callback<Lretrofit/client/Response;>;" };
  static const J2ObjcClassInfo _RetrofitErrorHandlerTest_1 = { "", "retrofit", ptrTable, methods, fields, 7, 0x8018, 3, 1, 4, -1, 5, 6, -1 };
  return &_RetrofitErrorHandlerTest_1;
}

@end

void RetrofitErrorHandlerTest_1_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_1 *self, RetrofitErrorHandlerTest_TestException *capture$0) {
  JreStrongAssign(&self->val$exception_, capture$0);
  NSObject_init(self);
}

RetrofitErrorHandlerTest_1 *new_RetrofitErrorHandlerTest_1_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_TestException *capture$0) {
  J2OBJC_NEW_IMPL(RetrofitErrorHandlerTest_1, initWithRetrofitErrorHandlerTest_TestException_, capture$0)
}

RetrofitErrorHandlerTest_1 *create_RetrofitErrorHandlerTest_1_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_TestException *capture$0) {
  J2OBJC_CREATE_IMPL(RetrofitErrorHandlerTest_1, initWithRetrofitErrorHandlerTest_TestException_, capture$0)
}

@implementation RetrofitErrorHandlerTest_2

- (instancetype)initWithRetrofitErrorHandlerTest_TestException:(RetrofitErrorHandlerTest_TestException *)capture$0 {
  RetrofitErrorHandlerTest_2_initWithRetrofitErrorHandlerTest_TestException_(self, capture$0);
  return self;
}

- (void)onCompleted {
  OrgAssertjCoreApiAssertions_failBecauseExceptionWasNotThrownWithIOSClass_(RetrofitErrorHandlerTest_TestException_class_());
}

- (void)onErrorWithNSException:(NSException *)e {
  [((OrgAssertjCoreApiAbstractThrowableAssert *) nil_chk(OrgAssertjCoreApiAssertions_assertThatWithNSException_(e))) isSameAsWithId:val$exception_];
}

- (void)onNextWithId:(RetrofitClientResponse *)response {
  OrgAssertjCoreApiAssertions_failBecauseExceptionWasNotThrownWithIOSClass_(RetrofitErrorHandlerTest_TestException_class_());
}

- (void)dealloc {
  RELEASE_(val$exception_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofitErrorHandlerTest_TestException:);
  methods[1].selector = @selector(onCompleted);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onNextWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$exception_", "LRetrofitErrorHandlerTest_TestException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onNext", "LRetrofitClientResponse;", "LRetrofitErrorHandlerTest;", "onErrorCustomException", "Ljava/lang/Object;Lrx/Observer<Lretrofit/client/Response;>;" };
  static const J2ObjcClassInfo _RetrofitErrorHandlerTest_2 = { "", "retrofit", ptrTable, methods, fields, 7, 0x8018, 4, 1, 4, -1, 5, 6, -1 };
  return &_RetrofitErrorHandlerTest_2;
}

@end

void RetrofitErrorHandlerTest_2_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_2 *self, RetrofitErrorHandlerTest_TestException *capture$0) {
  JreStrongAssign(&self->val$exception_, capture$0);
  NSObject_init(self);
}

RetrofitErrorHandlerTest_2 *new_RetrofitErrorHandlerTest_2_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_TestException *capture$0) {
  J2OBJC_NEW_IMPL(RetrofitErrorHandlerTest_2, initWithRetrofitErrorHandlerTest_TestException_, capture$0)
}

RetrofitErrorHandlerTest_2 *create_RetrofitErrorHandlerTest_2_initWithRetrofitErrorHandlerTest_TestException_(RetrofitErrorHandlerTest_TestException *capture$0) {
  J2OBJC_CREATE_IMPL(RetrofitErrorHandlerTest_2, initWithRetrofitErrorHandlerTest_TestException_, capture$0)
}
