//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilDates.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/concurrent/TimeUnit.h"

inline JavaTextDateFormat *OrgAssertjCoreUtilDates_get_ISO_DATE_FORMAT();
static JavaTextDateFormat *OrgAssertjCoreUtilDates_ISO_DATE_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreUtilDates, ISO_DATE_FORMAT, JavaTextDateFormat *)

inline JavaTextDateFormat *OrgAssertjCoreUtilDates_get_ISO_DATE_TIME_FORMAT();
static JavaTextDateFormat *OrgAssertjCoreUtilDates_ISO_DATE_TIME_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreUtilDates, ISO_DATE_TIME_FORMAT, JavaTextDateFormat *)

inline JavaTextDateFormat *OrgAssertjCoreUtilDates_get_ISO_DATE_TIME_FORMAT_WITH_MS();
static JavaTextDateFormat *OrgAssertjCoreUtilDates_ISO_DATE_TIME_FORMAT_WITH_MS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreUtilDates, ISO_DATE_TIME_FORMAT_WITH_MS, JavaTextDateFormat *)

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreUtilDates)

@implementation OrgAssertjCoreUtilDates

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilDates_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaTextDateFormat *)newIsoDateFormat {
  return OrgAssertjCoreUtilDates_newIsoDateFormat();
}

+ (JavaTextDateFormat *)newIsoDateTimeFormat {
  return OrgAssertjCoreUtilDates_newIsoDateTimeFormat();
}

+ (JavaTextDateFormat *)newIsoDateTimeWithMsFormat {
  return OrgAssertjCoreUtilDates_newIsoDateTimeWithMsFormat();
}

+ (NSString *)formatAsDatetimeWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_formatAsDatetimeWithJavaUtilDate_(date);
}

+ (NSString *)formatAsDatetimeWithMsWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_formatAsDatetimeWithMsWithJavaUtilDate_(date);
}

+ (NSString *)formatAsDatetimeWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgAssertjCoreUtilDates_formatAsDatetimeWithJavaUtilCalendar_(calendar);
}

+ (JavaUtilDate *)parseWithNSString:(NSString *)dateAsString {
  return OrgAssertjCoreUtilDates_parseWithNSString_(dateAsString);
}

+ (JavaUtilDate *)parseDatetimeWithNSString:(NSString *)dateAsString {
  return OrgAssertjCoreUtilDates_parseDatetimeWithNSString_(dateAsString);
}

+ (JavaUtilDate *)parseDatetimeWithMsWithNSString:(NSString *)dateAsString {
  return OrgAssertjCoreUtilDates_parseDatetimeWithMsWithNSString_(dateAsString);
}

+ (JavaUtilCalendar *)toCalendarWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(date);
}

+ (jint)yearOfWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_yearOfWithJavaUtilDate_(date);
}

+ (jint)monthOfWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_monthOfWithJavaUtilDate_(date);
}

+ (jint)dayOfMonthOfWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_dayOfMonthOfWithJavaUtilDate_(date);
}

+ (jint)dayOfWeekOfWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_dayOfWeekOfWithJavaUtilDate_(date);
}

+ (jint)hourOfDayOfWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_hourOfDayOfWithJavaUtilDate_(date);
}

+ (jint)minuteOfWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_minuteOfWithJavaUtilDate_(date);
}

+ (jint)secondOfWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_secondOfWithJavaUtilDate_(date);
}

+ (jint)millisecondOfWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_millisecondOfWithJavaUtilDate_(date);
}

+ (jlong)timeDifferenceWithJavaUtilDate:(JavaUtilDate *)date1
                       withJavaUtilDate:(JavaUtilDate *)date2 {
  return OrgAssertjCoreUtilDates_timeDifferenceWithJavaUtilDate_withJavaUtilDate_(date1, date2);
}

+ (JavaUtilDate *)truncateTimeWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgAssertjCoreUtilDates_truncateTimeWithJavaUtilDate_(date);
}

+ (JavaUtilDate *)now {
  return OrgAssertjCoreUtilDates_now();
}

+ (JavaUtilDate *)yesterday {
  return OrgAssertjCoreUtilDates_yesterday();
}

+ (JavaUtilDate *)tomorrow {
  return OrgAssertjCoreUtilDates_tomorrow();
}

+ (NSString *)formatTimeDifferenceWithJavaUtilDate:(JavaUtilDate *)date1
                                  withJavaUtilDate:(JavaUtilDate *)date2 {
  return OrgAssertjCoreUtilDates_formatTimeDifferenceWithJavaUtilDate_withJavaUtilDate_(date1, date2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaTextDateFormat;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaTextDateFormat;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaTextDateFormat;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x29, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x29, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x29, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x29, 6, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x29, 7, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x9, 8, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 14, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 15, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 16, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 19, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 20, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newIsoDateFormat);
  methods[2].selector = @selector(newIsoDateTimeFormat);
  methods[3].selector = @selector(newIsoDateTimeWithMsFormat);
  methods[4].selector = @selector(formatAsDatetimeWithJavaUtilDate:);
  methods[5].selector = @selector(formatAsDatetimeWithMsWithJavaUtilDate:);
  methods[6].selector = @selector(formatAsDatetimeWithJavaUtilCalendar:);
  methods[7].selector = @selector(parseWithNSString:);
  methods[8].selector = @selector(parseDatetimeWithNSString:);
  methods[9].selector = @selector(parseDatetimeWithMsWithNSString:);
  methods[10].selector = @selector(toCalendarWithJavaUtilDate:);
  methods[11].selector = @selector(yearOfWithJavaUtilDate:);
  methods[12].selector = @selector(monthOfWithJavaUtilDate:);
  methods[13].selector = @selector(dayOfMonthOfWithJavaUtilDate:);
  methods[14].selector = @selector(dayOfWeekOfWithJavaUtilDate:);
  methods[15].selector = @selector(hourOfDayOfWithJavaUtilDate:);
  methods[16].selector = @selector(minuteOfWithJavaUtilDate:);
  methods[17].selector = @selector(secondOfWithJavaUtilDate:);
  methods[18].selector = @selector(millisecondOfWithJavaUtilDate:);
  methods[19].selector = @selector(timeDifferenceWithJavaUtilDate:withJavaUtilDate:);
  methods[20].selector = @selector(truncateTimeWithJavaUtilDate:);
  methods[21].selector = @selector(now);
  methods[22].selector = @selector(yesterday);
  methods[23].selector = @selector(tomorrow);
  methods[24].selector = @selector(formatTimeDifferenceWithJavaUtilDate:withJavaUtilDate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ISO_DATE_FORMAT", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "ISO_DATE_TIME_FORMAT", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "ISO_DATE_TIME_FORMAT_WITH_MS", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
  };
  static const void *ptrTable[] = { "formatAsDatetime", "LJavaUtilDate;", "formatAsDatetimeWithMs", "LJavaUtilCalendar;", "parse", "LNSString;", "parseDatetime", "parseDatetimeWithMs", "toCalendar", "yearOf", "monthOf", "dayOfMonthOf", "dayOfWeekOf", "hourOfDayOf", "minuteOf", "secondOf", "millisecondOf", "timeDifference", "LJavaUtilDate;LJavaUtilDate;", "truncateTime", "formatTimeDifference", &OrgAssertjCoreUtilDates_ISO_DATE_FORMAT, &OrgAssertjCoreUtilDates_ISO_DATE_TIME_FORMAT, &OrgAssertjCoreUtilDates_ISO_DATE_TIME_FORMAT_WITH_MS };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilDates = { "Dates", "org.assertj.core.util", ptrTable, methods, fields, 7, 0x1, 25, 3, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilDates;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreUtilDates class]) {
    JreStrongAssign(&OrgAssertjCoreUtilDates_ISO_DATE_FORMAT, OrgAssertjCoreUtilDates_newIsoDateFormat());
    JreStrongAssign(&OrgAssertjCoreUtilDates_ISO_DATE_TIME_FORMAT, OrgAssertjCoreUtilDates_newIsoDateTimeFormat());
    JreStrongAssign(&OrgAssertjCoreUtilDates_ISO_DATE_TIME_FORMAT_WITH_MS, OrgAssertjCoreUtilDates_newIsoDateTimeWithMsFormat());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreUtilDates)
  }
}

@end

void OrgAssertjCoreUtilDates_init(OrgAssertjCoreUtilDates *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilDates *new_OrgAssertjCoreUtilDates_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilDates, init)
}

OrgAssertjCoreUtilDates *create_OrgAssertjCoreUtilDates_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilDates, init)
}

JavaTextDateFormat *OrgAssertjCoreUtilDates_newIsoDateFormat() {
  OrgAssertjCoreUtilDates_initialize();
  return create_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd");
}

JavaTextDateFormat *OrgAssertjCoreUtilDates_newIsoDateTimeFormat() {
  OrgAssertjCoreUtilDates_initialize();
  return create_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd'T'HH:mm:ss");
}

JavaTextDateFormat *OrgAssertjCoreUtilDates_newIsoDateTimeWithMsFormat() {
  OrgAssertjCoreUtilDates_initialize();
  return create_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd'T'HH:mm:ss.SSS");
}

NSString *OrgAssertjCoreUtilDates_formatAsDatetimeWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  @synchronized(OrgAssertjCoreUtilDates_class_()) {
    return date == nil ? nil : [((JavaTextDateFormat *) nil_chk(OrgAssertjCoreUtilDates_ISO_DATE_TIME_FORMAT)) formatWithJavaUtilDate:date];
  }
}

NSString *OrgAssertjCoreUtilDates_formatAsDatetimeWithMsWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  @synchronized(OrgAssertjCoreUtilDates_class_()) {
    return date == nil ? nil : [((JavaTextDateFormat *) nil_chk(OrgAssertjCoreUtilDates_ISO_DATE_TIME_FORMAT_WITH_MS)) formatWithJavaUtilDate:date];
  }
}

NSString *OrgAssertjCoreUtilDates_formatAsDatetimeWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgAssertjCoreUtilDates_initialize();
  return calendar == nil ? nil : OrgAssertjCoreUtilDates_formatAsDatetimeWithJavaUtilDate_([calendar getTime]);
}

JavaUtilDate *OrgAssertjCoreUtilDates_parseWithNSString_(NSString *dateAsString) {
  OrgAssertjCoreUtilDates_initialize();
  @synchronized(OrgAssertjCoreUtilDates_class_()) {
    @try {
      return dateAsString == nil ? nil : [((JavaTextDateFormat *) nil_chk(OrgAssertjCoreUtilDates_ISO_DATE_FORMAT)) parseWithNSString:dateAsString];
    }
    @catch (JavaTextParseException *e) {
      @throw create_JavaLangRuntimeException_initWithNSException_(e);
    }
  }
}

JavaUtilDate *OrgAssertjCoreUtilDates_parseDatetimeWithNSString_(NSString *dateAsString) {
  OrgAssertjCoreUtilDates_initialize();
  @synchronized(OrgAssertjCoreUtilDates_class_()) {
    @try {
      return dateAsString == nil ? nil : [((JavaTextDateFormat *) nil_chk(OrgAssertjCoreUtilDates_ISO_DATE_TIME_FORMAT)) parseWithNSString:dateAsString];
    }
    @catch (JavaTextParseException *e) {
      @throw create_JavaLangRuntimeException_initWithNSException_(e);
    }
  }
}

JavaUtilDate *OrgAssertjCoreUtilDates_parseDatetimeWithMsWithNSString_(NSString *dateAsString) {
  OrgAssertjCoreUtilDates_initialize();
  @synchronized(OrgAssertjCoreUtilDates_class_()) {
    @try {
      return dateAsString == nil ? nil : [((JavaTextDateFormat *) nil_chk(OrgAssertjCoreUtilDates_ISO_DATE_TIME_FORMAT_WITH_MS)) parseWithNSString:dateAsString];
    }
    @catch (JavaTextParseException *e) {
      @throw create_JavaLangRuntimeException_initWithNSException_(e);
    }
  }
}

JavaUtilCalendar *OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  if (date == nil) {
    return nil;
  }
  JavaUtilCalendar *calendar = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:date];
  return calendar;
}

jint OrgAssertjCoreUtilDates_yearOfWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  return [((JavaUtilCalendar *) nil_chk(OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(date))) getWithInt:JavaUtilCalendar_YEAR];
}

jint OrgAssertjCoreUtilDates_monthOfWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  return [((JavaUtilCalendar *) nil_chk(OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(date))) getWithInt:JavaUtilCalendar_MONTH] + 1;
}

jint OrgAssertjCoreUtilDates_dayOfMonthOfWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  return [((JavaUtilCalendar *) nil_chk(OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(date))) getWithInt:JavaUtilCalendar_DAY_OF_MONTH];
}

jint OrgAssertjCoreUtilDates_dayOfWeekOfWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  return [((JavaUtilCalendar *) nil_chk(OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(date))) getWithInt:JavaUtilCalendar_DAY_OF_WEEK];
}

jint OrgAssertjCoreUtilDates_hourOfDayOfWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  return [((JavaUtilCalendar *) nil_chk(OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(date))) getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
}

jint OrgAssertjCoreUtilDates_minuteOfWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  return [((JavaUtilCalendar *) nil_chk(OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(date))) getWithInt:JavaUtilCalendar_MINUTE];
}

jint OrgAssertjCoreUtilDates_secondOfWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  return [((JavaUtilCalendar *) nil_chk(OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(date))) getWithInt:JavaUtilCalendar_SECOND];
}

jint OrgAssertjCoreUtilDates_millisecondOfWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  return [((JavaUtilCalendar *) nil_chk(OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(date))) getWithInt:JavaUtilCalendar_MILLISECOND];
}

jlong OrgAssertjCoreUtilDates_timeDifferenceWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *date1, JavaUtilDate *date2) {
  OrgAssertjCoreUtilDates_initialize();
  if (date1 == nil || date2 == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Expecting date parameter not to be null");
  return JavaLangMath_absWithLong_([date1 getTime] - [date2 getTime]);
}

JavaUtilDate *OrgAssertjCoreUtilDates_truncateTimeWithJavaUtilDate_(JavaUtilDate *date) {
  OrgAssertjCoreUtilDates_initialize();
  if (date == nil) return nil;
  JavaUtilCalendar *cal = OrgAssertjCoreUtilDates_toCalendarWithJavaUtilDate_(date);
  [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:0];
  [cal setWithInt:JavaUtilCalendar_MINUTE withInt:0];
  [cal setWithInt:JavaUtilCalendar_SECOND withInt:0];
  [cal setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
  return [cal getTime];
}

JavaUtilDate *OrgAssertjCoreUtilDates_now() {
  OrgAssertjCoreUtilDates_initialize();
  return create_JavaUtilDate_init();
}

JavaUtilDate *OrgAssertjCoreUtilDates_yesterday() {
  OrgAssertjCoreUtilDates_initialize();
  JavaUtilCalendar *cal = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(cal)) addWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:-1];
  return [cal getTime];
}

JavaUtilDate *OrgAssertjCoreUtilDates_tomorrow() {
  OrgAssertjCoreUtilDates_initialize();
  JavaUtilCalendar *cal = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(cal)) addWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:1];
  return [cal getTime];
}

NSString *OrgAssertjCoreUtilDates_formatTimeDifferenceWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *date1, JavaUtilDate *date2) {
  OrgAssertjCoreUtilDates_initialize();
  jlong millisecondsDiff = OrgAssertjCoreUtilDates_timeDifferenceWithJavaUtilDate_withJavaUtilDate_(date1, date2);
  jlong secondsDiff = millisecondsDiff / [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS))) toMillisWithLong:1];
  jlong minutesDiff = millisecondsDiff / [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES))) toMillisWithLong:1];
  jlong hoursDiff = millisecondsDiff / [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, HOURS))) toMillisWithLong:1];
  jlong daysDiff = millisecondsDiff / [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS))) toMillisWithLong:1];
  jlong hourFieldDiff = hoursDiff - [JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS) toHoursWithLong:daysDiff];
  jlong minuteFieldDiff = minutesDiff - [JreLoadEnum(JavaUtilConcurrentTimeUnit, HOURS) toMinutesWithLong:hoursDiff];
  jlong secondFieldDiff = secondsDiff - [JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES) toSecondsWithLong:minutesDiff];
  jlong millisecondsFieldDiff = millisecondsDiff % [JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS) toMillisWithLong:1];
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_init();
  if (daysDiff > 0) [result appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"%dd", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(daysDiff) } count:1 type:NSObject_class_()])];
  if (hourFieldDiff > 0) {
    if (daysDiff > 0 && minuteFieldDiff == 0 && secondFieldDiff == 0 && millisecondsFieldDiff == 0) {
      [result appendWithNSString:@" and "];
    }
    else if (daysDiff > 0) {
      [result appendWithNSString:@" "];
    }
    [result appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"%dh", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(hourFieldDiff) } count:1 type:NSObject_class_()])];
  }
  if (minuteFieldDiff > 0) {
    jboolean notFirstDiff = daysDiff > 0 || hourFieldDiff > 0;
    if (notFirstDiff && secondFieldDiff == 0 && millisecondsFieldDiff == 0) {
      [result appendWithNSString:@" and "];
    }
    else if (notFirstDiff) {
      [result appendWithNSString:@" "];
    }
    [result appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"%dm", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(minuteFieldDiff) } count:1 type:NSObject_class_()])];
  }
  if (secondFieldDiff > 0) {
    jboolean notFirstDiff = daysDiff > 0 || hourFieldDiff > 0 || minuteFieldDiff > 0;
    if (notFirstDiff && millisecondsFieldDiff == 0) {
      [result appendWithNSString:@" and "];
    }
    else if (notFirstDiff) {
      [result appendWithNSString:@" "];
    }
    [result appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"%ds", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(secondFieldDiff) } count:1 type:NSObject_class_()])];
  }
  if (millisecondsFieldDiff > 0) {
    if ([result length] > 0) [result appendWithNSString:@" and "];
    [result appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"%dms", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(millisecondsFieldDiff) } count:1 type:NSObject_class_()])];
  }
  return [result description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilDates)
