//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldContainCharSequenceSequence.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/lang/CharSequence.h"

@interface OrgAssertjCoreErrorShouldContainCharSequenceSequence ()

- (instancetype)initWithNSString:(NSString *)format
        withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
   withJavaLangCharSequenceArray:(IOSObjectArray *)strings
        withJavaLangCharSequence:(id<JavaLangCharSequence>)foundButBadOrder
        withJavaLangCharSequence:(id<JavaLangCharSequence>)foundButBadOrder2
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldContainCharSequenceSequence_initWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainCharSequenceSequence *self, NSString *format, id<JavaLangCharSequence> actual, IOSObjectArray *strings, id<JavaLangCharSequence> foundButBadOrder, id<JavaLangCharSequence> foundButBadOrder2, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainCharSequenceSequence *new_OrgAssertjCoreErrorShouldContainCharSequenceSequence_initWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(NSString *format, id<JavaLangCharSequence> actual, IOSObjectArray *strings, id<JavaLangCharSequence> foundButBadOrder, id<JavaLangCharSequence> foundButBadOrder2, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldContainCharSequenceSequence *create_OrgAssertjCoreErrorShouldContainCharSequenceSequence_initWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(NSString *format, id<JavaLangCharSequence> actual, IOSObjectArray *strings, id<JavaLangCharSequence> foundButBadOrder, id<JavaLangCharSequence> foundButBadOrder2, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

@implementation OrgAssertjCoreErrorShouldContainCharSequenceSequence

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainSequenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                              withJavaLangCharSequenceArray:(IOSObjectArray *)strings
                                                                                    withInt:(jint)firstBadOrderIndex {
  return OrgAssertjCoreErrorShouldContainCharSequenceSequence_shouldContainSequenceWithJavaLangCharSequence_withJavaLangCharSequenceArray_withInt_(actual, strings, firstBadOrderIndex);
}

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainSequenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                              withJavaLangCharSequenceArray:(IOSObjectArray *)strings
                                                                                    withInt:(jint)badOrderIndex
                                               withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  return OrgAssertjCoreErrorShouldContainCharSequenceSequence_shouldContainSequenceWithJavaLangCharSequence_withJavaLangCharSequenceArray_withInt_withOrgAssertjCoreInternalComparisonStrategy_(actual, strings, badOrderIndex, comparisonStrategy);
}

- (instancetype)initWithNSString:(NSString *)format
        withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
   withJavaLangCharSequenceArray:(IOSObjectArray *)strings
        withJavaLangCharSequence:(id<JavaLangCharSequence>)foundButBadOrder
        withJavaLangCharSequence:(id<JavaLangCharSequence>)foundButBadOrder2
withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreErrorShouldContainCharSequenceSequence_initWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(self, format, actual, strings, foundButBadOrder, foundButBadOrder2, comparisonStrategy);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldContainSequenceWithJavaLangCharSequence:withJavaLangCharSequenceArray:withInt:);
  methods[1].selector = @selector(shouldContainSequenceWithJavaLangCharSequence:withJavaLangCharSequenceArray:withInt:withOrgAssertjCoreInternalComparisonStrategy:);
  methods[2].selector = @selector(initWithNSString:withJavaLangCharSequence:withJavaLangCharSequenceArray:withJavaLangCharSequence:withJavaLangCharSequence:withOrgAssertjCoreInternalComparisonStrategy:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldContainSequence", "LJavaLangCharSequence;[LJavaLangCharSequence;I", "LJavaLangCharSequence;[LJavaLangCharSequence;ILOrgAssertjCoreInternalComparisonStrategy;", "LNSString;LJavaLangCharSequence;[LJavaLangCharSequence;LJavaLangCharSequence;LJavaLangCharSequence;LOrgAssertjCoreInternalComparisonStrategy;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldContainCharSequenceSequence = { "ShouldContainCharSequenceSequence", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldContainCharSequenceSequence;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequenceSequence_shouldContainSequenceWithJavaLangCharSequence_withJavaLangCharSequenceArray_withInt_(id<JavaLangCharSequence> actual, IOSObjectArray *strings, jint firstBadOrderIndex) {
  OrgAssertjCoreErrorShouldContainCharSequenceSequence_initialize();
  return OrgAssertjCoreErrorShouldContainCharSequenceSequence_shouldContainSequenceWithJavaLangCharSequence_withJavaLangCharSequenceArray_withInt_withOrgAssertjCoreInternalComparisonStrategy_(actual, strings, firstBadOrderIndex, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainCharSequenceSequence_shouldContainSequenceWithJavaLangCharSequence_withJavaLangCharSequenceArray_withInt_withOrgAssertjCoreInternalComparisonStrategy_(id<JavaLangCharSequence> actual, IOSObjectArray *strings, jint badOrderIndex, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorShouldContainCharSequenceSequence_initialize();
  return create_OrgAssertjCoreErrorShouldContainCharSequenceSequence_initWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(@"\nExpecting:\n <%s>\nto contain the following CharSequences in this order:\n <%s>\nbut <%s> was found before <%s>\n%s", actual, strings, IOSObjectArray_Get(nil_chk(strings), badOrderIndex + 1), IOSObjectArray_Get(strings, badOrderIndex), comparisonStrategy);
}

void OrgAssertjCoreErrorShouldContainCharSequenceSequence_initWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreErrorShouldContainCharSequenceSequence *self, NSString *format, id<JavaLangCharSequence> actual, IOSObjectArray *strings, id<JavaLangCharSequence> foundButBadOrder, id<JavaLangCharSequence> foundButBadOrder2, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, format, [IOSObjectArray arrayWithObjects:(id[]){ actual, strings, foundButBadOrder, foundButBadOrder2, comparisonStrategy } count:5 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldContainCharSequenceSequence *new_OrgAssertjCoreErrorShouldContainCharSequenceSequence_initWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(NSString *format, id<JavaLangCharSequence> actual, IOSObjectArray *strings, id<JavaLangCharSequence> foundButBadOrder, id<JavaLangCharSequence> foundButBadOrder2, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldContainCharSequenceSequence, initWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_, format, actual, strings, foundButBadOrder, foundButBadOrder2, comparisonStrategy)
}

OrgAssertjCoreErrorShouldContainCharSequenceSequence *create_OrgAssertjCoreErrorShouldContainCharSequenceSequence_initWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(NSString *format, id<JavaLangCharSequence> actual, IOSObjectArray *strings, id<JavaLangCharSequence> foundButBadOrder, id<JavaLangCharSequence> foundButBadOrder2, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldContainCharSequenceSequence, initWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_, format, actual, strings, foundButBadOrder, foundButBadOrder2, comparisonStrategy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldContainCharSequenceSequence)
