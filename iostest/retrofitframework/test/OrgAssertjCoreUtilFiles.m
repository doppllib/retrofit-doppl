//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreUtilArrays.h"
#include "OrgAssertjCoreUtilCloseables.h"
#include "OrgAssertjCoreUtilFiles.h"
#include "OrgAssertjCoreUtilFilesException.h"
#include "OrgAssertjCoreUtilFlushables.h"
#include "OrgAssertjCoreUtilLists.h"
#include "OrgAssertjCoreUtilStrings.h"
#include "java/io/BufferedReader.h"
#include "java/io/Closeable.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/Flushable.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface OrgAssertjCoreUtilFiles ()

+ (id<JavaUtilList>)fileNamesInWithJavaIoFile:(JavaIoFile *)dir
                                  withBoolean:(jboolean)recurse;

+ (JavaIoFile *)createFileIfPathIsNotANonEmptyDirectoryWithNSString:(NSString *)path;

+ (OrgAssertjCoreUtilFilesException *)cannotCreateNewFileWithNSString:(NSString *)path
                                                         withNSString:(NSString *)reason;

+ (OrgAssertjCoreUtilFilesException *)cannotCreateNewFileWithNSString:(NSString *)path
                                                withJavaLangException:(JavaLangException *)cause;

+ (OrgAssertjCoreUtilFilesException *)cannotCreateNewFileWithNSString:(NSString *)path
                                                         withNSString:(NSString *)reason
                                                withJavaLangException:(JavaLangException *)cause;

+ (NSString *)loadContentsWithJavaIoFile:(JavaIoFile *)file
               withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

+ (id<JavaUtilList>)loadLinesWithJavaIoFile:(JavaIoFile *)file
                  withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (instancetype)init;

@end

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreUtilFiles_fileNamesInWithJavaIoFile_withBoolean_(JavaIoFile *dir, jboolean recurse);

__attribute__((unused)) static JavaIoFile *OrgAssertjCoreUtilFiles_createFileIfPathIsNotANonEmptyDirectoryWithNSString_(NSString *path);

__attribute__((unused)) static OrgAssertjCoreUtilFilesException *OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_(NSString *path, NSString *reason);

__attribute__((unused)) static OrgAssertjCoreUtilFilesException *OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withJavaLangException_(NSString *path, JavaLangException *cause);

__attribute__((unused)) static OrgAssertjCoreUtilFilesException *OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_withJavaLangException_(NSString *path, NSString *reason, JavaLangException *cause);

__attribute__((unused)) static NSString *OrgAssertjCoreUtilFiles_loadContentsWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset);

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreUtilFiles_loadLinesWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset);

__attribute__((unused)) static void OrgAssertjCoreUtilFiles_init(OrgAssertjCoreUtilFiles *self);

__attribute__((unused)) static OrgAssertjCoreUtilFiles *new_OrgAssertjCoreUtilFiles_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreUtilFiles *create_OrgAssertjCoreUtilFiles_init();

@implementation OrgAssertjCoreUtilFiles

+ (id<JavaUtilList>)fileNamesInWithNSString:(NSString *)dirName
                                withBoolean:(jboolean)recurse {
  return OrgAssertjCoreUtilFiles_fileNamesInWithNSString_withBoolean_(dirName, recurse);
}

+ (id<JavaUtilList>)fileNamesInWithJavaIoFile:(JavaIoFile *)dir
                                  withBoolean:(jboolean)recurse {
  return OrgAssertjCoreUtilFiles_fileNamesInWithJavaIoFile_withBoolean_(dir, recurse);
}

+ (JavaIoFile *)temporaryFolder {
  return OrgAssertjCoreUtilFiles_temporaryFolder();
}

+ (NSString *)temporaryFolderPath {
  return OrgAssertjCoreUtilFiles_temporaryFolderPath();
}

+ (JavaIoFile *)newTemporaryFile {
  return OrgAssertjCoreUtilFiles_newTemporaryFile();
}

+ (JavaIoFile *)newTemporaryFolder {
  return OrgAssertjCoreUtilFiles_newTemporaryFolder();
}

+ (JavaIoFile *)newFileWithNSString:(NSString *)path {
  return OrgAssertjCoreUtilFiles_newFileWithNSString_(path);
}

+ (JavaIoFile *)newFolderWithNSString:(NSString *)path {
  return OrgAssertjCoreUtilFiles_newFolderWithNSString_(path);
}

+ (JavaIoFile *)createFileIfPathIsNotANonEmptyDirectoryWithNSString:(NSString *)path {
  return OrgAssertjCoreUtilFiles_createFileIfPathIsNotANonEmptyDirectoryWithNSString_(path);
}

+ (OrgAssertjCoreUtilFilesException *)cannotCreateNewFileWithNSString:(NSString *)path
                                                         withNSString:(NSString *)reason {
  return OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_(path, reason);
}

+ (OrgAssertjCoreUtilFilesException *)cannotCreateNewFileWithNSString:(NSString *)path
                                                withJavaLangException:(JavaLangException *)cause {
  return OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withJavaLangException_(path, cause);
}

+ (OrgAssertjCoreUtilFilesException *)cannotCreateNewFileWithNSString:(NSString *)path
                                                         withNSString:(NSString *)reason
                                                withJavaLangException:(JavaLangException *)cause {
  return OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_withJavaLangException_(path, reason, cause);
}

+ (void)flushAndCloseWithJavaIoWriter:(JavaIoWriter *)writer {
  OrgAssertjCoreUtilFiles_flushAndCloseWithJavaIoWriter_(writer);
}

+ (void)flushAndCloseWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  OrgAssertjCoreUtilFiles_flushAndCloseWithJavaIoOutputStream_(outArg);
}

+ (JavaIoFile *)currentFolder {
  return OrgAssertjCoreUtilFiles_currentFolder();
}

+ (void)delete__WithJavaIoFile:(JavaIoFile *)file {
  OrgAssertjCoreUtilFiles_delete__WithJavaIoFile_(file);
}

+ (NSString *)contentOfWithJavaIoFile:(JavaIoFile *)file
                         withNSString:(NSString *)charsetName {
  return OrgAssertjCoreUtilFiles_contentOfWithJavaIoFile_withNSString_(file, charsetName);
}

+ (NSString *)contentOfWithJavaIoFile:(JavaIoFile *)file
            withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  return OrgAssertjCoreUtilFiles_contentOfWithJavaIoFile_withJavaNioCharsetCharset_(file, charset);
}

+ (NSString *)loadContentsWithJavaIoFile:(JavaIoFile *)file
               withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  return OrgAssertjCoreUtilFiles_loadContentsWithJavaIoFile_withJavaNioCharsetCharset_(file, charset);
}

+ (id<JavaUtilList>)linesOfWithJavaIoFile:(JavaIoFile *)file
                withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  return OrgAssertjCoreUtilFiles_linesOfWithJavaIoFile_withJavaNioCharsetCharset_(file, charset);
}

+ (id<JavaUtilList>)linesOfWithJavaIoFile:(JavaIoFile *)file
                             withNSString:(NSString *)charsetName {
  return OrgAssertjCoreUtilFiles_linesOfWithJavaIoFile_withNSString_(file, charsetName);
}

+ (id<JavaUtilList>)loadLinesWithJavaIoFile:(JavaIoFile *)file
                  withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  return OrgAssertjCoreUtilFiles_loadLinesWithJavaIoFile_withJavaNioCharsetCharset_(file, charset);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreUtilFiles_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 0, 3, -1, 4, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 7, 6, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0xa, 8, 6, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreUtilFilesException;", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreUtilFilesException;", 0xa, 9, 11, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreUtilFilesException;", 0xa, 9, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 15, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 21, 20, 22, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 23, 20, -1, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 23, 19, -1, 25, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 26, 20, 22, 24, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fileNamesInWithNSString:withBoolean:);
  methods[1].selector = @selector(fileNamesInWithJavaIoFile:withBoolean:);
  methods[2].selector = @selector(temporaryFolder);
  methods[3].selector = @selector(temporaryFolderPath);
  methods[4].selector = @selector(newTemporaryFile);
  methods[5].selector = @selector(newTemporaryFolder);
  methods[6].selector = @selector(newFileWithNSString:);
  methods[7].selector = @selector(newFolderWithNSString:);
  methods[8].selector = @selector(createFileIfPathIsNotANonEmptyDirectoryWithNSString:);
  methods[9].selector = @selector(cannotCreateNewFileWithNSString:withNSString:);
  methods[10].selector = @selector(cannotCreateNewFileWithNSString:withJavaLangException:);
  methods[11].selector = @selector(cannotCreateNewFileWithNSString:withNSString:withJavaLangException:);
  methods[12].selector = @selector(flushAndCloseWithJavaIoWriter:);
  methods[13].selector = @selector(flushAndCloseWithJavaIoOutputStream:);
  methods[14].selector = @selector(currentFolder);
  methods[15].selector = @selector(delete__WithJavaIoFile:);
  methods[16].selector = @selector(contentOfWithJavaIoFile:withNSString:);
  methods[17].selector = @selector(contentOfWithJavaIoFile:withJavaNioCharsetCharset:);
  methods[18].selector = @selector(loadContentsWithJavaIoFile:withJavaNioCharsetCharset:);
  methods[19].selector = @selector(linesOfWithJavaIoFile:withJavaNioCharsetCharset:);
  methods[20].selector = @selector(linesOfWithJavaIoFile:withNSString:);
  methods[21].selector = @selector(loadLinesWithJavaIoFile:withJavaNioCharsetCharset:);
  methods[22].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "fileNamesIn", "LNSString;Z", "(Ljava/lang/String;Z)Ljava/util/List<Ljava/lang/String;>;", "LJavaIoFile;Z", "(Ljava/io/File;Z)Ljava/util/List<Ljava/lang/String;>;", "newFile", "LNSString;", "newFolder", "createFileIfPathIsNotANonEmptyDirectory", "cannotCreateNewFile", "LNSString;LNSString;", "LNSString;LJavaLangException;", "LNSString;LNSString;LJavaLangException;", "flushAndClose", "LJavaIoWriter;", "LJavaIoOutputStream;", "delete", "LJavaIoFile;", "contentOf", "LJavaIoFile;LNSString;", "LJavaIoFile;LJavaNioCharsetCharset;", "loadContents", "LJavaIoIOException;", "linesOf", "(Ljava/io/File;Ljava/nio/charset/Charset;)Ljava/util/List<Ljava/lang/String;>;", "(Ljava/io/File;Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "loadLines" };
  static const J2ObjcClassInfo _OrgAssertjCoreUtilFiles = { "Files", "org.assertj.core.util", ptrTable, methods, NULL, 7, 0x1, 23, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreUtilFiles;
}

@end

id<JavaUtilList> OrgAssertjCoreUtilFiles_fileNamesInWithNSString_withBoolean_(NSString *dirName, jboolean recurse) {
  OrgAssertjCoreUtilFiles_initialize();
  JavaIoFile *dir = create_JavaIoFile_initWithNSString_(dirName);
  if (![dir isDirectory]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"%s is not a directory", [IOSObjectArray arrayWithObjects:(id[]){ OrgAssertjCoreUtilStrings_quoteWithNSString_(dirName) } count:1 type:NSObject_class_()]));
  }
  return OrgAssertjCoreUtilFiles_fileNamesInWithJavaIoFile_withBoolean_(dir, recurse);
}

id<JavaUtilList> OrgAssertjCoreUtilFiles_fileNamesInWithJavaIoFile_withBoolean_(JavaIoFile *dir, jboolean recurse) {
  OrgAssertjCoreUtilFiles_initialize();
  id<JavaUtilList> scriptNames = create_JavaUtilArrayList_init();
  IOSObjectArray *existingFiles = [((JavaIoFile *) nil_chk(dir)) listFiles];
  if (OrgAssertjCoreUtilArrays_isNullOrEmptyWithNSObjectArray_(existingFiles)) {
    return scriptNames;
  }
  {
    IOSObjectArray *a__ = existingFiles;
    JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *existingFile = *b__++;
      if ([((JavaIoFile *) nil_chk(existingFile)) isDirectory]) {
        if (recurse) {
          [scriptNames addAllWithJavaUtilCollection:OrgAssertjCoreUtilFiles_fileNamesInWithJavaIoFile_withBoolean_(existingFile, recurse)];
        }
        continue;
      }
      NSString *filename = [existingFile getAbsolutePath];
      if (![scriptNames containsWithId:filename]) {
        [scriptNames addWithId:filename];
      }
    }
  }
  return scriptNames;
}

JavaIoFile *OrgAssertjCoreUtilFiles_temporaryFolder() {
  OrgAssertjCoreUtilFiles_initialize();
  JavaIoFile *temp = create_JavaIoFile_initWithNSString_(OrgAssertjCoreUtilFiles_temporaryFolderPath());
  if (![temp isDirectory]) {
    @throw create_OrgAssertjCoreUtilFilesException_initWithNSString_(@"Unable to find temporary directory");
  }
  return temp;
}

NSString *OrgAssertjCoreUtilFiles_temporaryFolderPath() {
  OrgAssertjCoreUtilFiles_initialize();
  return [((OrgAssertjCoreUtilStrings_StringToAppend *) nil_chk(OrgAssertjCoreUtilStrings_appendWithNSString_(JreLoadStatic(JavaIoFile, separator)))) toWithNSString:JavaLangSystem_getPropertyWithNSString_(@"java.io.tmpdir")];
}

JavaIoFile *OrgAssertjCoreUtilFiles_newTemporaryFile() {
  OrgAssertjCoreUtilFiles_initialize();
  NSString *tempFileName = OrgAssertjCoreUtilStrings_concatWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ NSString_java_valueOfLong_(JavaLangSystem_currentTimeMillis()), @".txt" } count:2 type:NSObject_class_()]);
  return OrgAssertjCoreUtilFiles_newFileWithNSString_(OrgAssertjCoreUtilStrings_concatWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ OrgAssertjCoreUtilFiles_temporaryFolderPath(), tempFileName } count:2 type:NSObject_class_()]));
}

JavaIoFile *OrgAssertjCoreUtilFiles_newTemporaryFolder() {
  OrgAssertjCoreUtilFiles_initialize();
  NSString *tempFileName = NSString_java_valueOfLong_(JavaLangSystem_currentTimeMillis());
  return OrgAssertjCoreUtilFiles_newFolderWithNSString_(OrgAssertjCoreUtilStrings_concatWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ OrgAssertjCoreUtilFiles_temporaryFolderPath(), tempFileName } count:2 type:NSObject_class_()]));
}

JavaIoFile *OrgAssertjCoreUtilFiles_newFileWithNSString_(NSString *path) {
  OrgAssertjCoreUtilFiles_initialize();
  JavaIoFile *file = OrgAssertjCoreUtilFiles_createFileIfPathIsNotANonEmptyDirectoryWithNSString_(path);
  @try {
    if (![((JavaIoFile *) nil_chk(file)) createNewFile]) {
      @throw OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_(path, @"a file was found with the same path");
    }
  }
  @catch (JavaIoIOException *e) {
    @throw OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withJavaLangException_(path, e);
  }
  return file;
}

JavaIoFile *OrgAssertjCoreUtilFiles_newFolderWithNSString_(NSString *path) {
  OrgAssertjCoreUtilFiles_initialize();
  JavaIoFile *file = OrgAssertjCoreUtilFiles_createFileIfPathIsNotANonEmptyDirectoryWithNSString_(path);
  @try {
    if (![((JavaIoFile *) nil_chk(file)) mkdir]) {
      @throw OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_(path, @"a file was found with the same path");
    }
  }
  @catch (JavaLangException *e) {
    @throw OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withJavaLangException_(path, e);
  }
  return file;
}

JavaIoFile *OrgAssertjCoreUtilFiles_createFileIfPathIsNotANonEmptyDirectoryWithNSString_(NSString *path) {
  OrgAssertjCoreUtilFiles_initialize();
  JavaIoFile *file = create_JavaIoFile_initWithNSString_(path);
  if ([file isDirectory] && !OrgAssertjCoreUtilArrays_isNullOrEmptyWithNSObjectArray_([file list])) {
    @throw OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_(path, @"a non-empty directory was found with the same path");
  }
  return file;
}

OrgAssertjCoreUtilFilesException *OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_(NSString *path, NSString *reason) {
  OrgAssertjCoreUtilFiles_initialize();
  @throw OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_withJavaLangException_(path, reason, nil);
}

OrgAssertjCoreUtilFilesException *OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withJavaLangException_(NSString *path, JavaLangException *cause) {
  OrgAssertjCoreUtilFiles_initialize();
  @throw OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_withJavaLangException_(path, nil, cause);
}

OrgAssertjCoreUtilFilesException *OrgAssertjCoreUtilFiles_cannotCreateNewFileWithNSString_withNSString_withJavaLangException_(NSString *path, NSString *reason, JavaLangException *cause) {
  OrgAssertjCoreUtilFiles_initialize();
  NSString *message = NSString_java_formatWithNSString_withNSObjectArray_(@"Unable to create the new file %s", [IOSObjectArray arrayWithObjects:(id[]){ OrgAssertjCoreUtilStrings_quoteWithNSString_(path) } count:1 type:NSObject_class_()]);
  if (!OrgAssertjCoreUtilStrings_isNullOrEmptyWithNSString_(reason)) {
    message = OrgAssertjCoreUtilStrings_concatWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ message, @": ", reason } count:3 type:NSObject_class_()]);
  }
  if (cause != nil) {
    @throw create_OrgAssertjCoreUtilFilesException_initWithNSString_withNSException_(message, cause);
  }
  @throw create_OrgAssertjCoreUtilFilesException_initWithNSString_(message);
}

void OrgAssertjCoreUtilFiles_flushAndCloseWithJavaIoWriter_(JavaIoWriter *writer) {
  OrgAssertjCoreUtilFiles_initialize();
  if (writer == nil) {
    return;
  }
  OrgAssertjCoreUtilFlushables_flushWithJavaIoFlushableArray_([IOSObjectArray arrayWithObjects:(id[]){ writer } count:1 type:JavaIoFlushable_class_()]);
  OrgAssertjCoreUtilCloseables_closeQuietlyWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ writer } count:1 type:JavaIoCloseable_class_()]);
}

void OrgAssertjCoreUtilFiles_flushAndCloseWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  OrgAssertjCoreUtilFiles_initialize();
  if (outArg == nil) {
    return;
  }
  OrgAssertjCoreUtilFlushables_flushWithJavaIoFlushableArray_([IOSObjectArray arrayWithObjects:(id[]){ outArg } count:1 type:JavaIoFlushable_class_()]);
  OrgAssertjCoreUtilCloseables_closeQuietlyWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ outArg } count:1 type:JavaIoCloseable_class_()]);
}

JavaIoFile *OrgAssertjCoreUtilFiles_currentFolder() {
  OrgAssertjCoreUtilFiles_initialize();
  @try {
    return [create_JavaIoFile_initWithNSString_(@".") getCanonicalFile];
  }
  @catch (JavaIoIOException *e) {
    @throw create_OrgAssertjCoreUtilFilesException_initWithNSString_withNSException_(@"Unable to get current directory", e);
  }
}

void OrgAssertjCoreUtilFiles_delete__WithJavaIoFile_(JavaIoFile *file) {
  OrgAssertjCoreUtilFiles_initialize();
  if ([((JavaIoFile *) nil_chk(file)) isFile]) {
    [file delete__];
    return;
  }
  if (![file isDirectory]) {
    return;
  }
  IOSObjectArray *existingFiles = [file listFiles];
  if (!OrgAssertjCoreUtilArrays_isNullOrEmptyWithNSObjectArray_(existingFiles)) {
    {
      IOSObjectArray *a__ = existingFiles;
      JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaIoFile * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaIoFile *f = *b__++;
        OrgAssertjCoreUtilFiles_delete__WithJavaIoFile_(f);
      }
    }
  }
  [file delete__];
}

NSString *OrgAssertjCoreUtilFiles_contentOfWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *charsetName) {
  OrgAssertjCoreUtilFiles_initialize();
  if (!JavaNioCharsetCharset_isSupportedWithNSString_(charsetName)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Charset:<'%s'> is not supported on this system", [IOSObjectArray arrayWithObjects:(id[]){ charsetName } count:1 type:NSObject_class_()]));
  }
  return OrgAssertjCoreUtilFiles_contentOfWithJavaIoFile_withJavaNioCharsetCharset_(file, JavaNioCharsetCharset_forNameWithNSString_(charsetName));
}

NSString *OrgAssertjCoreUtilFiles_contentOfWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset) {
  OrgAssertjCoreUtilFiles_initialize();
  if (charset == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The charset should not be null");
  }
  @try {
    return OrgAssertjCoreUtilFiles_loadContentsWithJavaIoFile_withJavaNioCharsetCharset_(file, charset);
  }
  @catch (JavaIoIOException *e) {
    @throw create_OrgAssertjCoreUtilFilesException_initWithNSString_withNSException_(JreStrcat("$$", @"Unable to read ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]), e);
  }
}

NSString *OrgAssertjCoreUtilFiles_loadContentsWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset) {
  OrgAssertjCoreUtilFiles_initialize();
  JavaIoBufferedReader *reader = nil;
  jboolean threw = true;
  @try {
    reader = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(create_JavaIoFileInputStream_initWithJavaIoFile_(file), charset));
    JavaIoStringWriter *writer = create_JavaIoStringWriter_init();
    jint c;
    while ((c = [reader read]) != -1) {
      [writer writeWithInt:c];
    }
    threw = false;
    return [writer description];
  }
  @finally {
    if (reader != nil) {
      @try {
        [reader close];
      }
      @catch (JavaIoIOException *e) {
        if (!threw) {
          @throw e;
        }
      }
    }
  }
}

id<JavaUtilList> OrgAssertjCoreUtilFiles_linesOfWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset) {
  OrgAssertjCoreUtilFiles_initialize();
  if (charset == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The charset should not be null");
  }
  @try {
    return OrgAssertjCoreUtilFiles_loadLinesWithJavaIoFile_withJavaNioCharsetCharset_(file, charset);
  }
  @catch (JavaIoIOException *e) {
    @throw create_OrgAssertjCoreUtilFilesException_initWithNSString_withNSException_(JreStrcat("$$", @"Unable to read ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]), e);
  }
}

id<JavaUtilList> OrgAssertjCoreUtilFiles_linesOfWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *charsetName) {
  OrgAssertjCoreUtilFiles_initialize();
  if (!JavaNioCharsetCharset_isSupportedWithNSString_(charsetName)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Charset:<'%s'> is not supported on this system", [IOSObjectArray arrayWithObjects:(id[]){ charsetName } count:1 type:NSObject_class_()]));
  }
  return OrgAssertjCoreUtilFiles_linesOfWithJavaIoFile_withJavaNioCharsetCharset_(file, JavaNioCharsetCharset_forNameWithNSString_(charsetName));
}

id<JavaUtilList> OrgAssertjCoreUtilFiles_loadLinesWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset) {
  OrgAssertjCoreUtilFiles_initialize();
  JavaIoBufferedReader *reader = nil;
  jboolean threw = true;
  @try {
    reader = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(create_JavaIoFileInputStream_initWithJavaIoFile_(file), charset));
    id<JavaUtilList> strings = OrgAssertjCoreUtilLists_newArrayList();
    NSString *line = [reader readLine];
    while (line != nil) {
      [((id<JavaUtilList>) nil_chk(strings)) addWithId:line];
      line = [reader readLine];
    }
    threw = false;
    return strings;
  }
  @finally {
    if (reader != nil) {
      @try {
        [reader close];
      }
      @catch (JavaIoIOException *e) {
        if (!threw) {
          @throw e;
        }
      }
    }
  }
}

void OrgAssertjCoreUtilFiles_init(OrgAssertjCoreUtilFiles *self) {
  NSObject_init(self);
}

OrgAssertjCoreUtilFiles *new_OrgAssertjCoreUtilFiles_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreUtilFiles, init)
}

OrgAssertjCoreUtilFiles *create_OrgAssertjCoreUtilFiles_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreUtilFiles, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreUtilFiles)
