//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeEqualIgnoringCase.h"
#include "java/lang/CharSequence.h"

@interface OrgAssertjCoreErrorShouldBeEqualIgnoringCase ()

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)expected;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeEqualIgnoringCase_initWithJavaLangCharSequence_withJavaLangCharSequence_(OrgAssertjCoreErrorShouldBeEqualIgnoringCase *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeEqualIgnoringCase *new_OrgAssertjCoreErrorShouldBeEqualIgnoringCase_initWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeEqualIgnoringCase *create_OrgAssertjCoreErrorShouldBeEqualIgnoringCase_initWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected);

@implementation OrgAssertjCoreErrorShouldBeEqualIgnoringCase

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeEqualWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                           withJavaLangCharSequence:(id<JavaLangCharSequence>)expected {
  return OrgAssertjCoreErrorShouldBeEqualIgnoringCase_shouldBeEqualWithJavaLangCharSequence_withJavaLangCharSequence_(actual, expected);
}

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)expected {
  OrgAssertjCoreErrorShouldBeEqualIgnoringCase_initWithJavaLangCharSequence_withJavaLangCharSequence_(self, actual, expected);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeEqualWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[1].selector = @selector(initWithJavaLangCharSequence:withJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeEqual", "LJavaLangCharSequence;LJavaLangCharSequence;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeEqualIgnoringCase = { "ShouldBeEqualIgnoringCase", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeEqualIgnoringCase;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeEqualIgnoringCase_shouldBeEqualWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected) {
  OrgAssertjCoreErrorShouldBeEqualIgnoringCase_initialize();
  return create_OrgAssertjCoreErrorShouldBeEqualIgnoringCase_initWithJavaLangCharSequence_withJavaLangCharSequence_(actual, expected);
}

void OrgAssertjCoreErrorShouldBeEqualIgnoringCase_initWithJavaLangCharSequence_withJavaLangCharSequence_(OrgAssertjCoreErrorShouldBeEqualIgnoringCase *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n <%s>\nto be equal to:\n <%s>\nignoring case considerations", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected } count:2 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeEqualIgnoringCase *new_OrgAssertjCoreErrorShouldBeEqualIgnoringCase_initWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeEqualIgnoringCase, initWithJavaLangCharSequence_withJavaLangCharSequence_, actual, expected)
}

OrgAssertjCoreErrorShouldBeEqualIgnoringCase *create_OrgAssertjCoreErrorShouldBeEqualIgnoringCase_initWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeEqualIgnoringCase, initWithJavaLangCharSequence_withJavaLangCharSequence_, actual, expected)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeEqualIgnoringCase)
