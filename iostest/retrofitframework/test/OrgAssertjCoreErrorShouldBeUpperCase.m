//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeUpperCase.h"
#include "java/lang/Character.h"

@interface OrgAssertjCoreErrorShouldBeUpperCase ()

- (instancetype)initWithJavaLangCharacter:(JavaLangCharacter *)actual;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeUpperCase_initWithJavaLangCharacter_(OrgAssertjCoreErrorShouldBeUpperCase *self, JavaLangCharacter *actual);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeUpperCase *new_OrgAssertjCoreErrorShouldBeUpperCase_initWithJavaLangCharacter_(JavaLangCharacter *actual) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeUpperCase *create_OrgAssertjCoreErrorShouldBeUpperCase_initWithJavaLangCharacter_(JavaLangCharacter *actual);

@implementation OrgAssertjCoreErrorShouldBeUpperCase

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeUpperCaseWithJavaLangCharacter:(JavaLangCharacter *)actual {
  return OrgAssertjCoreErrorShouldBeUpperCase_shouldBeUpperCaseWithJavaLangCharacter_(actual);
}

- (instancetype)initWithJavaLangCharacter:(JavaLangCharacter *)actual {
  OrgAssertjCoreErrorShouldBeUpperCase_initWithJavaLangCharacter_(self, actual);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeUpperCaseWithJavaLangCharacter:);
  methods[1].selector = @selector(initWithJavaLangCharacter:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeUpperCase", "LJavaLangCharacter;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeUpperCase = { "ShouldBeUpperCase", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeUpperCase;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeUpperCase_shouldBeUpperCaseWithJavaLangCharacter_(JavaLangCharacter *actual) {
  OrgAssertjCoreErrorShouldBeUpperCase_initialize();
  return create_OrgAssertjCoreErrorShouldBeUpperCase_initWithJavaLangCharacter_(actual);
}

void OrgAssertjCoreErrorShouldBeUpperCase_initWithJavaLangCharacter_(OrgAssertjCoreErrorShouldBeUpperCase *self, JavaLangCharacter *actual) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:<%s> to be a uppercase character", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeUpperCase *new_OrgAssertjCoreErrorShouldBeUpperCase_initWithJavaLangCharacter_(JavaLangCharacter *actual) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeUpperCase, initWithJavaLangCharacter_, actual)
}

OrgAssertjCoreErrorShouldBeUpperCase *create_OrgAssertjCoreErrorShouldBeUpperCase_initWithJavaLangCharacter_(JavaLangCharacter *actual) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeUpperCase, initWithJavaLangCharacter_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeUpperCase)
