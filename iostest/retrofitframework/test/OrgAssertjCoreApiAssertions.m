//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractBigDecimalAssert.h"
#include "OrgAssertjCoreApiAbstractBooleanArrayAssert.h"
#include "OrgAssertjCoreApiAbstractBooleanAssert.h"
#include "OrgAssertjCoreApiAbstractByteArrayAssert.h"
#include "OrgAssertjCoreApiAbstractByteAssert.h"
#include "OrgAssertjCoreApiAbstractCharArrayAssert.h"
#include "OrgAssertjCoreApiAbstractCharSequenceAssert.h"
#include "OrgAssertjCoreApiAbstractCharacterAssert.h"
#include "OrgAssertjCoreApiAbstractClassAssert.h"
#include "OrgAssertjCoreApiAbstractComparableAssert.h"
#include "OrgAssertjCoreApiAbstractDateAssert.h"
#include "OrgAssertjCoreApiAbstractDoubleArrayAssert.h"
#include "OrgAssertjCoreApiAbstractDoubleAssert.h"
#include "OrgAssertjCoreApiAbstractFileAssert.h"
#include "OrgAssertjCoreApiAbstractFloatArrayAssert.h"
#include "OrgAssertjCoreApiAbstractFloatAssert.h"
#include "OrgAssertjCoreApiAbstractInputStreamAssert.h"
#include "OrgAssertjCoreApiAbstractIntArrayAssert.h"
#include "OrgAssertjCoreApiAbstractIntegerAssert.h"
#include "OrgAssertjCoreApiAbstractIterableAssert.h"
#include "OrgAssertjCoreApiAbstractListAssert.h"
#include "OrgAssertjCoreApiAbstractLongArrayAssert.h"
#include "OrgAssertjCoreApiAbstractLongAssert.h"
#include "OrgAssertjCoreApiAbstractMapAssert.h"
#include "OrgAssertjCoreApiAbstractObjectArrayAssert.h"
#include "OrgAssertjCoreApiAbstractObjectAssert.h"
#include "OrgAssertjCoreApiAbstractShortArrayAssert.h"
#include "OrgAssertjCoreApiAbstractShortAssert.h"
#include "OrgAssertjCoreApiAbstractThrowableAssert.h"
#include "OrgAssertjCoreApiAssertDelegateTarget.h"
#include "OrgAssertjCoreApiAssertions.h"
#include "OrgAssertjCoreApiBigDecimalAssert.h"
#include "OrgAssertjCoreApiBooleanArrayAssert.h"
#include "OrgAssertjCoreApiBooleanAssert.h"
#include "OrgAssertjCoreApiByteArrayAssert.h"
#include "OrgAssertjCoreApiByteAssert.h"
#include "OrgAssertjCoreApiCharArrayAssert.h"
#include "OrgAssertjCoreApiCharSequenceAssert.h"
#include "OrgAssertjCoreApiCharacterAssert.h"
#include "OrgAssertjCoreApiClassAssert.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreApiDateAssert.h"
#include "OrgAssertjCoreApiDoubleArrayAssert.h"
#include "OrgAssertjCoreApiDoubleAssert.h"
#include "OrgAssertjCoreApiFail.h"
#include "OrgAssertjCoreApiFileAssert.h"
#include "OrgAssertjCoreApiFilterFilters.h"
#include "OrgAssertjCoreApiFloatArrayAssert.h"
#include "OrgAssertjCoreApiFloatAssert.h"
#include "OrgAssertjCoreApiGenericComparableAssert.h"
#include "OrgAssertjCoreApiInputStreamAssert.h"
#include "OrgAssertjCoreApiIntArrayAssert.h"
#include "OrgAssertjCoreApiIntegerAssert.h"
#include "OrgAssertjCoreApiIterableAssert.h"
#include "OrgAssertjCoreApiListAssert.h"
#include "OrgAssertjCoreApiLongArrayAssert.h"
#include "OrgAssertjCoreApiLongAssert.h"
#include "OrgAssertjCoreApiMapAssert.h"
#include "OrgAssertjCoreApiObjectArrayAssert.h"
#include "OrgAssertjCoreApiObjectAssert.h"
#include "OrgAssertjCoreApiShortArrayAssert.h"
#include "OrgAssertjCoreApiShortAssert.h"
#include "OrgAssertjCoreApiStringAssert.h"
#include "OrgAssertjCoreApiThrowableAssert.h"
#include "OrgAssertjCoreConditionAllOf.h"
#include "OrgAssertjCoreConditionAnyOf.h"
#include "OrgAssertjCoreConditionDoesNotHave.h"
#include "OrgAssertjCoreConditionNot.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreDataMapEntry.h"
#include "OrgAssertjCoreDataOffset.h"
#include "OrgAssertjCoreGroupsProperties.h"
#include "OrgAssertjCoreGroupsTuple.h"
#include "OrgAssertjCoreUtilFiles.h"
#include "OrgAssertjCoreUtilIntrospectionFieldSupport.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/BigDecimal.h"
#include "java/nio/charset/Charset.h"
#include "java/text/DateFormat.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$1();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$2();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$3();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$4();

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$5();

@implementation OrgAssertjCoreApiAssertions

+ (OrgAssertjCoreApiAbstractBigDecimalAssert *)assertThatWithJavaMathBigDecimal:(JavaMathBigDecimal *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaMathBigDecimal_(actual);
}

+ (OrgAssertjCoreApiAbstractBooleanAssert *)assertThatWithBoolean:(jboolean)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithBoolean_(actual);
}

+ (OrgAssertjCoreApiAbstractBooleanAssert *)assertThatWithJavaLangBoolean:(JavaLangBoolean *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangBoolean_(actual);
}

+ (OrgAssertjCoreApiAbstractBooleanArrayAssert *)assertThatWithBooleanArray:(IOSBooleanArray *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithBooleanArray_(actual);
}

+ (OrgAssertjCoreApiAbstractByteAssert *)assertThatWithByte:(jbyte)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithByte_(actual);
}

+ (OrgAssertjCoreApiAbstractByteAssert *)assertThatWithJavaLangByte:(JavaLangByte *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangByte_(actual);
}

+ (OrgAssertjCoreApiAbstractByteArrayAssert *)assertThatWithByteArray:(IOSByteArray *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithByteArray_(actual);
}

+ (OrgAssertjCoreApiAbstractCharacterAssert *)assertThatWithChar:(jchar)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithChar_(actual);
}

+ (OrgAssertjCoreApiAbstractCharArrayAssert *)assertThatWithCharArray:(IOSCharArray *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithCharArray_(actual);
}

+ (OrgAssertjCoreApiAbstractCharacterAssert *)assertThatWithJavaLangCharacter:(JavaLangCharacter *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangCharacter_(actual);
}

+ (OrgAssertjCoreApiAbstractClassAssert *)assertThatWithIOSClass:(IOSClass *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithIOSClass_(actual);
}

+ (OrgAssertjCoreApiAbstractComparableAssert *)assertThatWithJavaLangComparable:(id<JavaLangComparable>)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangComparable_(actual);
}

+ (OrgAssertjCoreApiAbstractIterableAssert *)assertThatWithJavaLangIterable:(id<JavaLangIterable>)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangIterable_(actual);
}

+ (OrgAssertjCoreApiAbstractIterableAssert *)assertThatWithJavaUtilIterator:(id<JavaUtilIterator>)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaUtilIterator_(actual);
}

+ (OrgAssertjCoreApiAbstractDoubleAssert *)assertThatWithDouble:(jdouble)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithDouble_(actual);
}

+ (OrgAssertjCoreApiAbstractDoubleAssert *)assertThatWithJavaLangDouble:(JavaLangDouble *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangDouble_(actual);
}

+ (OrgAssertjCoreApiAbstractDoubleArrayAssert *)assertThatWithDoubleArray:(IOSDoubleArray *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithDoubleArray_(actual);
}

+ (OrgAssertjCoreApiAbstractFileAssert *)assertThatWithJavaIoFile:(JavaIoFile *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaIoFile_(actual);
}

+ (OrgAssertjCoreApiAbstractInputStreamAssert *)assertThatWithJavaIoInputStream:(JavaIoInputStream *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaIoInputStream_(actual);
}

+ (OrgAssertjCoreApiAbstractFloatAssert *)assertThatWithFloat:(jfloat)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithFloat_(actual);
}

+ (OrgAssertjCoreApiAbstractFloatAssert *)assertThatWithJavaLangFloat:(JavaLangFloat *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangFloat_(actual);
}

+ (OrgAssertjCoreApiAbstractFloatArrayAssert *)assertThatWithFloatArray:(IOSFloatArray *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithFloatArray_(actual);
}

+ (OrgAssertjCoreApiAbstractIntegerAssert *)assertThatWithInt:(jint)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithInt_(actual);
}

+ (OrgAssertjCoreApiAbstractIntArrayAssert *)assertThatWithIntArray:(IOSIntArray *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithIntArray_(actual);
}

+ (OrgAssertjCoreApiAbstractIntegerAssert *)assertThatWithJavaLangInteger:(JavaLangInteger *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangInteger_(actual);
}

+ (OrgAssertjCoreApiAbstractListAssert *)assertThatWithJavaUtilList:(id<JavaUtilList>)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaUtilList_(actual);
}

+ (OrgAssertjCoreApiAbstractLongAssert *)assertThatWithLong:(jlong)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithLong_(actual);
}

+ (OrgAssertjCoreApiAbstractLongAssert *)assertThatWithJavaLangLong:(JavaLangLong *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangLong_(actual);
}

+ (OrgAssertjCoreApiAbstractLongArrayAssert *)assertThatWithLongArray:(IOSLongArray *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithLongArray_(actual);
}

+ (OrgAssertjCoreApiAbstractObjectAssert *)assertThatWithId:(id)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithId_(actual);
}

+ (id<OrgAssertjCoreApiAssertDelegateTarget>)assertThatWithOrgAssertjCoreApiAssertDelegateTarget:(id<OrgAssertjCoreApiAssertDelegateTarget>)assertion {
  return OrgAssertjCoreApiAssertions_assertThatWithOrgAssertjCoreApiAssertDelegateTarget_(assertion);
}

+ (OrgAssertjCoreApiAbstractObjectArrayAssert *)assertThatWithNSObjectArray:(IOSObjectArray *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithNSObjectArray_(actual);
}

+ (OrgAssertjCoreApiAbstractMapAssert *)assertThatWithJavaUtilMap:(id<JavaUtilMap>)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaUtilMap_(actual);
}

+ (OrgAssertjCoreApiAbstractShortAssert *)assertThatWithShort:(jshort)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithShort_(actual);
}

+ (OrgAssertjCoreApiAbstractShortAssert *)assertThatWithJavaLangShort:(JavaLangShort *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangShort_(actual);
}

+ (OrgAssertjCoreApiAbstractShortArrayAssert *)assertThatWithShortArray:(IOSShortArray *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithShortArray_(actual);
}

+ (OrgAssertjCoreApiAbstractCharSequenceAssert *)assertThatWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaLangCharSequence_(actual);
}

+ (OrgAssertjCoreApiAbstractCharSequenceAssert *)assertThatWithNSString:(NSString *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithNSString_(actual);
}

+ (OrgAssertjCoreApiAbstractDateAssert *)assertThatWithJavaUtilDate:(JavaUtilDate *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithJavaUtilDate_(actual);
}

+ (OrgAssertjCoreApiAbstractThrowableAssert *)assertThatWithNSException:(NSException *)actual {
  return OrgAssertjCoreApiAssertions_assertThatWithNSException_(actual);
}

+ (void)setRemoveAssertJRelatedElementsFromStackTraceWithBoolean:(jboolean)removeAssertJRelatedElementsFromStackTrace {
  OrgAssertjCoreApiAssertions_setRemoveAssertJRelatedElementsFromStackTraceWithBoolean_(removeAssertJRelatedElementsFromStackTrace);
}

+ (void)failWithNSString:(NSString *)failureMessage {
  OrgAssertjCoreApiAssertions_failWithNSString_(failureMessage);
}

+ (void)failWithNSString:(NSString *)failureMessage
         withNSException:(NSException *)realCause {
  OrgAssertjCoreApiAssertions_failWithNSString_withNSException_(failureMessage, realCause);
}

+ (void)failBecauseExceptionWasNotThrownWithIOSClass:(IOSClass *)exceptionClass {
  OrgAssertjCoreApiAssertions_failBecauseExceptionWasNotThrownWithIOSClass_(exceptionClass);
}

+ (OrgAssertjCoreGroupsProperties *)extractPropertyWithNSString:(NSString *)propertyName
                                                   withIOSClass:(IOSClass *)propertyType {
  return OrgAssertjCoreApiAssertions_extractPropertyWithNSString_withIOSClass_(propertyName, propertyType);
}

+ (OrgAssertjCoreGroupsProperties *)extractPropertyWithNSString:(NSString *)propertyName {
  return OrgAssertjCoreApiAssertions_extractPropertyWithNSString_(propertyName);
}

+ (OrgAssertjCoreGroupsTuple *)tupleWithNSObjectArray:(IOSObjectArray *)values {
  return OrgAssertjCoreApiAssertions_tupleWithNSObjectArray_(values);
}

+ (void)setAllowExtractingPrivateFieldsWithBoolean:(jboolean)allowExtractingPrivateFields {
  OrgAssertjCoreApiAssertions_setAllowExtractingPrivateFieldsWithBoolean_(allowExtractingPrivateFields);
}

+ (OrgAssertjCoreDataMapEntry *)entry__WithId:(id)key
                                       withId:(id)value {
  return OrgAssertjCoreApiAssertions_entry__WithId_withId_(key, value);
}

+ (OrgAssertjCoreDataIndex *)atIndexWithInt:(jint)index {
  return OrgAssertjCoreApiAssertions_atIndexWithInt_(index);
}

+ (OrgAssertjCoreDataOffset *)offsetWithJavaLangDouble:(JavaLangDouble *)value {
  return OrgAssertjCoreApiAssertions_offsetWithJavaLangDouble_(value);
}

+ (OrgAssertjCoreDataOffset *)offsetWithJavaLangFloat:(JavaLangFloat *)value {
  return OrgAssertjCoreApiAssertions_offsetWithJavaLangFloat_(value);
}

+ (OrgAssertjCoreDataOffset *)withinWithJavaLangDouble:(JavaLangDouble *)value {
  return OrgAssertjCoreApiAssertions_withinWithJavaLangDouble_(value);
}

+ (OrgAssertjCoreDataOffset *)withinWithJavaLangFloat:(JavaLangFloat *)value {
  return OrgAssertjCoreApiAssertions_withinWithJavaLangFloat_(value);
}

+ (OrgAssertjCoreDataOffset *)withinWithJavaMathBigDecimal:(JavaMathBigDecimal *)value {
  return OrgAssertjCoreApiAssertions_withinWithJavaMathBigDecimal_(value);
}

+ (OrgAssertjCoreApiCondition *)allOfWithOrgAssertjCoreApiConditionArray:(IOSObjectArray *)conditions {
  return OrgAssertjCoreApiAssertions_allOfWithOrgAssertjCoreApiConditionArray_(conditions);
}

+ (OrgAssertjCoreApiCondition *)allOfWithJavaLangIterable:(id<JavaLangIterable>)conditions {
  return OrgAssertjCoreApiAssertions_allOfWithJavaLangIterable_(conditions);
}

+ (OrgAssertjCoreApiCondition *)anyOfWithOrgAssertjCoreApiConditionArray:(IOSObjectArray *)conditions {
  return OrgAssertjCoreApiAssertions_anyOfWithOrgAssertjCoreApiConditionArray_(conditions);
}

+ (OrgAssertjCoreApiCondition *)anyOfWithJavaLangIterable:(id<JavaLangIterable>)conditions {
  return OrgAssertjCoreApiAssertions_anyOfWithJavaLangIterable_(conditions);
}

+ (OrgAssertjCoreConditionDoesNotHave *)doesNotHaveWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreApiAssertions_doesNotHaveWithOrgAssertjCoreApiCondition_(condition);
}

+ (OrgAssertjCoreConditionNot *)not__WithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreApiAssertions_not__WithOrgAssertjCoreApiCondition_(condition);
}

+ (OrgAssertjCoreApiFilterFilters *)filterWithNSObjectArray:(IOSObjectArray *)array {
  return OrgAssertjCoreApiAssertions_filterWithNSObjectArray_(array);
}

+ (OrgAssertjCoreApiFilterFilters *)filterWithJavaLangIterable:(id<JavaLangIterable>)iterableToFilter {
  return OrgAssertjCoreApiAssertions_filterWithJavaLangIterable_(iterableToFilter);
}

+ (NSString *)contentOfWithJavaIoFile:(JavaIoFile *)file
            withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  return OrgAssertjCoreApiAssertions_contentOfWithJavaIoFile_withJavaNioCharsetCharset_(file, charset);
}

+ (NSString *)contentOfWithJavaIoFile:(JavaIoFile *)file
                         withNSString:(NSString *)charsetName {
  return OrgAssertjCoreApiAssertions_contentOfWithJavaIoFile_withNSString_(file, charsetName);
}

+ (NSString *)contentOfWithJavaIoFile:(JavaIoFile *)file {
  return OrgAssertjCoreApiAssertions_contentOfWithJavaIoFile_(file);
}

+ (id<JavaUtilList>)linesOfWithJavaIoFile:(JavaIoFile *)file {
  return OrgAssertjCoreApiAssertions_linesOfWithJavaIoFile_(file);
}

+ (id<JavaUtilList>)linesOfWithJavaIoFile:(JavaIoFile *)file
                withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  return OrgAssertjCoreApiAssertions_linesOfWithJavaIoFile_withJavaNioCharsetCharset_(file, charset);
}

+ (id<JavaUtilList>)linesOfWithJavaIoFile:(JavaIoFile *)file
                             withNSString:(NSString *)charsetName {
  return OrgAssertjCoreApiAssertions_linesOfWithJavaIoFile_withNSString_(file, charsetName);
}

+ (void)registerCustomDateFormatWithJavaTextDateFormat:(JavaTextDateFormat *)userCustomDateFormat {
  OrgAssertjCoreApiAssertions_registerCustomDateFormatWithJavaTextDateFormat_(userCustomDateFormat);
}

+ (void)registerCustomDateFormatWithNSString:(NSString *)userCustomDateFormatPattern {
  OrgAssertjCoreApiAssertions_registerCustomDateFormatWithNSString_(userCustomDateFormatPattern);
}

+ (void)useDefaultDateFormatsOnly {
  OrgAssertjCoreApiAssertions_useDefaultDateFormatsOnly();
}

+ (void)useDateFormatWithJavaTextDateFormat:(JavaTextDateFormat *)userCustomDateFormat {
  OrgAssertjCoreApiAssertions_useDateFormatWithJavaTextDateFormat_(userCustomDateFormat);
}

+ (void)useDateFormatWithNSString:(NSString *)userCustomDateFormatPattern {
  OrgAssertjCoreApiAssertions_useDateFormatWithNSString_(userCustomDateFormatPattern);
}

+ (void)useIsoDateFormat {
  OrgAssertjCoreApiAssertions_useIsoDateFormat();
}

+ (void)useIsoDateTimeFormat {
  OrgAssertjCoreApiAssertions_useIsoDateTimeFormat();
}

+ (void)useIsoDateTimeWithMsFormat {
  OrgAssertjCoreApiAssertions_useIsoDateTimeWithMsFormat();
}

+ (void)useDefaultDateFormats {
  OrgAssertjCoreApiAssertions_useDefaultDateFormats();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreApiAssertions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreApiAbstractBigDecimalAssert;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractBooleanAssert;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractBooleanAssert;", 0x9, 0, 5, -1, 6, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractBooleanArrayAssert;", 0x9, 0, 7, -1, 8, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractByteAssert;", 0x9, 0, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractByteAssert;", 0x9, 0, 11, -1, 12, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractByteArrayAssert;", 0x9, 0, 13, -1, 14, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractCharacterAssert;", 0x9, 0, 15, -1, 16, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractCharArrayAssert;", 0x9, 0, 17, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractCharacterAssert;", 0x9, 0, 19, -1, 20, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractClassAssert;", 0x9, 0, 21, -1, 22, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractComparableAssert;", 0x9, 0, 23, -1, 24, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x9, 0, 25, -1, 26, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x9, 0, 27, -1, 28, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x9, 0, 29, -1, 30, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x9, 0, 31, -1, 32, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleArrayAssert;", 0x9, 0, 33, -1, 34, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFileAssert;", 0x9, 0, 35, -1, 36, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractInputStreamAssert;", 0x9, 0, 37, -1, 38, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFloatAssert;", 0x9, 0, 39, -1, 40, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFloatAssert;", 0x9, 0, 41, -1, 42, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractFloatArrayAssert;", 0x9, 0, 43, -1, 44, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x9, 0, 45, -1, 46, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntArrayAssert;", 0x9, 0, 47, -1, 48, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIntegerAssert;", 0x9, 0, 49, -1, 50, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractListAssert;", 0x9, 0, 51, -1, 52, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x9, 0, 53, -1, 54, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongAssert;", 0x9, 0, 55, -1, 56, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractLongArrayAssert;", 0x9, 0, 57, -1, 58, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectAssert;", 0x9, 0, 59, -1, 60, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAssertDelegateTarget;", 0x9, 0, 61, -1, 62, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractObjectArrayAssert;", 0x9, 0, 63, -1, 64, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractMapAssert;", 0x9, 0, 65, -1, 66, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractShortAssert;", 0x9, 0, 67, -1, 68, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractShortAssert;", 0x9, 0, 69, -1, 70, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractShortArrayAssert;", 0x9, 0, 71, -1, 72, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractCharSequenceAssert;", 0x9, 0, 73, -1, 74, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractCharSequenceAssert;", 0x9, 0, 75, -1, 76, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDateAssert;", 0x9, 0, 77, -1, 78, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractThrowableAssert;", 0x9, 0, 79, -1, 80, -1, -1 },
    { NULL, "V", 0x9, 81, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 82, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 82, 83, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 84, 21, -1, 85, -1, -1 },
    { NULL, "LOrgAssertjCoreGroupsProperties;", 0x9, 86, 87, -1, 88, -1, -1 },
    { NULL, "LOrgAssertjCoreGroupsProperties;", 0x9, 86, 75, -1, 89, -1, -1 },
    { NULL, "LOrgAssertjCoreGroupsTuple;", 0x89, 90, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 91, 3, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreDataMapEntry;", 0x9, 92, 93, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreDataIndex;", 0x9, 94, 45, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreDataOffset;", 0x9, 95, 31, -1, 96, -1, -1 },
    { NULL, "LOrgAssertjCoreDataOffset;", 0x9, 95, 41, -1, 97, -1, -1 },
    { NULL, "LOrgAssertjCoreDataOffset;", 0x9, 98, 31, -1, 96, -1, -1 },
    { NULL, "LOrgAssertjCoreDataOffset;", 0x9, 98, 41, -1, 97, -1, -1 },
    { NULL, "LOrgAssertjCoreDataOffset;", 0x9, 98, 1, -1, 99, -1, -1 },
    { NULL, "LOrgAssertjCoreApiCondition;", 0x89, 100, 101, -1, 102, -1, -1 },
    { NULL, "LOrgAssertjCoreApiCondition;", 0x9, 100, 25, -1, 103, -1, -1 },
    { NULL, "LOrgAssertjCoreApiCondition;", 0x89, 104, 101, -1, 102, -1, -1 },
    { NULL, "LOrgAssertjCoreApiCondition;", 0x9, 104, 25, -1, 103, -1, -1 },
    { NULL, "LOrgAssertjCoreConditionDoesNotHave;", 0x9, 105, 106, -1, 107, -1, -1 },
    { NULL, "LOrgAssertjCoreConditionNot;", 0x9, 108, 106, -1, 109, -1, -1 },
    { NULL, "LOrgAssertjCoreApiFilterFilters;", 0x9, 110, 63, -1, 111, -1, -1 },
    { NULL, "LOrgAssertjCoreApiFilterFilters;", 0x9, 110, 25, -1, 112, -1, -1 },
    { NULL, "LNSString;", 0x9, 113, 114, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 113, 115, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 113, 35, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 116, 35, -1, 117, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 116, 114, -1, 118, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 116, 115, -1, 119, -1, -1 },
    { NULL, "V", 0x9, 120, 121, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 120, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 122, 121, -1, -1, 123, -1 },
    { NULL, "V", 0x9, 122, 75, -1, -1, 124, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, 125, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, 126, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, 127, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, 128, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(assertThatWithJavaMathBigDecimal:);
  methods[1].selector = @selector(assertThatWithBoolean:);
  methods[2].selector = @selector(assertThatWithJavaLangBoolean:);
  methods[3].selector = @selector(assertThatWithBooleanArray:);
  methods[4].selector = @selector(assertThatWithByte:);
  methods[5].selector = @selector(assertThatWithJavaLangByte:);
  methods[6].selector = @selector(assertThatWithByteArray:);
  methods[7].selector = @selector(assertThatWithChar:);
  methods[8].selector = @selector(assertThatWithCharArray:);
  methods[9].selector = @selector(assertThatWithJavaLangCharacter:);
  methods[10].selector = @selector(assertThatWithIOSClass:);
  methods[11].selector = @selector(assertThatWithJavaLangComparable:);
  methods[12].selector = @selector(assertThatWithJavaLangIterable:);
  methods[13].selector = @selector(assertThatWithJavaUtilIterator:);
  methods[14].selector = @selector(assertThatWithDouble:);
  methods[15].selector = @selector(assertThatWithJavaLangDouble:);
  methods[16].selector = @selector(assertThatWithDoubleArray:);
  methods[17].selector = @selector(assertThatWithJavaIoFile:);
  methods[18].selector = @selector(assertThatWithJavaIoInputStream:);
  methods[19].selector = @selector(assertThatWithFloat:);
  methods[20].selector = @selector(assertThatWithJavaLangFloat:);
  methods[21].selector = @selector(assertThatWithFloatArray:);
  methods[22].selector = @selector(assertThatWithInt:);
  methods[23].selector = @selector(assertThatWithIntArray:);
  methods[24].selector = @selector(assertThatWithJavaLangInteger:);
  methods[25].selector = @selector(assertThatWithJavaUtilList:);
  methods[26].selector = @selector(assertThatWithLong:);
  methods[27].selector = @selector(assertThatWithJavaLangLong:);
  methods[28].selector = @selector(assertThatWithLongArray:);
  methods[29].selector = @selector(assertThatWithId:);
  methods[30].selector = @selector(assertThatWithOrgAssertjCoreApiAssertDelegateTarget:);
  methods[31].selector = @selector(assertThatWithNSObjectArray:);
  methods[32].selector = @selector(assertThatWithJavaUtilMap:);
  methods[33].selector = @selector(assertThatWithShort:);
  methods[34].selector = @selector(assertThatWithJavaLangShort:);
  methods[35].selector = @selector(assertThatWithShortArray:);
  methods[36].selector = @selector(assertThatWithJavaLangCharSequence:);
  methods[37].selector = @selector(assertThatWithNSString:);
  methods[38].selector = @selector(assertThatWithJavaUtilDate:);
  methods[39].selector = @selector(assertThatWithNSException:);
  methods[40].selector = @selector(setRemoveAssertJRelatedElementsFromStackTraceWithBoolean:);
  methods[41].selector = @selector(failWithNSString:);
  methods[42].selector = @selector(failWithNSString:withNSException:);
  methods[43].selector = @selector(failBecauseExceptionWasNotThrownWithIOSClass:);
  methods[44].selector = @selector(extractPropertyWithNSString:withIOSClass:);
  methods[45].selector = @selector(extractPropertyWithNSString:);
  methods[46].selector = @selector(tupleWithNSObjectArray:);
  methods[47].selector = @selector(setAllowExtractingPrivateFieldsWithBoolean:);
  methods[48].selector = @selector(entry__WithId:withId:);
  methods[49].selector = @selector(atIndexWithInt:);
  methods[50].selector = @selector(offsetWithJavaLangDouble:);
  methods[51].selector = @selector(offsetWithJavaLangFloat:);
  methods[52].selector = @selector(withinWithJavaLangDouble:);
  methods[53].selector = @selector(withinWithJavaLangFloat:);
  methods[54].selector = @selector(withinWithJavaMathBigDecimal:);
  methods[55].selector = @selector(allOfWithOrgAssertjCoreApiConditionArray:);
  methods[56].selector = @selector(allOfWithJavaLangIterable:);
  methods[57].selector = @selector(anyOfWithOrgAssertjCoreApiConditionArray:);
  methods[58].selector = @selector(anyOfWithJavaLangIterable:);
  methods[59].selector = @selector(doesNotHaveWithOrgAssertjCoreApiCondition:);
  methods[60].selector = @selector(not__WithOrgAssertjCoreApiCondition:);
  methods[61].selector = @selector(filterWithNSObjectArray:);
  methods[62].selector = @selector(filterWithJavaLangIterable:);
  methods[63].selector = @selector(contentOfWithJavaIoFile:withJavaNioCharsetCharset:);
  methods[64].selector = @selector(contentOfWithJavaIoFile:withNSString:);
  methods[65].selector = @selector(contentOfWithJavaIoFile:);
  methods[66].selector = @selector(linesOfWithJavaIoFile:);
  methods[67].selector = @selector(linesOfWithJavaIoFile:withJavaNioCharsetCharset:);
  methods[68].selector = @selector(linesOfWithJavaIoFile:withNSString:);
  methods[69].selector = @selector(registerCustomDateFormatWithJavaTextDateFormat:);
  methods[70].selector = @selector(registerCustomDateFormatWithNSString:);
  methods[71].selector = @selector(useDefaultDateFormatsOnly);
  methods[72].selector = @selector(useDateFormatWithJavaTextDateFormat:);
  methods[73].selector = @selector(useDateFormatWithNSString:);
  methods[74].selector = @selector(useIsoDateFormat);
  methods[75].selector = @selector(useIsoDateTimeFormat);
  methods[76].selector = @selector(useIsoDateTimeWithMsFormat);
  methods[77].selector = @selector(useDefaultDateFormats);
  methods[78].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "assertThat", "LJavaMathBigDecimal;", "(Ljava/math/BigDecimal;)Lorg/assertj/core/api/AbstractBigDecimalAssert<*>;", "Z", "(Z)Lorg/assertj/core/api/AbstractBooleanAssert<*>;", "LJavaLangBoolean;", "(Ljava/lang/Boolean;)Lorg/assertj/core/api/AbstractBooleanAssert<*>;", "[Z", "([Z)Lorg/assertj/core/api/AbstractBooleanArrayAssert<*>;", "B", "(B)Lorg/assertj/core/api/AbstractByteAssert<*>;", "LJavaLangByte;", "(Ljava/lang/Byte;)Lorg/assertj/core/api/AbstractByteAssert<*>;", "[B", "([B)Lorg/assertj/core/api/AbstractByteArrayAssert<*>;", "C", "(C)Lorg/assertj/core/api/AbstractCharacterAssert<*>;", "[C", "([C)Lorg/assertj/core/api/AbstractCharArrayAssert<*>;", "LJavaLangCharacter;", "(Ljava/lang/Character;)Lorg/assertj/core/api/AbstractCharacterAssert<*>;", "LIOSClass;", "(Ljava/lang/Class<*>;)Lorg/assertj/core/api/AbstractClassAssert<*>;", "LJavaLangComparable;", "<T::Ljava/lang/Comparable<-TT;>;>(TT;)Lorg/assertj/core/api/AbstractComparableAssert<*TT;>;", "LJavaLangIterable;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;)Lorg/assertj/core/api/AbstractIterableAssert<*+Ljava/lang/Iterable<TT;>;TT;>;", "LJavaUtilIterator;", "<T:Ljava/lang/Object;>(Ljava/util/Iterator<TT;>;)Lorg/assertj/core/api/AbstractIterableAssert<*+Ljava/lang/Iterable<TT;>;TT;>;", "D", "(D)Lorg/assertj/core/api/AbstractDoubleAssert<*>;", "LJavaLangDouble;", "(Ljava/lang/Double;)Lorg/assertj/core/api/AbstractDoubleAssert<*>;", "[D", "([D)Lorg/assertj/core/api/AbstractDoubleArrayAssert<*>;", "LJavaIoFile;", "(Ljava/io/File;)Lorg/assertj/core/api/AbstractFileAssert<*>;", "LJavaIoInputStream;", "(Ljava/io/InputStream;)Lorg/assertj/core/api/AbstractInputStreamAssert<*+Ljava/io/InputStream;>;", "F", "(F)Lorg/assertj/core/api/AbstractFloatAssert<*>;", "LJavaLangFloat;", "(Ljava/lang/Float;)Lorg/assertj/core/api/AbstractFloatAssert<*>;", "[F", "([F)Lorg/assertj/core/api/AbstractFloatArrayAssert<*>;", "I", "(I)Lorg/assertj/core/api/AbstractIntegerAssert<*>;", "[I", "([I)Lorg/assertj/core/api/AbstractIntArrayAssert<*>;", "LJavaLangInteger;", "(Ljava/lang/Integer;)Lorg/assertj/core/api/AbstractIntegerAssert<*>;", "LJavaUtilList;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;)Lorg/assertj/core/api/AbstractListAssert<*+Ljava/util/List<TT;>;TT;>;", "J", "(J)Lorg/assertj/core/api/AbstractLongAssert<*>;", "LJavaLangLong;", "(Ljava/lang/Long;)Lorg/assertj/core/api/AbstractLongAssert<*>;", "[J", "([J)Lorg/assertj/core/api/AbstractLongArrayAssert<*>;", "LNSObject;", "<T:Ljava/lang/Object;>(TT;)Lorg/assertj/core/api/AbstractObjectAssert<*TT;>;", "LOrgAssertjCoreApiAssertDelegateTarget;", "<T::Lorg/assertj/core/api/AssertDelegateTarget;>(TT;)TT;", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)Lorg/assertj/core/api/AbstractObjectArrayAssert<*TT;>;", "LJavaUtilMap;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;)Lorg/assertj/core/api/AbstractMapAssert<*+Ljava/util/Map<TK;TV;>;TK;TV;>;", "S", "(S)Lorg/assertj/core/api/AbstractShortAssert<*>;", "LJavaLangShort;", "(Ljava/lang/Short;)Lorg/assertj/core/api/AbstractShortAssert<*>;", "[S", "([S)Lorg/assertj/core/api/AbstractShortArrayAssert<*>;", "LJavaLangCharSequence;", "(Ljava/lang/CharSequence;)Lorg/assertj/core/api/AbstractCharSequenceAssert<*+Ljava/lang/CharSequence;>;", "LNSString;", "(Ljava/lang/String;)Lorg/assertj/core/api/AbstractCharSequenceAssert<*Ljava/lang/String;>;", "LJavaUtilDate;", "(Ljava/util/Date;)Lorg/assertj/core/api/AbstractDateAssert<*>;", "LNSException;", "(Ljava/lang/Throwable;)Lorg/assertj/core/api/AbstractThrowableAssert<*+Ljava/lang/Throwable;>;", "setRemoveAssertJRelatedElementsFromStackTrace", "fail", "LNSString;LNSException;", "failBecauseExceptionWasNotThrown", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;)V", "extractProperty", "LNSString;LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT;>;)Lorg/assertj/core/groups/Properties<TT;>;", "(Ljava/lang/String;)Lorg/assertj/core/groups/Properties<Ljava/lang/Object;>;", "tuple", "setAllowExtractingPrivateFields", "entry", "LNSObject;LNSObject;", "atIndex", "offset", "(Ljava/lang/Double;)Lorg/assertj/core/data/Offset<Ljava/lang/Double;>;", "(Ljava/lang/Float;)Lorg/assertj/core/data/Offset<Ljava/lang/Float;>;", "within", "(Ljava/math/BigDecimal;)Lorg/assertj/core/data/Offset<Ljava/math/BigDecimal;>;", "allOf", "[LOrgAssertjCoreApiCondition;", "<T:Ljava/lang/Object;>([Lorg/assertj/core/api/Condition<-TT;>;)Lorg/assertj/core/api/Condition<TT;>;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<+Lorg/assertj/core/api/Condition<-TT;>;>;)Lorg/assertj/core/api/Condition<TT;>;", "anyOf", "doesNotHave", "LOrgAssertjCoreApiCondition;", "<T:Ljava/lang/Object;>(Lorg/assertj/core/api/Condition<-TT;>;)Lorg/assertj/core/condition/DoesNotHave<TT;>;", "not", "<T:Ljava/lang/Object;>(Lorg/assertj/core/api/Condition<-TT;>;)Lorg/assertj/core/condition/Not<TT;>;", "filter", "<E:Ljava/lang/Object;>([TE;)Lorg/assertj/core/api/filter/Filters<TE;>;", "<E:Ljava/lang/Object;>(Ljava/lang/Iterable<TE;>;)Lorg/assertj/core/api/filter/Filters<TE;>;", "contentOf", "LJavaIoFile;LJavaNioCharsetCharset;", "LJavaIoFile;LNSString;", "linesOf", "(Ljava/io/File;)Ljava/util/List<Ljava/lang/String;>;", "(Ljava/io/File;Ljava/nio/charset/Charset;)Ljava/util/List<Ljava/lang/String;>;", "(Ljava/io/File;Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "registerCustomDateFormat", "LJavaTextDateFormat;", "useDateFormat", (void *)&OrgAssertjCoreApiAssertions__Annotations$0, (void *)&OrgAssertjCoreApiAssertions__Annotations$1, (void *)&OrgAssertjCoreApiAssertions__Annotations$2, (void *)&OrgAssertjCoreApiAssertions__Annotations$3, (void *)&OrgAssertjCoreApiAssertions__Annotations$4, (void *)&OrgAssertjCoreApiAssertions__Annotations$5 };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAssertions = { "Assertions", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x1, 79, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreApiAssertions;
}

@end

OrgAssertjCoreApiAbstractBigDecimalAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaMathBigDecimal_(JavaMathBigDecimal *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiBigDecimalAssert_initWithJavaMathBigDecimal_(actual);
}

OrgAssertjCoreApiAbstractBooleanAssert *OrgAssertjCoreApiAssertions_assertThatWithBoolean_(jboolean actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiBooleanAssert_initWithJavaLangBoolean_(JavaLangBoolean_valueOfWithBoolean_(actual));
}

OrgAssertjCoreApiAbstractBooleanAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangBoolean_(JavaLangBoolean *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiBooleanAssert_initWithJavaLangBoolean_(actual);
}

OrgAssertjCoreApiAbstractBooleanArrayAssert *OrgAssertjCoreApiAssertions_assertThatWithBooleanArray_(IOSBooleanArray *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiBooleanArrayAssert_initWithBooleanArray_(actual);
}

OrgAssertjCoreApiAbstractByteAssert *OrgAssertjCoreApiAssertions_assertThatWithByte_(jbyte actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiByteAssert_initWithJavaLangByte_(JavaLangByte_valueOfWithByte_(actual));
}

OrgAssertjCoreApiAbstractByteAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangByte_(JavaLangByte *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiByteAssert_initWithJavaLangByte_(actual);
}

OrgAssertjCoreApiAbstractByteArrayAssert *OrgAssertjCoreApiAssertions_assertThatWithByteArray_(IOSByteArray *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiByteArrayAssert_initWithByteArray_(actual);
}

OrgAssertjCoreApiAbstractCharacterAssert *OrgAssertjCoreApiAssertions_assertThatWithChar_(jchar actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiCharacterAssert_initWithJavaLangCharacter_(JavaLangCharacter_valueOfWithChar_(actual));
}

OrgAssertjCoreApiAbstractCharArrayAssert *OrgAssertjCoreApiAssertions_assertThatWithCharArray_(IOSCharArray *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiCharArrayAssert_initWithCharArray_(actual);
}

OrgAssertjCoreApiAbstractCharacterAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangCharacter_(JavaLangCharacter *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiCharacterAssert_initWithJavaLangCharacter_(actual);
}

OrgAssertjCoreApiAbstractClassAssert *OrgAssertjCoreApiAssertions_assertThatWithIOSClass_(IOSClass *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiClassAssert_initWithIOSClass_(actual);
}

OrgAssertjCoreApiAbstractComparableAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangComparable_(id<JavaLangComparable> actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiGenericComparableAssert_initWithJavaLangComparable_(actual);
}

OrgAssertjCoreApiAbstractIterableAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangIterable_(id<JavaLangIterable> actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiIterableAssert_initWithJavaLangIterable_(actual);
}

OrgAssertjCoreApiAbstractIterableAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaUtilIterator_(id<JavaUtilIterator> actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiIterableAssert_initWithJavaUtilIterator_(actual);
}

OrgAssertjCoreApiAbstractDoubleAssert *OrgAssertjCoreApiAssertions_assertThatWithDouble_(jdouble actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiDoubleAssert_initWithJavaLangDouble_(JavaLangDouble_valueOfWithDouble_(actual));
}

OrgAssertjCoreApiAbstractDoubleAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangDouble_(JavaLangDouble *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiDoubleAssert_initWithJavaLangDouble_(actual);
}

OrgAssertjCoreApiAbstractDoubleArrayAssert *OrgAssertjCoreApiAssertions_assertThatWithDoubleArray_(IOSDoubleArray *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiDoubleArrayAssert_initWithDoubleArray_(actual);
}

OrgAssertjCoreApiAbstractFileAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaIoFile_(JavaIoFile *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiFileAssert_initWithJavaIoFile_(actual);
}

OrgAssertjCoreApiAbstractInputStreamAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaIoInputStream_(JavaIoInputStream *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiInputStreamAssert_initWithJavaIoInputStream_(actual);
}

OrgAssertjCoreApiAbstractFloatAssert *OrgAssertjCoreApiAssertions_assertThatWithFloat_(jfloat actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiFloatAssert_initWithJavaLangFloat_(JavaLangFloat_valueOfWithFloat_(actual));
}

OrgAssertjCoreApiAbstractFloatAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangFloat_(JavaLangFloat *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiFloatAssert_initWithJavaLangFloat_(actual);
}

OrgAssertjCoreApiAbstractFloatArrayAssert *OrgAssertjCoreApiAssertions_assertThatWithFloatArray_(IOSFloatArray *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiFloatArrayAssert_initWithFloatArray_(actual);
}

OrgAssertjCoreApiAbstractIntegerAssert *OrgAssertjCoreApiAssertions_assertThatWithInt_(jint actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiIntegerAssert_initWithJavaLangInteger_(JavaLangInteger_valueOfWithInt_(actual));
}

OrgAssertjCoreApiAbstractIntArrayAssert *OrgAssertjCoreApiAssertions_assertThatWithIntArray_(IOSIntArray *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiIntArrayAssert_initWithIntArray_(actual);
}

OrgAssertjCoreApiAbstractIntegerAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangInteger_(JavaLangInteger *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiIntegerAssert_initWithJavaLangInteger_(actual);
}

OrgAssertjCoreApiAbstractListAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaUtilList_(id<JavaUtilList> actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiListAssert_initWithJavaUtilList_(actual);
}

OrgAssertjCoreApiAbstractLongAssert *OrgAssertjCoreApiAssertions_assertThatWithLong_(jlong actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiLongAssert_initWithJavaLangLong_(JavaLangLong_valueOfWithLong_(actual));
}

OrgAssertjCoreApiAbstractLongAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangLong_(JavaLangLong *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiLongAssert_initWithJavaLangLong_(actual);
}

OrgAssertjCoreApiAbstractLongArrayAssert *OrgAssertjCoreApiAssertions_assertThatWithLongArray_(IOSLongArray *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiLongArrayAssert_initWithLongArray_(actual);
}

OrgAssertjCoreApiAbstractObjectAssert *OrgAssertjCoreApiAssertions_assertThatWithId_(id actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiObjectAssert_initWithId_(actual);
}

id<OrgAssertjCoreApiAssertDelegateTarget> OrgAssertjCoreApiAssertions_assertThatWithOrgAssertjCoreApiAssertDelegateTarget_(id<OrgAssertjCoreApiAssertDelegateTarget> assertion) {
  OrgAssertjCoreApiAssertions_initialize();
  return assertion;
}

OrgAssertjCoreApiAbstractObjectArrayAssert *OrgAssertjCoreApiAssertions_assertThatWithNSObjectArray_(IOSObjectArray *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiObjectArrayAssert_initWithNSObjectArray_(actual);
}

OrgAssertjCoreApiAbstractMapAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaUtilMap_(id<JavaUtilMap> actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiMapAssert_initWithJavaUtilMap_(actual);
}

OrgAssertjCoreApiAbstractShortAssert *OrgAssertjCoreApiAssertions_assertThatWithShort_(jshort actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiShortAssert_initWithJavaLangShort_(JavaLangShort_valueOfWithShort_(actual));
}

OrgAssertjCoreApiAbstractShortAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangShort_(JavaLangShort *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiShortAssert_initWithJavaLangShort_(actual);
}

OrgAssertjCoreApiAbstractShortArrayAssert *OrgAssertjCoreApiAssertions_assertThatWithShortArray_(IOSShortArray *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiShortArrayAssert_initWithShortArray_(actual);
}

OrgAssertjCoreApiAbstractCharSequenceAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaLangCharSequence_(id<JavaLangCharSequence> actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiCharSequenceAssert_initWithJavaLangCharSequence_(actual);
}

OrgAssertjCoreApiAbstractCharSequenceAssert *OrgAssertjCoreApiAssertions_assertThatWithNSString_(NSString *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiStringAssert_initWithNSString_(actual);
}

OrgAssertjCoreApiAbstractDateAssert *OrgAssertjCoreApiAssertions_assertThatWithJavaUtilDate_(JavaUtilDate *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiDateAssert_initWithJavaUtilDate_(actual);
}

OrgAssertjCoreApiAbstractThrowableAssert *OrgAssertjCoreApiAssertions_assertThatWithNSException_(NSException *actual) {
  OrgAssertjCoreApiAssertions_initialize();
  return create_OrgAssertjCoreApiThrowableAssert_initWithNSException_(actual);
}

void OrgAssertjCoreApiAssertions_setRemoveAssertJRelatedElementsFromStackTraceWithBoolean_(jboolean removeAssertJRelatedElementsFromStackTrace) {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiFail_setRemoveAssertJRelatedElementsFromStackTraceWithBoolean_(removeAssertJRelatedElementsFromStackTrace);
}

void OrgAssertjCoreApiAssertions_failWithNSString_(NSString *failureMessage) {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiFail_failWithNSString_(failureMessage);
}

void OrgAssertjCoreApiAssertions_failWithNSString_withNSException_(NSString *failureMessage, NSException *realCause) {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiFail_failWithNSString_withNSException_(failureMessage, realCause);
}

void OrgAssertjCoreApiAssertions_failBecauseExceptionWasNotThrownWithIOSClass_(IOSClass *exceptionClass) {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiFail_failBecauseExceptionWasNotThrownWithIOSClass_(exceptionClass);
}

OrgAssertjCoreGroupsProperties *OrgAssertjCoreApiAssertions_extractPropertyWithNSString_withIOSClass_(NSString *propertyName, IOSClass *propertyType) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreGroupsProperties_extractPropertyWithNSString_withIOSClass_(propertyName, propertyType);
}

OrgAssertjCoreGroupsProperties *OrgAssertjCoreApiAssertions_extractPropertyWithNSString_(NSString *propertyName) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreGroupsProperties_extractPropertyWithNSString_(propertyName);
}

OrgAssertjCoreGroupsTuple *OrgAssertjCoreApiAssertions_tupleWithNSObjectArray_(IOSObjectArray *values) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreGroupsTuple_tupleWithNSObjectArray_(values);
}

void OrgAssertjCoreApiAssertions_setAllowExtractingPrivateFieldsWithBoolean_(jboolean allowExtractingPrivateFields) {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreUtilIntrospectionFieldSupport_setAllowExtractingPrivateFieldsWithBoolean_(allowExtractingPrivateFields);
}

OrgAssertjCoreDataMapEntry *OrgAssertjCoreApiAssertions_entry__WithId_withId_(id key, id value) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreDataMapEntry_entry__WithId_withId_(key, value);
}

OrgAssertjCoreDataIndex *OrgAssertjCoreApiAssertions_atIndexWithInt_(jint index) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreDataIndex_atIndexWithInt_(index);
}

OrgAssertjCoreDataOffset *OrgAssertjCoreApiAssertions_offsetWithJavaLangDouble_(JavaLangDouble *value) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreDataOffset_offsetWithJavaLangDouble_(value);
}

OrgAssertjCoreDataOffset *OrgAssertjCoreApiAssertions_offsetWithJavaLangFloat_(JavaLangFloat *value) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreDataOffset_offsetWithJavaLangFloat_(value);
}

OrgAssertjCoreDataOffset *OrgAssertjCoreApiAssertions_withinWithJavaLangDouble_(JavaLangDouble *value) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreDataOffset_offsetWithJavaLangDouble_(value);
}

OrgAssertjCoreDataOffset *OrgAssertjCoreApiAssertions_withinWithJavaLangFloat_(JavaLangFloat *value) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreDataOffset_offsetWithJavaLangFloat_(value);
}

OrgAssertjCoreDataOffset *OrgAssertjCoreApiAssertions_withinWithJavaMathBigDecimal_(JavaMathBigDecimal *value) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreDataOffset_offsetWithJavaMathBigDecimal_(value);
}

OrgAssertjCoreApiCondition *OrgAssertjCoreApiAssertions_allOfWithOrgAssertjCoreApiConditionArray_(IOSObjectArray *conditions) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreConditionAllOf_allOfWithOrgAssertjCoreApiConditionArray_(conditions);
}

OrgAssertjCoreApiCondition *OrgAssertjCoreApiAssertions_allOfWithJavaLangIterable_(id<JavaLangIterable> conditions) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreConditionAllOf_allOfWithJavaLangIterable_(conditions);
}

OrgAssertjCoreApiCondition *OrgAssertjCoreApiAssertions_anyOfWithOrgAssertjCoreApiConditionArray_(IOSObjectArray *conditions) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreConditionAnyOf_anyOfWithOrgAssertjCoreApiConditionArray_(conditions);
}

OrgAssertjCoreApiCondition *OrgAssertjCoreApiAssertions_anyOfWithJavaLangIterable_(id<JavaLangIterable> conditions) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreConditionAnyOf_anyOfWithJavaLangIterable_(conditions);
}

OrgAssertjCoreConditionDoesNotHave *OrgAssertjCoreApiAssertions_doesNotHaveWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreConditionDoesNotHave_doesNotHaveWithOrgAssertjCoreApiCondition_(condition);
}

OrgAssertjCoreConditionNot *OrgAssertjCoreApiAssertions_not__WithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreConditionNot_not__WithOrgAssertjCoreApiCondition_(condition);
}

OrgAssertjCoreApiFilterFilters *OrgAssertjCoreApiAssertions_filterWithNSObjectArray_(IOSObjectArray *array) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreApiFilterFilters_filterWithNSObjectArray_(array);
}

OrgAssertjCoreApiFilterFilters *OrgAssertjCoreApiAssertions_filterWithJavaLangIterable_(id<JavaLangIterable> iterableToFilter) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreApiFilterFilters_filterWithJavaLangIterable_(iterableToFilter);
}

NSString *OrgAssertjCoreApiAssertions_contentOfWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreUtilFiles_contentOfWithJavaIoFile_withJavaNioCharsetCharset_(file, charset);
}

NSString *OrgAssertjCoreApiAssertions_contentOfWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *charsetName) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreUtilFiles_contentOfWithJavaIoFile_withNSString_(file, charsetName);
}

NSString *OrgAssertjCoreApiAssertions_contentOfWithJavaIoFile_(JavaIoFile *file) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreUtilFiles_contentOfWithJavaIoFile_withJavaNioCharsetCharset_(file, JavaNioCharsetCharset_defaultCharset());
}

id<JavaUtilList> OrgAssertjCoreApiAssertions_linesOfWithJavaIoFile_(JavaIoFile *file) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreUtilFiles_linesOfWithJavaIoFile_withJavaNioCharsetCharset_(file, JavaNioCharsetCharset_defaultCharset());
}

id<JavaUtilList> OrgAssertjCoreApiAssertions_linesOfWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreUtilFiles_linesOfWithJavaIoFile_withJavaNioCharsetCharset_(file, charset);
}

id<JavaUtilList> OrgAssertjCoreApiAssertions_linesOfWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *charsetName) {
  OrgAssertjCoreApiAssertions_initialize();
  return OrgAssertjCoreUtilFiles_linesOfWithJavaIoFile_withNSString_(file, charsetName);
}

void OrgAssertjCoreApiAssertions_registerCustomDateFormatWithJavaTextDateFormat_(JavaTextDateFormat *userCustomDateFormat) {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithJavaTextDateFormat_(userCustomDateFormat);
}

void OrgAssertjCoreApiAssertions_registerCustomDateFormatWithNSString_(NSString *userCustomDateFormatPattern) {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiAbstractDateAssert_registerCustomDateFormatWithNSString_(userCustomDateFormatPattern);
}

void OrgAssertjCoreApiAssertions_useDefaultDateFormatsOnly() {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiAbstractDateAssert_useDefaultDateFormatsOnly();
}

void OrgAssertjCoreApiAssertions_useDateFormatWithJavaTextDateFormat_(JavaTextDateFormat *userCustomDateFormat) {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiAssertions_registerCustomDateFormatWithJavaTextDateFormat_(userCustomDateFormat);
}

void OrgAssertjCoreApiAssertions_useDateFormatWithNSString_(NSString *userCustomDateFormatPattern) {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiAssertions_registerCustomDateFormatWithNSString_(userCustomDateFormatPattern);
}

void OrgAssertjCoreApiAssertions_useIsoDateFormat() {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiAssertions_useDefaultDateFormatsOnly();
}

void OrgAssertjCoreApiAssertions_useIsoDateTimeFormat() {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiAssertions_useDefaultDateFormatsOnly();
}

void OrgAssertjCoreApiAssertions_useIsoDateTimeWithMsFormat() {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiAssertions_useDefaultDateFormatsOnly();
}

void OrgAssertjCoreApiAssertions_useDefaultDateFormats() {
  OrgAssertjCoreApiAssertions_initialize();
  OrgAssertjCoreApiAssertions_useDefaultDateFormatsOnly();
}

void OrgAssertjCoreApiAssertions_init(OrgAssertjCoreApiAssertions *self) {
  NSObject_init(self);
}

OrgAssertjCoreApiAssertions *new_OrgAssertjCoreApiAssertions_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreApiAssertions, init)
}

OrgAssertjCoreApiAssertions *create_OrgAssertjCoreApiAssertions_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreApiAssertions, init)
}

IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgAssertjCoreApiAssertions__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAssertions)
