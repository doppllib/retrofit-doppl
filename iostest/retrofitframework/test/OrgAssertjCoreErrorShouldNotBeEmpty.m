//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldNotBeEmpty.h"

@interface OrgAssertjCoreErrorShouldNotBeEmpty ()

- (instancetype)init;

@end

inline OrgAssertjCoreErrorShouldNotBeEmpty *OrgAssertjCoreErrorShouldNotBeEmpty_get_INSTANCE();
static OrgAssertjCoreErrorShouldNotBeEmpty *OrgAssertjCoreErrorShouldNotBeEmpty_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreErrorShouldNotBeEmpty, INSTANCE, OrgAssertjCoreErrorShouldNotBeEmpty *)

__attribute__((unused)) static void OrgAssertjCoreErrorShouldNotBeEmpty_init(OrgAssertjCoreErrorShouldNotBeEmpty *self);

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotBeEmpty *new_OrgAssertjCoreErrorShouldNotBeEmpty_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldNotBeEmpty *create_OrgAssertjCoreErrorShouldNotBeEmpty_init();

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreErrorShouldNotBeEmpty)

@implementation OrgAssertjCoreErrorShouldNotBeEmpty

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldNotBeEmpty {
  return OrgAssertjCoreErrorShouldNotBeEmpty_shouldNotBeEmpty();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreErrorShouldNotBeEmpty_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldNotBeEmpty);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreErrorShouldNotBeEmpty;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &OrgAssertjCoreErrorShouldNotBeEmpty_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldNotBeEmpty = { "ShouldNotBeEmpty", "org.assertj.core.error", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldNotBeEmpty;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreErrorShouldNotBeEmpty class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreErrorShouldNotBeEmpty_INSTANCE, new_OrgAssertjCoreErrorShouldNotBeEmpty_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreErrorShouldNotBeEmpty)
  }
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldNotBeEmpty_shouldNotBeEmpty() {
  OrgAssertjCoreErrorShouldNotBeEmpty_initialize();
  return OrgAssertjCoreErrorShouldNotBeEmpty_INSTANCE;
}

void OrgAssertjCoreErrorShouldNotBeEmpty_init(OrgAssertjCoreErrorShouldNotBeEmpty *self) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting actual not to be empty", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldNotBeEmpty *new_OrgAssertjCoreErrorShouldNotBeEmpty_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldNotBeEmpty, init)
}

OrgAssertjCoreErrorShouldNotBeEmpty *create_OrgAssertjCoreErrorShouldNotBeEmpty_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldNotBeEmpty, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldNotBeEmpty)
