//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreUtilTypeFilter")
#ifdef RESTRICT_OrgAssertjCoreUtilTypeFilter
#define INCLUDE_ALL_OrgAssertjCoreUtilTypeFilter 0
#else
#define INCLUDE_ALL_OrgAssertjCoreUtilTypeFilter 1
#endif
#undef RESTRICT_OrgAssertjCoreUtilTypeFilter

#if !defined (OrgAssertjCoreUtilTypeFilter_) && (INCLUDE_ALL_OrgAssertjCoreUtilTypeFilter || defined(INCLUDE_OrgAssertjCoreUtilTypeFilter))
#define OrgAssertjCoreUtilTypeFilter_

#define RESTRICT_OrgAssertjCoreUtilCollectionFilter 1
#define INCLUDE_OrgAssertjCoreUtilCollectionFilter 1
#include "OrgAssertjCoreUtilCollectionFilter.h"

@class IOSClass;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

@interface OrgAssertjCoreUtilTypeFilter : NSObject < OrgAssertjCoreUtilCollectionFilter >

#pragma mark Public

+ (OrgAssertjCoreUtilTypeFilter *)byTypeWithIOSClass:(IOSClass *)type;

- (id<JavaUtilList>)filterWithJavaUtilCollection:(id<JavaUtilCollection>)target;

#pragma mark Package-Private

- (instancetype)initWithIOSClass:(IOSClass *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreUtilTypeFilter)

FOUNDATION_EXPORT OrgAssertjCoreUtilTypeFilter *OrgAssertjCoreUtilTypeFilter_byTypeWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT void OrgAssertjCoreUtilTypeFilter_initWithIOSClass_(OrgAssertjCoreUtilTypeFilter *self, IOSClass *type);

FOUNDATION_EXPORT OrgAssertjCoreUtilTypeFilter *new_OrgAssertjCoreUtilTypeFilter_initWithIOSClass_(IOSClass *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgAssertjCoreUtilTypeFilter *create_OrgAssertjCoreUtilTypeFilter_initWithIOSClass_(IOSClass *type);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreUtilTypeFilter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreUtilTypeFilter")
