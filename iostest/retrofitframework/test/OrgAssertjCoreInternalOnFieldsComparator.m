//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreInternalFieldByFieldComparator.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalOnFieldsComparator.h"
#include "OrgAssertjCorePresentationStandardRepresentation.h"
#include "OrgAssertjCoreUtilArrays.h"
#include "OrgAssertjCoreUtilStrings.h"
#include "java/lang/IllegalArgumentException.h"

@interface OrgAssertjCoreInternalOnFieldsComparator () {
 @public
  IOSObjectArray *fields_;
}

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalOnFieldsComparator, fields_, IOSObjectArray *)

inline OrgAssertjCorePresentationStandardRepresentation *OrgAssertjCoreInternalOnFieldsComparator_get_REPRESENTATION();
static OrgAssertjCorePresentationStandardRepresentation *OrgAssertjCoreInternalOnFieldsComparator_REPRESENTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalOnFieldsComparator, REPRESENTATION, OrgAssertjCorePresentationStandardRepresentation *)

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalOnFieldsComparator)

@implementation OrgAssertjCoreInternalOnFieldsComparator

- (instancetype)initWithNSStringArray:(IOSObjectArray *)fields {
  OrgAssertjCoreInternalOnFieldsComparator_initWithNSStringArray_(self, fields);
  return self;
}

- (IOSObjectArray *)getFields {
  return fields_;
}

- (jboolean)areEqualWithId:(id)actualElement
                    withId:(id)otherElement {
  return [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) areEqualToComparingOnlyGivenFieldsWithId:actualElement withId:otherElement withNSStringArray:fields_];
}

- (NSString *)description {
  if (((IOSObjectArray *) nil_chk(fields_))->size_ == 1) return JreStrcat("$$", @"single field comparator on field ", [((OrgAssertjCorePresentationStandardRepresentation *) nil_chk(OrgAssertjCoreInternalOnFieldsComparator_REPRESENTATION)) toStringOfWithId:IOSObjectArray_Get(fields_, 0)]);
  return JreStrcat("$$", @"field by field comparator on fields ", [((OrgAssertjCorePresentationStandardRepresentation *) nil_chk(OrgAssertjCoreInternalOnFieldsComparator_REPRESENTATION)) toStringOfWithId:fields_]);
}

- (void)dealloc {
  RELEASE_(fields_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(getFields);
  methods[2].selector = @selector(areEqualWithId:withId:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REPRESENTATION", "LOrgAssertjCorePresentationStandardRepresentation;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "fields_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;", "areEqual", "LNSObject;LNSObject;", "toString", &OrgAssertjCoreInternalOnFieldsComparator_REPRESENTATION };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalOnFieldsComparator = { "OnFieldsComparator", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalOnFieldsComparator;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalOnFieldsComparator class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalOnFieldsComparator_REPRESENTATION, new_OrgAssertjCorePresentationStandardRepresentation_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalOnFieldsComparator)
  }
}

@end

void OrgAssertjCoreInternalOnFieldsComparator_initWithNSStringArray_(OrgAssertjCoreInternalOnFieldsComparator *self, IOSObjectArray *fields) {
  OrgAssertjCoreInternalFieldByFieldComparator_init(self);
  if (OrgAssertjCoreUtilArrays_isNullOrEmptyWithNSObjectArray_(fields)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No fields specified");
  {
    IOSObjectArray *a__ = fields;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *field = *b__++;
      if (OrgAssertjCoreUtilStrings_isNullOrEmptyWithNSString_(field) || OrgAssertjCoreUtilStrings_isNullOrEmptyWithNSString_([((NSString *) nil_chk(field)) java_trim])) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Null/blank fields are invalid, fields were ", [((OrgAssertjCorePresentationStandardRepresentation *) nil_chk(OrgAssertjCoreInternalOnFieldsComparator_REPRESENTATION)) toStringOfWithId:fields]));
    }
  }
  JreStrongAssign(&self->fields_, fields);
}

OrgAssertjCoreInternalOnFieldsComparator *new_OrgAssertjCoreInternalOnFieldsComparator_initWithNSStringArray_(IOSObjectArray *fields) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalOnFieldsComparator, initWithNSStringArray_, fields)
}

OrgAssertjCoreInternalOnFieldsComparator *create_OrgAssertjCoreInternalOnFieldsComparator_initWithNSStringArray_(IOSObjectArray *fields) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalOnFieldsComparator, initWithNSStringArray_, fields)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalOnFieldsComparator)
