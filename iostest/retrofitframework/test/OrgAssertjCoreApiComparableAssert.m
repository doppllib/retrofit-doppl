//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiComparableAssert.h"

@interface OrgAssertjCoreApiComparableAssert : NSObject

@end

@implementation OrgAssertjCoreApiComparableAssert

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreApiComparableAssert;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiComparableAssert;", 0x401, 3, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiComparableAssert;", 0x401, 4, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiComparableAssert;", 0x401, 5, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isLessThanWithJavaLangComparable:);
  methods[1].selector = @selector(isLessThanOrEqualToWithJavaLangComparable:);
  methods[2].selector = @selector(isGreaterThanWithJavaLangComparable:);
  methods[3].selector = @selector(isGreaterThanOrEqualToWithJavaLangComparable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isLessThan", "LJavaLangComparable;", "(TA;)TS;", "isLessThanOrEqualTo", "isGreaterThan", "isGreaterThanOrEqualTo", "<S::Lorg/assertj/core/api/ComparableAssert<TS;TA;>;A::Ljava/lang/Comparable<-TA;>;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiComparableAssert = { "ComparableAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x609, 4, 0, -1, -1, -1, 6, -1 };
  return &_OrgAssertjCoreApiComparableAssert;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiComparableAssert)
