//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreConditionNegative.h"
#include "OrgAssertjCoreConditionNot.h"

@interface OrgAssertjCoreConditionNot ()

- (instancetype)initWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

@end

__attribute__((unused)) static void OrgAssertjCoreConditionNot_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreConditionNot *self, OrgAssertjCoreApiCondition *condition);

__attribute__((unused)) static OrgAssertjCoreConditionNot *new_OrgAssertjCoreConditionNot_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreConditionNot *create_OrgAssertjCoreConditionNot_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition);

@implementation OrgAssertjCoreConditionNot

+ (OrgAssertjCoreConditionNot *)not__WithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreConditionNot_not__WithOrgAssertjCoreApiCondition_(condition);
}

- (instancetype)initWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreConditionNot_initWithOrgAssertjCoreApiCondition_(self, condition);
  return self;
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"not :<%s>", [IOSObjectArray arrayWithObjects:(id[]){ condition_ } count:1 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreConditionNot;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(not__WithOrgAssertjCoreApiCondition:);
  methods[1].selector = @selector(initWithOrgAssertjCoreApiCondition:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "not", "LOrgAssertjCoreApiCondition;", "<T:Ljava/lang/Object;>(Lorg/assertj/core/api/Condition<-TT;>;)Lorg/assertj/core/condition/Not<TT;>;", "(Lorg/assertj/core/api/Condition<-TT;>;)V", "toString", "<T:Ljava/lang/Object;>Lorg/assertj/core/condition/Negative<TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreConditionNot = { "Not", "org.assertj.core.condition", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, 5, -1 };
  return &_OrgAssertjCoreConditionNot;
}

@end

OrgAssertjCoreConditionNot *OrgAssertjCoreConditionNot_not__WithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) {
  OrgAssertjCoreConditionNot_initialize();
  return create_OrgAssertjCoreConditionNot_initWithOrgAssertjCoreApiCondition_(condition);
}

void OrgAssertjCoreConditionNot_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreConditionNot *self, OrgAssertjCoreApiCondition *condition) {
  OrgAssertjCoreConditionNegative_initWithOrgAssertjCoreApiCondition_(self, condition);
}

OrgAssertjCoreConditionNot *new_OrgAssertjCoreConditionNot_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreConditionNot, initWithOrgAssertjCoreApiCondition_, condition)
}

OrgAssertjCoreConditionNot *create_OrgAssertjCoreConditionNot_initWithOrgAssertjCoreApiCondition_(OrgAssertjCoreApiCondition *condition) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreConditionNot, initWithOrgAssertjCoreApiCondition_, condition)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreConditionNot)
