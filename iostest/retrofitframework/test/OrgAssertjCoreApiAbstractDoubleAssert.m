//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractComparableAssert.h"
#include "OrgAssertjCoreApiAbstractDoubleAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreDataOffset.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalDoubles.h"
#include "java/lang/Double.h"
#include "java/util/Comparator.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractDoubleAssert

- (instancetype)initWithJavaLangDouble:(JavaLangDouble *)actual
                          withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractDoubleAssert_initWithJavaLangDouble_withIOSClass_(self, actual, selfType);
  return self;
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isNaN {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsNaNWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isNotNaN {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsNotNaNWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isZero {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsZeroWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isNotZero {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsNotZeroWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isPositive {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsPositiveWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isNegative {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsNegativeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isNotNegative {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsNotNegativeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isNotPositive {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsNotPositiveWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isCloseToWithDouble:(jdouble)other
                                  withOrgAssertjCoreDataOffset:(OrgAssertjCoreDataOffset *)offset {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsCloseToWithOrgAssertjCoreApiWritableAssertionInfo:info_ withJavaLangDouble:actual_ withDouble:other withOrgAssertjCoreDataOffset:offset];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isCloseToWithNSNumber:(JavaLangDouble *)other
                                    withOrgAssertjCoreDataOffset:(OrgAssertjCoreDataOffset *)offset {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsCloseToWithOrgAssertjCoreApiWritableAssertionInfo:info_ withJavaLangDouble:actual_ withDouble:[((JavaLangDouble *) nil_chk(other)) doubleValue] withOrgAssertjCoreDataOffset:offset];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isEqualToWithDouble:(jdouble)expected {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertEqualWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:JavaLangDouble_valueOfWithDouble_(expected)];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isEqualToWithNSNumber:(JavaLangDouble *)expected
                                    withOrgAssertjCoreDataOffset:(OrgAssertjCoreDataOffset *)offset {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertEqualWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangDouble:actual_ withJavaLangDouble:expected withOrgAssertjCoreDataOffset:offset];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isEqualToWithDouble:(jdouble)expected
                                  withOrgAssertjCoreDataOffset:(OrgAssertjCoreDataOffset *)offset {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertEqualWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangDouble:actual_ withJavaLangDouble:JavaLangDouble_valueOfWithDouble_(expected) withOrgAssertjCoreDataOffset:offset];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isNotEqualToWithDouble:(jdouble)other {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertNotEqualWithOrgAssertjCoreApiAssertionInfo:info_ withId:actual_ withId:JavaLangDouble_valueOfWithDouble_(other)];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isLessThanWithDouble:(jdouble)other {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertLessThanWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangDouble_valueOfWithDouble_(other)];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isLessThanOrEqualToWithDouble:(jdouble)other {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertLessThanOrEqualToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangDouble_valueOfWithDouble_(other)];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isGreaterThanWithDouble:(jdouble)other {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertGreaterThanWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangDouble_valueOfWithDouble_(other)];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isGreaterThanOrEqualToWithDouble:(jdouble)other {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertGreaterThanOrEqualToWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:JavaLangDouble_valueOfWithDouble_(other)];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isBetweenWithNSNumber:(JavaLangDouble *)start
                                                    withNSNumber:(JavaLangDouble *)end {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:start withJavaLangComparable:end];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)isStrictlyBetweenWithNSNumber:(JavaLangDouble *)start
                                                            withNSNumber:(JavaLangDouble *)end {
  [((OrgAssertjCoreInternalDoubles *) nil_chk(doubles_)) assertIsStrictlyBetweenWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangComparable:actual_ withJavaLangComparable:start withJavaLangComparable:end];
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)usingComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)customComparator {
  [super usingComparatorWithJavaUtilComparator:customComparator];
  JreStrongAssignAndConsume(&doubles_, new_OrgAssertjCoreInternalDoubles_initWithOrgAssertjCoreInternalComparisonStrategy_(create_OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(customComparator)));
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractDoubleAssert *)usingDefaultComparator {
  [super usingDefaultComparator];
  JreStrongAssign(&doubles_, OrgAssertjCoreInternalDoubles_instance());
  return ((OrgAssertjCoreApiAbstractDoubleAssert *) myself_);
}

- (void)dealloc {
  RELEASE_(doubles_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 8, 6, -1, 7, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 8, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 11, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 12, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 13, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 14, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 15, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 19, 17, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, 20, 21, -1, 22, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractDoubleAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangDouble:withIOSClass:);
  methods[1].selector = @selector(isNaN);
  methods[2].selector = @selector(isNotNaN);
  methods[3].selector = @selector(isZero);
  methods[4].selector = @selector(isNotZero);
  methods[5].selector = @selector(isPositive);
  methods[6].selector = @selector(isNegative);
  methods[7].selector = @selector(isNotNegative);
  methods[8].selector = @selector(isNotPositive);
  methods[9].selector = @selector(isCloseToWithDouble:withOrgAssertjCoreDataOffset:);
  methods[10].selector = @selector(isCloseToWithNSNumber:withOrgAssertjCoreDataOffset:);
  methods[11].selector = @selector(isEqualToWithDouble:);
  methods[12].selector = @selector(isEqualToWithNSNumber:withOrgAssertjCoreDataOffset:);
  methods[13].selector = @selector(isEqualToWithDouble:withOrgAssertjCoreDataOffset:);
  methods[14].selector = @selector(isNotEqualToWithDouble:);
  methods[15].selector = @selector(isLessThanWithDouble:);
  methods[16].selector = @selector(isLessThanOrEqualToWithDouble:);
  methods[17].selector = @selector(isGreaterThanWithDouble:);
  methods[18].selector = @selector(isGreaterThanOrEqualToWithDouble:);
  methods[19].selector = @selector(isBetweenWithNSNumber:withNSNumber:);
  methods[20].selector = @selector(isStrictlyBetweenWithNSNumber:withNSNumber:);
  methods[21].selector = @selector(usingComparatorWithJavaUtilComparator:);
  methods[22].selector = @selector(usingDefaultComparator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "doubles_", "LOrgAssertjCoreInternalDoubles;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangDouble;LIOSClass;", "(Ljava/lang/Double;Ljava/lang/Class<*>;)V", "()TS;", "isCloseTo", "DLOrgAssertjCoreDataOffset;", "(DLorg/assertj/core/data/Offset<Ljava/lang/Double;>;)TS;", "LJavaLangDouble;LOrgAssertjCoreDataOffset;", "(Ljava/lang/Double;Lorg/assertj/core/data/Offset<Ljava/lang/Double;>;)TS;", "isEqualTo", "D", "(D)TS;", "isNotEqualTo", "isLessThan", "isLessThanOrEqualTo", "isGreaterThan", "isGreaterThanOrEqualTo", "isBetween", "LJavaLangDouble;LJavaLangDouble;", "(Ljava/lang/Double;Ljava/lang/Double;)TS;", "isStrictlyBetween", "usingComparator", "LJavaUtilComparator;", "(Ljava/util/Comparator<-Ljava/lang/Double;>;)TS;", "<S:Lorg/assertj/core/api/AbstractDoubleAssert<TS;>;>Lorg/assertj/core/api/AbstractComparableAssert<TS;Ljava/lang/Double;>;Lorg/assertj/core/api/FloatingPointNumberAssert<TS;Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractDoubleAssert = { "AbstractDoubleAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 23, 1, -1, -1, -1, 23, -1 };
  return &_OrgAssertjCoreApiAbstractDoubleAssert;
}

@end

void OrgAssertjCoreApiAbstractDoubleAssert_initWithJavaLangDouble_withIOSClass_(OrgAssertjCoreApiAbstractDoubleAssert *self, JavaLangDouble *actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractComparableAssert_initWithJavaLangComparable_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->doubles_, OrgAssertjCoreInternalDoubles_instance());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractDoubleAssert)
