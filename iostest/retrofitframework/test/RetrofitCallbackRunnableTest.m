//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RetrofitCallback.h"
#include "RetrofitCallbackRunnable.h"
#include "RetrofitCallbackRunnableTest.h"
#include "RetrofitClientResponse.h"
#include "RetrofitErrorHandler.h"
#include "RetrofitResponseWrapper.h"
#include "RetrofitRetrofitError.h"
#include "RetrofitUtils.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/Executor.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/mockito/Matchers.h"
#include "org/mockito/Mockito.h"
#include "org/mockito/stubbing/OngoingStubbing.h"

@interface RetrofitCallbackRunnableTest () {
 @public
  id<JavaUtilConcurrentExecutor> executor_;
  RetrofitCallbackRunnable *callbackRunnable_;
  id<RetrofitCallback> callback_;
  id<RetrofitErrorHandler> errorHandler_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitCallbackRunnableTest, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(RetrofitCallbackRunnableTest, callbackRunnable_, RetrofitCallbackRunnable *)
J2OBJC_FIELD_SETTER(RetrofitCallbackRunnableTest, callback_, id<RetrofitCallback>)
J2OBJC_FIELD_SETTER(RetrofitCallbackRunnableTest, errorHandler_, id<RetrofitErrorHandler>)

__attribute__((unused)) static IOSObjectArray *RetrofitCallbackRunnableTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *RetrofitCallbackRunnableTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *RetrofitCallbackRunnableTest__Annotations$2();

@implementation RetrofitCallbackRunnableTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitCallbackRunnableTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setUp {
  JreStrongAssign(&callback_, OrgMockitoMockito_mockWithIOSClass_(RetrofitCallback_class_()));
  JreStrongAssign(&callbackRunnable_, OrgMockitoMockito_spyWithId_(create_RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(callback_, executor_, errorHandler_)));
}

- (void)responsePassedToSuccess {
  RetrofitResponseWrapper *wrapper = create_RetrofitResponseWrapper_initWithRetrofitClientResponse_withId_(nil, create_NSObject_init());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((RetrofitCallbackRunnable *) nil_chk(callbackRunnable_)) obtainResponse]))) thenReturnWithId:wrapper];
  [((RetrofitCallbackRunnable *) nil_chk(callbackRunnable_)) run];
  [((id<JavaUtilConcurrentExecutor>) nil_chk(OrgMockitoMockito_verifyWithId_(executor_))) executeWithJavaLangRunnable:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRunnable_class_())];
  [((id<RetrofitCallback>) nil_chk(OrgMockitoMockito_verifyWithId_(callback_))) successWithId:OrgMockitoMatchers_sameWithId_(wrapper->responseBody_) withRetrofitClientResponse:OrgMockitoMatchers_sameWithId_(wrapper->response_)];
}

- (void)errorPassedToFailure {
  RetrofitRetrofitError *exception = RetrofitRetrofitError_unexpectedErrorWithNSString_withNSException_(@"", create_JavaLangRuntimeException_init());
  [((id<OrgMockitoStubbingOngoingStubbing>) nil_chk(OrgMockitoMockito_whenWithId_([((RetrofitCallbackRunnable *) nil_chk(callbackRunnable_)) obtainResponse]))) thenThrowWithNSExceptionArray:[IOSObjectArray arrayWithObjects:(id[]){ exception } count:1 type:NSException_class_()]];
  [((RetrofitCallbackRunnable *) nil_chk(callbackRunnable_)) run];
  [((id<JavaUtilConcurrentExecutor>) nil_chk(OrgMockitoMockito_verifyWithId_(executor_))) executeWithJavaLangRunnable:OrgMockitoMatchers_anyWithIOSClass_(JavaLangRunnable_class_())];
  [((id<RetrofitCallback>) nil_chk(OrgMockitoMockito_verifyWithId_(callback_))) failureWithRetrofitRetrofitError:OrgMockitoMatchers_sameWithId_(exception)];
}

- (void)dealloc {
  RELEASE_(executor_);
  RELEASE_(callbackRunnable_);
  RELEASE_(callback_);
  RELEASE_(errorHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 2, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setUp);
  methods[2].selector = @selector(responsePassedToSuccess);
  methods[3].selector = @selector(errorPassedToFailure);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "executor_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callbackRunnable_", "LRetrofitCallbackRunnable;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
    { "callback_", "LRetrofitCallback;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
    { "errorHandler_", "LRetrofitErrorHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&RetrofitCallbackRunnableTest__Annotations$0, (void *)&RetrofitCallbackRunnableTest__Annotations$1, (void *)&RetrofitCallbackRunnableTest__Annotations$2, "Lretrofit/CallbackRunnable<Ljava/lang/Object;>;", "Lretrofit/Callback<Ljava/lang/Object;>;", "LRetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable;" };
  static const J2ObjcClassInfo _RetrofitCallbackRunnableTest = { "CallbackRunnableTest", "retrofit", ptrTable, methods, fields, 7, 0x1, 4, 4, -1, 5, -1, -1, -1 };
  return &_RetrofitCallbackRunnableTest;
}

@end

void RetrofitCallbackRunnableTest_init(RetrofitCallbackRunnableTest *self) {
  NSObject_init(self);
  JreStrongAssign(&self->executor_, OrgMockitoMockito_spyWithId_(create_RetrofitUtils_SynchronousExecutor_init()));
  JreStrongAssign(&self->errorHandler_, JreLoadStatic(RetrofitErrorHandler, DEFAULT));
}

RetrofitCallbackRunnableTest *new_RetrofitCallbackRunnableTest_init() {
  J2OBJC_NEW_IMPL(RetrofitCallbackRunnableTest, init)
}

RetrofitCallbackRunnableTest *create_RetrofitCallbackRunnableTest_init() {
  J2OBJC_CREATE_IMPL(RetrofitCallbackRunnableTest, init)
}

IOSObjectArray *RetrofitCallbackRunnableTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitCallbackRunnableTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *RetrofitCallbackRunnableTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitCallbackRunnableTest)

@implementation RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable

- (instancetype)initWithRetrofitCallback:(id<RetrofitCallback>)callback
          withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)callbackExecutor
                withRetrofitErrorHandler:(id<RetrofitErrorHandler>)errorHandler {
  RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(self, callback, callbackExecutor, errorHandler);
  return self;
}

- (RetrofitResponseWrapper *)obtainResponse {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LRetrofitResponseWrapper;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofitCallback:withJavaUtilConcurrentExecutor:withRetrofitErrorHandler:);
  methods[1].selector = @selector(obtainResponse);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LRetrofitCallback;LJavaUtilConcurrentExecutor;LRetrofitErrorHandler;", "(Lretrofit/Callback<Ljava/lang/Object;>;Ljava/util/concurrent/Executor;Lretrofit/ErrorHandler;)V", "LRetrofitCallbackRunnableTest;", "Lretrofit/CallbackRunnable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable = { "SemiAnonymousCallbackRunnable", "retrofit", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, 3, -1 };
  return &_RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable;
}

@end

void RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable *self, id<RetrofitCallback> callback, id<JavaUtilConcurrentExecutor> callbackExecutor, id<RetrofitErrorHandler> errorHandler) {
  RetrofitCallbackRunnable_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(self, callback, callbackExecutor, errorHandler);
}

RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable *new_RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(id<RetrofitCallback> callback, id<JavaUtilConcurrentExecutor> callbackExecutor, id<RetrofitErrorHandler> errorHandler) {
  J2OBJC_NEW_IMPL(RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable, initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_, callback, callbackExecutor, errorHandler)
}

RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable *create_RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable_initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_(id<RetrofitCallback> callback, id<JavaUtilConcurrentExecutor> callbackExecutor, id<RetrofitErrorHandler> errorHandler) {
  J2OBJC_CREATE_IMPL(RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable, initWithRetrofitCallback_withJavaUtilConcurrentExecutor_withRetrofitErrorHandler_, callback, callbackExecutor, errorHandler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitCallbackRunnableTest_SemiAnonymousCallbackRunnable)
