//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldContainSubsequence")
#ifdef RESTRICT_OrgAssertjCoreErrorShouldContainSubsequence
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldContainSubsequence 0
#else
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldContainSubsequence 1
#endif
#undef RESTRICT_OrgAssertjCoreErrorShouldContainSubsequence

#if !defined (OrgAssertjCoreErrorShouldContainSubsequence_) && (INCLUDE_ALL_OrgAssertjCoreErrorShouldContainSubsequence || defined(INCLUDE_OrgAssertjCoreErrorShouldContainSubsequence))
#define OrgAssertjCoreErrorShouldContainSubsequence_

#define RESTRICT_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#define INCLUDE_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"

@protocol OrgAssertjCoreErrorErrorMessageFactory;
@protocol OrgAssertjCoreInternalComparisonStrategy;

@interface OrgAssertjCoreErrorShouldContainSubsequence : OrgAssertjCoreErrorBasicErrorMessageFactory

#pragma mark Public

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainSubsequenceWithId:(id)actual
                                                                      withId:(id)subsequence;

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainSubsequenceWithId:(id)actual
                                                                      withId:(id)subsequence
                                withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreErrorShouldContainSubsequence)

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainSubsequence_shouldContainSubsequenceWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id subsequence, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainSubsequence_shouldContainSubsequenceWithId_withId_(id actual, id subsequence);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreErrorShouldContainSubsequence)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldContainSubsequence")
