//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreDataOffset.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeEqualWithinOffset.h"

@interface OrgAssertjCoreErrorShouldBeEqualWithinOffset ()

- (instancetype)initWithNSNumber:(NSNumber *)actual
                    withNSNumber:(NSNumber *)expected
    withOrgAssertjCoreDataOffset:(OrgAssertjCoreDataOffset *)offset
                    withNSNumber:(NSNumber *)difference;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldBeEqualWithinOffset_initWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_(OrgAssertjCoreErrorShouldBeEqualWithinOffset *self, NSNumber *actual, NSNumber *expected, OrgAssertjCoreDataOffset *offset, NSNumber *difference);

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeEqualWithinOffset *new_OrgAssertjCoreErrorShouldBeEqualWithinOffset_initWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_(NSNumber *actual, NSNumber *expected, OrgAssertjCoreDataOffset *offset, NSNumber *difference) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldBeEqualWithinOffset *create_OrgAssertjCoreErrorShouldBeEqualWithinOffset_initWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_(NSNumber *actual, NSNumber *expected, OrgAssertjCoreDataOffset *offset, NSNumber *difference);

@implementation OrgAssertjCoreErrorShouldBeEqualWithinOffset

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldBeEqualWithNSNumber:(NSNumber *)actual
                                                           withNSNumber:(NSNumber *)expected
                                           withOrgAssertjCoreDataOffset:(OrgAssertjCoreDataOffset *)offset
                                                           withNSNumber:(NSNumber *)difference {
  return OrgAssertjCoreErrorShouldBeEqualWithinOffset_shouldBeEqualWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_(actual, expected, offset, difference);
}

- (instancetype)initWithNSNumber:(NSNumber *)actual
                    withNSNumber:(NSNumber *)expected
    withOrgAssertjCoreDataOffset:(OrgAssertjCoreDataOffset *)offset
                    withNSNumber:(NSNumber *)difference {
  OrgAssertjCoreErrorShouldBeEqualWithinOffset_initWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_(self, actual, expected, offset, difference);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorErrorMessageFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldBeEqualWithNSNumber:withNSNumber:withOrgAssertjCoreDataOffset:withNSNumber:);
  methods[1].selector = @selector(initWithNSNumber:withNSNumber:withOrgAssertjCoreDataOffset:withNSNumber:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldBeEqual", "LNSNumber;LNSNumber;LOrgAssertjCoreDataOffset;LNSNumber;", "<T:Ljava/lang/Number;>(TT;TT;Lorg/assertj/core/data/Offset<TT;>;TT;)Lorg/assertj/core/error/ErrorMessageFactory;", "<T:Ljava/lang/Number;>(Ljava/lang/Number;Ljava/lang/Number;Lorg/assertj/core/data/Offset<TT;>;Ljava/lang/Number;)V" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldBeEqualWithinOffset = { "ShouldBeEqualWithinOffset", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldBeEqualWithinOffset;
}

@end

id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldBeEqualWithinOffset_shouldBeEqualWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_(NSNumber *actual, NSNumber *expected, OrgAssertjCoreDataOffset *offset, NSNumber *difference) {
  OrgAssertjCoreErrorShouldBeEqualWithinOffset_initialize();
  return create_OrgAssertjCoreErrorShouldBeEqualWithinOffset_initWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_(actual, expected, offset, difference);
}

void OrgAssertjCoreErrorShouldBeEqualWithinOffset_initWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_(OrgAssertjCoreErrorShouldBeEqualWithinOffset *self, NSNumber *actual, NSNumber *expected, OrgAssertjCoreDataOffset *offset, NSNumber *difference) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"\nExpecting:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>.\n(a difference of exactly <%s> being considered valid)", [IOSObjectArray arrayWithObjects:(id[]){ actual, expected, ((OrgAssertjCoreDataOffset *) nil_chk(offset))->value_, difference, offset->value_ } count:5 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldBeEqualWithinOffset *new_OrgAssertjCoreErrorShouldBeEqualWithinOffset_initWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_(NSNumber *actual, NSNumber *expected, OrgAssertjCoreDataOffset *offset, NSNumber *difference) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldBeEqualWithinOffset, initWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_, actual, expected, offset, difference)
}

OrgAssertjCoreErrorShouldBeEqualWithinOffset *create_OrgAssertjCoreErrorShouldBeEqualWithinOffset_initWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_(NSNumber *actual, NSNumber *expected, OrgAssertjCoreDataOffset *offset, NSNumber *difference) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldBeEqualWithinOffset, initWithNSNumber_withNSNumber_withOrgAssertjCoreDataOffset_withNSNumber_, actual, expected, offset, difference)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldBeEqualWithinOffset)
