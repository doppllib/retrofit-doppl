//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldContainSequence")
#ifdef RESTRICT_OrgAssertjCoreErrorShouldContainSequence
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldContainSequence 0
#else
#define INCLUDE_ALL_OrgAssertjCoreErrorShouldContainSequence 1
#endif
#undef RESTRICT_OrgAssertjCoreErrorShouldContainSequence

#if !defined (OrgAssertjCoreErrorShouldContainSequence_) && (INCLUDE_ALL_OrgAssertjCoreErrorShouldContainSequence || defined(INCLUDE_OrgAssertjCoreErrorShouldContainSequence))
#define OrgAssertjCoreErrorShouldContainSequence_

#define RESTRICT_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#define INCLUDE_OrgAssertjCoreErrorBasicErrorMessageFactory 1
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"

@protocol OrgAssertjCoreErrorErrorMessageFactory;
@protocol OrgAssertjCoreInternalComparisonStrategy;

@interface OrgAssertjCoreErrorShouldContainSequence : OrgAssertjCoreErrorBasicErrorMessageFactory

#pragma mark Public

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainSequenceWithId:(id)actual
                                                                   withId:(id)sequence;

+ (id<OrgAssertjCoreErrorErrorMessageFactory>)shouldContainSequenceWithId:(id)actual
                                                                   withId:(id)sequence
                             withOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreErrorShouldContainSequence)

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainSequence_shouldContainSequenceWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(id actual, id sequence, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

FOUNDATION_EXPORT id<OrgAssertjCoreErrorErrorMessageFactory> OrgAssertjCoreErrorShouldContainSequence_shouldContainSequenceWithId_withId_(id actual, id sequence);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreErrorShouldContainSequence)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreErrorShouldContainSequence")
