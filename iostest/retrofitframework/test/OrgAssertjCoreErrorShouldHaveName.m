//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldHaveName.h"
#include "java/io/File.h"

@interface OrgAssertjCoreErrorShouldHaveName ()

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                      withNSString:(NSString *)expectedName;

@end

__attribute__((unused)) static void OrgAssertjCoreErrorShouldHaveName_initWithJavaIoFile_withNSString_(OrgAssertjCoreErrorShouldHaveName *self, JavaIoFile *actual, NSString *expectedName);

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveName *new_OrgAssertjCoreErrorShouldHaveName_initWithJavaIoFile_withNSString_(JavaIoFile *actual, NSString *expectedName) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreErrorShouldHaveName *create_OrgAssertjCoreErrorShouldHaveName_initWithJavaIoFile_withNSString_(JavaIoFile *actual, NSString *expectedName);

@implementation OrgAssertjCoreErrorShouldHaveName

+ (OrgAssertjCoreErrorShouldHaveName *)shouldHaveNameWithJavaIoFile:(JavaIoFile *)actual
                                                       withNSString:(NSString *)expectedName {
  return OrgAssertjCoreErrorShouldHaveName_shouldHaveNameWithJavaIoFile_withNSString_(actual, expectedName);
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)actual
                      withNSString:(NSString *)expectedName {
  OrgAssertjCoreErrorShouldHaveName_initWithJavaIoFile_withNSString_(self, actual, expectedName);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreErrorShouldHaveName;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(shouldHaveNameWithJavaIoFile:withNSString:);
  methods[1].selector = @selector(initWithJavaIoFile:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "shouldHaveName", "LJavaIoFile;LNSString;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorShouldHaveName = { "ShouldHaveName", "org.assertj.core.error", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorShouldHaveName;
}

@end

OrgAssertjCoreErrorShouldHaveName *OrgAssertjCoreErrorShouldHaveName_shouldHaveNameWithJavaIoFile_withNSString_(JavaIoFile *actual, NSString *expectedName) {
  OrgAssertjCoreErrorShouldHaveName_initialize();
  return create_OrgAssertjCoreErrorShouldHaveName_initWithJavaIoFile_withNSString_(actual, expectedName);
}

void OrgAssertjCoreErrorShouldHaveName_initWithJavaIoFile_withNSString_(OrgAssertjCoreErrorShouldHaveName *self, JavaIoFile *actual, NSString *expectedName) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, @"%nExpecting%n  <%s>%nto have name:%n  <%s>%nbut had:%n  <%s>.", [IOSObjectArray arrayWithObjects:(id[]){ actual, expectedName, [((JavaIoFile *) nil_chk(actual)) getName] } count:3 type:NSObject_class_()]);
}

OrgAssertjCoreErrorShouldHaveName *new_OrgAssertjCoreErrorShouldHaveName_initWithJavaIoFile_withNSString_(JavaIoFile *actual, NSString *expectedName) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorShouldHaveName, initWithJavaIoFile_withNSString_, actual, expectedName)
}

OrgAssertjCoreErrorShouldHaveName *create_OrgAssertjCoreErrorShouldHaveName_initWithJavaIoFile_withNSString_(JavaIoFile *actual, NSString *expectedName) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorShouldHaveName, initWithJavaIoFile_withNSString_, actual, expectedName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorShouldHaveName)
