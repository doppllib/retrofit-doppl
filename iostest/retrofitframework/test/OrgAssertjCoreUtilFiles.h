//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreUtilFiles")
#ifdef RESTRICT_OrgAssertjCoreUtilFiles
#define INCLUDE_ALL_OrgAssertjCoreUtilFiles 0
#else
#define INCLUDE_ALL_OrgAssertjCoreUtilFiles 1
#endif
#undef RESTRICT_OrgAssertjCoreUtilFiles

#if !defined (OrgAssertjCoreUtilFiles_) && (INCLUDE_ALL_OrgAssertjCoreUtilFiles || defined(INCLUDE_OrgAssertjCoreUtilFiles))
#define OrgAssertjCoreUtilFiles_

@class JavaIoFile;
@class JavaIoOutputStream;
@class JavaIoWriter;
@class JavaNioCharsetCharset;
@protocol JavaUtilList;

@interface OrgAssertjCoreUtilFiles : NSObject

#pragma mark Public

+ (NSString *)contentOfWithJavaIoFile:(JavaIoFile *)file
            withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

+ (NSString *)contentOfWithJavaIoFile:(JavaIoFile *)file
                         withNSString:(NSString *)charsetName;

+ (JavaIoFile *)currentFolder;

+ (void)delete__WithJavaIoFile:(JavaIoFile *)file;

+ (id<JavaUtilList>)fileNamesInWithNSString:(NSString *)dirName
                                withBoolean:(jboolean)recurse;

+ (void)flushAndCloseWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (void)flushAndCloseWithJavaIoWriter:(JavaIoWriter *)writer;

+ (id<JavaUtilList>)linesOfWithJavaIoFile:(JavaIoFile *)file
                withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

+ (id<JavaUtilList>)linesOfWithJavaIoFile:(JavaIoFile *)file
                             withNSString:(NSString *)charsetName;

+ (JavaIoFile *)newFileWithNSString:(NSString *)path OBJC_METHOD_FAMILY_NONE;

+ (JavaIoFile *)newFolderWithNSString:(NSString *)path OBJC_METHOD_FAMILY_NONE;

+ (JavaIoFile *)newTemporaryFile OBJC_METHOD_FAMILY_NONE;

+ (JavaIoFile *)newTemporaryFolder OBJC_METHOD_FAMILY_NONE;

+ (JavaIoFile *)temporaryFolder;

+ (NSString *)temporaryFolderPath;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgAssertjCoreUtilFiles)

FOUNDATION_EXPORT id<JavaUtilList> OrgAssertjCoreUtilFiles_fileNamesInWithNSString_withBoolean_(NSString *dirName, jboolean recurse);

FOUNDATION_EXPORT JavaIoFile *OrgAssertjCoreUtilFiles_temporaryFolder();

FOUNDATION_EXPORT NSString *OrgAssertjCoreUtilFiles_temporaryFolderPath();

FOUNDATION_EXPORT JavaIoFile *OrgAssertjCoreUtilFiles_newTemporaryFile();

FOUNDATION_EXPORT JavaIoFile *OrgAssertjCoreUtilFiles_newTemporaryFolder();

FOUNDATION_EXPORT JavaIoFile *OrgAssertjCoreUtilFiles_newFileWithNSString_(NSString *path);

FOUNDATION_EXPORT JavaIoFile *OrgAssertjCoreUtilFiles_newFolderWithNSString_(NSString *path);

FOUNDATION_EXPORT void OrgAssertjCoreUtilFiles_flushAndCloseWithJavaIoWriter_(JavaIoWriter *writer);

FOUNDATION_EXPORT void OrgAssertjCoreUtilFiles_flushAndCloseWithJavaIoOutputStream_(JavaIoOutputStream *outArg);

FOUNDATION_EXPORT JavaIoFile *OrgAssertjCoreUtilFiles_currentFolder();

FOUNDATION_EXPORT void OrgAssertjCoreUtilFiles_delete__WithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT NSString *OrgAssertjCoreUtilFiles_contentOfWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *charsetName);

FOUNDATION_EXPORT NSString *OrgAssertjCoreUtilFiles_contentOfWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT id<JavaUtilList> OrgAssertjCoreUtilFiles_linesOfWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT id<JavaUtilList> OrgAssertjCoreUtilFiles_linesOfWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *charsetName);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreUtilFiles)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreUtilFiles")
