//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAbstractAssert.h"
#include "OrgAssertjCoreApiAbstractIterableAssert.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreApiIterableExtractor.h"
#include "OrgAssertjCoreApiListAssert.h"
#include "OrgAssertjCoreApiWritableAssertionInfo.h"
#include "OrgAssertjCoreExtractorExtractors.h"
#include "OrgAssertjCoreGroupsFieldsOrPropertiesExtractor.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalFieldByFieldComparator.h"
#include "OrgAssertjCoreInternalIgnoringFieldsComparator.h"
#include "OrgAssertjCoreInternalInternalIterables.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalIterableElementComparisonStrategy.h"
#include "OrgAssertjCoreInternalObjectArrays.h"
#include "OrgAssertjCoreInternalOnFieldsComparator.h"
#include "OrgAssertjCoreUtilIterables.h"
#include "OrgAssertjCoreUtilLists.h"
#include "java/lang/Iterable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgAssertjCoreApiAbstractIterableAssert

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)actual
                            withIOSClass:(IOSClass *)selfType {
  OrgAssertjCoreApiAbstractIterableAssert_initWithJavaLangIterable_withIOSClass_(self, actual, selfType);
  return self;
}

- (void)isNullOrEmpty {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_];
}

- (void)isEmpty {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_];
}

- (OrgAssertjCoreApiAbstractIterableAssert *)isNotEmpty {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)hasSizeWithInt:(jint)expected {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertHasSizeWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withInt:expected];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)hasSameSizeAsWithId:(id)other {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withId:other];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)hasSameSizeAsWithJavaLangIterable:(id<JavaLangIterable>)other {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withJavaLangIterable:other];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)containsWithNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertContainsWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withNSObjectArray:values];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)containsOnlyWithNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withNSObjectArray:values];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)containsOnlyOnceWithNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withNSObjectArray:values];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)containsExactlyWithNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertContainsExactlyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withNSObjectArray:values];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)isSubsetOfWithJavaLangIterable:(id<JavaLangIterable>)values {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertIsSubsetOfWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withJavaLangIterable:values];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)containsSequenceWithNSObjectArray:(IOSObjectArray *)sequence {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withNSObjectArray:sequence];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)containsSubsequenceWithNSObjectArray:(IOSObjectArray *)sequence {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withNSObjectArray:sequence];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)doesNotContainWithNSObjectArray:(IOSObjectArray *)values {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withNSObjectArray:values];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)doesNotContainAnyElementsOfWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertDoesNotContainAnyElementsOfWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withJavaLangIterable:iterable];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)doesNotHaveDuplicates {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)startsWithWithNSObjectArray:(IOSObjectArray *)sequence {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertStartsWithWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withNSObjectArray:sequence];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)endsWithWithNSObjectArray:(IOSObjectArray *)sequence {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertEndsWithWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withNSObjectArray:sequence];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)containsNull {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertContainsNullWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)doesNotContainNull {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertDoesNotContainNullWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)areWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertAreWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)areNotWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertAreNotWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)haveWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertHaveWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)doNotHaveWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertDoNotHaveWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)areAtLeastOneWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [self areAtLeastWithInt:1 withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)areAtLeastWithInt:(jint)times
                                withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertAreAtLeastWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)areAtMostWithInt:(jint)times
                               withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertAreAtMostWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)areExactlyWithInt:(jint)times
                                withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertAreExactlyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)haveAtLeastOneWithOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return [self haveAtLeastWithInt:1 withOrgAssertjCoreApiCondition:condition];
}

- (OrgAssertjCoreApiAbstractIterableAssert *)haveAtLeastWithInt:(jint)times
                                 withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertHaveAtLeastWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)haveAtMostWithInt:(jint)times
                                withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertHaveAtMostWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)haveExactlyWithInt:(jint)times
                                 withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertHaveExactlyWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withInt:times withOrgAssertjCoreApiCondition:condition];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)hasAtLeastOneElementOfTypeWithIOSClass:(IOSClass *)type {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(OrgAssertjCoreInternalObjectArrays_instance())) assertHasAtLeastOneElementOfTypeWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:OrgAssertjCoreUtilIterables_toArrayWithJavaLangIterable_(actual_) withIOSClass:type];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)hasOnlyElementsOfTypeWithIOSClass:(IOSClass *)type {
  [((OrgAssertjCoreInternalObjectArrays *) nil_chk(OrgAssertjCoreInternalObjectArrays_instance())) assertHasOnlyElementsOfTypeWithOrgAssertjCoreApiAssertionInfo:info_ withNSObjectArray:OrgAssertjCoreUtilIterables_toArrayWithJavaLangIterable_(actual_) withIOSClass:type];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)containsAllWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  [((OrgAssertjCoreInternalInternalIterables *) nil_chk(iterables_)) assertContainsAllWithOrgAssertjCoreApiAssertionInfo:info_ withJavaLangIterable:actual_ withJavaLangIterable:iterable];
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)usingElementComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)elementComparator {
  JreStrongAssignAndConsume(&self->iterables_, new_OrgAssertjCoreInternalInternalIterables_initWithOrgAssertjCoreInternalComparisonStrategy_(create_OrgAssertjCoreInternalComparatorBasedComparisonStrategy_initWithJavaUtilComparator_(elementComparator)));
  JreStrongAssignAndConsume(&objects_, new_OrgAssertjCoreInternalInternalObjects_initWithOrgAssertjCoreInternalComparisonStrategy_(create_OrgAssertjCoreInternalIterableElementComparisonStrategy_initWithJavaUtilComparator_(elementComparator)));
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)usingDefaultElementComparator {
  [self usingDefaultComparator];
  JreStrongAssign(&self->iterables_, OrgAssertjCoreInternalInternalIterables_instance());
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiListAssert *)extractingWithNSString:(NSString *)propertyOrField {
  id<JavaUtilList> values = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithJavaLangIterable_withOrgAssertjCoreApiIterableExtractor_(actual_, OrgAssertjCoreExtractorExtractors_byNameWithNSString_(propertyOrField));
  return create_OrgAssertjCoreApiListAssert_initWithJavaUtilList_(values);
}

- (OrgAssertjCoreApiListAssert *)extractingResultOfWithNSString:(NSString *)method {
  id<JavaUtilList> values = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithJavaLangIterable_withOrgAssertjCoreApiIterableExtractor_(actual_, OrgAssertjCoreExtractorExtractors_resultOfWithNSString_(method));
  return create_OrgAssertjCoreApiListAssert_initWithJavaUtilList_(values);
}

- (OrgAssertjCoreApiListAssert *)extractingResultOfWithNSString:(NSString *)method
                                                   withIOSClass:(IOSClass *)extractedType {
  id<JavaUtilList> values = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithJavaLangIterable_withOrgAssertjCoreApiIterableExtractor_(actual_, OrgAssertjCoreExtractorExtractors_resultOfWithNSString_(method));
  return create_OrgAssertjCoreApiListAssert_initWithJavaUtilList_(values);
}

- (OrgAssertjCoreApiListAssert *)extractingWithNSString:(NSString *)propertyOrField
                                           withIOSClass:(IOSClass *)extractingType {
  id<JavaUtilList> values = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithJavaLangIterable_withOrgAssertjCoreApiIterableExtractor_(actual_, OrgAssertjCoreExtractorExtractors_byNameWithNSString_(propertyOrField));
  return create_OrgAssertjCoreApiListAssert_initWithJavaUtilList_(values);
}

- (OrgAssertjCoreApiListAssert *)extractingWithNSStringArray:(IOSObjectArray *)propertiesOrFields {
  return [self extractingWithOrgAssertjCoreApiIterableExtractor:OrgAssertjCoreExtractorExtractors_byNameWithNSStringArray_(propertiesOrFields)];
}

- (OrgAssertjCoreApiListAssert *)extractingWithOrgAssertjCoreApiIterableExtractor:(id<OrgAssertjCoreApiIterableExtractor>)extractor {
  id<JavaUtilList> values = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithJavaLangIterable_withOrgAssertjCoreApiIterableExtractor_(actual_, extractor);
  return create_OrgAssertjCoreApiListAssert_initWithJavaUtilList_(values);
}

- (OrgAssertjCoreApiListAssert *)flatExtractingWithOrgAssertjCoreApiIterableExtractor:(id<OrgAssertjCoreApiIterableExtractor>)extractor {
  id<JavaUtilList> result = OrgAssertjCoreUtilLists_newArrayList();
  id<JavaUtilList> extractedValues = OrgAssertjCoreGroupsFieldsOrPropertiesExtractor_extractWithJavaLangIterable_withOrgAssertjCoreApiIterableExtractor_(actual_, extractor);
  for (id<JavaUtilCollection> __strong iterable in nil_chk(extractedValues)) {
    [((id<JavaUtilList>) nil_chk(result)) addAllWithJavaUtilCollection:iterable];
  }
  return create_OrgAssertjCoreApiListAssert_initWithJavaUtilList_(result);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)containsExactlyElementsOfWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  return [self containsExactlyWithNSObjectArray:OrgAssertjCoreUtilIterables_toArrayWithJavaLangIterable_(iterable)];
}

- (OrgAssertjCoreApiAbstractIterableAssert *)containsOnlyElementsOfWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  return [self containsOnlyWithNSObjectArray:OrgAssertjCoreUtilIterables_toArrayWithJavaLangIterable_(iterable)];
}

- (OrgAssertjCoreApiAbstractIterableAssert *)hasSameElementsAsWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  return [self containsOnlyWithNSObjectArray:OrgAssertjCoreUtilIterables_toArrayWithJavaLangIterable_(iterable)];
}

- (OrgAssertjCoreApiAbstractIterableAssert *)usingFieldByFieldElementComparator {
  return [self usingElementComparatorWithJavaUtilComparator:create_OrgAssertjCoreInternalFieldByFieldComparator_init()];
}

- (OrgAssertjCoreApiAbstractIterableAssert *)usingElementComparatorOnFieldsWithNSStringArray:(IOSObjectArray *)fields {
  return [self usingElementComparatorWithJavaUtilComparator:create_OrgAssertjCoreInternalOnFieldsComparator_initWithNSStringArray_(fields)];
}

- (OrgAssertjCoreApiAbstractIterableAssert *)usingComparisonStrategyWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  JreStrongAssignAndConsume(&iterables_, new_OrgAssertjCoreInternalInternalIterables_initWithOrgAssertjCoreInternalComparisonStrategy_(comparisonStrategy));
  return ((OrgAssertjCoreApiAbstractIterableAssert *) myself_);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)usingElementComparatorIgnoringFieldsWithNSStringArray:(IOSObjectArray *)fields {
  return [self usingElementComparatorWithJavaUtilComparator:create_OrgAssertjCoreInternalIgnoringFieldsComparator_initWithNSStringArray_(fields)];
}

- (OrgAssertjCoreApiAbstractIterableAssert *)inHexadecimal {
  return ((OrgAssertjCoreApiAbstractIterableAssert *) [super inHexadecimal]);
}

- (OrgAssertjCoreApiAbstractIterableAssert *)inBinary {
  return ((OrgAssertjCoreApiAbstractIterableAssert *) [super inBinary]);
}

- (void)dealloc {
  RELEASE_(iterables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 6, 9, -1, 10, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 11, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 14, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 15, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 16, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 17, 9, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 19, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 20, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 21, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 22, 9, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 23, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 24, 12, -1, 13, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 25, 26, -1, 27, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 28, 26, -1, 27, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 29, 26, -1, 27, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 30, 26, -1, 27, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 31, 26, -1, 27, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 32, 33, -1, 34, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 35, 33, -1, 34, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 36, 33, -1, 34, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 37, 26, -1, 27, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 38, 33, -1, 34, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 39, 33, -1, 34, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 40, 33, -1, 34, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 41, 42, -1, 43, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 44, 42, -1, 43, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 45, 9, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 46, 47, -1, 48, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiListAssert;", 0x1, 49, 50, -1, 51, -1, -1 },
    { NULL, "LOrgAssertjCoreApiListAssert;", 0x1, 52, 50, -1, 51, -1, -1 },
    { NULL, "LOrgAssertjCoreApiListAssert;", 0x1, 52, 53, -1, 54, -1, -1 },
    { NULL, "LOrgAssertjCoreApiListAssert;", 0x1, 49, 53, -1, 54, -1, -1 },
    { NULL, "LOrgAssertjCoreApiListAssert;", 0x81, 49, 55, -1, 56, -1, -1 },
    { NULL, "LOrgAssertjCoreApiListAssert;", 0x1, 49, 57, -1, 58, -1, -1 },
    { NULL, "LOrgAssertjCoreApiListAssert;", 0x1, 59, 57, -1, 60, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 61, 9, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 62, 9, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, 63, 9, -1, 18, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 64, 55, -1, 65, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x4, 66, 67, -1, 68, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x81, 69, 55, -1, 65, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiAbstractIterableAssert;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:withIOSClass:);
  methods[1].selector = @selector(isNullOrEmpty);
  methods[2].selector = @selector(isEmpty);
  methods[3].selector = @selector(isNotEmpty);
  methods[4].selector = @selector(hasSizeWithInt:);
  methods[5].selector = @selector(hasSameSizeAsWithId:);
  methods[6].selector = @selector(hasSameSizeAsWithJavaLangIterable:);
  methods[7].selector = @selector(containsWithNSObjectArray:);
  methods[8].selector = @selector(containsOnlyWithNSObjectArray:);
  methods[9].selector = @selector(containsOnlyOnceWithNSObjectArray:);
  methods[10].selector = @selector(containsExactlyWithNSObjectArray:);
  methods[11].selector = @selector(isSubsetOfWithJavaLangIterable:);
  methods[12].selector = @selector(containsSequenceWithNSObjectArray:);
  methods[13].selector = @selector(containsSubsequenceWithNSObjectArray:);
  methods[14].selector = @selector(doesNotContainWithNSObjectArray:);
  methods[15].selector = @selector(doesNotContainAnyElementsOfWithJavaLangIterable:);
  methods[16].selector = @selector(doesNotHaveDuplicates);
  methods[17].selector = @selector(startsWithWithNSObjectArray:);
  methods[18].selector = @selector(endsWithWithNSObjectArray:);
  methods[19].selector = @selector(containsNull);
  methods[20].selector = @selector(doesNotContainNull);
  methods[21].selector = @selector(areWithOrgAssertjCoreApiCondition:);
  methods[22].selector = @selector(areNotWithOrgAssertjCoreApiCondition:);
  methods[23].selector = @selector(haveWithOrgAssertjCoreApiCondition:);
  methods[24].selector = @selector(doNotHaveWithOrgAssertjCoreApiCondition:);
  methods[25].selector = @selector(areAtLeastOneWithOrgAssertjCoreApiCondition:);
  methods[26].selector = @selector(areAtLeastWithInt:withOrgAssertjCoreApiCondition:);
  methods[27].selector = @selector(areAtMostWithInt:withOrgAssertjCoreApiCondition:);
  methods[28].selector = @selector(areExactlyWithInt:withOrgAssertjCoreApiCondition:);
  methods[29].selector = @selector(haveAtLeastOneWithOrgAssertjCoreApiCondition:);
  methods[30].selector = @selector(haveAtLeastWithInt:withOrgAssertjCoreApiCondition:);
  methods[31].selector = @selector(haveAtMostWithInt:withOrgAssertjCoreApiCondition:);
  methods[32].selector = @selector(haveExactlyWithInt:withOrgAssertjCoreApiCondition:);
  methods[33].selector = @selector(hasAtLeastOneElementOfTypeWithIOSClass:);
  methods[34].selector = @selector(hasOnlyElementsOfTypeWithIOSClass:);
  methods[35].selector = @selector(containsAllWithJavaLangIterable:);
  methods[36].selector = @selector(usingElementComparatorWithJavaUtilComparator:);
  methods[37].selector = @selector(usingDefaultElementComparator);
  methods[38].selector = @selector(extractingWithNSString:);
  methods[39].selector = @selector(extractingResultOfWithNSString:);
  methods[40].selector = @selector(extractingResultOfWithNSString:withIOSClass:);
  methods[41].selector = @selector(extractingWithNSString:withIOSClass:);
  methods[42].selector = @selector(extractingWithNSStringArray:);
  methods[43].selector = @selector(extractingWithOrgAssertjCoreApiIterableExtractor:);
  methods[44].selector = @selector(flatExtractingWithOrgAssertjCoreApiIterableExtractor:);
  methods[45].selector = @selector(containsExactlyElementsOfWithJavaLangIterable:);
  methods[46].selector = @selector(containsOnlyElementsOfWithJavaLangIterable:);
  methods[47].selector = @selector(hasSameElementsAsWithJavaLangIterable:);
  methods[48].selector = @selector(usingFieldByFieldElementComparator);
  methods[49].selector = @selector(usingElementComparatorOnFieldsWithNSStringArray:);
  methods[50].selector = @selector(usingComparisonStrategyWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[51].selector = @selector(usingElementComparatorIgnoringFieldsWithNSStringArray:);
  methods[52].selector = @selector(inHexadecimal);
  methods[53].selector = @selector(inBinary);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iterables_", "LOrgAssertjCoreInternalInternalIterables;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangIterable;LIOSClass;", "(TA;Ljava/lang/Class<*>;)V", "()TS;", "hasSize", "I", "(I)TS;", "hasSameSizeAs", "LNSObject;", "(Ljava/lang/Object;)TS;", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)TS;", "contains", "[LNSObject;", "([TT;)TS;", "containsOnly", "containsOnlyOnce", "containsExactly", "isSubsetOf", "(Ljava/lang/Iterable<+TT;>;)TS;", "containsSequence", "containsSubsequence", "doesNotContain", "doesNotContainAnyElementsOf", "startsWith", "endsWith", "are", "LOrgAssertjCoreApiCondition;", "(Lorg/assertj/core/api/Condition<-TT;>;)TS;", "areNot", "have", "doNotHave", "areAtLeastOne", "areAtLeast", "ILOrgAssertjCoreApiCondition;", "(ILorg/assertj/core/api/Condition<-TT;>;)TS;", "areAtMost", "areExactly", "haveAtLeastOne", "haveAtLeast", "haveAtMost", "haveExactly", "hasAtLeastOneElementOfType", "LIOSClass;", "(Ljava/lang/Class<*>;)TS;", "hasOnlyElementsOfType", "containsAll", "usingElementComparator", "LJavaUtilComparator;", "(Ljava/util/Comparator<-TT;>;)TS;", "extracting", "LNSString;", "(Ljava/lang/String;)Lorg/assertj/core/api/ListAssert<Ljava/lang/Object;>;", "extractingResultOf", "LNSString;LIOSClass;", "<P:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TP;>;)Lorg/assertj/core/api/ListAssert<TP;>;", "[LNSString;", "([Ljava/lang/String;)Lorg/assertj/core/api/ListAssert<Lorg/assertj/core/groups/Tuple;>;", "LOrgAssertjCoreApiIterableExtractor;", "<V:Ljava/lang/Object;>(Lorg/assertj/core/api/iterable/Extractor<-TT;TV;>;)Lorg/assertj/core/api/ListAssert<TV;>;", "flatExtracting", "<V:Ljava/lang/Object;>(Lorg/assertj/core/api/iterable/Extractor<-TT;+Ljava/util/Collection<TV;>;>;)Lorg/assertj/core/api/ListAssert<TV;>;", "containsExactlyElementsOf", "containsOnlyElementsOf", "hasSameElementsAs", "usingElementComparatorOnFields", "([Ljava/lang/String;)TS;", "usingComparisonStrategy", "LOrgAssertjCoreInternalComparisonStrategy;", "(Lorg/assertj/core/internal/ComparisonStrategy;)TS;", "usingElementComparatorIgnoringFields", "<S:Lorg/assertj/core/api/AbstractIterableAssert<TS;TA;TT;>;A::Ljava/lang/Iterable<TT;>;T:Ljava/lang/Object;>Lorg/assertj/core/api/AbstractAssert<TS;TA;>;Lorg/assertj/core/api/ObjectEnumerableAssert<TS;TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiAbstractIterableAssert = { "AbstractIterableAssert", "org.assertj.core.api", ptrTable, methods, fields, 7, 0x401, 54, 1, -1, -1, -1, 70, -1 };
  return &_OrgAssertjCoreApiAbstractIterableAssert;
}

@end

void OrgAssertjCoreApiAbstractIterableAssert_initWithJavaLangIterable_withIOSClass_(OrgAssertjCoreApiAbstractIterableAssert *self, id<JavaLangIterable> actual, IOSClass *selfType) {
  OrgAssertjCoreApiAbstractAssert_initWithId_withIOSClass_(self, actual, selfType);
  JreStrongAssign(&self->iterables_, OrgAssertjCoreInternalInternalIterables_instance());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiAbstractIterableAssert)
