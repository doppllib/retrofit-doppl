//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreDescriptionDescription.h"
#include "OrgAssertjCoreErrorAbstractShouldHaveTextContent.h"
#include "OrgAssertjCoreErrorBasicErrorMessageFactory.h"
#include "OrgAssertjCorePresentationRepresentation.h"
#include "OrgAssertjCoreUtilSystemProperties.h"
#include "java/lang/StringBuilder.h"
#include "java/util/List.h"

@implementation OrgAssertjCoreErrorAbstractShouldHaveTextContent

- (instancetype)initWithNSString:(NSString *)format
               withNSObjectArray:(IOSObjectArray *)arguments {
  OrgAssertjCoreErrorAbstractShouldHaveTextContent_initWithNSString_withNSObjectArray_(self, format, arguments);
  return self;
}

- (NSString *)createWithOrgAssertjCoreDescriptionDescription:(OrgAssertjCoreDescriptionDescription *)d
                withOrgAssertjCorePresentationRepresentation:(id<OrgAssertjCorePresentationRepresentation>)representation {
  return JreStrcat("$$", [super createWithOrgAssertjCoreDescriptionDescription:d withOrgAssertjCorePresentationRepresentation:representation], diffs_);
}

+ (NSString *)diffsAsStringWithJavaUtilList:(id<JavaUtilList>)diffsList {
  return OrgAssertjCoreErrorAbstractShouldHaveTextContent_diffsAsStringWithJavaUtilList_(diffsList);
}

- (void)dealloc {
  RELEASE_(diffs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSObjectArray:);
  methods[1].selector = @selector(createWithOrgAssertjCoreDescriptionDescription:withOrgAssertjCorePresentationRepresentation:);
  methods[2].selector = @selector(diffsAsStringWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "diffs_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "create", "LOrgAssertjCoreDescriptionDescription;LOrgAssertjCorePresentationRepresentation;", "diffsAsString", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;" };
  static const J2ObjcClassInfo _OrgAssertjCoreErrorAbstractShouldHaveTextContent = { "AbstractShouldHaveTextContent", "org.assertj.core.error", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreErrorAbstractShouldHaveTextContent;
}

@end

void OrgAssertjCoreErrorAbstractShouldHaveTextContent_initWithNSString_withNSObjectArray_(OrgAssertjCoreErrorAbstractShouldHaveTextContent *self, NSString *format, IOSObjectArray *arguments) {
  OrgAssertjCoreErrorBasicErrorMessageFactory_initWithNSString_withNSObjectArray_(self, format, arguments);
}

OrgAssertjCoreErrorAbstractShouldHaveTextContent *new_OrgAssertjCoreErrorAbstractShouldHaveTextContent_initWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *arguments) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreErrorAbstractShouldHaveTextContent, initWithNSString_withNSObjectArray_, format, arguments)
}

OrgAssertjCoreErrorAbstractShouldHaveTextContent *create_OrgAssertjCoreErrorAbstractShouldHaveTextContent_initWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *arguments) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreErrorAbstractShouldHaveTextContent, initWithNSString_withNSObjectArray_, format, arguments)
}

NSString *OrgAssertjCoreErrorAbstractShouldHaveTextContent_diffsAsStringWithJavaUtilList_(id<JavaUtilList> diffsList) {
  OrgAssertjCoreErrorAbstractShouldHaveTextContent_initialize();
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  for (NSString * __strong diff in nil_chk(diffsList)) [((JavaLangStringBuilder *) nil_chk([stringBuilder appendWithNSString:JreLoadStatic(OrgAssertjCoreUtilSystemProperties, LINE_SEPARATOR)])) appendWithNSString:diff];
  return [stringBuilder description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreErrorAbstractShouldHaveTextContent)
