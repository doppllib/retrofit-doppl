//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiObjectEnumerableAssert.h"

@interface OrgAssertjCoreApiObjectEnumerableAssert : NSObject

@end

@implementation OrgAssertjCoreApiObjectEnumerableAssert

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x481, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x481, 3, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x481, 4, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x481, 5, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x481, 6, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x481, 7, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x481, 8, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, -1, -1, -1, 9, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x481, 10, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x481, 11, 1, -1, 2, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, -1, -1, -1, 9, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, -1, -1, -1, 9, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 12, 13, -1, 14, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 15, 13, -1, 14, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 16, 13, -1, 14, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 17, 13, -1, 14, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 18, 19, -1, 20, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 21, 13, -1, 14, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 22, 19, -1, 20, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 23, 19, -1, 20, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 24, 13, -1, 14, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 25, 19, -1, 20, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 26, 19, -1, 20, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 27, 19, -1, 20, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 28, 29, -1, 30, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 31, 32, -1, 33, -1, -1 },
    { NULL, "LOrgAssertjCoreApiObjectEnumerableAssert;", 0x401, 34, 32, -1, 33, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(containsWithNSObjectArray:);
  methods[1].selector = @selector(containsOnlyWithNSObjectArray:);
  methods[2].selector = @selector(containsOnlyOnceWithNSObjectArray:);
  methods[3].selector = @selector(containsExactlyWithNSObjectArray:);
  methods[4].selector = @selector(containsSequenceWithNSObjectArray:);
  methods[5].selector = @selector(containsSubsequenceWithNSObjectArray:);
  methods[6].selector = @selector(doesNotContainWithNSObjectArray:);
  methods[7].selector = @selector(doesNotHaveDuplicates);
  methods[8].selector = @selector(startsWithWithNSObjectArray:);
  methods[9].selector = @selector(endsWithWithNSObjectArray:);
  methods[10].selector = @selector(containsNull);
  methods[11].selector = @selector(doesNotContainNull);
  methods[12].selector = @selector(areWithOrgAssertjCoreApiCondition:);
  methods[13].selector = @selector(areNotWithOrgAssertjCoreApiCondition:);
  methods[14].selector = @selector(haveWithOrgAssertjCoreApiCondition:);
  methods[15].selector = @selector(doNotHaveWithOrgAssertjCoreApiCondition:);
  methods[16].selector = @selector(areAtLeastWithInt:withOrgAssertjCoreApiCondition:);
  methods[17].selector = @selector(areAtLeastOneWithOrgAssertjCoreApiCondition:);
  methods[18].selector = @selector(areAtMostWithInt:withOrgAssertjCoreApiCondition:);
  methods[19].selector = @selector(areExactlyWithInt:withOrgAssertjCoreApiCondition:);
  methods[20].selector = @selector(haveAtLeastOneWithOrgAssertjCoreApiCondition:);
  methods[21].selector = @selector(haveAtLeastWithInt:withOrgAssertjCoreApiCondition:);
  methods[22].selector = @selector(haveAtMostWithInt:withOrgAssertjCoreApiCondition:);
  methods[23].selector = @selector(haveExactlyWithInt:withOrgAssertjCoreApiCondition:);
  methods[24].selector = @selector(containsAllWithJavaLangIterable:);
  methods[25].selector = @selector(hasAtLeastOneElementOfTypeWithIOSClass:);
  methods[26].selector = @selector(hasOnlyElementsOfTypeWithIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "contains", "[LNSObject;", "([TT;)TS;", "containsOnly", "containsOnlyOnce", "containsExactly", "containsSequence", "containsSubsequence", "doesNotContain", "()TS;", "startsWith", "endsWith", "are", "LOrgAssertjCoreApiCondition;", "(Lorg/assertj/core/api/Condition<-TT;>;)TS;", "areNot", "have", "doNotHave", "areAtLeast", "ILOrgAssertjCoreApiCondition;", "(ILorg/assertj/core/api/Condition<-TT;>;)TS;", "areAtLeastOne", "areAtMost", "areExactly", "haveAtLeastOne", "haveAtLeast", "haveAtMost", "haveExactly", "containsAll", "LJavaLangIterable;", "(Ljava/lang/Iterable<+TT;>;)TS;", "hasAtLeastOneElementOfType", "LIOSClass;", "(Ljava/lang/Class<*>;)TS;", "hasOnlyElementsOfType", "<S::Lorg/assertj/core/api/ObjectEnumerableAssert<TS;TT;>;T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/assertj/core/api/EnumerableAssert<TS;TT;>;" };
  static const J2ObjcClassInfo _OrgAssertjCoreApiObjectEnumerableAssert = { "ObjectEnumerableAssert", "org.assertj.core.api", ptrTable, methods, NULL, 7, 0x609, 27, 0, -1, -1, -1, 35, -1 };
  return &_OrgAssertjCoreApiObjectEnumerableAssert;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgAssertjCoreApiObjectEnumerableAssert)
