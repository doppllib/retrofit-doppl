//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreApiCondition.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame.h"
#include "OrgAssertjCoreErrorElementsShouldBe.h"
#include "OrgAssertjCoreErrorElementsShouldBeAtLeast.h"
#include "OrgAssertjCoreErrorElementsShouldBeAtMost.h"
#include "OrgAssertjCoreErrorElementsShouldBeExactly.h"
#include "OrgAssertjCoreErrorElementsShouldHave.h"
#include "OrgAssertjCoreErrorElementsShouldHaveAtLeast.h"
#include "OrgAssertjCoreErrorElementsShouldHaveAtMost.h"
#include "OrgAssertjCoreErrorElementsShouldHaveExactly.h"
#include "OrgAssertjCoreErrorElementsShouldNotBe.h"
#include "OrgAssertjCoreErrorElementsShouldNotHave.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeAnArray.h"
#include "OrgAssertjCoreErrorShouldBeEmpty.h"
#include "OrgAssertjCoreErrorShouldBeNullOrEmpty.h"
#include "OrgAssertjCoreErrorShouldBeSorted.h"
#include "OrgAssertjCoreErrorShouldContain.h"
#include "OrgAssertjCoreErrorShouldContainAtIndex.h"
#include "OrgAssertjCoreErrorShouldContainNull.h"
#include "OrgAssertjCoreErrorShouldContainOnly.h"
#include "OrgAssertjCoreErrorShouldContainSequence.h"
#include "OrgAssertjCoreErrorShouldContainSubsequence.h"
#include "OrgAssertjCoreErrorShouldContainsOnlyOnce.h"
#include "OrgAssertjCoreErrorShouldEndWith.h"
#include "OrgAssertjCoreErrorShouldHaveSize.h"
#include "OrgAssertjCoreErrorShouldNotBeEmpty.h"
#include "OrgAssertjCoreErrorShouldNotContain.h"
#include "OrgAssertjCoreErrorShouldNotContainAtIndex.h"
#include "OrgAssertjCoreErrorShouldNotContainNull.h"
#include "OrgAssertjCoreErrorShouldNotHaveDuplicates.h"
#include "OrgAssertjCoreErrorShouldStartWith.h"
#include "OrgAssertjCoreInternalCommonErrors.h"
#include "OrgAssertjCoreInternalCommonValidations.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalConditions.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInternalArrays.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "OrgAssertjCoreUtilArrayWrapperList.h"
#include "OrgAssertjCoreUtilArrays.h"
#include "OrgAssertjCoreUtilIterables.h"
#include "OrgAssertjCoreUtilLists.h"
#include "java/lang/AssertionError.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Comparable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface OrgAssertjCoreInternalInternalArrays () {
 @public
  id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy_;
}

- (id<JavaUtilSet>)containsOnlyWithJavaUtilSet:(id<JavaUtilSet>)actual
                                        withId:(id)values;

- (id<JavaUtilSet>)asSetWithoutDuplicatesAccordingToComparisonStrategyWithId:(id)array;

- (jboolean)iterableContainsWithJavaLangIterable:(id<JavaLangIterable>)actual
                                          withId:(id)value;

- (void)collectionRemovesWithJavaUtilCollection:(id<JavaUtilCollection>)actual
                                         withId:(id)value;

- (jboolean)containsSequenceAtGivenIndexWithInt:(jint)actualStartIndex
                                         withId:(id)actualArray
                                         withId:(id)sequence;

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other;

- (jboolean)arrayContainsWithId:(id)array
                         withId:(id)value;

+ (jboolean)commonChecksWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withId:(id)actual
                                                    withId:(id)sequence;

- (JavaLangAssertionError *)arrayDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                         withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                                                     withId:(id)array
                                                                                     withId:(id)sequence;

- (id<JavaUtilList>)elementsNotSatisfyingConditionWithId:(id)array
                          withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

- (id<JavaUtilList>)elementsSatisfyingConditionWithId:(id)array
                       withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition;

+ (id<JavaUtilList>)asListWithId:(id)array;

+ (IOSObjectArray *)arrayOfComparableItemsWithId:(id)array;

+ (void)assertThatArrayComponentTypeIsSortableWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                                          withId:(id)array;

+ (void)checkIsNotNullAndNotEmptyWithId:(id)values;

+ (void)checkIsNotNullWithId:(id)values;

+ (jboolean)isArrayEmptyWithId:(id)array;

- (JavaLangAssertionError *)arrayDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                       withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                                                   withId:(id)array
                                                                                   withId:(id)sequence;

+ (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withId:(id)array;

+ (jint)sizeOfWithId:(id)array;

+ (void)failIfEmptySinceActualIsNotEmptyWithId:(id)values;

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalArrays, comparisonStrategy_, id<OrgAssertjCoreInternalComparisonStrategy>)

inline OrgAssertjCoreInternalInternalArrays *OrgAssertjCoreInternalInternalArrays_get_INSTANCE();
static OrgAssertjCoreInternalInternalArrays *OrgAssertjCoreInternalInternalArrays_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalInternalArrays, INSTANCE, OrgAssertjCoreInternalInternalArrays *)

__attribute__((unused)) static id<JavaUtilSet> OrgAssertjCoreInternalInternalArrays_containsOnlyWithJavaUtilSet_withId_(OrgAssertjCoreInternalInternalArrays *self, id<JavaUtilSet> actual, id values);

__attribute__((unused)) static id<JavaUtilSet> OrgAssertjCoreInternalInternalArrays_asSetWithoutDuplicatesAccordingToComparisonStrategyWithId_(OrgAssertjCoreInternalInternalArrays *self, id array);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalArrays_iterableContainsWithJavaLangIterable_withId_(OrgAssertjCoreInternalInternalArrays *self, id<JavaLangIterable> actual, id value);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalArrays_collectionRemovesWithJavaUtilCollection_withId_(OrgAssertjCoreInternalInternalArrays *self, id<JavaUtilCollection> actual, id value);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalArrays_containsSequenceAtGivenIndexWithInt_withId_withId_(OrgAssertjCoreInternalInternalArrays *self, jint actualStartIndex, id actualArray, id sequence);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalArrays_areEqualWithId_withId_(OrgAssertjCoreInternalInternalArrays *self, id actual, id other);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalArrays_arrayContainsWithId_withId_(OrgAssertjCoreInternalInternalArrays *self, id array, id value);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalArrays_commonChecksWithOrgAssertjCoreApiAssertionInfo_withId_withId_(id<OrgAssertjCoreApiAssertionInfo> info, id actual, id sequence);

__attribute__((unused)) static JavaLangAssertionError *OrgAssertjCoreInternalInternalArrays_arrayDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withId_(OrgAssertjCoreInternalInternalArrays *self, id<OrgAssertjCoreApiAssertionInfo> info, OrgAssertjCoreInternalFailures *failures, id array, id sequence);

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreInternalInternalArrays_elementsNotSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalArrays *self, id array, OrgAssertjCoreApiCondition *condition);

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalArrays *self, id array, OrgAssertjCoreApiCondition *condition);

__attribute__((unused)) static id<JavaUtilList> OrgAssertjCoreInternalInternalArrays_asListWithId_(id array);

__attribute__((unused)) static IOSObjectArray *OrgAssertjCoreInternalInternalArrays_arrayOfComparableItemsWithId_(id array);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalArrays_assertThatArrayComponentTypeIsSortableWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_(id<OrgAssertjCoreApiAssertionInfo> info, OrgAssertjCoreInternalFailures *failures, id array);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalArrays_checkIsNotNullAndNotEmptyWithId_(id values);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalArrays_checkIsNotNullWithId_(id values);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalArrays_isArrayEmptyWithId_(id array);

__attribute__((unused)) static JavaLangAssertionError *OrgAssertjCoreInternalInternalArrays_arrayDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withId_(OrgAssertjCoreInternalInternalArrays *self, id<OrgAssertjCoreApiAssertionInfo> info, OrgAssertjCoreInternalFailures *failures, id array, id sequence);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(id<OrgAssertjCoreApiAssertionInfo> info, id array);

__attribute__((unused)) static jint OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(id array);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalArrays_failIfEmptySinceActualIsNotEmptyWithId_(id values);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalInternalArrays)

@implementation OrgAssertjCoreInternalInternalArrays

+ (OrgAssertjCoreInternalInternalArrays *)instance {
  return OrgAssertjCoreInternalInternalArrays_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInternalArrays_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreInternalInternalArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
  return self;
}

- (id<JavaUtilComparator>)getComparator {
  if ([comparisonStrategy_ isKindOfClass:[OrgAssertjCoreInternalComparatorBasedComparisonStrategy class]]) {
    return [((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) nil_chk(((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) cast_chk(comparisonStrategy_, [OrgAssertjCoreInternalComparatorBasedComparisonStrategy class])))) getComparator];
  }
  return nil;
}

+ (void)assertIsArrayWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withId:(id)array {
  OrgAssertjCoreInternalInternalArrays_assertIsArrayWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
}

- (void)assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                         withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                     withId:(id)array {
  if (array == nil || OrgAssertjCoreInternalInternalArrays_isArrayEmptyWithId_(array)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeNullOrEmpty_shouldBeNullOrEmptyWithId_(array)];
}

- (void)assertEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                   withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                               withId:(id)array {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  if (OrgAssertjCoreInternalInternalArrays_isArrayEmptyWithId_(array)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeEmpty_shouldBeEmptyWithId_(array)];
}

- (void)assertHasSizeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                     withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                 withId:(id)array
                                                withInt:(jint)expectedSize {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  jint sizeOfActual = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array);
  if (sizeOfActual == expectedSize) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldHaveSize_shouldHaveSizeWithId_withInt_withInt_(array, sizeOfActual, expectedSize)];
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                       withId:(id)array
                                         withJavaLangIterable:(id<JavaLangIterable>)other {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withJavaLangIterable_withInt_(info, array, other, OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array));
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                       withId:(id)array
                                                       withId:(id)other {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  OrgAssertjCoreInternalInternalArrays_assertIsArrayWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  OrgAssertjCoreInternalInternalArrays_assertIsArrayWithOrgAssertjCoreApiAssertionInfo_withId_(info, other);
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withId_withInt_(info, array, other, OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array));
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                      withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                  withId:(id)actual
                                                  withId:(id)values {
  if (OrgAssertjCoreInternalInternalArrays_commonChecksWithOrgAssertjCoreApiAssertionInfo_withId_withId_(info, actual, values)) return;
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  jint valueCount = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(values);
  for (jint i = 0; i < valueCount; i++) {
    id value = JavaLangReflectArray_getWithId_withInt_(values, i);
    if (!OrgAssertjCoreInternalInternalArrays_arrayContainsWithId_withId_(self, actual, value)) {
      [notFound addWithId:value];
    }
  }
  if (![notFound isEmpty]) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContain_shouldContainWithId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, notFound, comparisonStrategy_)];
}

- (void)assertcontainsAllWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                         withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                     withId:(id)array
                                       withJavaLangIterable:(id<JavaLangIterable>)iterable {
  if (iterable == nil) {
    @throw OrgAssertjCoreInternalCommonErrors_iterableToLookForIsNull();
  }
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  IOSObjectArray *values = [((JavaUtilArrayList *) nil_chk(OrgAssertjCoreUtilLists_newArrayListWithJavaLangIterable_(iterable))) toArray];
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  {
    IOSObjectArray *a__ = values;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id value = *b__++;
      if (!OrgAssertjCoreInternalInternalArrays_arrayContainsWithId_withId_(self, array, value)) {
        [notFound addWithId:value];
      }
    }
  }
  if (![notFound isEmpty]) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContain_shouldContainWithId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(array, values, notFound, comparisonStrategy_)];
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                      withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                  withId:(id)array
                                                  withId:(id)value
                             withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [self assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreInternalFailures:failures withId:array];
  OrgAssertjCoreInternalCommonValidations_checkIndexValueIsValidWithOrgAssertjCoreDataIndex_withInt_(index, OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array) - 1);
  id actualElement = JavaLangReflectArray_getWithId_withInt_(array, ((OrgAssertjCoreDataIndex *) nil_chk(index))->value_);
  if (OrgAssertjCoreInternalInternalArrays_areEqualWithId_withId_(self, actualElement, value)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainAtIndex_shouldContainAtIndexWithId_withId_withOrgAssertjCoreDataIndex_withId_withOrgAssertjCoreInternalComparisonStrategy_(array, value, index, JavaLangReflectArray_getWithId_withInt_(array, index->value_), comparisonStrategy_)];
}

- (void)assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                      withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                  withId:(id)array {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  if (OrgAssertjCoreInternalInternalArrays_isArrayEmptyWithId_(array)) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeEmpty_shouldNotBeEmpty()];
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                            withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                        withId:(id)array
                                                        withId:(id)value
                                   withOrgAssertjCoreDataIndex:(OrgAssertjCoreDataIndex *)index {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  OrgAssertjCoreInternalCommonValidations_checkIndexValueIsValidWithOrgAssertjCoreDataIndex_withInt_(index, JavaLangInteger_MAX_VALUE);
  if (((OrgAssertjCoreDataIndex *) nil_chk(index))->value_ >= OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array)) return;
  if (OrgAssertjCoreInternalInternalArrays_areEqualWithId_withId_(self, JavaLangReflectArray_getWithId_withInt_(array, index->value_), value)) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotContainAtIndex_shouldNotContainAtIndexWithId_withId_withOrgAssertjCoreDataIndex_withOrgAssertjCoreInternalComparisonStrategy_(array, value, index, comparisonStrategy_)];
}

- (void)assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                          withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                      withId:(id)actual
                                                      withId:(id)values {
  if (OrgAssertjCoreInternalInternalArrays_commonChecksWithOrgAssertjCoreApiAssertionInfo_withId_withId_(info, actual, values)) return;
  id<JavaUtilSet> notExpected = OrgAssertjCoreInternalInternalArrays_asSetWithoutDuplicatesAccordingToComparisonStrategyWithId_(self, actual);
  id<JavaUtilSet> notFound = OrgAssertjCoreInternalInternalArrays_containsOnlyWithJavaUtilSet_withId_(self, notExpected, values);
  if ([((id<JavaUtilSet>) nil_chk(notExpected)) isEmpty] && [((id<JavaUtilSet>) nil_chk(notFound)) isEmpty]) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainOnly_shouldContainOnlyWithId_withId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, notFound, notExpected, comparisonStrategy_)];
}

- (void)assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                              withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                          withId:(id)actual
                                                          withId:(id)values {
  if (OrgAssertjCoreInternalInternalArrays_commonChecksWithOrgAssertjCoreApiAssertionInfo_withId_withId_(info, actual, values)) return;
  id<JavaLangIterable> actualDuplicates = [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(comparisonStrategy_)) duplicatesFromWithJavaLangIterable:OrgAssertjCoreInternalInternalArrays_asListWithId_(actual)];
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  id<JavaUtilSet> notOnlyOnce = create_JavaUtilLinkedHashSet_init();
  for (id __strong expectedElement in nil_chk(OrgAssertjCoreInternalInternalArrays_asListWithId_(values))) {
    if (!OrgAssertjCoreInternalInternalArrays_arrayContainsWithId_withId_(self, actual, expectedElement)) {
      [notFound addWithId:expectedElement];
    }
    else if (OrgAssertjCoreInternalInternalArrays_iterableContainsWithJavaLangIterable_withId_(self, actualDuplicates, expectedElement)) {
      [notOnlyOnce addWithId:expectedElement];
    }
  }
  if (![notFound isEmpty] || ![notOnlyOnce isEmpty]) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainsOnlyOnce_shouldContainsOnlyOnceWithId_withId_withJavaUtilSet_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, notFound, notOnlyOnce, comparisonStrategy_)];
  }
}

- (id<JavaUtilSet>)containsOnlyWithJavaUtilSet:(id<JavaUtilSet>)actual
                                        withId:(id)values {
  return OrgAssertjCoreInternalInternalArrays_containsOnlyWithJavaUtilSet_withId_(self, actual, values);
}

- (id<JavaUtilSet>)asSetWithoutDuplicatesAccordingToComparisonStrategyWithId:(id)array {
  return OrgAssertjCoreInternalInternalArrays_asSetWithoutDuplicatesAccordingToComparisonStrategyWithId_(self, array);
}

- (jboolean)iterableContainsWithJavaLangIterable:(id<JavaLangIterable>)actual
                                          withId:(id)value {
  return OrgAssertjCoreInternalInternalArrays_iterableContainsWithJavaLangIterable_withId_(self, actual, value);
}

- (void)collectionRemovesWithJavaUtilCollection:(id<JavaUtilCollection>)actual
                                         withId:(id)value {
  OrgAssertjCoreInternalInternalArrays_collectionRemovesWithJavaUtilCollection_withId_(self, actual, value);
}

- (void)assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                              withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                          withId:(id)actual
                                                          withId:(id)sequence {
  if (OrgAssertjCoreInternalInternalArrays_commonChecksWithOrgAssertjCoreApiAssertionInfo_withId_withId_(info, actual, sequence)) return;
  jint lastIndexWhereSequeceCanBeFound = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(actual) - OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(sequence);
  for (jint actualIndex = 0; actualIndex <= lastIndexWhereSequeceCanBeFound; actualIndex++) {
    if (OrgAssertjCoreInternalInternalArrays_containsSequenceAtGivenIndexWithInt_withId_withId_(self, actualIndex, actual, sequence)) return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainSequence_shouldContainSequenceWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, comparisonStrategy_)];
}

- (jboolean)containsSequenceAtGivenIndexWithInt:(jint)actualStartIndex
                                         withId:(id)actualArray
                                         withId:(id)sequence {
  return OrgAssertjCoreInternalInternalArrays_containsSequenceAtGivenIndexWithInt_withId_withId_(self, actualStartIndex, actualArray, sequence);
}

- (void)assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                 withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                             withId:(id)actual
                                                             withId:(id)subsequence {
  if (OrgAssertjCoreInternalInternalArrays_commonChecksWithOrgAssertjCoreApiAssertionInfo_withId_withId_(info, actual, subsequence)) return;
  jint sizeOfActual = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(actual);
  jint sizeOfSubsequence = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(subsequence);
  jint lastIndexWhereEndOfSubsequeceCanBeFound = sizeOfActual - sizeOfSubsequence;
  jint actualIndex = 0;
  jint subsequenceIndex = 0;
  while (actualIndex <= lastIndexWhereEndOfSubsequeceCanBeFound && subsequenceIndex < sizeOfSubsequence) {
    if (OrgAssertjCoreInternalInternalArrays_areEqualWithId_withId_(self, JavaLangReflectArray_getWithId_withInt_(actual, actualIndex), JavaLangReflectArray_getWithId_withInt_(subsequence, subsequenceIndex))) {
      subsequenceIndex++;
      lastIndexWhereEndOfSubsequeceCanBeFound++;
    }
    actualIndex++;
  }
  if (subsequenceIndex < sizeOfSubsequence) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainSubsequence_shouldContainSubsequenceWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, subsequence, comparisonStrategy_)];
  }
}

- (jboolean)areEqualWithId:(id)actual
                    withId:(id)other {
  return OrgAssertjCoreInternalInternalArrays_areEqualWithId_withId_(self, actual, other);
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                            withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                        withId:(id)array
                                                        withId:(id)values {
  OrgAssertjCoreInternalInternalArrays_checkIsNotNullAndNotEmptyWithId_(values);
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  id<JavaUtilSet> found = create_JavaUtilLinkedHashSet_init();
  for (jint i = 0; i < OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(values); i++) {
    id value = JavaLangReflectArray_getWithId_withInt_(values, i);
    if (OrgAssertjCoreInternalInternalArrays_arrayContainsWithId_withId_(self, array, value)) {
      [found addWithId:value];
    }
  }
  if ([found isEmpty]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotContain_shouldNotContainWithId_withId_withId_withOrgAssertjCoreInternalComparisonStrategy_(array, values, found, comparisonStrategy_)];
}

- (jboolean)arrayContainsWithId:(id)array
                         withId:(id)value {
  return OrgAssertjCoreInternalInternalArrays_arrayContainsWithId_withId_(self, array, value);
}

- (void)assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                               withId:(id)array {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  OrgAssertjCoreUtilArrayWrapperList *wrapped = OrgAssertjCoreUtilArrayWrapperList_wrapWithId_(array);
  id<JavaLangIterable> duplicates = [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(comparisonStrategy_)) duplicatesFromWithJavaLangIterable:wrapped];
  if (OrgAssertjCoreUtilIterables_isNullOrEmptyWithJavaLangIterable_(duplicates)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotHaveDuplicates_shouldNotHaveDuplicatesWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(array, duplicates, comparisonStrategy_)];
}

- (void)assertStartsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                        withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                    withId:(id)actual
                                                    withId:(id)sequence {
  if (OrgAssertjCoreInternalInternalArrays_commonChecksWithOrgAssertjCoreApiAssertionInfo_withId_withId_(info, actual, sequence)) return;
  jint sequenceSize = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(sequence);
  jint arraySize = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(actual);
  if (arraySize < sequenceSize) {
    @throw OrgAssertjCoreInternalInternalArrays_arrayDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withId_(self, info, failures, actual, sequence);
  }
  for (jint i = 0; i < sequenceSize; i++) {
    if (!OrgAssertjCoreInternalInternalArrays_areEqualWithId_withId_(self, JavaLangReflectArray_getWithId_withInt_(sequence, i), JavaLangReflectArray_getWithId_withInt_(actual, i))) @throw OrgAssertjCoreInternalInternalArrays_arrayDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withId_(self, info, failures, actual, sequence);
  }
}

+ (jboolean)commonChecksWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withId:(id)actual
                                                    withId:(id)sequence {
  return OrgAssertjCoreInternalInternalArrays_commonChecksWithOrgAssertjCoreApiAssertionInfo_withId_withId_(info, actual, sequence);
}

- (JavaLangAssertionError *)arrayDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                         withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                                                     withId:(id)array
                                                                                     withId:(id)sequence {
  return OrgAssertjCoreInternalInternalArrays_arrayDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withId_(self, info, failures, array, sequence);
}

- (void)assertEndsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                      withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                  withId:(id)actual
                                                  withId:(id)sequence {
  if (OrgAssertjCoreInternalInternalArrays_commonChecksWithOrgAssertjCoreApiAssertionInfo_withId_withId_(info, actual, sequence)) return;
  jint sequenceSize = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(sequence);
  jint arraySize = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(actual);
  if (arraySize < sequenceSize) @throw OrgAssertjCoreInternalInternalArrays_arrayDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withId_(self, info, failures, actual, sequence);
  for (jint i = 0; i < sequenceSize; i++) {
    jint sequenceIndex = sequenceSize - (i + 1);
    jint arrayIndex = arraySize - (i + 1);
    if (!OrgAssertjCoreInternalInternalArrays_areEqualWithId_withId_(self, JavaLangReflectArray_getWithId_withInt_(sequence, sequenceIndex), JavaLangReflectArray_getWithId_withInt_(actual, arrayIndex))) @throw OrgAssertjCoreInternalInternalArrays_arrayDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withId_(self, info, failures, actual, sequence);
  }
}

- (void)assertContainsNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                          withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                      withId:(id)array {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  if (!OrgAssertjCoreInternalInternalArrays_arrayContainsWithId_withId_(self, array, nil)) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainNull_shouldContainNullWithId_(array)];
  }
}

- (void)assertDoesNotContainNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                            withId:(id)array {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  if (OrgAssertjCoreInternalInternalArrays_arrayContainsWithId_withId_(self, array, nil)) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotContainNull_shouldNotContainNullWithId_(array)];
}

- (void)assertAreWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                 withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
               withOrgAssertjCoreInternalConditions:(OrgAssertjCoreInternalConditions *)conditions
                                             withId:(id)array
                     withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> notSatisfiesCondition = OrgAssertjCoreInternalInternalArrays_elementsNotSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
    if (![((id<JavaUtilList>) nil_chk(notSatisfiesCondition)) isEmpty]) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldBe_elementsShouldBeWithId_withId_withOrgAssertjCoreApiCondition_(array, notSatisfiesCondition, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(array, condition)];
  }
}

- (void)assertAreNotWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                    withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                  withOrgAssertjCoreInternalConditions:(OrgAssertjCoreInternalConditions *)conditions
                                                withId:(id)array
                        withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
    if ([((id<JavaUtilList>) nil_chk(satisfiesCondition)) isEmpty]) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldNotBe_elementsShouldNotBeWithId_withId_withOrgAssertjCoreApiCondition_(array, satisfiesCondition, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(array, condition)];
  }
}

- (void)assertHaveWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                  withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                withOrgAssertjCoreInternalConditions:(OrgAssertjCoreInternalConditions *)conditions
                                              withId:(id)array
                      withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> notSatisfiesCondition = OrgAssertjCoreInternalInternalArrays_elementsNotSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
    if ([((id<JavaUtilList>) nil_chk(notSatisfiesCondition)) isEmpty]) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldHave_elementsShouldHaveWithId_withId_withOrgAssertjCoreApiCondition_(array, notSatisfiesCondition, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(array, condition)];
  }
}

- (void)assertHaveNotWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                     withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                   withOrgAssertjCoreInternalConditions:(OrgAssertjCoreInternalConditions *)conditions
                                                 withId:(id)array
                         withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
    if ([((id<JavaUtilList>) nil_chk(satisfiesCondition)) isEmpty]) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldNotHave_elementsShouldNotHaveWithId_withId_withOrgAssertjCoreApiCondition_(array, satisfiesCondition, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(array, condition)];
  }
}

- (void)assertAreAtLeastWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                        withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                      withOrgAssertjCoreInternalConditions:(OrgAssertjCoreInternalConditions *)conditions
                                                    withId:(id)array
                                                   withInt:(jint)times
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
    if ([((id<JavaUtilList>) nil_chk(satisfiesCondition)) size] >= times) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldBeAtLeast_elementsShouldBeAtLeastWithId_withInt_withOrgAssertjCoreApiCondition_(array, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(array, condition)];
  }
}

- (void)assertAreAtMostWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                       withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                     withOrgAssertjCoreInternalConditions:(OrgAssertjCoreInternalConditions *)conditions
                                                   withId:(id)array
                                                  withInt:(jint)times
                           withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
    if ([((id<JavaUtilList>) nil_chk(satisfiesCondition)) size] <= times) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldBeAtMost_elementsShouldBeAtMostWithId_withInt_withOrgAssertjCoreApiCondition_(array, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(array, condition)];
  }
}

- (void)assertAreExactlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                        withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                      withOrgAssertjCoreInternalConditions:(OrgAssertjCoreInternalConditions *)conditions
                                                    withId:(id)array
                                                   withInt:(jint)times
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
    if ([((id<JavaUtilList>) nil_chk(satisfiesCondition)) size] == times) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldBeExactly_elementsShouldBeExactlyWithId_withInt_withOrgAssertjCoreApiCondition_(array, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(array, condition)];
  }
}

- (void)assertHaveAtLeastWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                         withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                       withOrgAssertjCoreInternalConditions:(OrgAssertjCoreInternalConditions *)conditions
                                                     withId:(id)array
                                                    withInt:(jint)times
                             withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
    if ([((id<JavaUtilList>) nil_chk(satisfiesCondition)) size] >= times) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldHaveAtLeast_elementsShouldHaveAtLeastWithId_withInt_withOrgAssertjCoreApiCondition_(array, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(array, condition)];
  }
}

- (void)assertHaveAtMostWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                        withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                      withOrgAssertjCoreInternalConditions:(OrgAssertjCoreInternalConditions *)conditions
                                                    withId:(id)array
                                                   withInt:(jint)times
                            withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
    if ([((id<JavaUtilList>) nil_chk(satisfiesCondition)) size] <= times) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldHaveAtMost_elementsShouldHaveAtMostWithId_withInt_withOrgAssertjCoreApiCondition_(array, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(array, condition)];
  }
}

- (void)assertHaveExactlyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                         withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                       withOrgAssertjCoreInternalConditions:(OrgAssertjCoreInternalConditions *)conditions
                                                     withId:(id)array
                                                    withInt:(jint)times
                             withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  [((OrgAssertjCoreInternalConditions *) nil_chk(conditions)) assertIsNotNullWithOrgAssertjCoreApiCondition:condition];
  @try {
    id<JavaUtilList> satisfiesCondition = OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
    if ([((id<JavaUtilList>) nil_chk(satisfiesCondition)) size] == times) {
      return;
    }
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorElementsShouldHaveExactly_elementsShouldHaveExactlyWithId_withInt_withOrgAssertjCoreApiCondition_(array, times, condition)];
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorConditionAndGroupGenericParameterTypeShouldBeTheSame_shouldBeSameGenericBetweenIterableAndConditionWithId_withOrgAssertjCoreApiCondition_(array, condition)];
  }
}

- (id<JavaUtilList>)elementsNotSatisfyingConditionWithId:(id)array
                          withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreInternalInternalArrays_elementsNotSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
}

- (id<JavaUtilList>)elementsSatisfyingConditionWithId:(id)array
                       withOrgAssertjCoreApiCondition:(OrgAssertjCoreApiCondition *)condition {
  return OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(self, array, condition);
}

- (void)assertIsSortedWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                      withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                  withId:(id)array {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  if ([comparisonStrategy_ isKindOfClass:[OrgAssertjCoreInternalComparatorBasedComparisonStrategy class]]) {
    id<JavaUtilComparator> comparator = [((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) nil_chk(((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) cast_chk(comparisonStrategy_, [OrgAssertjCoreInternalComparatorBasedComparisonStrategy class])))) getComparator];
    OrgAssertjCoreInternalInternalArrays_assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withJavaUtilComparator_(info, failures, array, comparator);
    return;
  }
  if (OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array) == 0) return;
  OrgAssertjCoreInternalInternalArrays_assertThatArrayComponentTypeIsSortableWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_(info, failures, array);
  @try {
    IOSObjectArray *comparableArray = OrgAssertjCoreInternalInternalArrays_arrayOfComparableItemsWithId_(array);
    if (((IOSObjectArray *) nil_chk(comparableArray))->size_ <= 1) return;
    for (jint i = 0; i < comparableArray->size_ - 1; i++) {
      if ([((id<JavaLangComparable>) nil_chk(IOSObjectArray_Get(comparableArray, i))) compareToWithId:IOSObjectArray_Get(comparableArray, i + 1)] > 0) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSorted_shouldBeSortedWithInt_withId_(i, array)];
    }
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSorted_shouldHaveMutuallyComparableElementsWithId_(array)];
  }
}

+ (void)assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                                       withId:(id)array
                                                       withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  OrgAssertjCoreInternalInternalArrays_assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withJavaUtilComparator_(info, failures, array, comparator);
}

+ (id<JavaUtilList>)asListWithId:(id)array {
  return OrgAssertjCoreInternalInternalArrays_asListWithId_(array);
}

+ (IOSObjectArray *)arrayOfComparableItemsWithId:(id)array {
  return OrgAssertjCoreInternalInternalArrays_arrayOfComparableItemsWithId_(array);
}

+ (void)assertThatArrayComponentTypeIsSortableWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                                          withId:(id)array {
  OrgAssertjCoreInternalInternalArrays_assertThatArrayComponentTypeIsSortableWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_(info, failures, array);
}

+ (void)checkIsNotNullAndNotEmptyWithId:(id)values {
  OrgAssertjCoreInternalInternalArrays_checkIsNotNullAndNotEmptyWithId_(values);
}

+ (void)checkIsNotNullWithId:(id)values {
  OrgAssertjCoreInternalInternalArrays_checkIsNotNullWithId_(values);
}

+ (jboolean)isArrayEmptyWithId:(id)array {
  return OrgAssertjCoreInternalInternalArrays_isArrayEmptyWithId_(array);
}

- (JavaLangAssertionError *)arrayDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                       withOrgAssertjCoreInternalFailures:(OrgAssertjCoreInternalFailures *)failures
                                                                                   withId:(id)array
                                                                                   withId:(id)sequence {
  return OrgAssertjCoreInternalInternalArrays_arrayDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withId_(self, info, failures, array, sequence);
}

+ (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withId:(id)array {
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
}

+ (jint)sizeOfWithId:(id)array {
  return OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array);
}

+ (void)failIfEmptySinceActualIsNotEmptyWithId:(id)values {
  OrgAssertjCoreInternalInternalArrays_failIfEmptySinceActualIsNotEmptyWithId_(values);
}

- (void)dealloc {
  RELEASE_(comparisonStrategy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalInternalArrays;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 9, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x0, 13, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 21, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 23, 24, -1, 25, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 26, 27, -1, 28, -1, -1 },
    { NULL, "Z", 0x2, 29, 30, -1, 31, -1, -1 },
    { NULL, "V", 0x2, 32, 33, -1, 34, -1, -1 },
    { NULL, "V", 0x0, 35, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 38, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 41, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 42, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 44, 12, -1, -1, -1, -1 },
    { NULL, "LJavaLangAssertionError;", 0x2, 45, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 46, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 47, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 48, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x1, 52, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x1, 53, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x1, 54, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x1, 55, 56, -1, 57, -1, -1 },
    { NULL, "V", 0x1, 58, 56, -1, 57, -1, -1 },
    { NULL, "V", 0x1, 59, 56, -1, 57, -1, -1 },
    { NULL, "V", 0x1, 60, 56, -1, 57, -1, -1 },
    { NULL, "V", 0x1, 61, 56, -1, 57, -1, -1 },
    { NULL, "V", 0x1, 62, 56, -1, 57, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 63, 64, -1, 65, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 66, 64, -1, 65, -1, -1 },
    { NULL, "V", 0x0, 67, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 68, 69, -1, 70, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 71, 27, -1, 72, -1, -1 },
    { NULL, "[LJavaLangComparable;", 0xa, 73, 27, -1, 74, -1, -1 },
    { NULL, "V", 0xa, 75, 5, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 76, 27, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 77, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 78, 27, -1, -1, -1, -1 },
    { NULL, "LJavaLangAssertionError;", 0x2, 79, 14, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 80, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 81, 27, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 82, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(getComparator);
  methods[4].selector = @selector(assertIsArrayWithOrgAssertjCoreApiAssertionInfo:withId:);
  methods[5].selector = @selector(assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:);
  methods[6].selector = @selector(assertEmptyWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:);
  methods[7].selector = @selector(assertHasSizeWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withInt:);
  methods[8].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withId:withJavaLangIterable:);
  methods[9].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withId:withId:);
  methods[10].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:);
  methods[11].selector = @selector(assertcontainsAllWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withJavaLangIterable:);
  methods[12].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:withOrgAssertjCoreDataIndex:);
  methods[13].selector = @selector(assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:);
  methods[14].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:withOrgAssertjCoreDataIndex:);
  methods[15].selector = @selector(assertContainsOnlyWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:);
  methods[16].selector = @selector(assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:);
  methods[17].selector = @selector(containsOnlyWithJavaUtilSet:withId:);
  methods[18].selector = @selector(asSetWithoutDuplicatesAccordingToComparisonStrategyWithId:);
  methods[19].selector = @selector(iterableContainsWithJavaLangIterable:withId:);
  methods[20].selector = @selector(collectionRemovesWithJavaUtilCollection:withId:);
  methods[21].selector = @selector(assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:);
  methods[22].selector = @selector(containsSequenceAtGivenIndexWithInt:withId:withId:);
  methods[23].selector = @selector(assertContainsSubsequenceWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:);
  methods[24].selector = @selector(areEqualWithId:withId:);
  methods[25].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:);
  methods[26].selector = @selector(arrayContainsWithId:withId:);
  methods[27].selector = @selector(assertDoesNotHaveDuplicatesWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:);
  methods[28].selector = @selector(assertStartsWithWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:);
  methods[29].selector = @selector(commonChecksWithOrgAssertjCoreApiAssertionInfo:withId:withId:);
  methods[30].selector = @selector(arrayDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:);
  methods[31].selector = @selector(assertEndsWithWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:);
  methods[32].selector = @selector(assertContainsNullWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:);
  methods[33].selector = @selector(assertDoesNotContainNullWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:);
  methods[34].selector = @selector(assertAreWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withOrgAssertjCoreInternalConditions:withId:withOrgAssertjCoreApiCondition:);
  methods[35].selector = @selector(assertAreNotWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withOrgAssertjCoreInternalConditions:withId:withOrgAssertjCoreApiCondition:);
  methods[36].selector = @selector(assertHaveWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withOrgAssertjCoreInternalConditions:withId:withOrgAssertjCoreApiCondition:);
  methods[37].selector = @selector(assertHaveNotWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withOrgAssertjCoreInternalConditions:withId:withOrgAssertjCoreApiCondition:);
  methods[38].selector = @selector(assertAreAtLeastWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withOrgAssertjCoreInternalConditions:withId:withInt:withOrgAssertjCoreApiCondition:);
  methods[39].selector = @selector(assertAreAtMostWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withOrgAssertjCoreInternalConditions:withId:withInt:withOrgAssertjCoreApiCondition:);
  methods[40].selector = @selector(assertAreExactlyWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withOrgAssertjCoreInternalConditions:withId:withInt:withOrgAssertjCoreApiCondition:);
  methods[41].selector = @selector(assertHaveAtLeastWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withOrgAssertjCoreInternalConditions:withId:withInt:withOrgAssertjCoreApiCondition:);
  methods[42].selector = @selector(assertHaveAtMostWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withOrgAssertjCoreInternalConditions:withId:withInt:withOrgAssertjCoreApiCondition:);
  methods[43].selector = @selector(assertHaveExactlyWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withOrgAssertjCoreInternalConditions:withId:withInt:withOrgAssertjCoreApiCondition:);
  methods[44].selector = @selector(elementsNotSatisfyingConditionWithId:withOrgAssertjCoreApiCondition:);
  methods[45].selector = @selector(elementsSatisfyingConditionWithId:withOrgAssertjCoreApiCondition:);
  methods[46].selector = @selector(assertIsSortedWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:);
  methods[47].selector = @selector(assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withJavaUtilComparator:);
  methods[48].selector = @selector(asListWithId:);
  methods[49].selector = @selector(arrayOfComparableItemsWithId:);
  methods[50].selector = @selector(assertThatArrayComponentTypeIsSortableWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:);
  methods[51].selector = @selector(checkIsNotNullAndNotEmptyWithId:);
  methods[52].selector = @selector(checkIsNotNullWithId:);
  methods[53].selector = @selector(isArrayEmptyWithId:);
  methods[54].selector = @selector(arrayDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo:withOrgAssertjCoreInternalFailures:withId:withId:);
  methods[55].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withId:);
  methods[56].selector = @selector(sizeOfWithId:);
  methods[57].selector = @selector(failIfEmptySinceActualIsNotEmptyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalInternalArrays;", .constantValue.asLong = 0, 0x1a, -1, 83, -1, -1 },
    { "comparisonStrategy_", "LOrgAssertjCoreInternalComparisonStrategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgAssertjCoreInternalComparisonStrategy;", "()Ljava/util/Comparator<*>;", "assertIsArray", "LOrgAssertjCoreApiAssertionInfo;LNSObject;", "assertNullOrEmpty", "LOrgAssertjCoreApiAssertionInfo;LOrgAssertjCoreInternalFailures;LNSObject;", "assertEmpty", "assertHasSize", "LOrgAssertjCoreApiAssertionInfo;LOrgAssertjCoreInternalFailures;LNSObject;I", "assertHasSameSizeAs", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/Object;Ljava/lang/Iterable<*>;)V", "LOrgAssertjCoreApiAssertionInfo;LNSObject;LNSObject;", "assertContains", "LOrgAssertjCoreApiAssertionInfo;LOrgAssertjCoreInternalFailures;LNSObject;LNSObject;", "assertcontainsAll", "LOrgAssertjCoreApiAssertionInfo;LOrgAssertjCoreInternalFailures;LNSObject;LJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/internal/Failures;Ljava/lang/Object;Ljava/lang/Iterable<*>;)V", "LOrgAssertjCoreApiAssertionInfo;LOrgAssertjCoreInternalFailures;LNSObject;LNSObject;LOrgAssertjCoreDataIndex;", "assertNotEmpty", "assertDoesNotContain", "assertContainsOnly", "assertContainsOnlyOnce", "containsOnly", "LJavaUtilSet;LNSObject;", "(Ljava/util/Set<Ljava/lang/Object;>;Ljava/lang/Object;)Ljava/util/Set<Ljava/lang/Object;>;", "asSetWithoutDuplicatesAccordingToComparisonStrategy", "LNSObject;", "(Ljava/lang/Object;)Ljava/util/Set<Ljava/lang/Object;>;", "iterableContains", "LJavaLangIterable;LNSObject;", "(Ljava/lang/Iterable<*>;Ljava/lang/Object;)Z", "collectionRemoves", "LJavaUtilCollection;LNSObject;", "(Ljava/util/Collection<*>;Ljava/lang/Object;)V", "assertContainsSequence", "containsSequenceAtGivenIndex", "ILNSObject;LNSObject;", "assertContainsSubsequence", "areEqual", "LNSObject;LNSObject;", "arrayContains", "assertDoesNotHaveDuplicates", "assertStartsWith", "commonChecks", "arrayDoesNotStartWithSequence", "assertEndsWith", "assertContainsNull", "assertDoesNotContainNull", "assertAre", "LOrgAssertjCoreApiAssertionInfo;LOrgAssertjCoreInternalFailures;LOrgAssertjCoreInternalConditions;LNSObject;LOrgAssertjCoreApiCondition;", "<E:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/internal/Failures;Lorg/assertj/core/internal/Conditions;Ljava/lang/Object;Lorg/assertj/core/api/Condition<TE;>;)V", "assertAreNot", "assertHave", "assertHaveNot", "assertAreAtLeast", "LOrgAssertjCoreApiAssertionInfo;LOrgAssertjCoreInternalFailures;LOrgAssertjCoreInternalConditions;LNSObject;ILOrgAssertjCoreApiCondition;", "<E:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/internal/Failures;Lorg/assertj/core/internal/Conditions;Ljava/lang/Object;ILorg/assertj/core/api/Condition<TE;>;)V", "assertAreAtMost", "assertAreExactly", "assertHaveAtLeast", "assertHaveAtMost", "assertHaveExactly", "elementsNotSatisfyingCondition", "LNSObject;LOrgAssertjCoreApiCondition;", "<E:Ljava/lang/Object;>(Ljava/lang/Object;Lorg/assertj/core/api/Condition<TE;>;)Ljava/util/List<TE;>;", "elementsSatisfyingCondition", "assertIsSorted", "assertIsSortedAccordingToComparator", "LOrgAssertjCoreApiAssertionInfo;LOrgAssertjCoreInternalFailures;LNSObject;LJavaUtilComparator;", "<T:Ljava/lang/Object;>(Lorg/assertj/core/api/AssertionInfo;Lorg/assertj/core/internal/Failures;Ljava/lang/Object;Ljava/util/Comparator<TT;>;)V", "asList", "<T:Ljava/lang/Object;>(Ljava/lang/Object;)Ljava/util/List<TT;>;", "arrayOfComparableItems", "(Ljava/lang/Object;)[Ljava/lang/Comparable<Ljava/lang/Object;>;", "assertThatArrayComponentTypeIsSortable", "checkIsNotNullAndNotEmpty", "checkIsNotNull", "isArrayEmpty", "arrayDoesNotEndWithSequence", "assertNotNull", "sizeOf", "failIfEmptySinceActualIsNotEmpty", &OrgAssertjCoreInternalInternalArrays_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInternalArrays = { "InternalArrays", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 58, 2, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInternalArrays;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalInternalArrays class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalInternalArrays_INSTANCE, new_OrgAssertjCoreInternalInternalArrays_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalInternalArrays)
  }
}

@end

OrgAssertjCoreInternalInternalArrays *OrgAssertjCoreInternalInternalArrays_instance() {
  OrgAssertjCoreInternalInternalArrays_initialize();
  return OrgAssertjCoreInternalInternalArrays_INSTANCE;
}

void OrgAssertjCoreInternalInternalArrays_init(OrgAssertjCoreInternalInternalArrays *self) {
  OrgAssertjCoreInternalInternalArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(self, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

OrgAssertjCoreInternalInternalArrays *new_OrgAssertjCoreInternalInternalArrays_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalArrays, init)
}

OrgAssertjCoreInternalInternalArrays *create_OrgAssertjCoreInternalInternalArrays_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalArrays, init)
}

void OrgAssertjCoreInternalInternalArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalInternalArrays *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  NSObject_init(self);
  JreStrongAssign(&self->comparisonStrategy_, comparisonStrategy);
}

OrgAssertjCoreInternalInternalArrays *new_OrgAssertjCoreInternalInternalArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalArrays, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

OrgAssertjCoreInternalInternalArrays *create_OrgAssertjCoreInternalInternalArrays_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalArrays, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

void OrgAssertjCoreInternalInternalArrays_assertIsArrayWithOrgAssertjCoreApiAssertionInfo_withId_(id<OrgAssertjCoreApiAssertionInfo> info, id array) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  if (OrgAssertjCoreUtilArrays_isArrayWithId_(array)) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(OrgAssertjCoreInternalFailures_instance())) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeAnArray_shouldBeAnArrayWithId_(array)];
}

id<JavaUtilSet> OrgAssertjCoreInternalInternalArrays_containsOnlyWithJavaUtilSet_withId_(OrgAssertjCoreInternalInternalArrays *self, id<JavaUtilSet> actual, id values) {
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  for (id __strong o in nil_chk(OrgAssertjCoreInternalInternalArrays_asSetWithoutDuplicatesAccordingToComparisonStrategyWithId_(self, values))) {
    if (OrgAssertjCoreInternalInternalArrays_iterableContainsWithJavaLangIterable_withId_(self, actual, o)) {
      OrgAssertjCoreInternalInternalArrays_collectionRemovesWithJavaUtilCollection_withId_(self, actual, o);
    }
    else {
      [notFound addWithId:o];
    }
  }
  return notFound;
}

id<JavaUtilSet> OrgAssertjCoreInternalInternalArrays_asSetWithoutDuplicatesAccordingToComparisonStrategyWithId_(OrgAssertjCoreInternalInternalArrays *self, id array) {
  id<JavaUtilSet> set = create_JavaUtilLinkedHashSet_init();
  jint size = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array);
  for (jint i = 0; i < size; i++) {
    id element = JavaLangReflectArray_getWithId_withInt_(array, i);
    if (!OrgAssertjCoreInternalInternalArrays_iterableContainsWithJavaLangIterable_withId_(self, set, element)) {
      [set addWithId:element];
    }
  }
  return set;
}

jboolean OrgAssertjCoreInternalInternalArrays_iterableContainsWithJavaLangIterable_withId_(OrgAssertjCoreInternalInternalArrays *self, id<JavaLangIterable> actual, id value) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) iterableContainsWithJavaLangIterable:actual withId:value];
}

void OrgAssertjCoreInternalInternalArrays_collectionRemovesWithJavaUtilCollection_withId_(OrgAssertjCoreInternalInternalArrays *self, id<JavaUtilCollection> actual, id value) {
  [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) iterableRemovesWithJavaLangIterable:actual withId:value];
}

jboolean OrgAssertjCoreInternalInternalArrays_containsSequenceAtGivenIndexWithInt_withId_withId_(OrgAssertjCoreInternalInternalArrays *self, jint actualStartIndex, id actualArray, id sequence) {
  jint sequenceSize = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(sequence);
  for (jint i = 0; i < sequenceSize; i++) {
    if (OrgAssertjCoreInternalInternalArrays_areEqualWithId_withId_(self, JavaLangReflectArray_getWithId_withInt_(sequence, i), JavaLangReflectArray_getWithId_withInt_(actualArray, i + actualStartIndex))) continue;
    return false;
  }
  return true;
}

jboolean OrgAssertjCoreInternalInternalArrays_areEqualWithId_withId_(OrgAssertjCoreInternalInternalArrays *self, id actual, id other) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) areEqualWithId:actual withId:other];
}

jboolean OrgAssertjCoreInternalInternalArrays_arrayContainsWithId_withId_(OrgAssertjCoreInternalInternalArrays *self, id array, id value) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) arrayContainsWithId:array withId:value];
}

jboolean OrgAssertjCoreInternalInternalArrays_commonChecksWithOrgAssertjCoreApiAssertionInfo_withId_withId_(id<OrgAssertjCoreApiAssertionInfo> info, id actual, id sequence) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  OrgAssertjCoreInternalInternalArrays_checkIsNotNullWithId_(sequence);
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, actual);
  if (OrgAssertjCoreInternalInternalArrays_isArrayEmptyWithId_(actual) && OrgAssertjCoreInternalInternalArrays_isArrayEmptyWithId_(sequence)) return true;
  OrgAssertjCoreInternalInternalArrays_failIfEmptySinceActualIsNotEmptyWithId_(sequence);
  return false;
}

JavaLangAssertionError *OrgAssertjCoreInternalInternalArrays_arrayDoesNotStartWithSequenceWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withId_(OrgAssertjCoreInternalInternalArrays *self, id<OrgAssertjCoreApiAssertionInfo> info, OrgAssertjCoreInternalFailures *failures, id array, id sequence) {
  return [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldStartWith_shouldStartWithWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(array, sequence, self->comparisonStrategy_)];
}

id<JavaUtilList> OrgAssertjCoreInternalInternalArrays_elementsNotSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalArrays *self, id array, OrgAssertjCoreApiCondition *condition) {
  id<JavaUtilList> elementsNotSatisfyingCondition = create_JavaUtilLinkedList_init();
  jint arraySize = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array);
  for (jint i = 0; i < arraySize; i++) {
    id o = JavaLangReflectArray_getWithId_withInt_(array, i);
    if (![((OrgAssertjCoreApiCondition *) nil_chk(condition)) matchesWithId:o]) [elementsNotSatisfyingCondition addWithId:o];
  }
  return elementsNotSatisfyingCondition;
}

id<JavaUtilList> OrgAssertjCoreInternalInternalArrays_elementsSatisfyingConditionWithId_withOrgAssertjCoreApiCondition_(OrgAssertjCoreInternalInternalArrays *self, id array, OrgAssertjCoreApiCondition *condition) {
  id<JavaUtilList> elementsSatisfyingCondition = create_JavaUtilLinkedList_init();
  jint arraySize = OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array);
  for (jint i = 0; i < arraySize; i++) {
    id o = JavaLangReflectArray_getWithId_withInt_(array, i);
    if ([((OrgAssertjCoreApiCondition *) nil_chk(condition)) matchesWithId:o]) [elementsSatisfyingCondition addWithId:o];
  }
  return elementsSatisfyingCondition;
}

void OrgAssertjCoreInternalInternalArrays_assertIsSortedAccordingToComparatorWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withJavaUtilComparator_(id<OrgAssertjCoreApiAssertionInfo> info, OrgAssertjCoreInternalFailures *failures, id array, id<JavaUtilComparator> comparator) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  if (comparator == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"The given comparator should not be null");
  @try {
    id<JavaUtilList> arrayAsList = OrgAssertjCoreInternalInternalArrays_asListWithId_(array);
    if ([((id<JavaUtilList>) nil_chk(arrayAsList)) size] == 0) return;
    if ([arrayAsList size] == 1) {
      [comparator compareWithId:[arrayAsList getWithInt:0] withId:[arrayAsList getWithInt:0]];
      return;
    }
    for (jint i = 0; i < [arrayAsList size] - 1; i++) {
      if ([comparator compareWithId:[arrayAsList getWithInt:i] withId:[arrayAsList getWithInt:i + 1]] > 0) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSorted_shouldBeSortedAccordingToGivenComparatorWithInt_withId_withJavaUtilComparator_(i, array, comparator)];
    }
  }
  @catch (JavaLangClassCastException *e) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSorted_shouldHaveComparableElementsAccordingToGivenComparatorWithId_withJavaUtilComparator_(array, comparator)];
  }
}

id<JavaUtilList> OrgAssertjCoreInternalInternalArrays_asListWithId_(id array) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  if (array == nil) return nil;
  if (!OrgAssertjCoreUtilArrays_isArrayWithId_(array)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The object should be an array");
  jint length = JavaLangReflectArray_getLengthWithId_(array);
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_(length);
  for (jint i = 0; i < length; i++) {
    [list addWithId:JavaLangReflectArray_getWithId_withInt_(array, i)];
  }
  return list;
}

IOSObjectArray *OrgAssertjCoreInternalInternalArrays_arrayOfComparableItemsWithId_(id array) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  OrgAssertjCoreUtilArrayWrapperList *arrayWrapperList = OrgAssertjCoreUtilArrayWrapperList_wrapWithId_(array);
  IOSObjectArray *arrayOfComparableItems = [IOSObjectArray arrayWithLength:[((OrgAssertjCoreUtilArrayWrapperList *) nil_chk(arrayWrapperList)) size] type:JavaLangComparable_class_()];
  for (jint i = 0; i < [arrayWrapperList size]; i++) {
    IOSObjectArray_Set(arrayOfComparableItems, i, (id<JavaLangComparable>) cast_check([arrayWrapperList getWithInt:i], JavaLangComparable_class_()));
  }
  return arrayOfComparableItems;
}

void OrgAssertjCoreInternalInternalArrays_assertThatArrayComponentTypeIsSortableWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_(id<OrgAssertjCoreApiAssertionInfo> info, OrgAssertjCoreInternalFailures *failures, id array) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  OrgAssertjCoreUtilArrayWrapperList *arrayAsList = OrgAssertjCoreUtilArrayWrapperList_wrapWithId_(array);
  IOSClass *arrayComponentType = [((OrgAssertjCoreUtilArrayWrapperList *) nil_chk(arrayAsList)) getComponentType];
  if ([((IOSClass *) nil_chk(arrayComponentType)) isPrimitive]) return;
  if (![JavaLangComparable_class_() isAssignableFrom:arrayComponentType]) @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeSorted_shouldHaveMutuallyComparableElementsWithId_(array)];
}

void OrgAssertjCoreInternalInternalArrays_checkIsNotNullAndNotEmptyWithId_(id values) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  OrgAssertjCoreInternalInternalArrays_checkIsNotNullWithId_(values);
  if (OrgAssertjCoreInternalInternalArrays_isArrayEmptyWithId_(values)) @throw OrgAssertjCoreInternalCommonErrors_arrayOfValuesToLookForIsEmpty();
}

void OrgAssertjCoreInternalInternalArrays_checkIsNotNullWithId_(id values) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  if (values == nil) @throw OrgAssertjCoreInternalCommonErrors_arrayOfValuesToLookForIsNull();
}

jboolean OrgAssertjCoreInternalInternalArrays_isArrayEmptyWithId_(id array) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  return OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(array) == 0;
}

JavaLangAssertionError *OrgAssertjCoreInternalInternalArrays_arrayDoesNotEndWithSequenceWithOrgAssertjCoreApiAssertionInfo_withOrgAssertjCoreInternalFailures_withId_withId_(OrgAssertjCoreInternalInternalArrays *self, id<OrgAssertjCoreApiAssertionInfo> info, OrgAssertjCoreInternalFailures *failures, id array, id sequence) {
  return [((OrgAssertjCoreInternalFailures *) nil_chk(failures)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldEndWith_shouldEndWithWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(array, sequence, self->comparisonStrategy_)];
}

void OrgAssertjCoreInternalInternalArrays_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withId_(id<OrgAssertjCoreApiAssertionInfo> info, id array) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:array];
}

jint OrgAssertjCoreInternalInternalArrays_sizeOfWithId_(id array) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  if ([IOSClass_arrayType(NSObject_class_(), 1) isInstance:array]) return ((IOSObjectArray *) nil_chk(((IOSObjectArray *) cast_check(array, IOSClass_arrayType(NSObject_class_(), 1)))))->size_;
  return JavaLangReflectArray_getLengthWithId_(array);
}

void OrgAssertjCoreInternalInternalArrays_failIfEmptySinceActualIsNotEmptyWithId_(id values) {
  OrgAssertjCoreInternalInternalArrays_initialize();
  if (OrgAssertjCoreInternalInternalArrays_isArrayEmptyWithId_(values)) @throw create_JavaLangAssertionError_initWithId_(@"actual is not empty while group of values to look for is.");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInternalArrays)
