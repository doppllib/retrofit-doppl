//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgAssertjCoreInternalInternalDates")
#ifdef RESTRICT_OrgAssertjCoreInternalInternalDates
#define INCLUDE_ALL_OrgAssertjCoreInternalInternalDates 0
#else
#define INCLUDE_ALL_OrgAssertjCoreInternalInternalDates 1
#endif
#undef RESTRICT_OrgAssertjCoreInternalInternalDates

#if !defined (OrgAssertjCoreInternalInternalDates_) && (INCLUDE_ALL_OrgAssertjCoreInternalInternalDates || defined(INCLUDE_OrgAssertjCoreInternalInternalDates))
#define OrgAssertjCoreInternalInternalDates_

@class JavaUtilConcurrentTimeUnit;
@class JavaUtilDate;
@class OrgAssertjCoreInternalFailures;
@protocol JavaUtilComparator;
@protocol OrgAssertjCoreApiAssertionInfo;
@protocol OrgAssertjCoreInternalComparisonStrategy;

@interface OrgAssertjCoreInternalInternalDates : NSObject {
 @public
  OrgAssertjCoreInternalFailures *failures_;
}

#pragma mark Public

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy;

- (void)assertHasTimeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaUtilDate:(JavaUtilDate *)actual
                                               withLong:(jlong)timestamp;

- (void)assertIsAfterWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaUtilDate:(JavaUtilDate *)actual
                                       withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsAfterOrEqualsToWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withJavaUtilDate:(JavaUtilDate *)actual
                                                 withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsAfterYearWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withJavaUtilDate:(JavaUtilDate *)actual
                                                    withInt:(jint)year;

- (void)assertIsBeforeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaUtilDate:(JavaUtilDate *)actual
                                        withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsBeforeOrEqualsToWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withJavaUtilDate:(JavaUtilDate *)actual
                                                  withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsBeforeYearWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaUtilDate:(JavaUtilDate *)actual
                                                     withInt:(jint)year;

- (void)assertIsBetweenWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaUtilDate:(JavaUtilDate *)actual
                                         withJavaUtilDate:(JavaUtilDate *)start
                                         withJavaUtilDate:(JavaUtilDate *)end
                                              withBoolean:(jboolean)inclusiveStart
                                              withBoolean:(jboolean)inclusiveEnd;

- (void)assertIsCloseToWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                         withJavaUtilDate:(JavaUtilDate *)actual
                                         withJavaUtilDate:(JavaUtilDate *)other
                                                 withLong:(jlong)deltaInMilliseconds;

- (void)assertIsEqualWithPrecisionWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withJavaUtilDate:(JavaUtilDate *)actual
                                                    withJavaUtilDate:(JavaUtilDate *)other
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)precision;

- (void)assertIsInSameDayAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withJavaUtilDate:(JavaUtilDate *)actual
                                             withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsInSameHourAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilDate:(JavaUtilDate *)actual
                                              withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsInSameHourWindowAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                    withJavaUtilDate:(JavaUtilDate *)actual
                                                    withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsInSameMinuteAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withJavaUtilDate:(JavaUtilDate *)actual
                                                withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsInSameMinuteWindowAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                      withJavaUtilDate:(JavaUtilDate *)actual
                                                      withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsInSameMonthAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                               withJavaUtilDate:(JavaUtilDate *)actual
                                               withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsInSameSecondAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                withJavaUtilDate:(JavaUtilDate *)actual
                                                withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsInSameSecondWindowAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                      withJavaUtilDate:(JavaUtilDate *)actual
                                                      withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsInSameYearAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilDate:(JavaUtilDate *)actual
                                              withJavaUtilDate:(JavaUtilDate *)other;

- (void)assertIsInTheFutureWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withJavaUtilDate:(JavaUtilDate *)actual;

- (void)assertIsInThePastWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                           withJavaUtilDate:(JavaUtilDate *)actual;

- (void)assertIsNotBetweenWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaUtilDate:(JavaUtilDate *)actual
                                            withJavaUtilDate:(JavaUtilDate *)start
                                            withJavaUtilDate:(JavaUtilDate *)end
                                                 withBoolean:(jboolean)inclusiveStart
                                                 withBoolean:(jboolean)inclusiveEnd;

- (void)assertIsTodayWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                       withJavaUtilDate:(JavaUtilDate *)actual;

- (void)assertIsWithinDayOfMonthWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                  withJavaUtilDate:(JavaUtilDate *)actual
                                                           withInt:(jint)dayOfMonth;

- (void)assertIsWithinDayOfWeekWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withJavaUtilDate:(JavaUtilDate *)actual
                                                          withInt:(jint)dayOfWeek;

- (void)assertIsWithinHourOfDayWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                 withJavaUtilDate:(JavaUtilDate *)actual
                                                          withInt:(jint)hourOfDay;

- (void)assertIsWithinMillisecondWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                                   withJavaUtilDate:(JavaUtilDate *)actual
                                                            withInt:(jint)millisecond;

- (void)assertIsWithinMinuteWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilDate:(JavaUtilDate *)actual
                                                       withInt:(jint)minute;

- (void)assertIsWithinMonthWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                             withJavaUtilDate:(JavaUtilDate *)actual
                                                      withInt:(jint)month;

- (void)assertIsWithinSecondWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                              withJavaUtilDate:(JavaUtilDate *)actual
                                                       withInt:(jint)second;

- (void)assertIsWithinYearWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaUtilDate:(JavaUtilDate *)actual
                                                     withInt:(jint)year;

- (id<JavaUtilComparator>)getComparator;

+ (OrgAssertjCoreInternalInternalDates *)instance;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(OrgAssertjCoreInternalInternalDates)

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalDates, failures_, OrgAssertjCoreInternalFailures *)

FOUNDATION_EXPORT OrgAssertjCoreInternalInternalDates *OrgAssertjCoreInternalInternalDates_instance();

FOUNDATION_EXPORT void OrgAssertjCoreInternalInternalDates_init(OrgAssertjCoreInternalInternalDates *self);

FOUNDATION_EXPORT OrgAssertjCoreInternalInternalDates *new_OrgAssertjCoreInternalInternalDates_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgAssertjCoreInternalInternalDates *create_OrgAssertjCoreInternalInternalDates_init();

FOUNDATION_EXPORT void OrgAssertjCoreInternalInternalDates_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalInternalDates *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

FOUNDATION_EXPORT OrgAssertjCoreInternalInternalDates *new_OrgAssertjCoreInternalInternalDates_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgAssertjCoreInternalInternalDates *create_OrgAssertjCoreInternalInternalDates_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy);

J2OBJC_TYPE_LITERAL_HEADER(OrgAssertjCoreInternalInternalDates)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgAssertjCoreInternalInternalDates")
