//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreApiAssertionInfo.h"
#include "OrgAssertjCoreErrorErrorMessageFactory.h"
#include "OrgAssertjCoreErrorShouldBeEmpty.h"
#include "OrgAssertjCoreErrorShouldBeEqualIgnoringCase.h"
#include "OrgAssertjCoreErrorShouldBeNullOrEmpty.h"
#include "OrgAssertjCoreErrorShouldContainCharSequence.h"
#include "OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce.h"
#include "OrgAssertjCoreErrorShouldContainCharSequenceSequence.h"
#include "OrgAssertjCoreErrorShouldEndWith.h"
#include "OrgAssertjCoreErrorShouldMatchPattern.h"
#include "OrgAssertjCoreErrorShouldNotBeEmpty.h"
#include "OrgAssertjCoreErrorShouldNotContainCharSequence.h"
#include "OrgAssertjCoreErrorShouldNotMatchPattern.h"
#include "OrgAssertjCoreErrorShouldStartWith.h"
#include "OrgAssertjCoreInternalCommonErrors.h"
#include "OrgAssertjCoreInternalCommonValidations.h"
#include "OrgAssertjCoreInternalComparatorBasedComparisonStrategy.h"
#include "OrgAssertjCoreInternalComparisonStrategy.h"
#include "OrgAssertjCoreInternalFailures.h"
#include "OrgAssertjCoreInternalInputStreamsException.h"
#include "OrgAssertjCoreInternalInternalArrays.h"
#include "OrgAssertjCoreInternalInternalObjects.h"
#include "OrgAssertjCoreInternalInternalStrings.h"
#include "OrgAssertjCoreInternalStandardComparisonStrategy.h"
#include "java/io/IOException.h"
#include "java/io/LineNumberReader.h"
#include "java/io/StringReader.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Comparator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface OrgAssertjCoreInternalInternalStrings () {
 @public
  id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy_;
}

+ (jboolean)hasContentsWithJavaLangCharSequence:(id<JavaLangCharSequence>)s;

- (void)checkIsNotNullWithJavaLangCharSequenceArray:(IOSObjectArray *)values;

- (void)checkIsNotEmptyWithJavaLangCharSequenceArray:(IOSObjectArray *)values;

- (jboolean)stringContainsWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                          withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (void)checkCharSequenceIsNotNullWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (jboolean)areEqualIgnoringCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                withJavaLangCharSequence:(id<JavaLangCharSequence>)expected;

- (jint)countOccurencesWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequenceToSearch
                       withJavaLangCharSequence:(id<JavaLangCharSequence>)actual;

- (void)checkRegexIsNotNullWithJavaLangCharSequence:(id<JavaLangCharSequence>)regex;

- (void)checkIsNotNullWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

- (JavaLangNullPointerException *)patternToMatchIsNull;

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)actual;

@end

J2OBJC_FIELD_SETTER(OrgAssertjCoreInternalInternalStrings, comparisonStrategy_, id<OrgAssertjCoreInternalComparisonStrategy>)

inline OrgAssertjCoreInternalInternalStrings *OrgAssertjCoreInternalInternalStrings_get_INSTANCE();
static OrgAssertjCoreInternalInternalStrings *OrgAssertjCoreInternalInternalStrings_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgAssertjCoreInternalInternalStrings, INSTANCE, OrgAssertjCoreInternalInternalStrings *)

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalStrings_hasContentsWithJavaLangCharSequence_(id<JavaLangCharSequence> s);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalStrings_checkIsNotNullWithJavaLangCharSequenceArray_(OrgAssertjCoreInternalInternalStrings *self, IOSObjectArray *values);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalStrings_checkIsNotEmptyWithJavaLangCharSequenceArray_(OrgAssertjCoreInternalInternalStrings *self, IOSObjectArray *values);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalStrings_stringContainsWithJavaLangCharSequence_withJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalStrings_checkCharSequenceIsNotNullWithJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<JavaLangCharSequence> sequence);

__attribute__((unused)) static jboolean OrgAssertjCoreInternalInternalStrings_areEqualIgnoringCaseWithJavaLangCharSequence_withJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected);

__attribute__((unused)) static jint OrgAssertjCoreInternalInternalStrings_countOccurencesWithJavaLangCharSequence_withJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<JavaLangCharSequence> sequenceToSearch, id<JavaLangCharSequence> actual);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalStrings_checkRegexIsNotNullWithJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<JavaLangCharSequence> regex);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalStrings_checkIsNotNullWithJavaUtilRegexPattern_(OrgAssertjCoreInternalInternalStrings *self, JavaUtilRegexPattern *pattern);

__attribute__((unused)) static JavaLangNullPointerException *OrgAssertjCoreInternalInternalStrings_patternToMatchIsNull(OrgAssertjCoreInternalInternalStrings *self);

__attribute__((unused)) static void OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangCharSequence> actual);

J2OBJC_INITIALIZED_DEFN(OrgAssertjCoreInternalInternalStrings)

@implementation OrgAssertjCoreInternalInternalStrings

+ (OrgAssertjCoreInternalInternalStrings *)instance {
  return OrgAssertjCoreInternalInternalStrings_instance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgAssertjCoreInternalInternalStrings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgAssertjCoreInternalComparisonStrategy:(id<OrgAssertjCoreInternalComparisonStrategy>)comparisonStrategy {
  OrgAssertjCoreInternalInternalStrings_initWithOrgAssertjCoreInternalComparisonStrategy_(self, comparisonStrategy);
  return self;
}

- (id<JavaUtilComparator>)getComparator {
  if ([comparisonStrategy_ isKindOfClass:[OrgAssertjCoreInternalComparatorBasedComparisonStrategy class]]) {
    return [((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) nil_chk(((OrgAssertjCoreInternalComparatorBasedComparisonStrategy *) cast_chk(comparisonStrategy_, [OrgAssertjCoreInternalComparatorBasedComparisonStrategy class])))) getComparator];
  }
  return nil;
}

- (void)assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withJavaLangCharSequence:(id<JavaLangCharSequence>)actual {
  if (actual == nil || !OrgAssertjCoreInternalInternalStrings_hasContentsWithJavaLangCharSequence_(actual)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeNullOrEmpty_shouldBeNullOrEmptyWithId_(actual)];
}

- (void)assertEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)actual {
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  if (!OrgAssertjCoreInternalInternalStrings_hasContentsWithJavaLangCharSequence_(actual)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeEmpty_shouldBeEmptyWithId_(actual)];
}

- (void)assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                withJavaLangCharSequence:(id<JavaLangCharSequence>)actual {
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  if (OrgAssertjCoreInternalInternalStrings_hasContentsWithJavaLangCharSequence_(actual)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotBeEmpty_shouldNotBeEmpty()];
}

+ (jboolean)hasContentsWithJavaLangCharSequence:(id<JavaLangCharSequence>)s {
  return OrgAssertjCoreInternalInternalStrings_hasContentsWithJavaLangCharSequence_(s);
}

- (void)assertHasSizeWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                withInt:(jint)expectedSize {
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  OrgAssertjCoreInternalCommonValidations_checkSizesWithId_withInt_withInt_withOrgAssertjCoreApiAssertionInfo_(actual, [((id<JavaLangCharSequence>) nil_chk(actual)) length], expectedSize, info);
}

- (void)assertHasLineCountWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                     withInt:(jint)expectedLineCount {
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  JavaIoLineNumberReader *reader = create_JavaIoLineNumberReader_initWithJavaIoReader_(create_JavaIoStringReader_initWithNSString_([((id<JavaLangCharSequence>) nil_chk(actual)) description]));
  @try {
    while (([reader readLine]) != nil) ;
  }
  @catch (JavaIoIOException *e) {
    NSString *msg = NSString_java_formatWithNSString_withNSObjectArray_(@"Unable to count lines in `%s`", [IOSObjectArray arrayWithObjects:(id[]){ actual } count:1 type:NSObject_class_()]);
    @throw create_OrgAssertjCoreInternalInputStreamsException_initWithNSString_withNSException_(msg, e);
  }
  OrgAssertjCoreInternalCommonValidations_checkLineCountsWithId_withInt_withInt_withOrgAssertjCoreApiAssertionInfo_(actual, [reader getLineNumber], expectedLineCount, info);
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                     withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                         withJavaLangIterable:(id<JavaLangIterable>)other {
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withJavaLangIterable_withInt_(info, actual, other, [((id<JavaLangCharSequence>) nil_chk(actual)) length]);
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                     withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                                       withId:(id)array {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  OrgAssertjCoreInternalInternalArrays_assertIsArrayWithOrgAssertjCoreApiAssertionInfo_withId_(info, array);
  OrgAssertjCoreInternalCommonValidations_hasSameSizeAsCheckWithOrgAssertjCoreApiAssertionInfo_withId_withId_withInt_(info, actual, array, [((id<JavaLangCharSequence>) nil_chk(actual)) length]);
}

- (void)assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                     withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                     withJavaLangCharSequence:(id<JavaLangCharSequence>)other {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
  OrgAssertjCoreInternalCommonValidations_checkOtherIsNotNullWithId_withNSString_(other, @"CharSequence or String");
  OrgAssertjCoreInternalCommonValidations_checkSameSizesWithOrgAssertjCoreApiAssertionInfo_withId_withInt_withInt_(info, actual, [((id<JavaLangCharSequence>) nil_chk(actual)) length], [((id<JavaLangCharSequence>) nil_chk(other)) length]);
}

- (void)assertContainsWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                           withJavaLangCharSequenceArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  OrgAssertjCoreInternalInternalStrings_checkIsNotNullWithJavaLangCharSequenceArray_(self, values);
  OrgAssertjCoreInternalInternalStrings_checkIsNotEmptyWithJavaLangCharSequenceArray_(self, values);
  OrgAssertjCoreInternalInternalStrings_checkCharSequenceIsNotNullWithJavaLangCharSequence_(self, IOSObjectArray_Get(nil_chk(values), 0));
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  {
    IOSObjectArray *a__ = values;
    id<JavaLangCharSequence> const *b__ = a__->buffer_;
    id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangCharSequence> value = *b__++;
      if (!OrgAssertjCoreInternalInternalStrings_stringContainsWithJavaLangCharSequence_withJavaLangCharSequence_(self, actual, value)) {
        [notFound addWithId:value];
      }
    }
  }
  if ([notFound isEmpty]) return;
  if ([notFound size] == 1 && values->size_ == 1) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainCharSequence_shouldContainWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(actual, IOSObjectArray_Get(values, 0), comparisonStrategy_)];
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainCharSequence_shouldContainWithJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, notFound, comparisonStrategy_)];
}

- (void)checkIsNotNullWithJavaLangCharSequenceArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalInternalStrings_checkIsNotNullWithJavaLangCharSequenceArray_(self, values);
}

- (void)checkIsNotEmptyWithJavaLangCharSequenceArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalInternalStrings_checkIsNotEmptyWithJavaLangCharSequenceArray_(self, values);
}

- (jboolean)stringContainsWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                          withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return OrgAssertjCoreInternalInternalStrings_stringContainsWithJavaLangCharSequence_withJavaLangCharSequence_(self, actual, sequence);
}

- (void)assertContainsIgnoringCaseWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                            withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                            withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  OrgAssertjCoreInternalInternalStrings_checkCharSequenceIsNotNullWithJavaLangCharSequence_(self, sequence);
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  if ([((NSString *) nil_chk([((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(actual)) description])) lowercaseString])) java_contains:[((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(sequence)) description])) lowercaseString]]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainCharSequence_shouldContainIgnoringCaseWithJavaLangCharSequence_withJavaLangCharSequence_(actual, sequence)];
}

- (void)assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                      withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                      withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  OrgAssertjCoreInternalInternalStrings_checkCharSequenceIsNotNullWithJavaLangCharSequence_(self, sequence);
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  if (!OrgAssertjCoreInternalInternalStrings_stringContainsWithJavaLangCharSequence_withJavaLangCharSequence_(self, actual, sequence)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotContainCharSequence_shouldNotContainWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, comparisonStrategy_)];
}

- (void)checkCharSequenceIsNotNullWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  OrgAssertjCoreInternalInternalStrings_checkCharSequenceIsNotNullWithJavaLangCharSequence_(self, sequence);
}

- (void)assertEqualsIgnoringCaseWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                          withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                          withJavaLangCharSequence:(id<JavaLangCharSequence>)expected {
  if (OrgAssertjCoreInternalInternalStrings_areEqualIgnoringCaseWithJavaLangCharSequence_withJavaLangCharSequence_(self, actual, expected)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldBeEqualIgnoringCase_shouldBeEqualWithJavaLangCharSequence_withJavaLangCharSequence_(actual, expected)];
}

- (jboolean)areEqualIgnoringCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                withJavaLangCharSequence:(id<JavaLangCharSequence>)expected {
  return OrgAssertjCoreInternalInternalStrings_areEqualIgnoringCaseWithJavaLangCharSequence_withJavaLangCharSequence_(self, actual, expected);
}

- (void)assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  OrgAssertjCoreInternalInternalStrings_checkCharSequenceIsNotNullWithJavaLangCharSequence_(self, sequence);
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  jint sequenceOccurencesInActual = OrgAssertjCoreInternalInternalStrings_countOccurencesWithJavaLangCharSequence_withJavaLangCharSequence_(self, sequence, actual);
  if (sequenceOccurencesInActual == 1) return;
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainCharSequenceOnlyOnce_shouldContainOnlyOnceWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withOrgAssertjCoreInternalComparisonStrategy_(actual, sequence, sequenceOccurencesInActual, comparisonStrategy_)];
}

- (jint)countOccurencesWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequenceToSearch
                       withJavaLangCharSequence:(id<JavaLangCharSequence>)actual {
  return OrgAssertjCoreInternalInternalStrings_countOccurencesWithJavaLangCharSequence_withJavaLangCharSequence_(self, sequenceToSearch, actual);
}

- (void)assertStartsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix {
  if (prefix == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The given prefix should not be null");
  }
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  if ([((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(comparisonStrategy_)) stringStartsWithWithNSString:[((id<JavaLangCharSequence>) nil_chk(actual)) description] withNSString:[prefix description]]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldStartWith_shouldStartWithWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, prefix, comparisonStrategy_)];
}

- (void)assertEndsWithWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix {
  if (suffix == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The given suffix should not be null");
  }
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  if ([((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(comparisonStrategy_)) stringEndsWithWithNSString:[((id<JavaLangCharSequence>) nil_chk(actual)) description] withNSString:[suffix description]]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldEndWith_shouldEndWithWithId_withId_withOrgAssertjCoreInternalComparisonStrategy_(actual, suffix, comparisonStrategy_)];
}

- (void)assertMatchesWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)regex {
  OrgAssertjCoreInternalInternalStrings_checkRegexIsNotNullWithJavaLangCharSequence_(self, regex);
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  if (JavaUtilRegexPattern_matchesWithNSString_withJavaLangCharSequence_([((id<JavaLangCharSequence>) nil_chk(regex)) description], actual)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldMatchPattern_shouldMatchWithJavaLangCharSequence_withJavaLangCharSequence_(actual, regex)];
}

- (void)assertDoesNotMatchWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                    withJavaLangCharSequence:(id<JavaLangCharSequence>)regex {
  OrgAssertjCoreInternalInternalStrings_checkRegexIsNotNullWithJavaLangCharSequence_(self, regex);
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  if (!JavaUtilRegexPattern_matchesWithNSString_withJavaLangCharSequence_([((id<JavaLangCharSequence>) nil_chk(regex)) description], actual)) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotMatchPattern_shouldNotMatchWithJavaLangCharSequence_withJavaLangCharSequence_(actual, regex)];
}

- (void)checkRegexIsNotNullWithJavaLangCharSequence:(id<JavaLangCharSequence>)regex {
  OrgAssertjCoreInternalInternalStrings_checkRegexIsNotNullWithJavaLangCharSequence_(self, regex);
}

- (void)assertMatchesWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                               withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  OrgAssertjCoreInternalInternalStrings_checkIsNotNullWithJavaUtilRegexPattern_(self, pattern);
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:actual])) matches]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldMatchPattern_shouldMatchWithJavaLangCharSequence_withJavaLangCharSequence_(actual, [pattern pattern])];
}

- (void)assertDoesNotMatchWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                    withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                    withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  OrgAssertjCoreInternalInternalStrings_checkIsNotNullWithJavaUtilRegexPattern_(self, pattern);
  if (actual == nil || ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:actual])) matches]) {
    return;
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldNotMatchPattern_shouldNotMatchWithJavaLangCharSequence_withJavaLangCharSequence_(actual, [((JavaUtilRegexPattern *) nil_chk(pattern)) pattern])];
}

- (void)checkIsNotNullWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  OrgAssertjCoreInternalInternalStrings_checkIsNotNullWithJavaUtilRegexPattern_(self, pattern);
}

- (JavaLangNullPointerException *)patternToMatchIsNull {
  return OrgAssertjCoreInternalInternalStrings_patternToMatchIsNull(self);
}

- (void)assertNotNullWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                               withJavaLangCharSequence:(id<JavaLangCharSequence>)actual {
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
}

- (void)assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)actual
                                   withJavaLangCharSequenceArray:(IOSObjectArray *)values {
  OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(self, info, actual);
  OrgAssertjCoreInternalInternalStrings_checkIsNotNullWithJavaLangCharSequenceArray_(self, values);
  OrgAssertjCoreInternalInternalStrings_checkIsNotEmptyWithJavaLangCharSequenceArray_(self, values);
  OrgAssertjCoreInternalInternalStrings_checkCharSequenceIsNotNullWithJavaLangCharSequence_(self, IOSObjectArray_Get(nil_chk(values), 0));
  id<JavaUtilSet> notFound = create_JavaUtilLinkedHashSet_init();
  {
    IOSObjectArray *a__ = values;
    id<JavaLangCharSequence> const *b__ = a__->buffer_;
    id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangCharSequence> value = *b__++;
      if (!OrgAssertjCoreInternalInternalStrings_stringContainsWithJavaLangCharSequence_withJavaLangCharSequence_(self, actual, value)) [notFound addWithId:value];
    }
  }
  if ([notFound isEmpty]) {
    if (values->size_ == 1) {
      return;
    }
    NSString *strActual = [((id<JavaLangCharSequence>) nil_chk(actual)) description];
    for (jint i = 1; i < values->size_; i++) {
      if ([((NSString *) nil_chk(strActual)) java_indexOfString:[((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(values, i - 1))) description]] > [strActual java_indexOfString:[((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(values, i))) description]]) {
        @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainCharSequenceSequence_shouldContainSequenceWithJavaLangCharSequence_withJavaLangCharSequenceArray_withInt_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, i - 1, comparisonStrategy_)];
      }
    }
    return;
  }
  if ([notFound size] == 1 && values->size_ == 1) {
    @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainCharSequence_shouldContainWithJavaLangCharSequence_withJavaLangCharSequence_withOrgAssertjCoreInternalComparisonStrategy_(actual, IOSObjectArray_Get(values, 0), comparisonStrategy_)];
  }
  @throw [((OrgAssertjCoreInternalFailures *) nil_chk(failures_)) failureWithOrgAssertjCoreApiAssertionInfo:info withOrgAssertjCoreErrorErrorMessageFactory:OrgAssertjCoreErrorShouldContainCharSequence_shouldContainWithJavaLangCharSequence_withJavaLangCharSequenceArray_withJavaUtilSet_withOrgAssertjCoreInternalComparisonStrategy_(actual, values, notFound, comparisonStrategy_)];
}

- (void)assertXmlEqualsToWithOrgAssertjCoreApiAssertionInfo:(id<OrgAssertjCoreApiAssertionInfo>)info
                                   withJavaLangCharSequence:(id<JavaLangCharSequence>)actualXml
                                   withJavaLangCharSequence:(id<JavaLangCharSequence>)expectedXml {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Oh shit");
}

- (void)dealloc {
  RELEASE_(comparisonStrategy_);
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreInternalInternalStrings;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 11, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x82, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x82, 20, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 27, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 29, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 36, -1, -1, -1, -1 },
    { NULL, "LJavaLangNullPointerException;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(instance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithOrgAssertjCoreInternalComparisonStrategy:);
  methods[3].selector = @selector(getComparator);
  methods[4].selector = @selector(assertNullOrEmptyWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:);
  methods[5].selector = @selector(assertEmptyWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:);
  methods[6].selector = @selector(assertNotEmptyWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:);
  methods[7].selector = @selector(hasContentsWithJavaLangCharSequence:);
  methods[8].selector = @selector(assertHasSizeWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withInt:);
  methods[9].selector = @selector(assertHasLineCountWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withInt:);
  methods[10].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangIterable:);
  methods[11].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withId:);
  methods[12].selector = @selector(assertHasSameSizeAsWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequence:);
  methods[13].selector = @selector(assertContainsWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[14].selector = @selector(checkIsNotNullWithJavaLangCharSequenceArray:);
  methods[15].selector = @selector(checkIsNotEmptyWithJavaLangCharSequenceArray:);
  methods[16].selector = @selector(stringContainsWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[17].selector = @selector(assertContainsIgnoringCaseWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequence:);
  methods[18].selector = @selector(assertDoesNotContainWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequence:);
  methods[19].selector = @selector(checkCharSequenceIsNotNullWithJavaLangCharSequence:);
  methods[20].selector = @selector(assertEqualsIgnoringCaseWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequence:);
  methods[21].selector = @selector(areEqualIgnoringCaseWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[22].selector = @selector(assertContainsOnlyOnceWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequence:);
  methods[23].selector = @selector(countOccurencesWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[24].selector = @selector(assertStartsWithWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequence:);
  methods[25].selector = @selector(assertEndsWithWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequence:);
  methods[26].selector = @selector(assertMatchesWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequence:);
  methods[27].selector = @selector(assertDoesNotMatchWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequence:);
  methods[28].selector = @selector(checkRegexIsNotNullWithJavaLangCharSequence:);
  methods[29].selector = @selector(assertMatchesWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaUtilRegexPattern:);
  methods[30].selector = @selector(assertDoesNotMatchWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaUtilRegexPattern:);
  methods[31].selector = @selector(checkIsNotNullWithJavaUtilRegexPattern:);
  methods[32].selector = @selector(patternToMatchIsNull);
  methods[33].selector = @selector(assertNotNullWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:);
  methods[34].selector = @selector(assertContainsSequenceWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[35].selector = @selector(assertXmlEqualsToWithOrgAssertjCoreApiAssertionInfo:withJavaLangCharSequence:withJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgAssertjCoreInternalInternalStrings;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "comparisonStrategy_", "LOrgAssertjCoreInternalComparisonStrategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "failures_", "LOrgAssertjCoreInternalFailures;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgAssertjCoreInternalComparisonStrategy;", "()Ljava/util/Comparator<*>;", "assertNullOrEmpty", "LOrgAssertjCoreApiAssertionInfo;LJavaLangCharSequence;", "assertEmpty", "assertNotEmpty", "hasContents", "LJavaLangCharSequence;", "assertHasSize", "LOrgAssertjCoreApiAssertionInfo;LJavaLangCharSequence;I", "assertHasLineCount", "assertHasSameSizeAs", "LOrgAssertjCoreApiAssertionInfo;LJavaLangCharSequence;LJavaLangIterable;", "(Lorg/assertj/core/api/AssertionInfo;Ljava/lang/CharSequence;Ljava/lang/Iterable<*>;)V", "LOrgAssertjCoreApiAssertionInfo;LJavaLangCharSequence;LNSObject;", "LOrgAssertjCoreApiAssertionInfo;LJavaLangCharSequence;LJavaLangCharSequence;", "assertContains", "LOrgAssertjCoreApiAssertionInfo;LJavaLangCharSequence;[LJavaLangCharSequence;", "checkIsNotNull", "[LJavaLangCharSequence;", "checkIsNotEmpty", "stringContains", "LJavaLangCharSequence;LJavaLangCharSequence;", "assertContainsIgnoringCase", "assertDoesNotContain", "checkCharSequenceIsNotNull", "assertEqualsIgnoringCase", "areEqualIgnoringCase", "assertContainsOnlyOnce", "countOccurences", "assertStartsWith", "assertEndsWith", "assertMatches", "assertDoesNotMatch", "checkRegexIsNotNull", "LOrgAssertjCoreApiAssertionInfo;LJavaLangCharSequence;LJavaUtilRegexPattern;", "LJavaUtilRegexPattern;", "assertNotNull", "assertContainsSequence", "assertXmlEqualsTo", &OrgAssertjCoreInternalInternalStrings_INSTANCE };
  static const J2ObjcClassInfo _OrgAssertjCoreInternalInternalStrings = { "InternalStrings", "org.assertj.core.internal", ptrTable, methods, fields, 7, 0x1, 36, 3, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreInternalInternalStrings;
}

+ (void)initialize {
  if (self == [OrgAssertjCoreInternalInternalStrings class]) {
    JreStrongAssignAndConsume(&OrgAssertjCoreInternalInternalStrings_INSTANCE, new_OrgAssertjCoreInternalInternalStrings_init());
    J2OBJC_SET_INITIALIZED(OrgAssertjCoreInternalInternalStrings)
  }
}

@end

OrgAssertjCoreInternalInternalStrings *OrgAssertjCoreInternalInternalStrings_instance() {
  OrgAssertjCoreInternalInternalStrings_initialize();
  return OrgAssertjCoreInternalInternalStrings_INSTANCE;
}

void OrgAssertjCoreInternalInternalStrings_init(OrgAssertjCoreInternalInternalStrings *self) {
  OrgAssertjCoreInternalInternalStrings_initWithOrgAssertjCoreInternalComparisonStrategy_(self, OrgAssertjCoreInternalStandardComparisonStrategy_instance());
}

OrgAssertjCoreInternalInternalStrings *new_OrgAssertjCoreInternalInternalStrings_init() {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalStrings, init)
}

OrgAssertjCoreInternalInternalStrings *create_OrgAssertjCoreInternalInternalStrings_init() {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalStrings, init)
}

void OrgAssertjCoreInternalInternalStrings_initWithOrgAssertjCoreInternalComparisonStrategy_(OrgAssertjCoreInternalInternalStrings *self, id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  NSObject_init(self);
  JreStrongAssign(&self->failures_, OrgAssertjCoreInternalFailures_instance());
  JreStrongAssign(&self->comparisonStrategy_, comparisonStrategy);
}

OrgAssertjCoreInternalInternalStrings *new_OrgAssertjCoreInternalInternalStrings_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreInternalInternalStrings, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

OrgAssertjCoreInternalInternalStrings *create_OrgAssertjCoreInternalInternalStrings_initWithOrgAssertjCoreInternalComparisonStrategy_(id<OrgAssertjCoreInternalComparisonStrategy> comparisonStrategy) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreInternalInternalStrings, initWithOrgAssertjCoreInternalComparisonStrategy_, comparisonStrategy)
}

jboolean OrgAssertjCoreInternalInternalStrings_hasContentsWithJavaLangCharSequence_(id<JavaLangCharSequence> s) {
  OrgAssertjCoreInternalInternalStrings_initialize();
  return [((id<JavaLangCharSequence>) nil_chk(s)) length] > 0;
}

void OrgAssertjCoreInternalInternalStrings_checkIsNotNullWithJavaLangCharSequenceArray_(OrgAssertjCoreInternalInternalStrings *self, IOSObjectArray *values) {
  if (values == nil) {
    @throw OrgAssertjCoreInternalCommonErrors_arrayOfValuesToLookForIsNull();
  }
}

void OrgAssertjCoreInternalInternalStrings_checkIsNotEmptyWithJavaLangCharSequenceArray_(OrgAssertjCoreInternalInternalStrings *self, IOSObjectArray *values) {
  if (((IOSObjectArray *) nil_chk(values))->size_ == 0) {
    @throw OrgAssertjCoreInternalCommonErrors_arrayOfValuesToLookForIsEmpty();
  }
}

jboolean OrgAssertjCoreInternalInternalStrings_stringContainsWithJavaLangCharSequence_withJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> sequence) {
  return [((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) stringContainsWithNSString:[((id<JavaLangCharSequence>) nil_chk(actual)) description] withNSString:[((id<JavaLangCharSequence>) nil_chk(sequence)) description]];
}

void OrgAssertjCoreInternalInternalStrings_checkCharSequenceIsNotNullWithJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<JavaLangCharSequence> sequence) {
  if (sequence == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"The char sequence to look for should not be null");
  }
}

jboolean OrgAssertjCoreInternalInternalStrings_areEqualIgnoringCaseWithJavaLangCharSequence_withJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<JavaLangCharSequence> actual, id<JavaLangCharSequence> expected) {
  if (actual == nil) {
    return expected == nil;
  }
  return [((NSString *) nil_chk([actual description])) java_equalsIgnoreCase:[((id<JavaLangCharSequence>) nil_chk(expected)) description]];
}

jint OrgAssertjCoreInternalInternalStrings_countOccurencesWithJavaLangCharSequence_withJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<JavaLangCharSequence> sequenceToSearch, id<JavaLangCharSequence> actual) {
  NSString *strToSearch = [((id<JavaLangCharSequence>) nil_chk(sequenceToSearch)) description];
  NSString *strActual = [((id<JavaLangCharSequence>) nil_chk(actual)) description];
  jint occurences = 0;
  for (jint i = 0; i <= (((jint) [((NSString *) nil_chk(strActual)) length]) - ((jint) [((NSString *) nil_chk(strToSearch)) length])); i++) {
    if ([((id<OrgAssertjCoreInternalComparisonStrategy>) nil_chk(self->comparisonStrategy_)) areEqualWithId:[strActual java_substring:i endIndex:i + [sequenceToSearch length]] withId:strToSearch]) {
      occurences++;
    }
  }
  return occurences;
}

void OrgAssertjCoreInternalInternalStrings_checkRegexIsNotNullWithJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<JavaLangCharSequence> regex) {
  if (regex == nil) {
    @throw OrgAssertjCoreInternalInternalStrings_patternToMatchIsNull(self);
  }
}

void OrgAssertjCoreInternalInternalStrings_checkIsNotNullWithJavaUtilRegexPattern_(OrgAssertjCoreInternalInternalStrings *self, JavaUtilRegexPattern *pattern) {
  if (pattern == nil) {
    @throw OrgAssertjCoreInternalInternalStrings_patternToMatchIsNull(self);
  }
}

JavaLangNullPointerException *OrgAssertjCoreInternalInternalStrings_patternToMatchIsNull(OrgAssertjCoreInternalInternalStrings *self) {
  return create_JavaLangNullPointerException_initWithNSString_(@"The regular expression pattern to match should not be null");
}

void OrgAssertjCoreInternalInternalStrings_assertNotNullWithOrgAssertjCoreApiAssertionInfo_withJavaLangCharSequence_(OrgAssertjCoreInternalInternalStrings *self, id<OrgAssertjCoreApiAssertionInfo> info, id<JavaLangCharSequence> actual) {
  [((OrgAssertjCoreInternalInternalObjects *) nil_chk(OrgAssertjCoreInternalInternalObjects_instance())) assertNotNullWithOrgAssertjCoreApiAssertionInfo:info withId:actual];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreInternalInternalStrings)
