//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgAssertjCoreDataIndex.h"
#include "OrgAssertjCoreUtilObjects.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"

@interface OrgAssertjCoreDataIndex ()

- (instancetype)initWithInt:(jint)value;

@end

__attribute__((unused)) static void OrgAssertjCoreDataIndex_initWithInt_(OrgAssertjCoreDataIndex *self, jint value);

__attribute__((unused)) static OrgAssertjCoreDataIndex *new_OrgAssertjCoreDataIndex_initWithInt_(jint value) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgAssertjCoreDataIndex *create_OrgAssertjCoreDataIndex_initWithInt_(jint value);

@implementation OrgAssertjCoreDataIndex

+ (OrgAssertjCoreDataIndex *)atIndexWithInt:(jint)value {
  return OrgAssertjCoreDataIndex_atIndexWithInt_(value);
}

- (instancetype)initWithInt:(jint)value {
  OrgAssertjCoreDataIndex_initWithInt_(self, value);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self java_getClass] != [obj java_getClass]) {
    return false;
  }
  return value_ == ((OrgAssertjCoreDataIndex *) cast_chk(obj, [OrgAssertjCoreDataIndex class]))->value_;
}

- (NSUInteger)hash {
  jint result = 1;
  result = OrgAssertjCoreUtilObjects_HASH_CODE_PRIME * result + value_;
  return result;
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"%s[value=%d]", [IOSObjectArray arrayWithObjects:(id[]){ [[self java_getClass] getSimpleName], JavaLangInteger_valueOfWithInt_(value_) } count:2 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgAssertjCoreDataIndex;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(atIndexWithInt:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "atIndex", "I", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _OrgAssertjCoreDataIndex = { "Index", "org.assertj.core.data", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgAssertjCoreDataIndex;
}

@end

OrgAssertjCoreDataIndex *OrgAssertjCoreDataIndex_atIndexWithInt_(jint value) {
  OrgAssertjCoreDataIndex_initialize();
  if (value < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The value of the index should not be negative");
  }
  return create_OrgAssertjCoreDataIndex_initWithInt_(value);
}

void OrgAssertjCoreDataIndex_initWithInt_(OrgAssertjCoreDataIndex *self, jint value) {
  NSObject_init(self);
  self->value_ = value;
}

OrgAssertjCoreDataIndex *new_OrgAssertjCoreDataIndex_initWithInt_(jint value) {
  J2OBJC_NEW_IMPL(OrgAssertjCoreDataIndex, initWithInt_, value)
}

OrgAssertjCoreDataIndex *create_OrgAssertjCoreDataIndex_initWithInt_(jint value) {
  J2OBJC_CREATE_IMPL(OrgAssertjCoreDataIndex, initWithInt_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgAssertjCoreDataIndex)
