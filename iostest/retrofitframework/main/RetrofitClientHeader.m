//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "RetrofitClientHeader.h"

@interface RetrofitClientHeader () {
 @public
  NSString *name_;
  NSString *value_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitClientHeader, name_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitClientHeader, value_, NSString *)

@implementation RetrofitClientHeader

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  RetrofitClientHeader_initWithNSString_withNSString_(self, name, value);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getValue {
  return value_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  RetrofitClientHeader *header = (RetrofitClientHeader *) cast_chk(o, [RetrofitClientHeader class]);
  if (name_ != nil ? ![name_ isEqual:header->name_] : header->name_ != nil) return false;
  if (value_ != nil ? ![value_ isEqual:header->value_] : header->value_ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  jint result = name_ != nil ? ((jint) [name_ hash]) : 0;
  result = 31 * result + (value_ != nil ? ((jint) [value_ hash]) : 0);
  return result;
}

- (NSString *)description {
  return JreStrcat("$$$", (name_ != nil ? name_ : @""), @": ", (value_ != nil ? value_ : @""));
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _RetrofitClientHeader = { "Header", "retrofit.client", ptrTable, methods, fields, 7, 0x11, 6, 2, -1, -1, -1, -1, -1 };
  return &_RetrofitClientHeader;
}

@end

void RetrofitClientHeader_initWithNSString_withNSString_(RetrofitClientHeader *self, NSString *name, NSString *value) {
  NSObject_init(self);
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->value_, value);
}

RetrofitClientHeader *new_RetrofitClientHeader_initWithNSString_withNSString_(NSString *name, NSString *value) {
  J2OBJC_NEW_IMPL(RetrofitClientHeader, initWithNSString_withNSString_, name, value)
}

RetrofitClientHeader *create_RetrofitClientHeader_initWithNSString_withNSString_(NSString *name, NSString *value) {
  J2OBJC_CREATE_IMPL(RetrofitClientHeader, initWithNSString_withNSString_, name, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitClientHeader)
