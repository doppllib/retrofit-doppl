//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "J2ObjC_source.h"
#include "RetrofitClientResponse.h"
#include "RetrofitMimeTypedInput.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface RetrofitClientResponse () {
 @public
  NSString *url_;
  jint status_;
  NSString *reason_;
  id<JavaUtilList> headers_;
  id<RetrofitMimeTypedInput> body_;
}

@end

J2OBJC_FIELD_SETTER(RetrofitClientResponse, url_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitClientResponse, reason_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitClientResponse, headers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RetrofitClientResponse, body_, id<RetrofitMimeTypedInput>)

@implementation RetrofitClientResponse

- (instancetype)initWithNSString:(NSString *)url
                         withInt:(jint)status
                    withNSString:(NSString *)reason
                withJavaUtilList:(id<JavaUtilList>)headers
      withRetrofitMimeTypedInput:(id<RetrofitMimeTypedInput>)body {
  RetrofitClientResponse_initWithNSString_withInt_withNSString_withJavaUtilList_withRetrofitMimeTypedInput_(self, url, status, reason, headers, body);
  return self;
}

- (NSString *)getUrl {
  return url_;
}

- (jint)getStatus {
  return status_;
}

- (NSString *)getReason {
  return reason_;
}

- (id<JavaUtilList>)getHeaders {
  return headers_;
}

- (id<RetrofitMimeTypedInput>)getBody {
  return body_;
}

- (void)dealloc {
  RELEASE_(url_);
  RELEASE_(reason_);
  RELEASE_(headers_);
  RELEASE_(body_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LRetrofitMimeTypedInput;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withInt:withNSString:withJavaUtilList:withRetrofitMimeTypedInput:);
  methods[1].selector = @selector(getUrl);
  methods[2].selector = @selector(getStatus);
  methods[3].selector = @selector(getReason);
  methods[4].selector = @selector(getHeaders);
  methods[5].selector = @selector(getBody);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "url_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "status_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "reason_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "body_", "LRetrofitMimeTypedInput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILNSString;LJavaUtilList;LRetrofitMimeTypedInput;", "(Ljava/lang/String;ILjava/lang/String;Ljava/util/List<Lretrofit/client/Header;>;Lretrofit/mime/TypedInput;)V", "()Ljava/util/List<Lretrofit/client/Header;>;", "Ljava/util/List<Lretrofit/client/Header;>;" };
  static const J2ObjcClassInfo _RetrofitClientResponse = { "Response", "retrofit.client", ptrTable, methods, fields, 7, 0x11, 6, 5, -1, -1, -1, -1, -1 };
  return &_RetrofitClientResponse;
}

@end

void RetrofitClientResponse_initWithNSString_withInt_withNSString_withJavaUtilList_withRetrofitMimeTypedInput_(RetrofitClientResponse *self, NSString *url, jint status, NSString *reason, id<JavaUtilList> headers, id<RetrofitMimeTypedInput> body) {
  NSObject_init(self);
  if (url == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"url == null");
  }
  if (status < 200) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid status code: ", status));
  }
  if (reason == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"reason == null");
  }
  if (headers == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"headers == null");
  }
  JreStrongAssign(&self->url_, url);
  self->status_ = status;
  JreStrongAssign(&self->reason_, reason);
  JreStrongAssign(&self->headers_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(create_JavaUtilArrayList_initWithJavaUtilCollection_(headers)));
  JreStrongAssign(&self->body_, body);
}

RetrofitClientResponse *new_RetrofitClientResponse_initWithNSString_withInt_withNSString_withJavaUtilList_withRetrofitMimeTypedInput_(NSString *url, jint status, NSString *reason, id<JavaUtilList> headers, id<RetrofitMimeTypedInput> body) {
  J2OBJC_NEW_IMPL(RetrofitClientResponse, initWithNSString_withInt_withNSString_withJavaUtilList_withRetrofitMimeTypedInput_, url, status, reason, headers, body)
}

RetrofitClientResponse *create_RetrofitClientResponse_initWithNSString_withInt_withNSString_withJavaUtilList_withRetrofitMimeTypedInput_(NSString *url, jint status, NSString *reason, id<JavaUtilList> headers, id<RetrofitMimeTypedInput> body) {
  J2OBJC_CREATE_IMPL(RetrofitClientResponse, initWithNSString_withInt_withNSString_withJavaUtilList_withRetrofitMimeTypedInput_, url, status, reason, headers, body)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitClientResponse)
