//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RetrofitClientHeader.h"
#include "RetrofitClientRequest.h"
#include "RetrofitConverterConverter.h"
#include "RetrofitHttpBody.h"
#include "RetrofitHttpEncodedPath.h"
#include "RetrofitHttpEncodedQuery.h"
#include "RetrofitHttpEncodedQueryMap.h"
#include "RetrofitHttpField.h"
#include "RetrofitHttpFieldMap.h"
#include "RetrofitHttpHeader.h"
#include "RetrofitHttpPart.h"
#include "RetrofitHttpPartMap.h"
#include "RetrofitHttpPath.h"
#include "RetrofitHttpQuery.h"
#include "RetrofitHttpQueryMap.h"
#include "RetrofitMimeFormUrlEncodedTypedOutput.h"
#include "RetrofitMimeMultipartTypedOutput.h"
#include "RetrofitMimeTypedOutput.h"
#include "RetrofitMimeTypedString.h"
#include "RetrofitRequestBuilder.h"
#include "RetrofitRestMethodInfo.h"
#include "java/io/OutputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Array.h"
#include "java/net/URLEncoder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface RetrofitRequestBuilder () {
 @public
  id<RetrofitConverterConverter> converter_;
  IOSObjectArray *paramAnnotations_;
  NSString *requestMethod_;
  jboolean isSynchronous_;
  jboolean isObservable_;
  NSString *apiUrl_;
  RetrofitMimeFormUrlEncodedTypedOutput *formBody_;
  RetrofitMimeMultipartTypedOutput *multipartBody_;
  id<RetrofitMimeTypedOutput> body_;
  NSString *relativeUrl_;
  JavaLangStringBuilder *queryParams_;
  id<JavaUtilList> headers_;
  NSString *contentTypeHeader_;
}

- (void)addPathParamWithNSString:(NSString *)name
                    withNSString:(NSString *)value
                     withBoolean:(jboolean)urlEncodeValue;

- (void)addQueryParamWithNSString:(NSString *)name
                           withId:(id)value
                      withBoolean:(jboolean)encodeName
                      withBoolean:(jboolean)encodeValue;

- (void)addQueryParamWithNSString:(NSString *)name
                     withNSString:(NSString *)value
                      withBoolean:(jboolean)encodeName
                      withBoolean:(jboolean)encodeValue;

- (void)addQueryParamMapWithInt:(jint)parameterNumber
                withJavaUtilMap:(id<JavaUtilMap>)map
                    withBoolean:(jboolean)encodeNames
                    withBoolean:(jboolean)encodeValues;

@end

J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, converter_, id<RetrofitConverterConverter>)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, paramAnnotations_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, requestMethod_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, apiUrl_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, formBody_, RetrofitMimeFormUrlEncodedTypedOutput *)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, multipartBody_, RetrofitMimeMultipartTypedOutput *)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, body_, id<RetrofitMimeTypedOutput>)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, relativeUrl_, NSString *)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, queryParams_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, headers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder, contentTypeHeader_, NSString *)

__attribute__((unused)) static void RetrofitRequestBuilder_addPathParamWithNSString_withNSString_withBoolean_(RetrofitRequestBuilder *self, NSString *name, NSString *value, jboolean urlEncodeValue);

__attribute__((unused)) static void RetrofitRequestBuilder_addQueryParamWithNSString_withId_withBoolean_withBoolean_(RetrofitRequestBuilder *self, NSString *name, id value, jboolean encodeName, jboolean encodeValue);

__attribute__((unused)) static void RetrofitRequestBuilder_addQueryParamWithNSString_withNSString_withBoolean_withBoolean_(RetrofitRequestBuilder *self, NSString *name, NSString *value, jboolean encodeName, jboolean encodeValue);

__attribute__((unused)) static void RetrofitRequestBuilder_addQueryParamMapWithInt_withJavaUtilMap_withBoolean_withBoolean_(RetrofitRequestBuilder *self, jint parameterNumber, id<JavaUtilMap> map, jboolean encodeNames, jboolean encodeValues);

@interface RetrofitRequestBuilder_MimeOverridingTypedOutput : NSObject < RetrofitMimeTypedOutput > {
 @public
  id<RetrofitMimeTypedOutput> delegate_;
  NSString *mimeType_;
}

- (instancetype)initWithRetrofitMimeTypedOutput:(id<RetrofitMimeTypedOutput>)delegate
                                   withNSString:(NSString *)mimeType;

- (NSString *)fileName;

- (NSString *)mimeType;

- (jlong)length;

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitRequestBuilder_MimeOverridingTypedOutput)

J2OBJC_FIELD_SETTER(RetrofitRequestBuilder_MimeOverridingTypedOutput, delegate_, id<RetrofitMimeTypedOutput>)
J2OBJC_FIELD_SETTER(RetrofitRequestBuilder_MimeOverridingTypedOutput, mimeType_, NSString *)

__attribute__((unused)) static void RetrofitRequestBuilder_MimeOverridingTypedOutput_initWithRetrofitMimeTypedOutput_withNSString_(RetrofitRequestBuilder_MimeOverridingTypedOutput *self, id<RetrofitMimeTypedOutput> delegate, NSString *mimeType);

__attribute__((unused)) static RetrofitRequestBuilder_MimeOverridingTypedOutput *new_RetrofitRequestBuilder_MimeOverridingTypedOutput_initWithRetrofitMimeTypedOutput_withNSString_(id<RetrofitMimeTypedOutput> delegate, NSString *mimeType) NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitRequestBuilder_MimeOverridingTypedOutput *create_RetrofitRequestBuilder_MimeOverridingTypedOutput_initWithRetrofitMimeTypedOutput_withNSString_(id<RetrofitMimeTypedOutput> delegate, NSString *mimeType);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitRequestBuilder_MimeOverridingTypedOutput)

@implementation RetrofitRequestBuilder

- (instancetype)initWithNSString:(NSString *)apiUrl
      withRetrofitRestMethodInfo:(RetrofitRestMethodInfo *)methodInfo
  withRetrofitConverterConverter:(id<RetrofitConverterConverter>)converter {
  RetrofitRequestBuilder_initWithNSString_withRetrofitRestMethodInfo_withRetrofitConverterConverter_(self, apiUrl, methodInfo, converter);
  return self;
}

- (void)addHeaderWithNSString:(NSString *)name
                 withNSString:(NSString *)value {
  if (name == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Header name must not be null.");
  }
  if ([@"Content-Type" java_equalsIgnoreCase:name]) {
    JreStrongAssign(&contentTypeHeader_, value);
    return;
  }
  id<JavaUtilList> headers = self->headers_;
  if (headers == nil) {
    JreStrongAssign(&self->headers_, headers = create_JavaUtilArrayList_initWithInt_(2));
  }
  [headers addWithId:create_RetrofitClientHeader_initWithNSString_withNSString_(name, value)];
}

- (void)addPathParamWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  RetrofitRequestBuilder_addPathParamWithNSString_withNSString_withBoolean_(self, name, value, true);
}

- (void)addEncodedPathParamWithNSString:(NSString *)name
                           withNSString:(NSString *)value {
  RetrofitRequestBuilder_addPathParamWithNSString_withNSString_withBoolean_(self, name, value, false);
}

- (void)addPathParamWithNSString:(NSString *)name
                    withNSString:(NSString *)value
                     withBoolean:(jboolean)urlEncodeValue {
  RetrofitRequestBuilder_addPathParamWithNSString_withNSString_withBoolean_(self, name, value, urlEncodeValue);
}

- (void)addQueryParamWithNSString:(NSString *)name
                     withNSString:(NSString *)value {
  RetrofitRequestBuilder_addQueryParamWithNSString_withNSString_withBoolean_withBoolean_(self, name, value, false, true);
}

- (void)addEncodedQueryParamWithNSString:(NSString *)name
                            withNSString:(NSString *)value {
  RetrofitRequestBuilder_addQueryParamWithNSString_withNSString_withBoolean_withBoolean_(self, name, value, false, false);
}

- (void)addQueryParamWithNSString:(NSString *)name
                           withId:(id)value
                      withBoolean:(jboolean)encodeName
                      withBoolean:(jboolean)encodeValue {
  RetrofitRequestBuilder_addQueryParamWithNSString_withId_withBoolean_withBoolean_(self, name, value, encodeName, encodeValue);
}

- (void)addQueryParamWithNSString:(NSString *)name
                     withNSString:(NSString *)value
                      withBoolean:(jboolean)encodeName
                      withBoolean:(jboolean)encodeValue {
  RetrofitRequestBuilder_addQueryParamWithNSString_withNSString_withBoolean_withBoolean_(self, name, value, encodeName, encodeValue);
}

- (void)addQueryParamMapWithInt:(jint)parameterNumber
                withJavaUtilMap:(id<JavaUtilMap>)map
                    withBoolean:(jboolean)encodeNames
                    withBoolean:(jboolean)encodeValues {
  RetrofitRequestBuilder_addQueryParamMapWithInt_withJavaUtilMap_withBoolean_withBoolean_(self, parameterNumber, map, encodeNames, encodeValues);
}

- (void)setArgumentsWithNSObjectArray:(IOSObjectArray *)args {
  if (args == nil) {
    return;
  }
  jint count = args->size_;
  if (!isSynchronous_ && !isObservable_) {
    count -= 1;
  }
  for (jint i = 0; i < count; i++) {
    id value = IOSObjectArray_Get(args, i);
    id<JavaLangAnnotationAnnotation> annotation = IOSObjectArray_Get(nil_chk(paramAnnotations_), i);
    IOSClass *annotationType = [((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) annotationType];
    if (annotationType == RetrofitHttpPath_class_()) {
      id<RetrofitHttpPath> path = (id<RetrofitHttpPath>) cast_check(annotation, RetrofitHttpPath_class_());
      NSString *name = [path value];
      if (value == nil) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Path parameter \"", name, @"\" value must not be null."));
      }
      RetrofitRequestBuilder_addPathParamWithNSString_withNSString_withBoolean_(self, name, [value description], [path encode]);
    }
    else if (annotationType == RetrofitHttpEncodedPath_class_()) {
      NSString *name = [((id<RetrofitHttpEncodedPath>) cast_check(annotation, RetrofitHttpEncodedPath_class_())) value];
      if (value == nil) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Path parameter \"", name, @"\" value must not be null."));
      }
      RetrofitRequestBuilder_addPathParamWithNSString_withNSString_withBoolean_(self, name, [value description], false);
    }
    else if (annotationType == RetrofitHttpQuery_class_()) {
      if (value != nil) {
        id<RetrofitHttpQuery> query = (id<RetrofitHttpQuery>) cast_check(annotation, RetrofitHttpQuery_class_());
        RetrofitRequestBuilder_addQueryParamWithNSString_withId_withBoolean_withBoolean_(self, [query value], value, [query encodeName], [query encodeValue]);
      }
    }
    else if (annotationType == RetrofitHttpEncodedQuery_class_()) {
      if (value != nil) {
        id<RetrofitHttpEncodedQuery> query = (id<RetrofitHttpEncodedQuery>) cast_check(annotation, RetrofitHttpEncodedQuery_class_());
        RetrofitRequestBuilder_addQueryParamWithNSString_withId_withBoolean_withBoolean_(self, [query value], value, false, false);
      }
    }
    else if (annotationType == RetrofitHttpQueryMap_class_()) {
      if (value != nil) {
        id<RetrofitHttpQueryMap> queryMap = (id<RetrofitHttpQueryMap>) cast_check(annotation, RetrofitHttpQueryMap_class_());
        RetrofitRequestBuilder_addQueryParamMapWithInt_withJavaUtilMap_withBoolean_withBoolean_(self, i, (id<JavaUtilMap>) cast_check(value, JavaUtilMap_class_()), [queryMap encodeNames], [queryMap encodeValues]);
      }
    }
    else if (annotationType == RetrofitHttpEncodedQueryMap_class_()) {
      if (value != nil) {
        RetrofitRequestBuilder_addQueryParamMapWithInt_withJavaUtilMap_withBoolean_withBoolean_(self, i, (id<JavaUtilMap>) cast_check(value, JavaUtilMap_class_()), false, false);
      }
    }
    else if (annotationType == RetrofitHttpHeader_class_()) {
      if (value != nil) {
        NSString *name = [((id<RetrofitHttpHeader>) cast_check(annotation, RetrofitHttpHeader_class_())) value];
        if ([JavaLangIterable_class_() isInstance:value]) {
          for (id __strong iterableValue in (id<JavaLangIterable>) cast_check(value, JavaLangIterable_class_())) {
            if (iterableValue != nil) {
              [self addHeaderWithNSString:name withNSString:[iterableValue description]];
            }
          }
        }
        else if ([[value java_getClass] isArray]) {
          for (jint x = 0, arrayLength = JavaLangReflectArray_getLengthWithId_(value); x < arrayLength; x++) {
            id arrayValue = JavaLangReflectArray_getWithId_withInt_(value, x);
            if (arrayValue != nil) {
              [self addHeaderWithNSString:name withNSString:[arrayValue description]];
            }
          }
        }
        else {
          [self addHeaderWithNSString:name withNSString:[value description]];
        }
      }
    }
    else if (annotationType == RetrofitHttpField_class_()) {
      if (value != nil) {
        id<RetrofitHttpField> field = (id<RetrofitHttpField>) cast_check(annotation, RetrofitHttpField_class_());
        NSString *name = [field value];
        jboolean encodeName = [field encodeName];
        jboolean encodeValue = [field encodeValue];
        if ([JavaLangIterable_class_() isInstance:value]) {
          for (id __strong iterableValue in (id<JavaLangIterable>) cast_check(value, JavaLangIterable_class_())) {
            if (iterableValue != nil) {
              [((RetrofitMimeFormUrlEncodedTypedOutput *) nil_chk(formBody_)) addFieldWithNSString:name withBoolean:encodeName withNSString:[iterableValue description] withBoolean:encodeValue];
            }
          }
        }
        else if ([[value java_getClass] isArray]) {
          for (jint x = 0, arrayLength = JavaLangReflectArray_getLengthWithId_(value); x < arrayLength; x++) {
            id arrayValue = JavaLangReflectArray_getWithId_withInt_(value, x);
            if (arrayValue != nil) {
              [((RetrofitMimeFormUrlEncodedTypedOutput *) nil_chk(formBody_)) addFieldWithNSString:name withBoolean:encodeName withNSString:[arrayValue description] withBoolean:encodeValue];
            }
          }
        }
        else {
          [((RetrofitMimeFormUrlEncodedTypedOutput *) nil_chk(formBody_)) addFieldWithNSString:name withBoolean:encodeName withNSString:[value description] withBoolean:encodeValue];
        }
      }
    }
    else if (annotationType == RetrofitHttpFieldMap_class_()) {
      if (value != nil) {
        id<RetrofitHttpFieldMap> fieldMap = (id<RetrofitHttpFieldMap>) cast_check(annotation, RetrofitHttpFieldMap_class_());
        jboolean encodeNames = [fieldMap encodeNames];
        jboolean encodeValues = [fieldMap encodeValues];
        for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) cast_check(value, JavaUtilMap_class_())) entrySet])) {
          id entryKey = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
          if (entryKey == nil) {
            @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Parameter #", (i + 1), @" field map contained null key."));
          }
          id entryValue = [entry_ getValue];
          if (entryValue != nil) {
            [((RetrofitMimeFormUrlEncodedTypedOutput *) nil_chk(formBody_)) addFieldWithNSString:[entryKey description] withBoolean:encodeNames withNSString:[entryValue description] withBoolean:encodeValues];
          }
        }
      }
    }
    else if (annotationType == RetrofitHttpPart_class_()) {
      if (value != nil) {
        NSString *name = [((id<RetrofitHttpPart>) cast_check(annotation, RetrofitHttpPart_class_())) value];
        NSString *transferEncoding = [((id<RetrofitHttpPart>) cast_check(annotation, RetrofitHttpPart_class_())) encoding];
        if ([RetrofitMimeTypedOutput_class_() isInstance:value]) {
          [((RetrofitMimeMultipartTypedOutput *) nil_chk(multipartBody_)) addPartWithNSString:name withNSString:transferEncoding withRetrofitMimeTypedOutput:(id<RetrofitMimeTypedOutput>) cast_check(value, RetrofitMimeTypedOutput_class_())];
        }
        else if ([value isKindOfClass:[NSString class]]) {
          [((RetrofitMimeMultipartTypedOutput *) nil_chk(multipartBody_)) addPartWithNSString:name withNSString:transferEncoding withRetrofitMimeTypedOutput:create_RetrofitMimeTypedString_initWithNSString_((NSString *) cast_chk(value, [NSString class]))];
        }
        else {
          [((RetrofitMimeMultipartTypedOutput *) nil_chk(multipartBody_)) addPartWithNSString:name withNSString:transferEncoding withRetrofitMimeTypedOutput:[((id<RetrofitConverterConverter>) nil_chk(converter_)) toBodyWithId:value]];
        }
      }
    }
    else if (annotationType == RetrofitHttpPartMap_class_()) {
      if (value != nil) {
        NSString *transferEncoding = [((id<RetrofitHttpPartMap>) cast_check(annotation, RetrofitHttpPartMap_class_())) encoding];
        for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) cast_check(value, JavaUtilMap_class_())) entrySet])) {
          id entryKey = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
          if (entryKey == nil) {
            @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Parameter #", (i + 1), @" part map contained null key."));
          }
          NSString *entryName = [entryKey description];
          id entryValue = [entry_ getValue];
          if (entryValue != nil) {
            if ([RetrofitMimeTypedOutput_class_() isInstance:entryValue]) {
              [((RetrofitMimeMultipartTypedOutput *) nil_chk(multipartBody_)) addPartWithNSString:entryName withNSString:transferEncoding withRetrofitMimeTypedOutput:(id<RetrofitMimeTypedOutput>) cast_check(entryValue, RetrofitMimeTypedOutput_class_())];
            }
            else if ([entryValue isKindOfClass:[NSString class]]) {
              [((RetrofitMimeMultipartTypedOutput *) nil_chk(multipartBody_)) addPartWithNSString:entryName withNSString:transferEncoding withRetrofitMimeTypedOutput:create_RetrofitMimeTypedString_initWithNSString_((NSString *) cast_chk(entryValue, [NSString class]))];
            }
            else {
              [((RetrofitMimeMultipartTypedOutput *) nil_chk(multipartBody_)) addPartWithNSString:entryName withNSString:transferEncoding withRetrofitMimeTypedOutput:[((id<RetrofitConverterConverter>) nil_chk(converter_)) toBodyWithId:entryValue]];
            }
          }
        }
      }
    }
    else if (annotationType == RetrofitHttpBody_class_()) {
      if (value == nil) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Body parameter value must not be null.");
      }
      if ([RetrofitMimeTypedOutput_class_() isInstance:value]) {
        JreStrongAssign(&body_, (id<RetrofitMimeTypedOutput>) cast_check(value, RetrofitMimeTypedOutput_class_()));
      }
      else {
        JreStrongAssign(&body_, [((id<RetrofitConverterConverter>) nil_chk(converter_)) toBodyWithId:value]);
      }
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unknown annotation: ", [((IOSClass *) nil_chk(annotationType)) getCanonicalName]));
    }
  }
}

- (RetrofitClientRequest *)build {
  if (multipartBody_ != nil && [multipartBody_ getPartCount] == 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Multipart requests must contain at least one part.");
  }
  NSString *apiUrl = self->apiUrl_;
  JavaLangStringBuilder *url = create_JavaLangStringBuilder_initWithNSString_(apiUrl);
  if ([((NSString *) nil_chk(apiUrl)) hasSuffix:@"/"]) {
    [url deleteCharAtWithInt:[url length] - 1];
  }
  [url appendWithNSString:relativeUrl_];
  JavaLangStringBuilder *queryParams = self->queryParams_;
  if (queryParams != nil) {
    [url appendWithJavaLangCharSequence:queryParams];
  }
  id<RetrofitMimeTypedOutput> body = self->body_;
  id<JavaUtilList> headers = self->headers_;
  if (contentTypeHeader_ != nil) {
    if (body != nil) {
      body = create_RetrofitRequestBuilder_MimeOverridingTypedOutput_initWithRetrofitMimeTypedOutput_withNSString_(body, contentTypeHeader_);
    }
    else {
      RetrofitClientHeader *header = create_RetrofitClientHeader_initWithNSString_withNSString_(@"Content-Type", contentTypeHeader_);
      if (headers == nil) {
        headers = JavaUtilCollections_singletonListWithId_(header);
      }
      else {
        [headers addWithId:header];
      }
    }
  }
  return create_RetrofitClientRequest_initWithNSString_withNSString_withJavaUtilList_withRetrofitMimeTypedOutput_(requestMethod_, [url description], headers, body);
}

- (void)dealloc {
  RELEASE_(converter_);
  RELEASE_(paramAnnotations_);
  RELEASE_(requestMethod_);
  RELEASE_(apiUrl_);
  RELEASE_(formBody_);
  RELEASE_(multipartBody_);
  RELEASE_(body_);
  RELEASE_(relativeUrl_);
  RELEASE_(queryParams_);
  RELEASE_(headers_);
  RELEASE_(contentTypeHeader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "LRetrofitClientRequest;", 0x0, -1, -1, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withRetrofitRestMethodInfo:withRetrofitConverterConverter:);
  methods[1].selector = @selector(addHeaderWithNSString:withNSString:);
  methods[2].selector = @selector(addPathParamWithNSString:withNSString:);
  methods[3].selector = @selector(addEncodedPathParamWithNSString:withNSString:);
  methods[4].selector = @selector(addPathParamWithNSString:withNSString:withBoolean:);
  methods[5].selector = @selector(addQueryParamWithNSString:withNSString:);
  methods[6].selector = @selector(addEncodedQueryParamWithNSString:withNSString:);
  methods[7].selector = @selector(addQueryParamWithNSString:withId:withBoolean:withBoolean:);
  methods[8].selector = @selector(addQueryParamWithNSString:withNSString:withBoolean:withBoolean:);
  methods[9].selector = @selector(addQueryParamMapWithInt:withJavaUtilMap:withBoolean:withBoolean:);
  methods[10].selector = @selector(setArgumentsWithNSObjectArray:);
  methods[11].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "converter_", "LRetrofitConverterConverter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "paramAnnotations_", "[LJavaLangAnnotationAnnotation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "requestMethod_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isSynchronous_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isObservable_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "apiUrl_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "formBody_", "LRetrofitMimeFormUrlEncodedTypedOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "multipartBody_", "LRetrofitMimeMultipartTypedOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "body_", "LRetrofitMimeTypedOutput;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "relativeUrl_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "queryParams_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 16, -1 },
    { "contentTypeHeader_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LRetrofitRestMethodInfo;LRetrofitConverterConverter;", "addHeader", "LNSString;LNSString;", "addPathParam", "addEncodedPathParam", "LNSString;LNSString;Z", "addQueryParam", "addEncodedQueryParam", "LNSString;LNSObject;ZZ", "LNSString;LNSString;ZZ", "addQueryParamMap", "ILJavaUtilMap;ZZ", "(ILjava/util/Map<**>;ZZ)V", "setArguments", "[LNSObject;", "LJavaIoUnsupportedEncodingException;", "Ljava/util/List<Lretrofit/client/Header;>;", "LRetrofitRequestBuilder_MimeOverridingTypedOutput;" };
  static const J2ObjcClassInfo _RetrofitRequestBuilder = { "RequestBuilder", "retrofit", ptrTable, methods, fields, 7, 0x10, 12, 13, -1, 17, -1, -1, -1 };
  return &_RetrofitRequestBuilder;
}

@end

void RetrofitRequestBuilder_initWithNSString_withRetrofitRestMethodInfo_withRetrofitConverterConverter_(RetrofitRequestBuilder *self, NSString *apiUrl, RetrofitRestMethodInfo *methodInfo, id<RetrofitConverterConverter> converter) {
  NSObject_init(self);
  JreStrongAssign(&self->apiUrl_, apiUrl);
  JreStrongAssign(&self->converter_, converter);
  JreStrongAssign(&self->paramAnnotations_, ((RetrofitRestMethodInfo *) nil_chk(methodInfo))->requestParamAnnotations_);
  JreStrongAssign(&self->requestMethod_, methodInfo->requestMethod_);
  self->isSynchronous_ = methodInfo->isSynchronous_;
  self->isObservable_ = methodInfo->isObservable_;
  if (methodInfo->headers_ != nil) {
    JreStrongAssignAndConsume(&self->headers_, new_JavaUtilArrayList_initWithJavaUtilCollection_(methodInfo->headers_));
  }
  JreStrongAssign(&self->contentTypeHeader_, methodInfo->contentTypeHeader_);
  JreStrongAssign(&self->relativeUrl_, methodInfo->requestUrl_);
  NSString *requestQuery = methodInfo->requestQuery_;
  if (requestQuery != nil) {
    JreStrongAssign(&self->queryParams_, [((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_init() appendWithChar:'?'])) appendWithNSString:requestQuery]);
  }
  switch ([methodInfo->requestType_ ordinal]) {
    case RetrofitRestMethodInfo_RequestType_Enum_FORM_URL_ENCODED:
    JreStrongAssignAndConsume(&self->formBody_, new_RetrofitMimeFormUrlEncodedTypedOutput_init());
    JreStrongAssign(&self->multipartBody_, nil);
    JreStrongAssign(&self->body_, self->formBody_);
    break;
    case RetrofitRestMethodInfo_RequestType_Enum_MULTIPART:
    JreStrongAssign(&self->formBody_, nil);
    JreStrongAssignAndConsume(&self->multipartBody_, new_RetrofitMimeMultipartTypedOutput_init());
    JreStrongAssign(&self->body_, self->multipartBody_);
    break;
    case RetrofitRestMethodInfo_RequestType_Enum_SIMPLE:
    JreStrongAssign(&self->formBody_, nil);
    JreStrongAssign(&self->multipartBody_, nil);
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown request type: ", methodInfo->requestType_));
  }
}

RetrofitRequestBuilder *new_RetrofitRequestBuilder_initWithNSString_withRetrofitRestMethodInfo_withRetrofitConverterConverter_(NSString *apiUrl, RetrofitRestMethodInfo *methodInfo, id<RetrofitConverterConverter> converter) {
  J2OBJC_NEW_IMPL(RetrofitRequestBuilder, initWithNSString_withRetrofitRestMethodInfo_withRetrofitConverterConverter_, apiUrl, methodInfo, converter)
}

RetrofitRequestBuilder *create_RetrofitRequestBuilder_initWithNSString_withRetrofitRestMethodInfo_withRetrofitConverterConverter_(NSString *apiUrl, RetrofitRestMethodInfo *methodInfo, id<RetrofitConverterConverter> converter) {
  J2OBJC_CREATE_IMPL(RetrofitRequestBuilder, initWithNSString_withRetrofitRestMethodInfo_withRetrofitConverterConverter_, apiUrl, methodInfo, converter)
}

void RetrofitRequestBuilder_addPathParamWithNSString_withNSString_withBoolean_(RetrofitRequestBuilder *self, NSString *name, NSString *value, jboolean urlEncodeValue) {
  if (name == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Path replacement name must not be null.");
  }
  if (value == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Path replacement \"", name, @"\" value must not be null."));
  }
  @try {
    if (urlEncodeValue) {
      NSString *encodedValue = JavaNetURLEncoder_encodeWithNSString_withNSString_(NSString_java_valueOf_(value), @"UTF-8");
      encodedValue = [((NSString *) nil_chk(encodedValue)) java_replace:@"+" withSequence:@"%20"];
      JreStrongAssign(&self->relativeUrl_, [((NSString *) nil_chk(self->relativeUrl_)) java_replace:JreStrcat("C$C", '{', name, '}') withSequence:encodedValue]);
    }
    else {
      JreStrongAssign(&self->relativeUrl_, [((NSString *) nil_chk(self->relativeUrl_)) java_replace:JreStrcat("C$C", '{', name, '}') withSequence:NSString_java_valueOf_(value)]);
    }
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$$$", @"Unable to convert path parameter \"", name, @"\" value to UTF-8:", value), e);
  }
}

void RetrofitRequestBuilder_addQueryParamWithNSString_withId_withBoolean_withBoolean_(RetrofitRequestBuilder *self, NSString *name, id value, jboolean encodeName, jboolean encodeValue) {
  if ([JavaLangIterable_class_() isInstance:value]) {
    for (id __strong iterableValue in nil_chk((id<JavaLangIterable>) cast_check(value, JavaLangIterable_class_()))) {
      if (iterableValue != nil) {
        RetrofitRequestBuilder_addQueryParamWithNSString_withNSString_withBoolean_withBoolean_(self, name, [iterableValue description], encodeName, encodeValue);
      }
    }
  }
  else if ([[nil_chk(value) java_getClass] isArray]) {
    for (jint x = 0, arrayLength = JavaLangReflectArray_getLengthWithId_(value); x < arrayLength; x++) {
      id arrayValue = JavaLangReflectArray_getWithId_withInt_(value, x);
      if (arrayValue != nil) {
        RetrofitRequestBuilder_addQueryParamWithNSString_withNSString_withBoolean_withBoolean_(self, name, [arrayValue description], encodeName, encodeValue);
      }
    }
  }
  else {
    RetrofitRequestBuilder_addQueryParamWithNSString_withNSString_withBoolean_withBoolean_(self, name, [value description], encodeName, encodeValue);
  }
}

void RetrofitRequestBuilder_addQueryParamWithNSString_withNSString_withBoolean_withBoolean_(RetrofitRequestBuilder *self, NSString *name, NSString *value, jboolean encodeName, jboolean encodeValue) {
  if (name == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Query param name must not be null.");
  }
  if (value == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Query param \"", name, @"\" value must not be null."));
  }
  @try {
    JavaLangStringBuilder *queryParams = self->queryParams_;
    if (queryParams == nil) {
      JreStrongAssign(&self->queryParams_, queryParams = create_JavaLangStringBuilder_init());
    }
    [queryParams appendWithChar:[queryParams length] > 0 ? '&' : '?'];
    if (encodeName) {
      name = JavaNetURLEncoder_encodeWithNSString_withNSString_(name, @"UTF-8");
    }
    if (encodeValue) {
      value = JavaNetURLEncoder_encodeWithNSString_withNSString_(value, @"UTF-8");
    }
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([queryParams appendWithNSString:name])) appendWithChar:'='])) appendWithNSString:value];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$$$", @"Unable to convert query parameter \"", name, @"\" value to UTF-8: ", value), e);
  }
}

void RetrofitRequestBuilder_addQueryParamMapWithInt_withJavaUtilMap_withBoolean_withBoolean_(RetrofitRequestBuilder *self, jint parameterNumber, id<JavaUtilMap> map, jboolean encodeNames, jboolean encodeValues) {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) {
    id entryKey = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    if (entryKey == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Parameter #", (parameterNumber + 1), @" query map contained null key."));
    }
    id entryValue = [entry_ getValue];
    if (entryValue != nil) {
      RetrofitRequestBuilder_addQueryParamWithNSString_withNSString_withBoolean_withBoolean_(self, [entryKey description], [entryValue description], encodeNames, encodeValues);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitRequestBuilder)

@implementation RetrofitRequestBuilder_MimeOverridingTypedOutput

- (instancetype)initWithRetrofitMimeTypedOutput:(id<RetrofitMimeTypedOutput>)delegate
                                   withNSString:(NSString *)mimeType {
  RetrofitRequestBuilder_MimeOverridingTypedOutput_initWithRetrofitMimeTypedOutput_withNSString_(self, delegate, mimeType);
  return self;
}

- (NSString *)fileName {
  return [((id<RetrofitMimeTypedOutput>) nil_chk(delegate_)) fileName];
}

- (NSString *)mimeType {
  return mimeType_;
}

- (jlong)length {
  return [((id<RetrofitMimeTypedOutput>) nil_chk(delegate_)) length];
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((id<RetrofitMimeTypedOutput>) nil_chk(delegate_)) writeToWithJavaIoOutputStream:outArg];
}

- (void)dealloc {
  RELEASE_(delegate_);
  RELEASE_(mimeType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofitMimeTypedOutput:withNSString:);
  methods[1].selector = @selector(fileName);
  methods[2].selector = @selector(mimeType);
  methods[3].selector = @selector(length);
  methods[4].selector = @selector(writeToWithJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LRetrofitMimeTypedOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mimeType_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRetrofitMimeTypedOutput;LNSString;", "writeTo", "LJavaIoOutputStream;", "LJavaIoIOException;", "LRetrofitRequestBuilder;" };
  static const J2ObjcClassInfo _RetrofitRequestBuilder_MimeOverridingTypedOutput = { "MimeOverridingTypedOutput", "retrofit", ptrTable, methods, fields, 7, 0xa, 5, 2, 4, -1, -1, -1, -1 };
  return &_RetrofitRequestBuilder_MimeOverridingTypedOutput;
}

@end

void RetrofitRequestBuilder_MimeOverridingTypedOutput_initWithRetrofitMimeTypedOutput_withNSString_(RetrofitRequestBuilder_MimeOverridingTypedOutput *self, id<RetrofitMimeTypedOutput> delegate, NSString *mimeType) {
  NSObject_init(self);
  JreStrongAssign(&self->delegate_, delegate);
  JreStrongAssign(&self->mimeType_, mimeType);
}

RetrofitRequestBuilder_MimeOverridingTypedOutput *new_RetrofitRequestBuilder_MimeOverridingTypedOutput_initWithRetrofitMimeTypedOutput_withNSString_(id<RetrofitMimeTypedOutput> delegate, NSString *mimeType) {
  J2OBJC_NEW_IMPL(RetrofitRequestBuilder_MimeOverridingTypedOutput, initWithRetrofitMimeTypedOutput_withNSString_, delegate, mimeType)
}

RetrofitRequestBuilder_MimeOverridingTypedOutput *create_RetrofitRequestBuilder_MimeOverridingTypedOutput_initWithRetrofitMimeTypedOutput_withNSString_(id<RetrofitMimeTypedOutput> delegate, NSString *mimeType) {
  J2OBJC_CREATE_IMPL(RetrofitRequestBuilder_MimeOverridingTypedOutput, initWithRetrofitMimeTypedOutput_withNSString_, delegate, mimeType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitRequestBuilder_MimeOverridingTypedOutput)
