//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RetrofitTypes.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/GenericDeclaration.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/lang/reflect/WildcardType.h"
#include "java/util/Arrays.h"
#include "java/util/NoSuchElementException.h"

@interface RetrofitTypes ()

- (instancetype)init;

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)toFind;

+ (jboolean)equalWithId:(id)a
                 withId:(id)b;

+ (jint)hashCodeOrZeroWithId:(id)o;

+ (id<JavaLangReflectType>)resolveTypeVariableWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                         withIOSClass:(IOSClass *)contextRawType
                                      withJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)unknown;

+ (IOSClass *)declaringClassOfWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable;

+ (void)checkNotPrimitiveWithJavaLangReflectType:(id<JavaLangReflectType>)type;

@end

inline IOSObjectArray *RetrofitTypes_get_EMPTY_TYPE_ARRAY();
static IOSObjectArray *RetrofitTypes_EMPTY_TYPE_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(RetrofitTypes, EMPTY_TYPE_ARRAY, IOSObjectArray *)

__attribute__((unused)) static void RetrofitTypes_init(RetrofitTypes *self);

__attribute__((unused)) static RetrofitTypes *new_RetrofitTypes_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitTypes *create_RetrofitTypes_init();

__attribute__((unused)) static jint RetrofitTypes_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id toFind);

__attribute__((unused)) static jboolean RetrofitTypes_equalWithId_withId_(id a, id b);

__attribute__((unused)) static jint RetrofitTypes_hashCodeOrZeroWithId_(id o);

__attribute__((unused)) static id<JavaLangReflectType> RetrofitTypes_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectTypeVariable> unknown);

__attribute__((unused)) static IOSClass *RetrofitTypes_declaringClassOfWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable);

__attribute__((unused)) static void RetrofitTypes_checkNotPrimitiveWithJavaLangReflectType_(id<JavaLangReflectType> type);

@interface RetrofitTypes_ParameterizedTypeImpl : NSObject < JavaLangReflectParameterizedType > {
 @public
  id<JavaLangReflectType> ownerType_;
  id<JavaLangReflectType> rawType_;
  IOSObjectArray *typeArguments_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)ownerType
                    withJavaLangReflectType:(id<JavaLangReflectType>)rawType
               withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments;

- (IOSObjectArray *)getActualTypeArguments;

- (id<JavaLangReflectType>)getRawType;

- (id<JavaLangReflectType>)getOwnerType;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitTypes_ParameterizedTypeImpl)

J2OBJC_FIELD_SETTER(RetrofitTypes_ParameterizedTypeImpl, ownerType_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(RetrofitTypes_ParameterizedTypeImpl, rawType_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(RetrofitTypes_ParameterizedTypeImpl, typeArguments_, IOSObjectArray *)

__attribute__((unused)) static void RetrofitTypes_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(RetrofitTypes_ParameterizedTypeImpl *self, id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments);

__attribute__((unused)) static RetrofitTypes_ParameterizedTypeImpl *new_RetrofitTypes_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitTypes_ParameterizedTypeImpl *create_RetrofitTypes_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitTypes_ParameterizedTypeImpl)

@interface RetrofitTypes_GenericArrayTypeImpl : NSObject < JavaLangReflectGenericArrayType > {
 @public
  id<JavaLangReflectType> componentType_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)componentType;

- (id<JavaLangReflectType>)getGenericComponentType;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitTypes_GenericArrayTypeImpl)

J2OBJC_FIELD_SETTER(RetrofitTypes_GenericArrayTypeImpl, componentType_, id<JavaLangReflectType>)

__attribute__((unused)) static void RetrofitTypes_GenericArrayTypeImpl_initWithJavaLangReflectType_(RetrofitTypes_GenericArrayTypeImpl *self, id<JavaLangReflectType> componentType);

__attribute__((unused)) static RetrofitTypes_GenericArrayTypeImpl *new_RetrofitTypes_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitTypes_GenericArrayTypeImpl *create_RetrofitTypes_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitTypes_GenericArrayTypeImpl)

@interface RetrofitTypes_WildcardTypeImpl : NSObject < JavaLangReflectWildcardType > {
 @public
  id<JavaLangReflectType> upperBound_;
  id<JavaLangReflectType> lowerBound_;
}

- (instancetype)initWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds
                    withJavaLangReflectTypeArray:(IOSObjectArray *)lowerBounds;

- (IOSObjectArray *)getUpperBounds;

- (IOSObjectArray *)getLowerBounds;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(RetrofitTypes_WildcardTypeImpl)

J2OBJC_FIELD_SETTER(RetrofitTypes_WildcardTypeImpl, upperBound_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(RetrofitTypes_WildcardTypeImpl, lowerBound_, id<JavaLangReflectType>)

__attribute__((unused)) static void RetrofitTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(RetrofitTypes_WildcardTypeImpl *self, IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds);

__attribute__((unused)) static RetrofitTypes_WildcardTypeImpl *new_RetrofitTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) NS_RETURNS_RETAINED;

__attribute__((unused)) static RetrofitTypes_WildcardTypeImpl *create_RetrofitTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds);

J2OBJC_TYPE_LITERAL_HEADER(RetrofitTypes_WildcardTypeImpl)

J2OBJC_INITIALIZED_DEFN(RetrofitTypes)

@implementation RetrofitTypes

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  RetrofitTypes_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSClass *)getRawTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return RetrofitTypes_getRawTypeWithJavaLangReflectType_(type);
}

+ (jboolean)equalsWithJavaLangReflectType:(id<JavaLangReflectType>)a
                  withJavaLangReflectType:(id<JavaLangReflectType>)b {
  return RetrofitTypes_equalsWithJavaLangReflectType_withJavaLangReflectType_(a, b);
}

+ (id<JavaLangReflectType>)getGenericSupertypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                         withIOSClass:(IOSClass *)rawType
                                                         withIOSClass:(IOSClass *)toResolve {
  return RetrofitTypes_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, rawType, toResolve);
}

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)toFind {
  return RetrofitTypes_indexOfWithNSObjectArray_withId_(array, toFind);
}

+ (jboolean)equalWithId:(id)a
                 withId:(id)b {
  return RetrofitTypes_equalWithId_withId_(a, b);
}

+ (jint)hashCodeOrZeroWithId:(id)o {
  return RetrofitTypes_hashCodeOrZeroWithId_(o);
}

+ (NSString *)typeToStringWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return RetrofitTypes_typeToStringWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)getSupertypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                  withIOSClass:(IOSClass *)contextRawType
                                                  withIOSClass:(IOSClass *)supertype {
  return RetrofitTypes_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, supertype);
}

+ (id<JavaLangReflectType>)resolveWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                             withIOSClass:(IOSClass *)contextRawType
                                  withJavaLangReflectType:(id<JavaLangReflectType>)toResolve {
  return RetrofitTypes_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, toResolve);
}

+ (id<JavaLangReflectType>)resolveTypeVariableWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                         withIOSClass:(IOSClass *)contextRawType
                                      withJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)unknown {
  return RetrofitTypes_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(context, contextRawType, unknown);
}

+ (IOSClass *)declaringClassOfWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable {
  return RetrofitTypes_declaringClassOfWithJavaLangReflectTypeVariable_(typeVariable);
}

+ (void)checkNotPrimitiveWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  RetrofitTypes_checkNotPrimitiveWithJavaLangReflectType_(type);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 5, 6, -1, 7, -1, -1 },
    { NULL, "I", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 15, 6, -1, 7, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 19, 20, -1, 21, -1, -1 },
    { NULL, "LIOSClass;", 0xa, 22, 23, -1, 24, -1, -1 },
    { NULL, "V", 0xa, 25, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getRawTypeWithJavaLangReflectType:);
  methods[2].selector = @selector(equalsWithJavaLangReflectType:withJavaLangReflectType:);
  methods[3].selector = @selector(getGenericSupertypeWithJavaLangReflectType:withIOSClass:withIOSClass:);
  methods[4].selector = @selector(indexOfWithNSObjectArray:withId:);
  methods[5].selector = @selector(equalWithId:withId:);
  methods[6].selector = @selector(hashCodeOrZeroWithId:);
  methods[7].selector = @selector(typeToStringWithJavaLangReflectType:);
  methods[8].selector = @selector(getSupertypeWithJavaLangReflectType:withIOSClass:withIOSClass:);
  methods[9].selector = @selector(resolveWithJavaLangReflectType:withIOSClass:withJavaLangReflectType:);
  methods[10].selector = @selector(resolveTypeVariableWithJavaLangReflectType:withIOSClass:withJavaLangReflectTypeVariable:);
  methods[11].selector = @selector(declaringClassOfWithJavaLangReflectTypeVariable:);
  methods[12].selector = @selector(checkNotPrimitiveWithJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_TYPE_ARRAY", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
  };
  static const void *ptrTable[] = { "getRawType", "LJavaLangReflectType;", "(Ljava/lang/reflect/Type;)Ljava/lang/Class<*>;", "equals", "LJavaLangReflectType;LJavaLangReflectType;", "getGenericSupertype", "LJavaLangReflectType;LIOSClass;LIOSClass;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Ljava/lang/reflect/Type;", "indexOf", "[LNSObject;LNSObject;", "equal", "LNSObject;LNSObject;", "hashCodeOrZero", "LNSObject;", "typeToString", "getSupertype", "resolve", "LJavaLangReflectType;LIOSClass;LJavaLangReflectType;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;", "resolveTypeVariable", "LJavaLangReflectType;LIOSClass;LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/reflect/TypeVariable<*>;)Ljava/lang/reflect/Type;", "declaringClassOf", "LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/TypeVariable<*>;)Ljava/lang/Class<*>;", "checkNotPrimitive", &RetrofitTypes_EMPTY_TYPE_ARRAY, "LRetrofitTypes_ParameterizedTypeImpl;LRetrofitTypes_GenericArrayTypeImpl;LRetrofitTypes_WildcardTypeImpl;" };
  static const J2ObjcClassInfo _RetrofitTypes = { "Types", "retrofit", ptrTable, methods, fields, 7, 0x10, 13, 1, -1, 27, -1, -1, -1 };
  return &_RetrofitTypes;
}

+ (void)initialize {
  if (self == [RetrofitTypes class]) {
    JreStrongAssignAndConsume(&RetrofitTypes_EMPTY_TYPE_ARRAY, [IOSObjectArray newArrayWithLength:0 type:JavaLangReflectType_class_()]);
    J2OBJC_SET_INITIALIZED(RetrofitTypes)
  }
}

@end

void RetrofitTypes_init(RetrofitTypes *self) {
  NSObject_init(self);
}

RetrofitTypes *new_RetrofitTypes_init() {
  J2OBJC_NEW_IMPL(RetrofitTypes, init)
}

RetrofitTypes *create_RetrofitTypes_init() {
  J2OBJC_CREATE_IMPL(RetrofitTypes, init)
}

IOSClass *RetrofitTypes_getRawTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  RetrofitTypes_initialize();
  if ([type isKindOfClass:[IOSClass class]]) {
    return (IOSClass *) cast_chk(type, [IOSClass class]);
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectType> rawType = [((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getRawType];
    if (!([rawType isKindOfClass:[IOSClass class]])) @throw create_JavaLangIllegalArgumentException_init();
    return (IOSClass *) cast_chk(rawType, [IOSClass class]);
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    id<JavaLangReflectType> componentType = [((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType];
    return [nil_chk(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(RetrofitTypes_getRawTypeWithJavaLangReflectType_(componentType), 0)) java_getClass];
  }
  else if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    return NSObject_class_();
  }
  else if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    return RetrofitTypes_getRawTypeWithJavaLangReflectType_(IOSObjectArray_Get(nil_chk([((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_())))) getUpperBounds]), 0));
  }
  else {
    NSString *className_ = type == nil ? @"null" : [[type java_getClass] getName];
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$", @"Expected a Class, ParameterizedType, or GenericArrayType, but <", type, @"> is of type ", className_));
  }
}

jboolean RetrofitTypes_equalsWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> a, id<JavaLangReflectType> b) {
  RetrofitTypes_initialize();
  if (a == b) {
    return true;
  }
  else if ([a isKindOfClass:[IOSClass class]]) {
    return [((id<JavaLangReflectType>) nil_chk(a)) isEqual:b];
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:a]) {
    if (!([JavaLangReflectParameterizedType_class_() isInstance:b])) return false;
    id<JavaLangReflectParameterizedType> pa = (id<JavaLangReflectParameterizedType>) cast_check(a, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectParameterizedType> pb = (id<JavaLangReflectParameterizedType>) cast_check(b, JavaLangReflectParameterizedType_class_());
    return RetrofitTypes_equalWithId_withId_([((id<JavaLangReflectParameterizedType>) nil_chk(pa)) getOwnerType], [((id<JavaLangReflectParameterizedType>) nil_chk(pb)) getOwnerType]) && [((id<JavaLangReflectType>) nil_chk([pa getRawType])) isEqual:[pb getRawType]] && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([pa getActualTypeArguments], [pb getActualTypeArguments]);
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:a]) {
    if (!([JavaLangReflectGenericArrayType_class_() isInstance:b])) return false;
    id<JavaLangReflectGenericArrayType> ga = (id<JavaLangReflectGenericArrayType>) cast_check(a, JavaLangReflectGenericArrayType_class_());
    id<JavaLangReflectGenericArrayType> gb = (id<JavaLangReflectGenericArrayType>) cast_check(b, JavaLangReflectGenericArrayType_class_());
    return RetrofitTypes_equalsWithJavaLangReflectType_withJavaLangReflectType_([((id<JavaLangReflectGenericArrayType>) nil_chk(ga)) getGenericComponentType], [((id<JavaLangReflectGenericArrayType>) nil_chk(gb)) getGenericComponentType]);
  }
  else if ([JavaLangReflectWildcardType_class_() isInstance:a]) {
    if (!([JavaLangReflectWildcardType_class_() isInstance:b])) return false;
    id<JavaLangReflectWildcardType> wa = (id<JavaLangReflectWildcardType>) cast_check(a, JavaLangReflectWildcardType_class_());
    id<JavaLangReflectWildcardType> wb = (id<JavaLangReflectWildcardType>) cast_check(b, JavaLangReflectWildcardType_class_());
    return JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([((id<JavaLangReflectWildcardType>) nil_chk(wa)) getUpperBounds], [((id<JavaLangReflectWildcardType>) nil_chk(wb)) getUpperBounds]) && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([wa getLowerBounds], [wb getLowerBounds]);
  }
  else if ([JavaLangReflectTypeVariable_class_() isInstance:a]) {
    if (!([JavaLangReflectTypeVariable_class_() isInstance:b])) return false;
    id<JavaLangReflectTypeVariable> va = (id<JavaLangReflectTypeVariable>) cast_check(a, JavaLangReflectTypeVariable_class_());
    id<JavaLangReflectTypeVariable> vb = (id<JavaLangReflectTypeVariable>) cast_check(b, JavaLangReflectTypeVariable_class_());
    return [((id<JavaLangReflectTypeVariable>) nil_chk(va)) getGenericDeclaration] == [((id<JavaLangReflectTypeVariable>) nil_chk(vb)) getGenericDeclaration] && [((NSString *) nil_chk([va getName])) isEqual:[vb getName]];
  }
  else {
    return false;
  }
}

id<JavaLangReflectType> RetrofitTypes_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *rawType, IOSClass *toResolve) {
  RetrofitTypes_initialize();
  if (toResolve == rawType) return context;
  if ([((IOSClass *) nil_chk(toResolve)) isInterface]) {
    IOSObjectArray *interfaces = [((IOSClass *) nil_chk(rawType)) getInterfaces];
    for (jint i = 0, length = ((IOSObjectArray *) nil_chk(interfaces))->size_; i < length; i++) {
      if (IOSObjectArray_Get(interfaces, i) == toResolve) {
        return IOSObjectArray_Get(nil_chk([rawType getGenericInterfaces]), i);
      }
      else if ([toResolve isAssignableFrom:IOSObjectArray_Get(interfaces, i)]) {
        return RetrofitTypes_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(IOSObjectArray_Get(nil_chk([rawType getGenericInterfaces]), i), IOSObjectArray_Get(interfaces, i), toResolve);
      }
    }
  }
  if (![((IOSClass *) nil_chk(rawType)) isInterface]) {
    while (rawType != NSObject_class_()) {
      IOSClass *rawSupertype = [((IOSClass *) nil_chk(rawType)) getSuperclass];
      if (rawSupertype == toResolve) {
        return [rawType getGenericSuperclass];
      }
      else if ([toResolve isAssignableFrom:rawSupertype]) {
        return RetrofitTypes_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_([rawType getGenericSuperclass], rawSupertype, toResolve);
      }
      rawType = rawSupertype;
    }
  }
  return toResolve;
}

jint RetrofitTypes_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id toFind) {
  RetrofitTypes_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(array))->size_; i++) {
    if ([nil_chk(toFind) isEqual:IOSObjectArray_Get(array, i)]) return i;
  }
  @throw create_JavaUtilNoSuchElementException_init();
}

jboolean RetrofitTypes_equalWithId_withId_(id a, id b) {
  RetrofitTypes_initialize();
  return a == b || (a != nil && [a isEqual:b]);
}

jint RetrofitTypes_hashCodeOrZeroWithId_(id o) {
  RetrofitTypes_initialize();
  return o != nil ? ((jint) [o hash]) : 0;
}

NSString *RetrofitTypes_typeToStringWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  RetrofitTypes_initialize();
  return [type isKindOfClass:[IOSClass class]] ? [((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) getName] : [((id<JavaLangReflectType>) nil_chk(type)) description];
}

id<JavaLangReflectType> RetrofitTypes_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *contextRawType, IOSClass *supertype) {
  RetrofitTypes_initialize();
  if (![((IOSClass *) nil_chk(supertype)) isAssignableFrom:contextRawType]) @throw create_JavaLangIllegalArgumentException_init();
  return RetrofitTypes_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, RetrofitTypes_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, supertype));
}

id<JavaLangReflectType> RetrofitTypes_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectType> toResolve) {
  RetrofitTypes_initialize();
  while (true) {
    if ([JavaLangReflectTypeVariable_class_() isInstance:toResolve]) {
      id<JavaLangReflectTypeVariable> typeVariable = (id<JavaLangReflectTypeVariable>) cast_check(toResolve, JavaLangReflectTypeVariable_class_());
      toResolve = RetrofitTypes_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(context, contextRawType, typeVariable);
      if (toResolve == typeVariable) {
        return toResolve;
      }
    }
    else if ([toResolve isKindOfClass:[IOSClass class]] && [((IOSClass *) nil_chk(((IOSClass *) cast_chk(toResolve, [IOSClass class])))) isArray]) {
      IOSClass *original = (IOSClass *) cast_chk(toResolve, [IOSClass class]);
      id<JavaLangReflectType> componentType = [((IOSClass *) nil_chk(original)) getComponentType];
      id<JavaLangReflectType> newComponentType = RetrofitTypes_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, componentType);
      return componentType == newComponentType ? original : (id) create_RetrofitTypes_GenericArrayTypeImpl_initWithJavaLangReflectType_(newComponentType);
    }
    else if ([JavaLangReflectGenericArrayType_class_() isInstance:toResolve]) {
      id<JavaLangReflectGenericArrayType> original = (id<JavaLangReflectGenericArrayType>) cast_check(toResolve, JavaLangReflectGenericArrayType_class_());
      id<JavaLangReflectType> componentType = [((id<JavaLangReflectGenericArrayType>) nil_chk(original)) getGenericComponentType];
      id<JavaLangReflectType> newComponentType = RetrofitTypes_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, componentType);
      return componentType == newComponentType ? original : create_RetrofitTypes_GenericArrayTypeImpl_initWithJavaLangReflectType_(newComponentType);
    }
    else if ([JavaLangReflectParameterizedType_class_() isInstance:toResolve]) {
      id<JavaLangReflectParameterizedType> original = (id<JavaLangReflectParameterizedType>) cast_check(toResolve, JavaLangReflectParameterizedType_class_());
      id<JavaLangReflectType> ownerType = [((id<JavaLangReflectParameterizedType>) nil_chk(original)) getOwnerType];
      id<JavaLangReflectType> newOwnerType = RetrofitTypes_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, ownerType);
      jboolean changed = newOwnerType != ownerType;
      IOSObjectArray *args = [original getActualTypeArguments];
      for (jint t = 0, length = ((IOSObjectArray *) nil_chk(args))->size_; t < length; t++) {
        id<JavaLangReflectType> resolvedTypeArgument = RetrofitTypes_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, IOSObjectArray_Get(args, t));
        if (resolvedTypeArgument != IOSObjectArray_Get(args, t)) {
          if (!changed) {
            args = [args java_clone];
            changed = true;
          }
          IOSObjectArray_Set(nil_chk(args), t, resolvedTypeArgument);
        }
      }
      return changed ? create_RetrofitTypes_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(newOwnerType, [original getRawType], args) : original;
    }
    else if ([JavaLangReflectWildcardType_class_() isInstance:toResolve]) {
      id<JavaLangReflectWildcardType> original = (id<JavaLangReflectWildcardType>) cast_check(toResolve, JavaLangReflectWildcardType_class_());
      IOSObjectArray *originalLowerBound = [((id<JavaLangReflectWildcardType>) nil_chk(original)) getLowerBounds];
      IOSObjectArray *originalUpperBound = [original getUpperBounds];
      if (((IOSObjectArray *) nil_chk(originalLowerBound))->size_ == 1) {
        id<JavaLangReflectType> lowerBound = RetrofitTypes_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, IOSObjectArray_Get(originalLowerBound, 0));
        if (lowerBound != IOSObjectArray_Get(originalLowerBound, 0)) {
          return create_RetrofitTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_([IOSObjectArray arrayWithObjects:(id[]){ NSObject_class_() } count:1 type:JavaLangReflectType_class_()], [IOSObjectArray arrayWithObjects:(id[]){ lowerBound } count:1 type:JavaLangReflectType_class_()]);
        }
      }
      else if (((IOSObjectArray *) nil_chk(originalUpperBound))->size_ == 1) {
        id<JavaLangReflectType> upperBound = RetrofitTypes_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, IOSObjectArray_Get(originalUpperBound, 0));
        if (upperBound != IOSObjectArray_Get(originalUpperBound, 0)) {
          return create_RetrofitTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_([IOSObjectArray arrayWithObjects:(id[]){ upperBound } count:1 type:JavaLangReflectType_class_()], RetrofitTypes_EMPTY_TYPE_ARRAY);
        }
      }
      return original;
    }
    else {
      return toResolve;
    }
  }
}

id<JavaLangReflectType> RetrofitTypes_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectTypeVariable> unknown) {
  RetrofitTypes_initialize();
  IOSClass *declaredByRaw = RetrofitTypes_declaringClassOfWithJavaLangReflectTypeVariable_(unknown);
  if (declaredByRaw == nil) return unknown;
  id<JavaLangReflectType> declaredBy = RetrofitTypes_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, declaredByRaw);
  if ([JavaLangReflectParameterizedType_class_() isInstance:declaredBy]) {
    jint index = RetrofitTypes_indexOfWithNSObjectArray_withId_([declaredByRaw getTypeParameters], unknown);
    return IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(declaredBy, JavaLangReflectParameterizedType_class_())))) getActualTypeArguments]), index);
  }
  return unknown;
}

IOSClass *RetrofitTypes_declaringClassOfWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable) {
  RetrofitTypes_initialize();
  id<JavaLangReflectGenericDeclaration> genericDeclaration = [((id<JavaLangReflectTypeVariable>) nil_chk(typeVariable)) getGenericDeclaration];
  return [genericDeclaration isKindOfClass:[IOSClass class]] ? (IOSClass *) cast_chk(genericDeclaration, [IOSClass class]) : nil;
}

void RetrofitTypes_checkNotPrimitiveWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  RetrofitTypes_initialize();
  if ([type isKindOfClass:[IOSClass class]] && [((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) isPrimitive]) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitTypes)

@implementation RetrofitTypes_ParameterizedTypeImpl

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)ownerType
                    withJavaLangReflectType:(id<JavaLangReflectType>)rawType
               withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments {
  RetrofitTypes_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(self, ownerType, rawType, typeArguments);
  return self;
}

- (IOSObjectArray *)getActualTypeArguments {
  return [((IOSObjectArray *) nil_chk(typeArguments_)) java_clone];
}

- (id<JavaLangReflectType>)getRawType {
  return rawType_;
}

- (id<JavaLangReflectType>)getOwnerType {
  return ownerType_;
}

- (jboolean)isEqual:(id)other {
  return [JavaLangReflectParameterizedType_class_() isInstance:other] && RetrofitTypes_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectParameterizedType>) cast_check(other, JavaLangReflectParameterizedType_class_()));
}

- (NSUInteger)hash {
  return JavaUtilArrays_hashCodeWithNSObjectArray_(typeArguments_) ^ ((jint) [((id<JavaLangReflectType>) nil_chk(rawType_)) hash]) ^ RetrofitTypes_hashCodeOrZeroWithId_(ownerType_);
}

- (NSString *)description {
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_initWithInt_(30 * (((IOSObjectArray *) nil_chk(typeArguments_))->size_ + 1));
  [result appendWithNSString:RetrofitTypes_typeToStringWithJavaLangReflectType_(rawType_)];
  if (typeArguments_->size_ == 0) return [result description];
  [((JavaLangStringBuilder *) nil_chk([result appendWithNSString:@"<"])) appendWithNSString:RetrofitTypes_typeToStringWithJavaLangReflectType_(IOSObjectArray_Get(typeArguments_, 0))];
  for (jint i = 1; i < typeArguments_->size_; i++) {
    [((JavaLangStringBuilder *) nil_chk([result appendWithNSString:@", "])) appendWithNSString:RetrofitTypes_typeToStringWithJavaLangReflectType_(IOSObjectArray_Get(typeArguments_, i))];
  }
  return [((JavaLangStringBuilder *) nil_chk([result appendWithNSString:@">"])) description];
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

- (void)dealloc {
  RELEASE_(ownerType_);
  RELEASE_(rawType_);
  RELEASE_(typeArguments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectType:withJavaLangReflectType:withJavaLangReflectTypeArray:);
  methods[1].selector = @selector(getActualTypeArguments);
  methods[2].selector = @selector(getRawType);
  methods[3].selector = @selector(getOwnerType);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ownerType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rawType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeArguments_", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectType;LJavaLangReflectType;[LJavaLangReflectType;", "equals", "LNSObject;", "hashCode", "toString", "LRetrofitTypes;" };
  static const J2ObjcClassInfo _RetrofitTypes_ParameterizedTypeImpl = { "ParameterizedTypeImpl", "retrofit", ptrTable, methods, fields, 7, 0x1a, 7, 3, 5, -1, -1, -1, -1 };
  return &_RetrofitTypes_ParameterizedTypeImpl;
}

@end

void RetrofitTypes_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(RetrofitTypes_ParameterizedTypeImpl *self, id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  NSObject_init(self);
  if ([rawType isKindOfClass:[IOSClass class]] && (ownerType == nil) != ([((IOSClass *) nil_chk(((IOSClass *) cast_chk(rawType, [IOSClass class])))) getEnclosingClass] == nil)) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  JreStrongAssign(&self->ownerType_, ownerType);
  JreStrongAssign(&self->rawType_, rawType);
  JreStrongAssign(&self->typeArguments_, [((IOSObjectArray *) nil_chk(typeArguments)) java_clone]);
  {
    IOSObjectArray *a__ = self->typeArguments_;
    id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangReflectType> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangReflectType> typeArgument = *b__++;
      if (typeArgument == nil) @throw create_JavaLangNullPointerException_init();
      RetrofitTypes_checkNotPrimitiveWithJavaLangReflectType_(typeArgument);
    }
  }
}

RetrofitTypes_ParameterizedTypeImpl *new_RetrofitTypes_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  J2OBJC_NEW_IMPL(RetrofitTypes_ParameterizedTypeImpl, initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_, ownerType, rawType, typeArguments)
}

RetrofitTypes_ParameterizedTypeImpl *create_RetrofitTypes_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  J2OBJC_CREATE_IMPL(RetrofitTypes_ParameterizedTypeImpl, initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_, ownerType, rawType, typeArguments)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitTypes_ParameterizedTypeImpl)

@implementation RetrofitTypes_GenericArrayTypeImpl

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)componentType {
  RetrofitTypes_GenericArrayTypeImpl_initWithJavaLangReflectType_(self, componentType);
  return self;
}

- (id<JavaLangReflectType>)getGenericComponentType {
  return componentType_;
}

- (jboolean)isEqual:(id)o {
  return [JavaLangReflectGenericArrayType_class_() isInstance:o] && RetrofitTypes_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectGenericArrayType>) cast_check(o, JavaLangReflectGenericArrayType_class_()));
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaLangReflectType>) nil_chk(componentType_)) hash]);
}

- (NSString *)description {
  return JreStrcat("$$", RetrofitTypes_typeToStringWithJavaLangReflectType_(componentType_), @"[]");
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

- (void)dealloc {
  RELEASE_(componentType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectType:);
  methods[1].selector = @selector(getGenericComponentType);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "componentType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectType;", "equals", "LNSObject;", "hashCode", "toString", "LRetrofitTypes;" };
  static const J2ObjcClassInfo _RetrofitTypes_GenericArrayTypeImpl = { "GenericArrayTypeImpl", "retrofit", ptrTable, methods, fields, 7, 0x1a, 5, 1, 5, -1, -1, -1, -1 };
  return &_RetrofitTypes_GenericArrayTypeImpl;
}

@end

void RetrofitTypes_GenericArrayTypeImpl_initWithJavaLangReflectType_(RetrofitTypes_GenericArrayTypeImpl *self, id<JavaLangReflectType> componentType) {
  NSObject_init(self);
  JreStrongAssign(&self->componentType_, componentType);
}

RetrofitTypes_GenericArrayTypeImpl *new_RetrofitTypes_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  J2OBJC_NEW_IMPL(RetrofitTypes_GenericArrayTypeImpl, initWithJavaLangReflectType_, componentType)
}

RetrofitTypes_GenericArrayTypeImpl *create_RetrofitTypes_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  J2OBJC_CREATE_IMPL(RetrofitTypes_GenericArrayTypeImpl, initWithJavaLangReflectType_, componentType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitTypes_GenericArrayTypeImpl)

@implementation RetrofitTypes_WildcardTypeImpl

- (instancetype)initWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds
                    withJavaLangReflectTypeArray:(IOSObjectArray *)lowerBounds {
  RetrofitTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(self, upperBounds, lowerBounds);
  return self;
}

- (IOSObjectArray *)getUpperBounds {
  return [IOSObjectArray arrayWithObjects:(id[]){ upperBound_ } count:1 type:JavaLangReflectType_class_()];
}

- (IOSObjectArray *)getLowerBounds {
  return lowerBound_ != nil ? [IOSObjectArray arrayWithObjects:(id[]){ lowerBound_ } count:1 type:JavaLangReflectType_class_()] : JreLoadStatic(RetrofitTypes, EMPTY_TYPE_ARRAY);
}

- (jboolean)isEqual:(id)other {
  return [JavaLangReflectWildcardType_class_() isInstance:other] && RetrofitTypes_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectWildcardType>) cast_check(other, JavaLangReflectWildcardType_class_()));
}

- (NSUInteger)hash {
  return (lowerBound_ != nil ? 31 + ((jint) [lowerBound_ hash]) : 1) ^ (31 + ((jint) [((id<JavaLangReflectType>) nil_chk(upperBound_)) hash]));
}

- (NSString *)description {
  if (lowerBound_ != nil) return JreStrcat("$$", @"? super ", RetrofitTypes_typeToStringWithJavaLangReflectType_(lowerBound_));
  if (upperBound_ == (id) NSObject_class_()) return @"?";
  return JreStrcat("$$", @"? extends ", RetrofitTypes_typeToStringWithJavaLangReflectType_(upperBound_));
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

- (void)dealloc {
  RELEASE_(upperBound_);
  RELEASE_(lowerBound_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectTypeArray:withJavaLangReflectTypeArray:);
  methods[1].selector = @selector(getUpperBounds);
  methods[2].selector = @selector(getLowerBounds);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "upperBound_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lowerBound_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LJavaLangReflectType;[LJavaLangReflectType;", "equals", "LNSObject;", "hashCode", "toString", "LRetrofitTypes;" };
  static const J2ObjcClassInfo _RetrofitTypes_WildcardTypeImpl = { "WildcardTypeImpl", "retrofit", ptrTable, methods, fields, 7, 0x1a, 6, 2, 5, -1, -1, -1, -1 };
  return &_RetrofitTypes_WildcardTypeImpl;
}

@end

void RetrofitTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(RetrofitTypes_WildcardTypeImpl *self, IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  NSObject_init(self);
  if (((IOSObjectArray *) nil_chk(lowerBounds))->size_ > 1) @throw create_JavaLangIllegalArgumentException_init();
  if (((IOSObjectArray *) nil_chk(upperBounds))->size_ != 1) @throw create_JavaLangIllegalArgumentException_init();
  if (lowerBounds->size_ == 1) {
    if (IOSObjectArray_Get(lowerBounds, 0) == nil) @throw create_JavaLangNullPointerException_init();
    RetrofitTypes_checkNotPrimitiveWithJavaLangReflectType_(IOSObjectArray_Get(lowerBounds, 0));
    if (IOSObjectArray_Get(upperBounds, 0) != (id) NSObject_class_()) @throw create_JavaLangIllegalArgumentException_init();
    JreStrongAssign(&self->lowerBound_, IOSObjectArray_Get(lowerBounds, 0));
    JreStrongAssign(&self->upperBound_, NSObject_class_());
  }
  else {
    if (IOSObjectArray_Get(upperBounds, 0) == nil) @throw create_JavaLangNullPointerException_init();
    RetrofitTypes_checkNotPrimitiveWithJavaLangReflectType_(IOSObjectArray_Get(upperBounds, 0));
    JreStrongAssign(&self->lowerBound_, nil);
    JreStrongAssign(&self->upperBound_, IOSObjectArray_Get(upperBounds, 0));
  }
}

RetrofitTypes_WildcardTypeImpl *new_RetrofitTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  J2OBJC_NEW_IMPL(RetrofitTypes_WildcardTypeImpl, initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_, upperBounds, lowerBounds)
}

RetrofitTypes_WildcardTypeImpl *create_RetrofitTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  J2OBJC_CREATE_IMPL(RetrofitTypes_WildcardTypeImpl, initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_, upperBounds, lowerBounds)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RetrofitTypes_WildcardTypeImpl)
